<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-10-12T10:46:24.049Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gym102268D Dates（贪心，二分图匹配，线段树）</title>
    <link href="https://ouuan.github.io/gym102268D-Dates%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%8C%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/gym102268D-Dates（贪心，二分图匹配，线段树）/</id>
    <published>2019-10-11T03:30:32.000Z</published>
    <updated>2019-10-12T10:46:24.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/gym/102268/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张二分图：左边 $t$ 个位置，第 $i$ 个位置上有 $a_i$ 个点；右边 $n$ 个带权的点，第 $i$ 个点与位置在 $[l_i, r_i]$ 之间的所有左边的点有连边；匹配权值为匹配中右边点的权值之和；求最大权匹配。</p><p>$1\le n,t\le 3\cdot 10^5$，保证 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，将右边的点按权值从大到小排序，依次加入，看有没有完全匹配，有就选这个点。这样一定是最优的，好像可以用拟阵相关的理论证明，但我不太会..</p><p>于是，问题转化成了如何判定是否存在完全匹配，而霍尔定理恰恰是用来做这件事的——考虑右边的点中被选择的那些，选择其一个子集，判断是否所有子集的邻域（即与其相邻的点构成的集合）大小都比子集本身大。</p><p>如果选择的子集中元素对应的区间的并集不是连续的，霍尔定理的条件成立等价于对于断点两边分别成立，所以只需要考虑子集对应的区间连续的情况。</p><p>又由于 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$，只用考虑子集中的元素本身编号连续的情况。那么，霍尔定理的条件就可以表示为：</p><p>$$<br>\forall 1\le i&lt; j\le n,[i,j]\text{中被选择的右侧点个数}\le [l_i,r_j]\text{中左侧点数量}<br>$$</p><p>如果处理出 $a_{1..t}$ 的前缀和 $pre[i]=\sum_{j=1}^ia_j$，用 $p[i]$ 表示 $[1,i]$ 中被选择的右侧点个数，那么式子就变成了：</p><p>$$<br>\forall1\le i&lt; j\le n, p[j]-p[i-1]\le pre[r_j]-pre[l_i-1]<br>$$</p><p>也就是：</p><p>$$<br>\forall1\le i&lt; j\le n, pre[l_i-1]-p[i-1]\le pre[r_j]-p[j]<br>$$</p><p>所以，可以对每个元素 $i$ 维护 $pre[l_{i+1}-1]-p[i]$ 以及 $pre[r_j]-p[j]$。</p><p>$pre$ 是定值，考虑如何更新 $p$。事实上，往已选择的点中加入一个点，就是把一段后缀的 $p$ 加一。所以可以考虑用线段树维护。</p><p>并且，一段后缀加一（令这段后缀为 $[x..n]$）后，只有 $i&lt; x,j\ge x$ 的数对 $(i,j)$ 对应的大小关系发生改变，事实上只用判断 $i&lt;x$ 的 $pre[l_i-1]-p[i-1]$ 的最大值与 $j\ge x$ 的 $pre[r_j]-p[j]$ 的最小值的大小关系即可，同样可以使用线段树维护。</p><p>另一种判断方法，是在线段树上的每个节点处判断左儿子与右儿子有没有出现不满足霍尔定理条件的情况。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>代码中使用了 <a href="https://github.com/ouuan/segmentTree" target="_blank" rel="noopener">segmenttree.h</a>。</p><h3 id="每次判断前缀与后缀的大小关系"><a href="#每次判断前缀与后缀的大小关系" class="headerlink" title="每次判断前缀与后缀的大小关系"></a>每次判断前缀与后缀的大小关系</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"segmenttree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Girl&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p &gt; y.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mn, mx;</span><br><span class="line">    Value(ll _mn = INF, ll _mx = -INF)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = _mn;</span><br><span class="line">        mx = _mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Value&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Value <span class="title">merge</span><span class="params">(Value x, Value y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value(min(x.mn, y.mn), max(x.mx, y.mx));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;Value, <span class="keyword">int</span>&gt;&amp; u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.val.mx += x;</span><br><span class="line">    u.val.mn += x;</span><br><span class="line">    u.tag += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pre[i] = pre[i - <span class="number">1</span>] + read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].l = read();</span><br><span class="line">        g[i].r = read();</span><br><span class="line">        g[i].p = read();</span><br><span class="line">        g[i].id = i;</span><br><span class="line">        a[i].mn = pre[g[i].r];</span><br><span class="line">        a[i - <span class="number">1</span>].mx = pre[g[i].l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(g + <span class="number">1</span>, g + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    segmentTree&lt;Value, <span class="keyword">int</span>, merge, update&gt; t(<span class="number">0</span>, n + <span class="number">1</span>, a, Value());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.query(<span class="number">0</span>, g[i].id).mx &gt;= t.query(g[i].id, n + <span class="number">1</span>).mn) <span class="keyword">continue</span>;</span><br><span class="line">        t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        ans += g[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在线段树的每个节点处判断"><a href="#在线段树的每个节点处判断" class="headerlink" title="在线段树的每个节点处判断"></a>在线段树的每个节点处判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"segmenttree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Girl&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p &gt; y.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mn, mx;</span><br><span class="line">    <span class="keyword">bool</span> inv;</span><br><span class="line">    Value(ll _mn = INF, ll _mx = -INF, <span class="keyword">int</span> _inv = <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = _mn;</span><br><span class="line">        mx = _mx;</span><br><span class="line">        inv = _inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Value&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Value <span class="title">merge</span><span class="params">(Value x, Value y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value(min(x.mn, y.mn), max(x.mx, y.mx), x.inv || y.inv || x.mx &gt; y.mn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;Value, <span class="keyword">int</span>&gt;&amp; u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.val.mx += x;</span><br><span class="line">    u.val.mn += x;</span><br><span class="line">    u.tag += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pre[i] = pre[i - <span class="number">1</span>] + read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].l = read();</span><br><span class="line">        g[i].r = read();</span><br><span class="line">        g[i].p = read();</span><br><span class="line">        g[i].id = i;</span><br><span class="line">        a[i].mn = pre[g[i].r];</span><br><span class="line">        a[i - <span class="number">1</span>].mx = pre[g[i].l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(g + <span class="number">1</span>, g + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    segmentTree&lt;Value, <span class="keyword">int</span>, merge, update&gt; t(<span class="number">0</span>, n + <span class="number">1</span>, a, Value());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.query(<span class="number">0</span>, n + <span class="number">1</span>).inv) t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> ans += g[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102268/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张二分图：左边 $t$ 个位置，第 $i$ 个位置上有 $a_i$ 个点；右边 $n$ 个带权的点，第 $i$ 个点与位置在 $[l_i, r_i]$ 之间的所有左边的点有连边；匹配权值为匹配中右边点的权值之和；求最大权匹配。&lt;/p&gt;
&lt;p&gt;$1\le n,t\le 3\cdot 10^5$，保证 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="二分图匹配" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>CF878E Numbers on the blackboard（贪心，并查集）</title>
    <link href="https://ouuan.github.io/CF878E-Numbers-on-the-blackboard%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF878E-Numbers-on-the-blackboard（贪心，并查集）/</id>
    <published>2019-10-08T12:49:18.000Z</published>
    <updated>2019-10-08T16:24:38.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/878/problem/E" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>对于一个数列，每次操作可以将相邻的两个数 $x$ 和 $y$ 合并成一个数 $x+2y$，定义一个数列的权值为进行操作直至只剩一个数能得到的最大值。</p><p>多组询问，每次给定一个区间，求这个区间的权值。</p><p>数列值域 $-10^9\sim10^9$，数列长度和询问个数不超过 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>先不考虑多组询问。</p><p>经过（并不）简单的推理，可以发现，设数列 $a_{1..n}$ 的权值为 $\sum_{i=1}^na_i2^{k_i}$，那么 $k_1=0$, $1\le k_i\le k_{i-1}+1(i\ge 2)$。</p><p>那么，最优方案中，$k_{2..n}$ 一定是一块一块从 $1$ 开始严格递增的。</p><p>如果我们已经知道了一个数列 $k_i$ 的构成，这时要在其末端加入一个数，那么可以得到贪心策略：</p><ol><li>若加入的数是正数，与前一块合并。若合并后整块构成的等比数列之和仍为正数，继续合并。</li><li>否则结束合并过程。</li></ol><p>这个合并的过程可以用并查集维护。</p><p>问题在于，如何判断一块的正负。可以对每块维护它的大小（块中的第 $i$ 个数与 $2^i$ 的乘积之和），合并时更新。但这样做可能会溢出，但可以发现，一旦一块的大小达到 $10^9$，一定会一直合并到最前面，所以大于 $10^9$ 的都可以视作 $10^9$；一旦前一块的长度超过 $30$ 且当前块大小为正，也一定会一直合并到最前面，也可以视作 $10^9$。</p><p>接下来考虑如何回答询问。</p><p>把询问离线下来，右端点相同的询问一起处理。处理一个询问之前先计算出 $a_{1..r}$ 的块，若 $l=1$ 答案就是所有块大小的和，否则的话答案会是若干块的答案之和加上一个块的后缀。因为取一个块的后缀，断点所在块一定不会分开（一块的真后缀一定为正），后面的块也不会合并到前面去。处理出模意义下块答案的前缀和，以及 $presum_i=\sum_{j=1}^i2^{i-1}a_i$，就可以快速回答询问了。</p><p>还有一个小问题：只有第一块的系数是从 $2^0=1$ 开始的。由于计算时第一块一定是那个后缀，计算后缀答案时从 $1$ 开始，计算整块答案时从 $2$ 开始即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], presum[N], inv2[N], f[N], len[N], sum[N], preans[N], out[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll) (presum[r] - presum[l - <span class="number">1</span>] + mod) * inv2[l - <span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    inv2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, two = <span class="number">1</span>; i &lt;= n; ++i, two = two * <span class="number">2</span> % mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        inv2[i] = (ll) inv2[i - <span class="number">1</span>] * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">        presum[i] = (presum[i - <span class="number">1</span>] + (ll) two * a[i] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        q[r].push_back(pii(l, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        len[i] = <span class="number">1</span>;</span><br><span class="line">        sum[i] = a[i];</span><br><span class="line">        <span class="keyword">while</span> (find(i) &gt; <span class="number">1</span> &amp;&amp; sum[find(i)] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = find(i);</span><br><span class="line">            <span class="keyword">int</span> y = find(x - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (len[y] &gt;= <span class="number">30</span> || (((ll) sum[x]) &lt;&lt; len[y]) + sum[y] &gt;= <span class="number">1e9</span>) sum[y] = <span class="number">1e9</span>;</span><br><span class="line">            <span class="keyword">else</span> sum[y] += sum[x] &lt;&lt; len[y];</span><br><span class="line">            len[y] += len[x];</span><br><span class="line">            f[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        preans[find(i)] = (preans[find(find(i) - <span class="number">1</span>)] + <span class="number">2l</span>l * calc(find(i), i)) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q[i].size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = q[i][j].first;</span><br><span class="line">            <span class="keyword">int</span> id = q[i][j].second;</span><br><span class="line">            out[id] = (<span class="number">0l</span>l + preans[find(i)] - preans[find(l)] + mod + calc(l, find(l) + len[find(l)] - <span class="number">1</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, out[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/878/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;对于一个数列，每次操作可以将相邻的两个数 $x$ 和 $y$ 合并成一个数 $x+2y$，定义一个数列的权值为进行操作直至只剩一个数能得到的最大值。&lt;/p&gt;
&lt;p&gt;多组询问，每次给定一个区间，求这个区间的权值。&lt;/p&gt;
&lt;p&gt;数列值域 $-10^9\sim10^9$，数列长度和询问个数不超过 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="并查集" scheme="https://ouuan.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="离线算法" scheme="https://ouuan.github.io/tags/%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>UOJ 自动备份</title>
    <link href="https://ouuan.github.io/UOJ-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <id>https://ouuan.github.io/UOJ-自动备份/</id>
    <published>2019-09-27T04:01:05.000Z</published>
    <updated>2019-10-08T16:24:39.390Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个刚刚上线两周就回滚了无数次数据的 OJ，备份自然是很重要的~</p><a id="more"></a><h2 id="一些脚本"><a href="#一些脚本" class="headerlink" title="一些脚本"></a>一些脚本</h2><h3 id="commit-sh"><a href="#commit-sh" class="headerlink" title="commit.sh"></a>commit.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker images --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.CreatedSince&#125;&#125;"</span> | grep <span class="string">'day'</span> | cut -d : -f 1 | xargs docker image rm</span><br></pre></td></tr></table></figure><p>commit，然后删掉比较久远（在 CREATED 中显示为 XX days ago）的镜像节约空间（不然在自动备份下过不了几天硬盘就爆了）。</p><h3 id="save-sh"><a href="#save-sh" class="headerlink" title="save.sh"></a>save.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker save -o /home/ouuan/uoj/uoj_backup_<span class="variable">$&#123;time&#125;</span>.tar uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker images --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.CreatedSince&#125;&#125;"</span> | grep <span class="string">'day'</span> | cut -d : -f 1 | xargs docker image rm</span><br></pre></td></tr></table></figure><p>先 commit，然后存为 tar。即使系统挂了，也能从文件恢复。</p><h3 id="new-sh"><a href="#new-sh" class="headerlink" title="new.sh"></a>new.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker stop uoj</span><br><span class="line">docker rm uoj</span><br><span class="line">docker image ls</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please enter the version (after uoj_backup_): "</span></span><br><span class="line"><span class="built_in">read</span> version</span><br><span class="line">docker run --name uoj -dit -p 23333:80 -p 3690:3690 --<span class="built_in">cap</span>-add SYS_PTRACE <span class="string">"uoj_backup_<span class="variable">$version</span>"</span></span><br></pre></td></tr></table></figure><p>便捷地从镜像创建新容器，在删除当前容器之前 commit。</p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>输入命令 <code>sudo crontab -e</code>。</p><p>（可能会先让你选择一个文本编辑器）然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30 * * * * bash path/commit.sh</span><br><span class="line">0 22 * * * bash path/save.sh</span><br></pre></td></tr></table></figure><p><code>path</code> 就是放脚本文件的路径。</p><p>前面五项分别是 分钟 / 小时 / 日期 / 月份 / 星期，在符合条件时就会执行后面的命令。</p><p>上面的例子会在 <code>xx:30</code> 时 commit 一次，在每天晚上 10 点 save 一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个刚刚上线两周就回滚了无数次数据的 OJ，备份自然是很重要的~&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Hinata Online Judge 的搭建</title>
    <link href="https://ouuan.github.io/Hinata-Online-Judge-%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://ouuan.github.io/Hinata-Online-Judge-的搭建/</id>
    <published>2019-09-21T13:58:04.000Z</published>
    <updated>2019-09-21T14:13:13.518Z</updated>
    
    <content type="html"><![CDATA[<p>程序员就是代码重用的艺术家（</p><a id="more"></a><p>这周回到学校，基于 <a href="https://github.com/UniversalOJ/UOJ-System" target="_blank" rel="noopener">社区版 UOJ</a> 搭了一个校内 OJ。</p><p>过程中现在还记得的遇到的问题，是重启后显示 “wrong database”，解决方案是 docker 里运行命令 <code>service mysql restart</code>。</p><p>一周里大部分时间都是在魔改，并且是 <a href="https://github.com/ouuan/Hinata-Online-Judge" target="_blank" rel="noopener">开源</a> 的。</p><p>这几天算是稍微体验了一下程序员的生活。会为精妙的代码重用而惊叹，也会为一个 bug 而苦苦求索。commit 中的两行代码，可能是若干小时搜索的结果，经过了数十次错误的尝试。</p><p>以前我对程序员的印象是「苦力活」，现在稍微有点改变了。诗人给同一个事物起不同的名字，数学家给不同的事物起相同的名字，程序员给不同的需求使用同一个函数。</p><p>回想起来，不到一年前，也就是我开始使用 hexo 博客之前，我还对 web 开发一无所知。只不过现在所会的那些东西都是通过阅读源码 + 需要什么就搜什么学到的，导致有很多不清楚的地方，这也是导致效率低下的重要原因。</p><p>总之，欢迎大家自由选取 Hinata Online Judge 的 <a href="https://github.com/ouuan/Hinata-Online-Judge/issues/1" target="_blank" rel="noopener">feature</a> copy 到自己的 UOJ 里！</p><p>然而代码太不规范了，所以暂时不太准备发 pr…也欢迎大家来帮我规范一下发 pr。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员就是代码重用的艺术家（&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
      <category term="工程" scheme="https://ouuan.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BJOI2019 删数（贪心，线段树）</title>
    <link href="https://ouuan.github.io/BJOI2019-%E5%88%A0%E6%95%B0%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/BJOI2019-删数（贪心，线段树）/</id>
    <published>2019-09-16T03:11:10.000Z</published>
    <updated>2019-09-21T13:56:26.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/P5324" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://loj.ac/problem/3094" target="_blank" rel="noopener">LOJ</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5528" target="_blank" rel="noopener">BZOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>一个数列是“可删除的”，当且仅当可以通过这种操作将其清空：将数列中等于这个数列长度的数删去。</p><p>如，$[1, 2, 4, 4]$ 是“可删除的”，第一次操作删成 $[1, 2]$，第二次操作删成 $[1]$，第三次操作清空。</p><p>定义一个数列的权值为至少需要进行的单点修改数目，使得这个数列变成“可删除的”。</p><p>现在给你一个数列 $a_{1..n}$，以及 $m$ 次修改操作，你需要在每次修改后回答这个数列的权值。</p><p>修改操作有三种：</p><ol><li>单点修改。</li><li>全局加一。</li><li>全局减一。</li></ol><p>$1\le n,m\le 150000$，数列初始值以及单点修改成的值在 $[1,n]$ 内，但全局修改可能使数列中的元素超过这个范围。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><h3 id="计算数列的权值"><a href="#计算数列的权值" class="headerlink" title="计算数列的权值"></a>计算数列的权值</h3><p>如果将数 $i$ 出现的次数 $cnt[i]$ 看做一个高度为 $cnt[i]$、放在位置 $i$ 的柱子，让所有柱子向左倒，每个位置就会被若干个柱子覆盖。也就是说，$i$ 这个柱子覆盖了 $[i-cnt[i]+1,i]$。</p><p>一个数列是“可删除的”当且仅当 $[1,n]$ 都被恰好覆盖了一次。</p><p>并且，一个数列的权值就是它没被覆盖的位置数量，证明如下：</p><ol><li>这是答案的下界，因为每次单点修改最多覆盖一个新位置。</li><li>这是答案的上界，因为你可以把重复覆盖的换到未覆盖处。</li></ol><h3 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h3><p>全局修改会导致 $cnt$ 以及覆盖数量发生位移，所以可以考虑使用一个标记 $delta$ 来表示现在全局加了多少，那么 $cnt[i]$ 表示 $cnt[i+delta]$，位置 $i$ 被覆盖的次数被记录在 $i-delta$ 处，$a[i]$ 表示 $a_i-delta$。</p><p>需要特别注意的是，全局加时需要减去原来位置 $n$ 的贡献，因为它们来到 $n+1$ 后必定会是累赘，全局减时要再加回来。但不需要特殊处理位置 $1$ 的贡献，因为覆盖是向左的，查询时只会查询 $[1,n]$ 的覆盖次数，小于 $1$ 的位置对答案没有影响。</p><p>可以用线段树维护覆盖次数。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>使用一个线段树来维护覆盖次数，它支持区间加减、区间查询最小值及其出现次数。</p><p>下面是实现的细节。（代码中所有 $cnt$ 的下标都要加上 $m$ 避免负数下标。）</p><h3 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h3><p>首先处理原来的 $a_p$。</p><p>先判断 $a_p$ 是否小于等于 $n$，只有 $a_p\le n$ 时才会有贡献，也就是说，当 $a[p]+delta\le n$ 时需要在线段树上 $a[p]-cnt[a[p]]+1$ 处单点减一。</p><p>然后将 $cnt[a[p]]$ 减一。</p><p>接着处理新增的 $x$。</p><p>$x$ 必定在 $[1,n]$ 内，所以一定需要在线段树上 $x-cnt[x-delta]-delta$ 处单点加一。</p><p>然后将 $cnt[x-delta]$ 加一。</p><p>最后将 $a[p]$ 修改为 $x-delta$。</p><h3 id="全局加"><a href="#全局加" class="headerlink" title="全局加"></a>全局加</h3><p>需要减去位置 $n$ 的贡献：$[n-cnt[n-delta]+1-delta,n-delta]$ 区间减一。</p><p>然后将 $delta$ 加一。</p><h3 id="全局减"><a href="#全局减" class="headerlink" title="全局减"></a>全局减</h3><p>先将 $delta$ 减一。</p><p>然后加上位置 $n$ 的贡献：$[n-cnt[n-delta]+1-delta,n-delta]$ 区间加一。</p><h3 id="查询答案"><a href="#查询答案" class="headerlink" title="查询答案"></a>查询答案</h3><p>查询 $[1-delta,n-delta]$ 的最小值及出现次数。</p><p>若最小值不为 $0$ 则答案为 $0$。</p><p>否则答案为最小值的出现次数。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150010</span>;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Min</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, cnt;</span><br><span class="line">    Min(<span class="keyword">int</span> _val = <span class="number">0</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>): val(_val), cnt(_cnt) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Min <span class="title">merge</span><span class="params">(Min a, Min b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.val &lt; b.val) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (b.val &lt; a.val) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">return</span> Min(a.val, a.cnt + b.cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (cur &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (cur &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line">    </span><br><span class="line">    Min mn[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mn[cur] = merge(mn[ls], mn[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mn[cur].val += x;</span><br><span class="line">        tag[cur] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        add(ls, tag[cur]);</span><br><span class="line">        add(rs, tag[cur]);</span><br><span class="line">        tag[cur] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) mn[cur] = Min(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            build(ls, l, mid);</span><br><span class="line">            build(rs, mid, r);</span><br><span class="line">            pushup(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) add(cur, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pushdown(cur);</span><br><span class="line">            add(ls, l, mid, L, R, x);</span><br><span class="line">            add(rs, mid, r, L, R, x);</span><br><span class="line">            pushup(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Min <span class="title">min</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span> Min(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> mn[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">return</span> merge(min(ls, l, mid, L, R), min(rs, mid, r, L, R));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, delta, a[N], cnt[N * <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        ++cnt[a[i] + m];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ll = <span class="number">1</span> - m - n, rr = m + n + <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    t.build(<span class="number">1</span>, ll, rr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t.add(<span class="number">1</span>, ll, rr, i - cnt[i + m] + <span class="number">1</span>, i + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                --delta;</span><br><span class="line">                t.add(<span class="number">1</span>, ll, rr, n + <span class="number">1</span> - cnt[n - delta + m] - delta, n - delta + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                t.add(<span class="number">1</span>, ll, rr, n + <span class="number">1</span> - cnt[n - delta + m] - delta, n - delta + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">                ++delta;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[p] + delta &lt;= n) t.add(<span class="number">1</span>, ll, rr, a[p] - cnt[a[p] + m] + <span class="number">1</span>, a[p] - cnt[a[p] + m] + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">            --cnt[a[p] + m];</span><br><span class="line">            t.add(<span class="number">1</span>, ll, rr, x - cnt[x - delta + m] - delta, x - cnt[x - delta + m] - delta + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            ++cnt[x - delta + m];</span><br><span class="line">            a[p] = x - delta;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Min res = t.min(<span class="number">1</span>, ll, rr, <span class="number">1</span> - delta, n - delta + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (res.val &gt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res.cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P5324&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=5528&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;一个数列是“可删除的”，当且仅当可以通过这种操作将其清空：将数列中等于这个数列长度的数删去。&lt;/p&gt;
&lt;p&gt;如，$[1, 2, 4, 4]$ 是“可删除的”，第一次操作删成 $[1, 2]$，第二次操作删成 $[1]$，第三次操作清空。&lt;/p&gt;
&lt;p&gt;定义一个数列的权值为至少需要进行的单点修改数目，使得这个数列变成“可删除的”。&lt;/p&gt;
&lt;p&gt;现在给你一个数列 $a_{1..n}$，以及 $m$ 次修改操作，你需要在每次修改后回答这个数列的权值。&lt;/p&gt;
&lt;p&gt;修改操作有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单点修改。&lt;/li&gt;
&lt;li&gt;全局加一。&lt;/li&gt;
&lt;li&gt;全局减一。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$1\le n,m\le 150000$，数列初始值以及单点修改成的值在 $[1,n]$ 内，但全局修改可能使数列中的元素超过这个范围。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1209F Koala and Notebook（BFS，最短路）</title>
    <link href="https://ouuan.github.io/CF1209F-Koala-and-Notebook%EF%BC%88BFS%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1209F-Koala-and-Notebook（BFS，最短路）/</id>
    <published>2019-09-16T00:58:32.000Z</published>
    <updated>2019-09-21T13:56:26.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/1209/problem/F" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张 $n$ 个点 $m$ 条边的无向连通图，一条路径的权值是路径上的边的编号（十进制）顺次连接而成的数字。求 $1$ 到每个点的最短路，<strong>输出</strong> 对 $10^9+7$ 取模。</p><p>$2\le n\le10^5$, $n-1\le m\le10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>数字越长就越大，所以转化成优先长度短，其次字典序小。</p><p>把每条边拆成位数条边（如 $(u, v, 718)$ 拆成 $(u, x, 7)$, $(x, y, 1)$, $(y, v, 8)$, $(v, x, 7)$, $(y, u, 8)$），这样的话长度的边权就全是一，可以用 BFS 解决。</p><p>如何使字典序最小呢？容易想到优先遍历边权（拆边后全是一位数）小的边，但是，如果两个点的最短路相同，这样做就会导致错误。（如：$dis[u]=dis[v]=233$，$u$ 在队列里在 $v$ 的前面，$(u, x, 3)$ 和 $(v, x, 2)$ 这两条边都存在，$dis[x]$ 就会被错误地设为 $2333$，而它应当是 $2332$。）</p><p>正确的做法是将最短路相同的点绑在一起放入队列，实现可以使用 <code>vector</code>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot, dis[N * <span class="number">5</span>], digit[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N * <span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    tot = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ww = <span class="number">1</span>; ww &lt;= m; ++ww)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w = ww;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (w &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g[u][w].push_back(v);</span><br><span class="line">            g[v][w].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 拆边</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = ++tot;</span><br><span class="line">            <span class="keyword">int</span> r = l;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (w)</span><br><span class="line">            &#123;</span><br><span class="line">                digit[++d] = w % <span class="number">10</span>;</span><br><span class="line">                w /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = d - <span class="number">1</span>; i &gt; <span class="number">1</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                g[tot][digit[i]].push_back(tot + <span class="number">1</span>);</span><br><span class="line">                r = ++tot;</span><br><span class="line">            &#125;</span><br><span class="line">            g[u][digit[d]].push_back(l);</span><br><span class="line">            g[r][digit[<span class="number">1</span>]].push_back(u);</span><br><span class="line">            g[v][digit[d]].push_back(l);</span><br><span class="line">            g[r][digit[<span class="number">1</span>]].push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    q.push(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt; <span class="comment">// nxt 里存的是最短路相同的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> u : vec)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dis[v] == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dis[v] = (dis[u] * <span class="number">10l</span>l + i) % mod;</span><br><span class="line">                        nxt.push_back(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!nxt.empty()) q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1209/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张 $n$ 个点 $m$ 条边的无向连通图，一条路径的权值是路径上的边的编号（十进制）顺次连接而成的数字。求 $1$ 到每个点的最短路，&lt;strong&gt;输出&lt;/strong&gt; 对 $10^9+7$ 取模。&lt;/p&gt;
&lt;p&gt;$2\le n\le10^5$, $n-1\le m\le10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://ouuan.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="BFS" scheme="https://ouuan.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LG4707 重返现世（扩展 min-max 容斥）</title>
    <link href="https://ouuan.github.io/LG4707-%E9%87%8D%E8%BF%94%E7%8E%B0%E4%B8%96%EF%BC%88%E6%89%A9%E5%B1%95-min-max-%E5%AE%B9%E6%96%A5%EF%BC%89/"/>
    <id>https://ouuan.github.io/LG4707-重返现世（扩展-min-max-容斥）/</id>
    <published>2019-09-11T11:28:03.000Z</published>
    <updated>2019-09-28T11:51:43.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/P4707" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有 $n$ 种颜色，每秒会出现一种颜色，第 $i$ 种颜色出现概率为 $\frac{p_i}m$，其中 $m=\sum_{i=1}^np_i$，求共出现 $k$ 种颜色的期望用时，对 $998244353$ 取模。</p><p>$1\le k\le n\le 1000$，$m\le10000$，$k\ge n-10$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><h3 id="扩展-min-max-容斥"><a href="#扩展-min-max-容斥" class="headerlink" title="扩展 min-max 容斥"></a>扩展 min-max 容斥</h3><p>$$<br>k\operatorname{-thmax}(S)=\sum\limits_{T\subseteq S}[T\ne\varnothing] (-1)^{|T|-k}\binom{|T|-1}{k-1}\min(T)<br>$$</p><p>其中 $k\operatorname{-thmax}(S)$ 表示 $S$ 这个集合的第 $k$ 大元素，$\min(T)$ 表示 $T$ 这个集合中最小的元素。</p><p>证明可以使用二项式反演，不会二项式反演也记不住式子的话，考场现推可以设  $k\operatorname{-thmax}(S)=\sum_{T\subseteq S}[T\ne\varnothing]f(|T|)\min(T)$ 然后算。</p><p>这个式子还可以推广到期望，“第 $k$ 大的期望”意思是 $\sum_xx\cdot p(x=k\operatorname{-thmax}(S))$。（$p(event)$ 表示事件 $event$ 发生的概率。）</p><h3 id="重返现世"><a href="#重返现世" class="headerlink" title="重返现世"></a>重返现世</h3><p>下文中用 $K$ 代表 $n-k+1$。</p><p>答案就是颜色出现时间的第 $K$ 大的期望。<br>$$<br>ans = \sum\limits_{T\subseteq S}[T\ne\varnothing] (-1)^{|T|-K}\binom{|T|-1}{K-1}\frac m{sum(T)}<br>$$<br>其中 $sum(T)$ 表示 $\sum_{i\in T}p_i$，$\min(T)=\frac{m}{sum(T)}$ 可以这样理解：计算 $T$ 中元素最早出现时间的期望，可以将 $T$ 中所有颜色绑在一起，出现概率就是 $\frac{sum(T)}m$，期望出现时间就是其逆元。</p><p>接下来是一个神奇的 dp。</p><p>令 $f_{i,j,k}$ 表示 $\sum_{T\subseteq[1,i]}[sum(T)=j\ne0] (-1)^{|T|-k}\binom{|T|-1}{k-1}$。（这里的 $k$ 与题目输入中的 $k$ 不同。）</p><p>考虑转移，分两种情况：</p><ol><li>$T$ 不包含 $i$；</li><li>$T$ 包含 $i$。</li></ol><p>第一种情况显然是 $f_{i-1,j,k}$。</p><p>在 $j&gt;p_i$ 时，将 $i$ 这个元素从 $T$ 中拿出来，剩下的部分依然不是空集，所以第二种情况的式子是 $\sum_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|+1-k}\binom{|T|}{k-1}$。</p><p>尝试从之前的状态转移，写出两个式子：<br>$$<br>f_{i-1,j-p_i,k-1}=\sum\limits_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|+1-k}\binom{|T|-1}{k-2}<br>$$</p><p>$$<br>f_{i-1,j-p_i,k}=\sum\limits_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|-k}\binom{|T|-1}{k-1}<br>$$</p><p>发现最后的组合数部分就是杨辉三角中计算组合数的方法（$\binom{x}{y}=\binom{x-1}{y-1}+\binom{x-1}{y}$），而前面只是正负号的变化。</p><p>也就是说，$j&gt;p_i$ 时，第二部分的值为 $f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}$。</p><p>为什么要强调 $j&gt;p_i$ 呢？因为枚举 $T\subseteq S$ 时是 <strong>不包含空集</strong> 的。所以，当 $j=p_i$ 时，第二种情况需要特殊计算，直接将 $T=\{i\}$ 代入定义式，得到第二部分的值为 $(-1)^{1-k}\binom{0}{k-1}$，也就是 $k=1$ 时为 $1$，否则为 $0$。</p><p>总结一下：$f_{i,j,k}=\begin{cases}f_{i-1,j,k}&amp;(j&lt;p_i)\\f_{i-1,j,k}+[k=1]&amp;(j=p_i)\\f_{i-1,j,k}+f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}&amp;(j&gt;p_i)\end{cases}$</p><p>dp 的边界情况是什么？其实除了 $i\ge 1,1\le j\le m,1\le k\le i$（当然这些情况里也有很多 $0$），其它情况都可以由定义计算得到是 $0$。</p><p>最后的答案就是 $\sum_{i=1}^mf_{n,i,K}\frac{m}{i}$。</p><p>需要用滚动数组优化空间。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], f[M][K], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = m; s &gt; p[i]; --s)</span><br><span class="line">            &#123;</span><br><span class="line">                f[s][j] = (<span class="number">0l</span>l + f[s][j] + f[s - p[i]][j - <span class="number">1</span>] - f[s - p[i]][j] + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[p[i]][<span class="number">1</span>] = (f[p[i]][<span class="number">1</span>] + <span class="number">1</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = (ans + (ll) f[i][k] * m % mod * qpow(i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果枚举包含空集"><a href="#如果枚举包含空集" class="headerlink" title="如果枚举包含空集"></a>如果枚举包含空集</h2><p>如果我们将 dp 状态定义成枚举包含空集，也是可以算的。</p><p>令 $f_{i,j,k}$ 表示 $\sum_{T\subseteq[1,i]}[sum(T)=j] (-1)^{|T|-k}\binom{|T|-1}{k-1}$。</p><p>还是分成不包含 $i$ 和包含 $i$ 两部分。</p><p>第一部分依然是 $f_{i-1,j,k}$。</p><p>第二部分不需要分 $j$ 与 $p_i$ 的关系讨论，直接 $f_{i-1,j,k}+f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}$。</p><p>但是边界情况需要注意：</p><p>$$<br>f_{i,0,k}<br>=(-1)^{-k}\binom{-1}{k-1}=<br>\begin{cases}<br>0&amp;k=0\\<br>-1&amp;otherwise<br>\end{cases}<br>$$</p><p>（注：$\binom{-1}{k-1}$ 可以由广义组合数 $\binom{x}{y}=\frac{x(x-1)\cdots(x-y+1)}{y!}$得到。）</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], f[M][K], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) f[<span class="number">0</span>][i] = mod - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = m; s &gt;= p[i]; --s)</span><br><span class="line">            &#123;</span><br><span class="line">                f[s][j] = (<span class="number">0l</span>l + f[s][j] + f[s - p[i]][j - <span class="number">1</span>] - f[s - p[i]][j] + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = (ans + (ll) f[i][k] * m % mod * qpow(i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4707&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有 $n$ 种颜色，每秒会出现一种颜色，第 $i$ 种颜色出现概率为 $\frac{p_i}m$，其中 $m=\sum_{i=1}^np_i$，求共出现 $k$ 种颜色的期望用时，对 $998244353$ 取模。&lt;/p&gt;
&lt;p&gt;$1\le k\le n\le 1000$，$m\le10000$，$k\ge n-10$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥原理" scheme="https://ouuan.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="概率期望" scheme="https://ouuan.github.io/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="扩展 min-max 容斥" scheme="https://ouuan.github.io/tags/%E6%89%A9%E5%B1%95-min-max-%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>CF516D Drazil and Morning Exercise（up and down，并查集）</title>
    <link href="https://ouuan.github.io/CF516D-Drazil-and-Morning-Exercise%EF%BC%88up-and-down%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF516D-Drazil-and-Morning-Exercise（up-and-down，并查集）/</id>
    <published>2019-09-10T05:37:12.000Z</published>
    <updated>2019-09-28T11:51:43.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/516/problem/D" target="_blank" rel="noopener">CF</a></p><p><a href="https://www.luogu.org/problem/CF516D" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给定一棵 $n$ 个点带边权的树，定义 $d(u)$ 为树上离它最远的点到它的距离，$q$ 次询问，每次询问给定 $l$，求一个最大的树上连通块 $V’$ 的大小，满足 $\forall u, v\in V’$，$|d(u)-d(v)|\le l$。</p><p>$1\le n\le 10^5$, $1\le q\le 50$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先使用 up and down（两遍 dfs，第一遍求往下走的最远距离，第二遍求往上走的最远距离）求出 $d(u)$。</p><p>有一个性质：如果以 $d(u)$ 最小的 $u$ 为根，$\forall v, d(v)\ge d(parent(v))$。（下文中的“子树”都是以 $d$ 最小的点为根的。）</p><div><div class="fold_hider"><div class="close hider_title">简单证明</div></div><div class="fold"><p>不难发现，我们只要证明 $u$ 的每个儿子 $v$ 都是子树 $v$ 中 $d$ 最小的，即可归纳地证明原命题。</p><p>假设子树 $v$ 中存在一个点 $w$，$d(w)&lt;d(v)$，那么从 $v$ 出发的最长路的第一步一定是 $v$ 到 $w$ 的路径上的第一条边（否则的话，从 $w$ 出发可以走到 $v$ 再走从 $v$ 出发的最长路，就会导致 $d(w)&gt;d(v)$），这样的话，从 $u$ 出发也可以先走到 $v$ 再走 $v$ 出发的最长路，这样的话 $d(u)&gt;d(v)$，与题设矛盾。</p></div></div><p>题目所求的连通块一定是 $d$ 的大小连续的一段，令所求连通块中 $d$ 最小且离根最近的点为 $u$，由上面的性质不难发现，所求连通块一定在子树 $u$ 中。</p><p>如果按 $d$ 从大到小枚举每个点，用并查集维护符合条件的点的连通性以及每块的大小，可以发现，删去一个点（一个 $d&gt;d(u)+l$ 的点）并不影响连通性，只需要将其所在块的大小减一即可。（加入一个点就是合并子树，删去一个点是删去叶子。）</p><p>这样的话答案就是过程中最大的一块的大小。</p><p>总时间复杂度就是 $O(qn\alpha(n)+n\log n)$ <del>或 O(qn+nlogn)</del> 或 $O(qn\log n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>（非常抱歉，使用了 CF 模板 qaq）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 why_is_there_a_function_called_y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().</span></span></span><br><span class="line"><span class="function"><span class="params">count())</span></span>;<span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">int</span> out=rng()%(r-l+<span class="number">1</span>)+l;<span class="keyword">return</span> out&gt;=l?out:out+</span><br><span class="line">r-l+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T</span></span></span><br><span class="line"><span class="function"><span class="params">&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);</span><br><span class="line">x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;</span><br><span class="line"><span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::type</span><br><span class="line">write(<span class="keyword">const</span> T&amp;x)&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);<span class="built_in">putchar</span></span><br><span class="line">(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span></span><br><span class="line">(<span class="string">"%.10lf"</span>,x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args</span><br><span class="line">...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag</span><br><span class="line">,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value||(</span><br><span class="line">is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value</span><br><span class="line">&amp;&amp;!is_const&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first</span><br><span class="line">!=__last;++__first)read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category</span><br><span class="line">&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;<span class="keyword">bool</span> isFirst=<span class="literal">true</span>;<span class="keyword">for</span>(;</span><br><span class="line">__first!=__last;++__first)&#123;<span class="keyword">if</span>(isFirst)isFirst=<span class="literal">false</span>;<span class="keyword">else</span> sp;write(*__first);&#125;br;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag</span><br><span class="line">,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wtb(InputIt</span><br><span class="line">__first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span></span></span></span><br><span class="line"><span class="function"><span class="params">T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args</span><br><span class="line">...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);</span><br><span class="line">wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span></span><br><span class="line">:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], edge[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"><span class="keyword">int</span> n, f[N], siz[N], id[N], rid[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fi, se;</span><br><span class="line">    Element() &#123; fi = <span class="number">0</span>; se = -INF; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; fi)</span><br><span class="line">        &#123;</span><br><span class="line">            se = fi;</span><br><span class="line">            fi = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; se) se = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == fi) <span class="keyword">return</span> se;</span><br><span class="line">        <span class="keyword">return</span> fi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsdn</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SON (i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">int</span> w = edge[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfsdn(v, u);</span><br><span class="line">        dis[u].insert(dis[v].fi + w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsup</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SON (i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">int</span> w = edge[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v].insert(dis[u].get(dis[v].fi + w) + w);</span><br><span class="line">        dfsup(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">    edge[cnt] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (find(x) == find(y)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (siz[find(x)] &lt; siz[find(y)]) swap(x, y);</span><br><span class="line">    siz[find(x)] += siz[find(y)];</span><br><span class="line">    f[find(y)] = find(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n);</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        read(u, v, w);</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfsdn(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfsup(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, n) id[i] = i;</span><br><span class="line">    sort(id + <span class="number">1</span>, id + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> dis[x].fi &gt; dis[y].fi;&#125;);</span><br><span class="line">    For (i, <span class="number">1</span>, n) rid[id[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = read();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        For (i, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">            siz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        For (u, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (dis[id[l]].fi &gt; dis[id[u]].fi + len) --siz[find(id[l++])];</span><br><span class="line">            SON (i, id[u])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = to[i];</span><br><span class="line">                <span class="keyword">if</span> (rid[v] &lt; u) merge(id[u], v);</span><br><span class="line">            &#125;</span><br><span class="line">            up(ans, siz[find(id[u])]);</span><br><span class="line">        &#125;</span><br><span class="line">        wtb(ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/516/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/CF516D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给定一棵 $n$ 个点带边权的树，定义 $d(u)$ 为树上离它最远的点到它的距离，$q$ 次询问，每次询问给定 $l$，求一个最大的树上连通块 $V’$ 的大小，满足 $\forall u, v\in V’$，$|d(u)-d(v)|\le l$。&lt;/p&gt;
&lt;p&gt;$1\le n\le 10^5$, $1\le q\le 50$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="并查集" scheme="https://ouuan.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="up and down" scheme="https://ouuan.github.io/tags/up-and-down/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6519 魔力环（Burnside引理，容斥原理）</title>
    <link href="https://ouuan.github.io/LOJ6519-%E9%AD%94%E5%8A%9B%E7%8E%AF%EF%BC%88Burnside%E5%BC%95%E7%90%86%EF%BC%8C%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/LOJ6519-魔力环（Burnside引理，容斥原理）/</id>
    <published>2019-09-05T02:45:59.000Z</published>
    <updated>2019-09-05T13:30:36.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://loj.ac/problem/6519" target="_blank" rel="noopener">LOJ</a></p><p><a href="https://www.luogu.org/problem/P4916" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>你需要给 $n$ 颗珠子的项链染 $m$ 颗黑色，$n-m$ 颗白色，不能有连续的一串黑色珠子长度超过 $k$，求旋转同构下本质不同的染色方案数。</p><p>$1\le m,k\le n\le10^5$</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先套用 Burnside 引理，以及位移为 $r$ 的旋转周期为 $\gcd(r, n)$ 的结论，得到答案的式子：<br>$$<br>\begin{aligned}<br>answer&amp;=\frac 1 n\sum\limits_{i=1}^nf\left(\frac n{\gcd(i,n)}\right)\\<br>&amp;=\frac 1 n\sum\limits_{d|n}\varphi(d)f(d)<br>\end{aligned}<br>$$<br>其中 $f(x)$ 表示在一个长为 $\frac n x$ 的项链上，染 $\frac{m}{x}$ 个黑珠子，$\frac{n-m}x$ 个白珠子，不能有连续的一串黑色珠子长度超过 $k$ 的方案数（在不旋转的意义下计数）。</p><p>可以看出只有 $d|m$ 时 $f(d)$ 可能不为零，如果用 $f(x, y)$ 表示在一个长为 $x+y$ 的项链上，染 $x$ 个黑珠子，$y$ 个白珠子，不能有连续的一串黑色珠子长度超过 $k$ 的方案数（在不旋转的意义下计数），答案的式子可以写成：</p><p>$$<br>answer=\frac 1 n\sum\limits_{d|\gcd(n, m)}\varphi(d)f\left(\frac m d, \frac{n-m}d\right)<br>$$</p><p>现在的问题转化成了快速求 $f(x, y)$。</p><p>首先，特判掉两种情况：</p><ol><li>$k=n$</li><li>$y\ne 0$ 且 $x\le k$</li></ol><p>这两种情况下 $f(x, y)=\binom{x+y}x$</p><p>由于是在环上不好处理，枚举两侧的黑珠子个数，就可以转化为序列上的问题。</p><p>而序列上的问题，就相当于求方程 $x_1+x_2+\cdots+x_{y+1}=x (0\le x_i\le k)$ 的解的个数。</p><p>考虑容斥，枚举至少有 $i$ 个变量的值大于 $k$（实际上是枚举大小为 $i$ 的子集都大于 $k$），解的个数为 $\binom{x+y-i(k+1)}y$。</p><p>这样的话，枚举两侧黑珠子个数最多枚举到 $k$，容斥复杂度为 $O(\frac{x+y}k)$，计算 $f(x,y)$ 的复杂度为 $O(x+y)$，整道题的复杂度就是 $O(\text{预处理组合数}+\sigma(n))$，其中 $\sigma(n)$ 表示 $n$ 的所有约数之和，在数据范围内最大为 $403200$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], ptot, phi[N], fact[N], invf[N];</span><br><span class="line"><span class="keyword">bool</span> np[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; x || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (ll) fact[x] * invf[y] % mod * invf[x - y] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * (k + <span class="number">1</span>) &lt;= x + y; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        out = (out + (i &amp; <span class="number">1</span> ? <span class="number">-1l</span>l : <span class="number">1l</span>l) * c(x + y - (k + <span class="number">1</span>) * i, y) * c(y + <span class="number">1</span>, i) % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == n || y != <span class="number">0</span> &amp;&amp; x &lt;= k) <span class="keyword">return</span> c(x + y, x);</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x &amp;&amp; i &lt;= k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        out = (out + (ll) (i + <span class="number">1</span>) * calc(x - i, y - <span class="number">2</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? gcd(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fact[i] = (ll) fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    invf[n] = qpow(fact[n], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) invf[i] = (ll) invf[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">    </span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[++ptot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ptot &amp;&amp; i * p[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) phi[x] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[x] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> g = gcd(m, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= g; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * i == g) ans = (ans + (ll) f(m / i, (n - m) / i) * phi[i]) % mod;</span><br><span class="line">            <span class="keyword">else</span> ans = (ans + (ll) f(m / i, (n - m) / i) * phi[i] + (ll) f(m / (g / i), (n - m) / (g / i)) * phi[g / i]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; (ll) ans * qpow(n, mod - 2) % mod;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6519&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4916&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;你需要给 $n$ 颗珠子的项链染 $m$ 颗黑色，$n-m$ 颗白色，不能有连续的一串黑色珠子长度超过 $k$，求旋转同构下本质不同的染色方案数。&lt;/p&gt;
&lt;p&gt;$1\le m,k\le n\le10^5$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥原理" scheme="https://ouuan.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="群论" scheme="https://ouuan.github.io/tags/%E7%BE%A4%E8%AE%BA/"/>
    
      <category term="Burnside引理" scheme="https://ouuan.github.io/tags/Burnside%E5%BC%95%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6077 逆序对（生成函数，计数dp）</title>
    <link href="https://ouuan.github.io/LOJ6077-%E9%80%86%E5%BA%8F%E5%AF%B9%EF%BC%88%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%EF%BC%8C%E8%AE%A1%E6%95%B0dp%EF%BC%89/"/>
    <id>https://ouuan.github.io/LOJ6077-逆序对（生成函数，计数dp）/</id>
    <published>2019-09-04T01:22:32.000Z</published>
    <updated>2019-09-04T01:51:38.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://loj.ac/problem/6089" target="_blank" rel="noopener">LOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>求长度为 $n$ 逆序对数为 $k$ 的排列个数。</p><p>$1\le n, k\le 10^5$，$k\le \binom n 2$</p><a id="more"></a><h2 id="简要作法"><a href="#简要作法" class="headerlink" title="简要作法"></a>简要作法</h2><p>从小到大依次考虑将每个数插入排列，那么每个数 $i$ 都可以贡献 $0\dots i-1$ 个逆序对，所以答案的生成函数为 $(1 + x)(1 + x + x^2)\cdots(1+x+\cdots+x^{n-1})$。</p><p>上下同时乘上 $(1-x)^n$，即求：<br>$$<br>\frac{(1-x)(1-x^2)\cdots(1-x^n)}{(1-x)^n}<br>$$<br>（不约分是为了方便求。）</p><p>分母 $\frac{1}{(1-x)^n}=\sum\limits_{i\ge 0}\binom{n-1+i}{n-1}x^i$，<del>是一个大家熟知的结论</del>，可以利用 $(1+x+x^2+\cdots)^n$ 的组合意义说明。</p><p>分子的 $x^i$ 项系数的组合意义为：考虑从 $1,2,\ldots,n$ 中选若干个和为 $i$ 的数（每个数只能选一遍）的所有方案，若选了奇数个数贡献为 $-1$，若选了偶数个数贡献为 $1$。</p><p>这个东西可以用类似 <a href="/LOJ6089-小Y的背包计数问题（根号分治，计数dp）">LOJ6089</a> 的方法求：</p><p>令 $f_{i,j}$ 表示选 $i$ 个数和为 $j$ 的方案数。</p><p>由于选择的数两两不同，第一维的大小是 $O(\sqrt k)$ 的。</p><p>转移有两种方式：</p><ol><li>背包里的所有数加一。</li><li>背包里的所有数加一，并向背包中放入一个体积为 $1$ 的物品。</li></ol><p>$$<br>f_{i,j}=f_{i-1,j-i}+f_{i,j-i}<br>$$</p><p>但这样算可能会出现体积大于 $n$ 的物品。</p><p>具体来说，当 $j\ge n+1$ 时，会有 $f_{i-1,j-n-1}$ 种不合法的方案，需要减去。</p><p>计算完 dp 之后，分子的 $x^i$ 项系数即为 $\sum\limits_{j\ge0}(-1)^jf_{j,i}$</p><p>最后把分子和分母卷积起来即可，总时间复杂度为 $O(n+k\sqrt k)$ 或 $O(n\log p+k\sqrt k)$（取决于计算组合数与逆元的方式）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, f[<span class="number">2</span>][N], cur, ans, fact[N &lt;&lt; <span class="number">1</span>], invf[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll) fact[x] * invf[y] % mod * invf[x - y] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i] = (ll) fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        invf[i] = qpow(fact[i], mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = c(n - <span class="number">1</span> + k, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    f[cur][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, sum = <span class="number">1</span>; sum &lt;= k; sum += (++i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f[cur ^= <span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= k; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[cur][j] = (f[cur ^ <span class="number">1</span>][j - i] + f[cur][j - i]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= n + <span class="number">1</span>) f[cur][j] = (f[cur][j] - f[cur ^ <span class="number">1</span>][j - n - <span class="number">1</span>] + mod) % mod;</span><br><span class="line">            ans = (ans + (i &amp; <span class="number">1</span> ? <span class="number">-1l</span>l : <span class="number">1l</span>l) * f[cur][j] * c(n - <span class="number">1</span> + k - j, n - <span class="number">1</span>) % mod + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;求长度为 $n$ 逆序对数为 $k$ 的排列个数。&lt;/p&gt;
&lt;p&gt;$1\le n, k\le 10^5$，$k\le \binom n 2$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="生成函数" scheme="https://ouuan.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6089 小Y的背包计数问题（根号分治，计数dp）</title>
    <link href="https://ouuan.github.io/LOJ6089-%E5%B0%8FY%E7%9A%84%E8%83%8C%E5%8C%85%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%EF%BC%88%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB%EF%BC%8C%E8%AE%A1%E6%95%B0dp%EF%BC%89/"/>
    <id>https://ouuan.github.io/LOJ6089-小Y的背包计数问题（根号分治，计数dp）/</id>
    <published>2019-09-04T01:21:35.000Z</published>
    <updated>2019-09-04T01:24:35.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://loj.ac/problem/6089" target="_blank" rel="noopener">LOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>你有体积为 $i$ ($1\le i\le n$) 的物品 $i$ 个，同体积物品在计数时没有区别，求装满大小为 $n$ 的背包的方案数。</p><p>$1\le n\le 10^5$。</p><a id="more"></a><h2 id="简要作法"><a href="#简要作法" class="headerlink" title="简要作法"></a>简要作法</h2><p>体积大于等于 $\sqrt n$ 的物品可以无限选，所以考虑分开处理小于根号的和大于等于根号的。</p><h3 id="小于根号的"><a href="#小于根号的" class="headerlink" title="小于根号的"></a>小于根号的</h3><p>令  $f_{i, j}$ 表示从前 $i$ 种物品中选体积为 $j$ 的方案数。<br>$$<br>f_{i, j} = \sum\limits_{k = 0}^{\min(i, \left\lfloor\frac j i\right\rfloor)}f_{i-1, j - ik}<br>$$<br>可以使用模 $i$ 同余的前缀和优化。</p><p>这部分的时间复杂度为 $O(n\sqrt n)$，空间复杂度可以优化至 $O(n)$。</p><h3 id="大于等于根号的"><a href="#大于等于根号的" class="headerlink" title="大于等于根号的"></a>大于等于根号的</h3><p>令 $g_{i, j}$ 表示选择 $i$ 个物品体积为 $j$ 的方案数。</p><p>转移有两种方式：</p><ol><li>向背包中放入一个体积为 $\left\lceil\sqrt n\right\rceil$ 的物品。</li><li>将背包中所有物品体积加一。</li></ol><p>$$<br>g_{i, j} = g_{i - 1, j - \left\lceil\sqrt n\right\rceil} + g_{i, j - i}<br>$$</p><p>由于最多选 $\left\lfloor\sqrt n\right\rfloor$ 个物品，第一维大小为 $O(\sqrt n)$，这部分复杂度也是 $O(n\sqrt n)$。</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p><del>相当于求卷积的一位。</del></p><p>两部分加起来体积为 $n$ 就计入答案。</p><p>需要注意的是，第二部分中体积为 $k$ 的方案数是 $\sum\limits_{i=0}^{\left\lfloor\sqrt n\right\rfloor}g_{i, k}$，而不是某个单独的 dp 值。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">23333333</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, b, f[N], pre[N], g[<span class="number">2</span>][N], cur, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    b = <span class="keyword">int</span>(<span class="built_in">sqrt</span>(n) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; b; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) pre[j] = (f[j] + (j &gt;= i ? pre[j - i] : <span class="number">0</span>)) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; i * (i + <span class="number">1</span>)) f[j] = pre[j];</span><br><span class="line">            <span class="keyword">else</span> f[j] = (pre[j] - pre[j - i * (i + <span class="number">1</span>)] + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = f[n];</span><br><span class="line"></span><br><span class="line">    g[cur][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; b; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g[cur ^= <span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (i * b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * b; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            g[cur][j] = (g[cur ^ <span class="number">1</span>][j - b] + g[cur][j - i]) % mod;</span><br><span class="line">            ans = (ans + <span class="number">1l</span>l * f[n - j] * g[cur][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;你有体积为 $i$ ($1\le i\le n$) 的物品 $i$ 个，同体积物品在计数时没有区别，求装满大小为 $n$ 的背包的方案数。&lt;/p&gt;
&lt;p&gt;$1\le n\le 10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="根号分治" scheme="https://ouuan.github.io/tags/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>LGV 引理学习笔记</title>
    <link href="https://ouuan.github.io/LGV-%E5%BC%95%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/LGV-引理学习笔记/</id>
    <published>2019-09-03T13:54:43.000Z</published>
    <updated>2019-09-04T01:01:04.265Z</updated>
    
    <content type="html"><![CDATA[<p>Lindström–Gessel–Viennot lemma，即 LGV 引理，可以用来处理有向无环图上不相交路径计数等问题。</p><a id="more"></a><p>前置知识： <a href="https://oi-wiki.org/graph" target="_blank" rel="noopener">图论简介</a> 、 <a href="https://oi-wiki.org/graph/basic" target="_blank" rel="noopener">图论基础</a> 、 <a href="https://oi-wiki.org/math/matrix" target="_blank" rel="noopener">矩阵</a> 、 <a href="https://oi-wiki.org/math/gauss" target="_blank" rel="noopener">高斯消元求行列式</a> 。</p><p>LGV 引理仅适用于 <strong>有向无环图</strong> 。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p> $\omega(P)$ 表示 $P$ 这条路径上所有边的边权之积。（路径计数时，可以将边权都设为 $1$ ）（事实上，边权可以为生成函数）</p><p> $e(u, v)$ 表示 $u$ 到 $v$ 的 <strong>每一条</strong> 路径 $P$ 的 $\omega(P)$ 之和，即 $e(u, v)=\sum\limits_{P:u\rightarrow v}\omega(P)$ 。</p><p>起点集合 $A$ ，是有向无环图点集的一个子集，大小为 $n$ 。</p><p>终点集合 $B$ ，也是有向无环图点集的一个子集，大小也为 $n$ 。</p><p>一组 $A\rightarrow B$ 的不相交路径 $S$ ： $S_i$ 是一条从 $A_i$ 到 $B_{\sigma(S)_i}$ 的路径（ $\sigma(S)$ 是一个排列），对于任何 $i\ne j$ ， $S_i$ 和 $S_j$ 没有公共顶点。</p><p> $N(\sigma)$ 表示排列 $\sigma$ 的逆序对个数。</p><h2 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h2><p>$$<br>M = \begin{bmatrix}e(A_1,B_1)&amp;e(A_1,B_2)&amp;\cdots&amp;e(A_1,B_n)\\<br>e(A_2,B_1)&amp;e(A_2,B_2)&amp;\cdots&amp;e(A_2,B_n)\\<br>\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\<br>e(A_n,B_1)&amp;e(A_n,B_2)&amp;\cdots&amp;e(A_n,B_n)\end{bmatrix}<br>$$</p><p>$$<br>\det(M)=\sum\limits_{S:A\rightarrow B}(-1)^{N(\sigma(S))}\prod\limits_{i=1}^n \omega(S_i)<br>$$</p><p>其中 $\sum\limits_{S:A\rightarrow B}$ 表示满足上文要求的 $A\rightarrow B$ 的每一组不相交路径 $S$ ，$\det$ 表示行列式。</p><p>证明请参考 <a href="https://en.wikipedia.org/wiki/Lindström–Gessel–Viennot_lemma" target="_blank" rel="noopener">维基百科</a> 。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5852" target="_blank" rel="noopener">hdu5852 Intersection is not allowed!</a> </p><p>题意：有一个 $n\times n$ 的棋盘，一个棋子从 $(x, y)$ 只能走到 $(x, y+1)$ 或 $(x + 1, y)$ ，有 $k$ 个棋子，一开始第 $i$ 个棋子放在 $(1, a_i)$ ，最终要到 $(n, b_i)$ ，路径要两两不相交，求方案数对 $10^9+7$ 取模。 $1\le n\le 10^5$ , $1\le k\le 100$ ，保证 $1\le a_1&lt;a_2&lt;\dots&lt;a_n\le n$ , $1\le b_1&lt;b_2&lt;\dots&lt;b_n\le n$ 。</p><p>观察到如果路径不相交就一定是 $a_i$ 到 $b_i$ ，因此 LGV 引理中一定有 $\sigma(S)_i=i$ ，不需要考虑符号问题。边权设为 $1$ ，直接套用引理即可。</p><p>从 $(1, a_i)$ 到 $(n, b_j)$ 的路径条数相当于从 $n-1+b_j-a_i$ 步中选 $n-1$ 步向下走，所以 $e(A_i, B_j)=\binom{n-1+b_j-a_i}{n-1}$ 。</p><p>行列式可以使用高斯消元求。</p><p>复杂度为 $O(n+k^2(k + \log p))$ ，其中 $\log p$ 是求逆元复杂度。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, k, a[K], b[K], fact[N &lt;&lt; <span class="number">1</span>], m[K][K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll)out * x % mod;</span><br><span class="line">        x = (ll)x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll)fact[x] * qpow(fact[y], mod - <span class="number">2</span>) % mod * qpow(fact[x - y], mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N * <span class="number">2</span>; ++i) fact[i] = (ll)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt;= b[j]) m[i][j] = c(b[j] - a[i] + n - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> m[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m[i][i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m[j][i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">std</span>::swap(m[i], m[j]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!m[i][i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!m[j][i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> mul = (ll)m[j][i] * qpow(m[i][i], mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = i; p &lt;= k; ++p)</span><br><span class="line">                &#123;</span><br><span class="line">                    m[j][p] = (m[j][p] - (ll)m[i][p] * mul % mod + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) ans = (ll)ans * m[i][i] % mod;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lindström–Gessel–Viennot lemma，即 LGV 引理，可以用来处理有向无环图上不相交路径计数等问题。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="线性代数" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF1208G Polygons（数论）</title>
    <link href="https://ouuan.github.io/CF1208G-Polygons%EF%BC%88%E6%95%B0%E8%AE%BA%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1208G-Polygons（数论）/</id>
    <published>2019-08-27T12:08:56.000Z</published>
    <updated>2019-08-28T02:49:18.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/1208/problem/G" target="_blank" rel="noopener">CF</a></p><p><a href="https://www.luogu.org/problem/CF1208G" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给定 $n$ 和 $k$，你需要在圆上画 $k$ 个不超过 $n$ 条边的正多边形，求顶点去重后至少有多少个。</p><p>$3\le n\le10^6$，$1\le k\le n-2$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><ol><li><p>所有正多边形至少有一个公共顶点。可以感性理解，也可以看 <a href="https://codeforces.com/blog/entry/69357?#comment-538545" target="_blank" rel="noopener">imp 的评论</a>。</p></li><li><p>选了 $x$ 边形就选了 $x$ 的所有约数（除了 $1$ 和 $2$）边形一定最优，因为选约数相当于是免费的。</p></li></ol><p>那么，我们可以把 $x$ 边形的第 $y$ 个顶点看成分数 $\dfrac y x$，这样的话，在已经选了 $x$ 的所有约数的前提下，选 $x$ 边形的代价就是 $\varphi(x)$，问题就变成了求最小的 $k$ 个 $\varphi$ 之和。</p><p>但是，一边形和二边形是不存在的，需要特殊考虑。</p><p>“一边形”其实就是那个所有正多边形的公共顶点，只需要在计算答案时加一即可。</p><p>“二边形”会且仅会影响偶数边形，相当于“一旦选了某个偶数边形，答案加一”。因为 $\varphi(x)=1$ 的 $x$ 只有 $1$ 和 $2$， 而 $\varphi(x)=2$ 的 $x$ 只有 $3$, $4$, $6$，所以只有仅选择正三角形这种情况会受到影响。特判 $k=1$ 输出 $3$ 即可。</p><p>用线性筛 + nth_element（值域不大，其实也可以线性排序）即可做到 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k, p[N], tot, phi[N];</span><br><span class="line"><span class="keyword">bool</span> np[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) phi[x] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[x] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nth_element(phi + <span class="number">1</span>, phi + k + <span class="number">3</span>, phi + n + <span class="number">1</span>); <span class="comment">// 选了最小的 k+2 个，其中前两个是“一边形”和“二边形”的代价</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; ++i) ans += phi[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1208/problem/G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/CF1208G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给定 $n$ 和 $k$，你需要在圆上画 $k$ 个不超过 $n$ 条边的正多边形，求顶点去重后至少有多少个。&lt;/p&gt;
&lt;p&gt;$3\le n\le10^6$，$1\le k\le n-2$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://ouuan.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>一些注意事项</title>
    <link href="https://ouuan.github.io/%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://ouuan.github.io/一些注意事项/</id>
    <published>2019-08-18T16:22:36.000Z</published>
    <updated>2019-10-14T13:36:26.746Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>—— 简单题不 sb 是什么水平？</p><p>—— 国家队水平。</p></blockquote><a id="more"></a><h2 id="sb-错误"><a href="#sb-错误" class="headerlink" title="sb 错误"></a>sb 错误</h2><p>开 long long 时记得快读也要开 long long。</p><p>记得删调试信息，尤其是 cerr。</p><p>多测时要小心使用 memset。</p><p>operator 前面记得加返回值类型名。（dev c++ 不报错不警告）</p><p>跑的很快可能是因为被优化了，因此不要用空循环测运行用时。</p><p>（用于在线比赛）RE 可能是爆栈了。</p><p>不要假根号分治（可能大于 / 小于根号的同样可以处理小于 / 大于根号的）。</p><h2 id="sb-想不到"><a href="#sb-想不到" class="headerlink" title="sb 想不到"></a>sb 想不到</h2><p>多次二分时想一想能不能用双指针。</p><p>计数 → 什么是重复的，什么是相同的。要做到不重不漏</p><p>最优化 → 什么是不优的，什么是不劣的。</p><p>要是怎么样就好了 → 能不能转化成这样。</p><p>存在反例 → 反例能否特殊处理。</p><p>只用管大小而不关心具体值 → 从小到大、从大到小考虑 / 二分答案转成 01。</p><p>成双成对的元素，在一起怎么样，不在一起怎么样，经常可以用随机数异或来处理。</p><p>把整个序列分成若干段，每段求一个值再加起来求最值，暴力是 DP，经常可以用决策单调性优化。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;—— 简单题不 sb 是什么水平？&lt;/p&gt;
&lt;p&gt;—— 国家队水平。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="注意事项" scheme="https://ouuan.github.io/tags/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>AGC007F Shik and Copying String（贪心，实现）</title>
    <link href="https://ouuan.github.io/AGC007F-Shik-and-Copying-String%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>https://ouuan.github.io/AGC007F-Shik-and-Copying-String（贪心，实现）/</id>
    <published>2019-08-16T15:34:10.000Z</published>
    <updated>2019-08-18T09:37:44.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/AT2173" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://atcoder.jp/contests/agc007/tasks/agc007_f" target="_blank" rel="noopener">AtCoder</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你初始串 $S_0$ 和目标串 $T$，每一步操作可以将当前串 $S_i$ 变成 $S_{i+1}$，其中：</p><p>$$S_{i+1}[j]=\begin{cases}S_i[1]&amp;j=1\\S_i[j]\text{ 或 }S_{i+1}[j-1]&amp;j&gt;1\end{cases}$$</p><p>求最少需要几次操作可以将当前串变为 $T$。</p><p>串长 $10^6​$。</p><a id="more"></a><p>这题题解真的难写..之前觉得别人的题解写的不清楚，然而自己也写的不是很清楚…</p><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，这个过程可以用折线表示：</p><img src="/AGC007F-Shik-and-Copying-String（贪心，实现）/zx.png"><p>（如果您在色觉方面存在障碍，还请见谅。）</p><p>可以发现，每条折线都尽量靠右是最优的，一旦画不下了，就加一行。</p><p>现在问题变成了如何高效地维护这一贪心。</p><p>当 $S_0=T$ 时，先特判掉，输出 $0​$。</p><p>由于每次拐点都会往左下移动一格，我们可以用队列来维护当前折线的每个拐点（折线往右拐的点，也就是 $S_i[j]=S_i[j-1]$ 的 $j-1$ 这个点）（不包括最后一行的拐点），其中靠近队首表示靠下（离 $T$ 较近）的拐点，靠近队尾表示靠上（靠近 $S_0$）的拐点。</p><p>详见代码（因为这题文字写出来不如代码好理解）：</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == t) <span class="comment">// 特判两串相等</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> up = n - <span class="number">1</span>, down = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (down &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (down &amp;&amp; t[down - <span class="number">1</span>] == t[down]) --down; <span class="comment">// 找到当前折线在最后一行最左的位置</span></span><br><span class="line">        <span class="keyword">while</span> (up &gt;= <span class="number">0</span> &amp;&amp; (up &gt; down || s[up] != t[down])) --up; <span class="comment">// 找到当前折线在第一行最左的位置</span></span><br><span class="line">        <span class="keyword">if</span> (up &lt; <span class="number">0</span>) <span class="comment">// 如果第一行没有对应的字符，输出无解</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; q.front() - q.size() &gt;= down) q.pop(); <span class="comment">// 把当前折线不会碰到的部分弹出</span></span><br><span class="line">        <span class="keyword">if</span> (up != down) q.push(up); <span class="comment">// 如果当前折线真的是“折线”而不是竖直下来不拐弯，就把 S1 的拐点压入队列</span></span><br><span class="line">        ans = max(ans, (<span class="keyword">int</span>)q.size() + <span class="number">1</span>); <span class="comment">// 后文会解释为什么这样更新答案</span></span><br><span class="line">        --down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>这个维护拐点的方式应该画画图就能明白。</p><p>最后剩下一个问题：为什么是这样更新答案？</p><p>换句话说：为什么答案是拐点个数的历史最大值？（加一是因为没有维护最后一行的拐点）</p><p>如果没有这个 pop 操作，应该是很显然的。但 pop 操作破坏了“队列中每个元素对应除最后一行外每一行最左位置”这个性质。</p><p>这里需要一个引理：</p><blockquote><p>除了最后一行的拐点，其它拐点一定位于连续的前几行。</p></blockquote><p>我们可以归纳地证明：</p><ul><li>对于最右的那条折线，显然成立。</li><li>对于之后的每条折线，一定是先贴着上一条折线，再直接往下到最后一行。由于上一条折线满足引理，如果中途有一段没有拐点而后又出现拐点，中途的那一段就没有紧贴上一条折线。</li></ul><p>有了这个引理，就可以<del>感性理解</del>说明为什么有 pop 操作的情况下答案依然是拐点个数的历史最大值了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/AT2173&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/agc007/tasks/agc007_f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AtCoder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你初始串 $S_0$ 和目标串 $T$，每一步操作可以将当前串 $S_i$ 变成 $S_{i+1}$，其中：&lt;/p&gt;
&lt;p&gt;$$S_{i+1}[j]=\begin{cases}S_i[1]&amp;amp;j=1\\S_i[j]\text{ 或 }S_{i+1}[j-1]&amp;amp;j&amp;gt;1\end{cases}$$&lt;/p&gt;
&lt;p&gt;求最少需要几次操作可以将当前串变为 $T$。&lt;/p&gt;
&lt;p&gt;串长 $10^6​$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="实现" scheme="https://ouuan.github.io/tags/%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>一些有趣的小工程</title>
    <link href="https://ouuan.github.io/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E5%B0%8F%E5%B7%A5%E7%A8%8B/"/>
    <id>https://ouuan.github.io/一些有趣的小工程/</id>
    <published>2019-08-10T11:22:23.000Z</published>
    <updated>2019-10-12T11:13:09.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说实话我觉得竞赛题目挺坑爹的……木有啥意思。人类为何要出题刁难人类。</p><p>我更喜欢做的事情是写点工程啥的 &gt;_&lt;… 做做小游戏挺好玩的。</p><p>—— vfk 《四色的 NOI》</p></blockquote><p>（<del>这算哪门子引用啊</del>）</p><a id="more"></a><h3 id="BZOJ-Local-Judge"><a href="#BZOJ-Local-Judge" class="headerlink" title="BZOJ-Local-Judge"></a><a href="https://github.com/ouuan/BZOJ-Local-Judge" target="_blank" rel="noopener">BZOJ-Local-Judge</a></h3><p>我自己现在做 BZOJ 上有的题（5000 之前）全都用这个了。真的非常方便。</p><h3 id="Hinata-Online-Judge"><a href="#Hinata-Online-Judge" class="headerlink" title="Hinata Online Judge"></a><a href="https://github.com/ouuan/Hinata-Online-Judge" target="_blank" rel="noopener">Hinata Online Judge</a></h3><p>是 UOJ 的魔改，有 <a href="https://github.com/ouuan/Hinata-Online-Judge/issues/1" target="_blank" rel="noopener">挺多 feature</a> 的。</p><h3 id="Despised"><a href="#Despised" class="headerlink" title="Despised"></a><a href="https://github.com/ouuan/Despised" target="_blank" rel="noopener">Despised</a></h3><p>除了选项单一，<del>我觉得这是我用过体验最好的被鄙视小程序了</del>。感觉加一些错误选项比较好，不然背着背着就变成背错误选项了。<del>希望明年不要咕。</del></p><h3 id="Tree-Generator"><a href="#Tree-Generator" class="headerlink" title="Tree-Generator"></a><a href="https://github.com/ouuan/Tree-Generator" target="_blank" rel="noopener">Tree-Generator</a></h3><p>造树挺方便的。（<del>顺便 <a href="http://codeforces.com/blog/entry/68835" target="_blank" rel="noopener">求 up</a></del>）。</p><h3 id="segmentTree"><a href="#segmentTree" class="headerlink" title="segmentTree"></a><a href="https://github.com/ouuan/segmentTree" target="_blank" rel="noopener">segmentTree</a></h3><p>基础线段树万能板子，只用写两个函数（merge 和 update）就拥有了一棵线段树。（<del>继续 <a href="https://codeforces.com/blog/entry/70467" target="_blank" rel="noopener">求 up</a></del>）</p><h3 id="Anti-YiGeDingLia"><a href="#Anti-YiGeDingLia" class="headerlink" title="Anti-YiGeDingLia"></a><a href="https://github.com/ouuan/Anti-YiGeDingLia" target="_blank" rel="noopener">Anti-YiGeDingLia</a></h3><p><a href="/antiyigedinglia">Demo</a></p><p>大家知道 QQ 的接龙红包吗？我写这个东西的时候接龙红包特别火，然而大家都很喜欢“一个顶俩” qaq。有了这个项目，当你看到 yi 结尾时就能及时意气高昂啦！</p><h3 id="LuoguPaintBoard"><a href="#LuoguPaintBoard" class="headerlink" title="LuoguPaintBoard"></a><a href="https://github.com/ouuan/LuoguPaintBoard" target="_blank" rel="noopener">LuoguPaintBoard</a></h3><p>顾名思义，是画洛谷冬日绘板用的。<del>我明年一定画个ひなた！</del></p><h3 id="Code-Disturber"><a href="#Code-Disturber" class="headerlink" title="Code-Disturber"></a><a href="https://github.com/ouuan/Code-Disturber" target="_blank" rel="noopener">Code-Disturber</a></h3><p>并没有什么用，<del>实际作用是用 emoji 美化代码。</del></p><h3 id="SwapArrayDimension"><a href="#SwapArrayDimension" class="headerlink" title="SwapArrayDimension"></a><a href="https://github.com/ouuan/SwapArrayDimension" target="_blank" rel="noopener">SwapArrayDimension</a></h3><p>或许是个实用的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说实话我觉得竞赛题目挺坑爹的……木有啥意思。人类为何要出题刁难人类。&lt;/p&gt;
&lt;p&gt;我更喜欢做的事情是写点工程啥的 &amp;gt;_&amp;lt;… 做做小游戏挺好玩的。&lt;/p&gt;
&lt;p&gt;—— vfk 《四色的 NOI》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（&lt;del&gt;这算哪门子引用啊&lt;/del&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工程" scheme="https://ouuan.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1758 [WC2010]重建计划（二分答案，长链剖分）</title>
    <link href="https://ouuan.github.io/BZOJ1758-WC2010-%E9%87%8D%E5%BB%BA%E8%AE%A1%E5%88%92%EF%BC%88%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%EF%BC%8C%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ1758-WC2010-重建计划（二分答案，长链剖分）/</id>
    <published>2019-07-23T12:24:05.000Z</published>
    <updated>2019-08-27T12:58:06.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P4292" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一棵带边权的树，求所有长度在 $[L,U]$ 这个范围内的路径里平均权值（总权值除以边数）的最大值。</p><p>$2\le n\le 10^5$，保证至少有一条满足要求的路径。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p><code>#define 父亲 单亲</code>（<del>如果有谴责“父亲节点”人士的话</del>）</p><p>首先可以二分答案，就可以把每条边的边权都减去二分的答案，然后转化为判断有没有权值和为正的符合长度要求的路径。</p><p>然后有点分治和长链剖分两种做法，本题解介绍长链剖分的做法。</p><p>由于合并时要区间查询最大值，可以用线段树来维护。</p><p>具体来说，我们可以像重链剖分一样计算 dfs 序时优先 dfs 重（长）儿子，这样的话长链的 dfs 序就是连续的一段。当我们处理到子树 $u$ 时，$dfn_u+k$ 这个位置上的值表示自 $u$ 起向下长度为 $k$ 的路径的最大权值。可以发现不同长链之间不会互相影响，而重儿子的信息只要一个区间加就可以继承给父亲。所以，每次先 dfs 重儿子把信息继承上来，并检查有没有权值和为正的符合长度要求的路径，然后 dfs 轻儿子并枚举深度，在线段树中查询对应的一段长度合法的区间的最大值来检查有没有权值和为正的符合长度要求的路径，并将轻儿子信息也合并上来。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>代码用了 CF 模板，还请谅解..（只不过这种题就算按正常码风写估计也很难看懂吧..不如自己思考细节如何实现）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="keyword">int</span> randint</span><br><span class="line">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;<span class="keyword">return</span>(<span class="keyword">int</span>)rng()%(r-l+<span class="number">1</span>)+l;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">read()&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c</span><br><span class="line">=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T</span><br><span class="line">&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span></span></span></span><br><span class="line"><span class="function"><span class="params">&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%s"</span>,x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;</span><br><span class="line">is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write</span><br><span class="line">(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span></span><br><span class="line">,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%s"</span>,x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span></span><br><span class="line">enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value ||(</span><br><span class="line">is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const</span><br><span class="line">&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)</span><br><span class="line">read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span></span><br><span class="line">iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;</span><br><span class="line"><span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);sp;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span></span><br><span class="line">wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span>*x)</span></span>&#123;write(x);sp;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);br;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args</span></span></span><br><span class="line"><span class="function"><span class="params">...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wtb(</span><br><span class="line">args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...</span><br><span class="line">Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="keyword">void</span> wte</span><br><span class="line">(<span class="keyword">const</span> T&amp;x,Args...args)&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span></span><br><span class="line">x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (cur &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (cur &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> mx[N &lt;&lt; <span class="number">2</span>], tag[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ms(mx, <span class="number">0</span>);</span><br><span class="line">        ms(tag, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mx[x] += y;</span><br><span class="line">        tag[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(tag[cur]) &lt; eps) <span class="keyword">return</span>;</span><br><span class="line">        add(ls, tag[cur]);</span><br><span class="line">        add(rs, tag[cur]);</span><br><span class="line">        tag[cur] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        up(mx[cur], x);</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">if</span> (p &lt; mid) modify(ls, l, mid, p, x);</span><br><span class="line">        <span class="keyword">else</span> modify(rs, mid, r, p, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">madd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) add(cur, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pushdown(cur);</span><br><span class="line">            madd(ls, l, mid, L, R, x);</span><br><span class="line">            madd(rs, mid, r, L, R, x);</span><br><span class="line">            mx[cur] = max(mx[ls], mx[rs]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span> -INF;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> mx[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">return</span> max(query(ls, l, mid, L, R), query(rs, mid, r, L, R));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) <span class="keyword">return</span> mx[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">if</span> (p &lt; mid) <span class="keyword">return</span> query(ls, l, mid, p);</span><br><span class="line">        <span class="keyword">return</span> query(rs, mid, r, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], edge[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">    edge[cnt] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, mnlen, mxlen, dep[N], son[N], f[N], dfn[N], dfntot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = <span class="number">1</span>;</span><br><span class="line">    SON(i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        f[v] = edge[i];</span><br><span class="line">        dfs1(v, u);</span><br><span class="line">        <span class="keyword">if</span>(up(dep[u], dep[v] + <span class="number">1</span>)) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++dfntot;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) dfs2(son[u], u);</span><br><span class="line">    SON(i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) dfs2(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag || !son[u]) <span class="keyword">return</span>;</span><br><span class="line">    dfs(son[u], u, x);</span><br><span class="line">    t.madd(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[son[u]], dfn[son[u]] + dep[son[u]], f[son[u]] - x);</span><br><span class="line">    <span class="keyword">if</span> (dep[u] - <span class="number">1</span> &gt;= mnlen &amp;&amp; t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[u] + mnlen, min(dfn[u] + mxlen + <span class="number">1</span>, dfn[u] + dep[u])) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SON(i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(v, u, x);</span><br><span class="line">            t.madd(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[v], dfn[v] + dep[v], f[v] - x);</span><br><span class="line">            For (j, max(<span class="number">0l</span>l, mnlen - dep[u]), min(mxlen - <span class="number">1</span>, dep[v] - <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[v] + j) +</span><br><span class="line">                    t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, max(<span class="number">0l</span>l, mnlen - j - <span class="number">1</span>) + dfn[u], min(dep[u], mxlen - j) + dfn[u]) &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            For (j, <span class="number">0</span>, dep[v] - <span class="number">1</span>) t.modify(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[u] + j + <span class="number">1</span>, t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[v] + j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    t.reset();</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n, mnlen, mxlen);</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">2</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        read(u, v, w);</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, <span class="number">40</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf"</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一棵带边权的树，求所有长度在 $[L,U]$ 这个范围内的路径里平均权值（总权值除以边数）的最大值。&lt;/p&gt;
&lt;p&gt;$2\le n\le 10^5$，保证至少有一条满足要求的路径。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="二分答案" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="长链剖分" scheme="https://ouuan.github.io/tags/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>NIO9102 落雨大</title>
    <link href="https://ouuan.github.io/NIO9102-%E8%90%BD%E9%9B%A8%E5%A4%A7/"/>
    <id>https://ouuan.github.io/NIO9102-落雨大/</id>
    <published>2019-07-15T01:48:38.000Z</published>
    <updated>2019-07-22T10:37:36.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我也来到 NOI 了，呢。</p></blockquote><a id="more"></a><p style="text-align: center"><font color="red" size="5em"><strong>郑重声明</strong></font></p><p style="text-indent: 2em">本博客内所有与 NOI2019（第 36 届全国青少年信息学奥林匹克竞赛）试题相关之内容，均在对应之机试与复评结束之后发布，详细发布时间与内容可以在 <a href="https://github.com/ouuan/ouuan.github.io/commits/master" target="_blank" rel="noopener">commits</a> 中查看。</p><h2 id="Day-499122177"><a href="#Day-499122177" class="headerlink" title="Day 499122177"></a>Day 499122177</h2><p>广二宿舍还是没有网.</p><p>床边的插座不是一般人能插的..（Orz lbw 插上去了）然而因为有时候要去机房（其实基本上也就刚到那天晚上没事去了..），所以后来还是拔下来了。然后发现不带 220V 转 USB 母头的插头真是个错误的决定..虽然可以用笔记本充电，可如果在寝室门口充电就没法用电脑，所以没法一会儿充电脑用手机、一会儿充手机用电脑。</p><p>晚餐有点抽卡的感觉..看名字很难看出拿到手上的到底是什么东西（</p><p>吃完晚饭去自习室水了半小时群，然后打短裙 OJ。</p><p>切完前两题，好像 rk 5..</p><p>然后看 C，问满足一堆条件的个数..一眼容斥..然后真的写了 1h 的容斥 qaq</p><p>好不容易过拍了，提交，又 WA 了..</p><p>在群里一问，woc，p 不是排列…</p><p>5 min 后过了，愉快地垫底了..</p><p>过于自闭，看了眼 D，没秒掉，就懒得去想了。</p><p>赛后听说 C 可以状压，一想，真的可以状压…..学傻了.webp</p><h2 id="Day-557219762"><a href="#Day-557219762" class="headerlink" title="Day 557219762"></a>Day 557219762</h2><p>咕掉早饭把火车上剩的吃了。</p><p>（开幕式竟然没有 wh 讲话）</p><p>（<del>灯光打得好！覆盖方位广！给灯光师点个赞！</del>）</p><p>果然有<del>公开处刑</del>大头照展示，只不过速度比较快，问题不大。</p><p>感觉大家喊的口号都听不太清啊..</p><p><del>明 示 爆 零 ：</del></p><img src="/NIO9102-落雨大/zero0.jpg"><img src="/NIO9102-落雨大/zero1.jpg"><p>dzd 的讲话中，有这么一段话：</p><blockquote><p>无论何种情况，这个竞赛都会继续下去。因为这个竞赛是正当的，是正义的，合法的。</p></blockquote><div><div class="fold_hider"><div class="close hider_title">听到这段话，又想起 ひなた 在桥边含泪喊出的那段话了。</div></div><div class="fold"><blockquote><p>但是，我没有后悔，不能后悔，因为，我所做的事情一定没有错！</p></blockquote><p>（欢迎大家来 <a href="https://hitokoto.cn/?id=4359" target="_blank" rel="noopener">Hitokoto</a> 点赞 <button id="hitokoto-like-4359" onclick="hitokotoLike('4359', '#hitokoto-like-4359')" title="通过给句子点赞可以增加其出现概率，由于技术原因并不能在博客中显示赞数与点赞是否成功的信息（红心表示成功发送点赞请求，但如果同 IP 重复点赞就会失败），如需查看可以点击左边的“Hitokoto”链接。"><i class="menu-item-icon fa fa-fw fa-heart"></i></button>）</p><p>（当然还有 <a href="https://hitokoto.cn/?id=4358" target="_blank" rel="noopener">这句</a> <button id="hitokoto-like-4358" onclick="hitokotoLike('4358', '#hitokoto-like-4358')" title="通过给句子点赞可以增加其出现概率，由于技术原因并不能在博客中显示赞数与点赞是否成功的信息（红心表示成功发送点赞请求，但如果同 IP 重复点赞就会失败），如需查看可以点击左边的“这句”链接。"><i class="menu-item-icon fa fa-fw fa-heart"></i></button>）</p></div></div><p>NOI 可能真的如 dzd 所说，带有一些“净化灵魂”的成分在吧。</p><p>最后<del>鸽子蛋</del>破不开，<del>明示摆脱不了爆零的命运</del>。</p><p>（离场后目击 dzd 被采访）</p><p>中餐感觉海星..还是得看看别人买到的是什么再选。（千万不要用排除法来选</p><p>中午写了写博客，<a href="https://github.com/ouuan/Despised/" target="_blank" rel="noopener">做了遍笔试</a>，睡了会儿觉。</p><p>还是感觉好方..毕竟被鄙视用的错误选项从来没变过（</p><p>结果笔试挺水的..题目和题库里完全一样（没有之前在 vfk 博客里看见的“那道题不选 foobar.sh”之类的情况），很多题都不是四个选项而是更少，所以没有任何奇怪的错误选项..</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>看到 T1 就很快想出了 70 分的拆点做法，写完之后几乎一遍过了大样例。</p><p>然后去把 T2 和 T3 的 20 + 28 写了，此时 $1.5h​$ 左右。</p><p>然后去写 T1 $A=0$ 的部分分，各种写挂写了接近 $2h$..</p><p>然后感觉 T2 还是没什么想法，T3 想了几个假贪心，又想了几个假网络流，最后还剩半小时的时候想到了一个考后才叉掉的 $n^3\log$ 的假贪心（讲题时发现稍微改动一下就是正确的 40 分做法..），<del>幸好</del>没写完，不然万一过了样例就 GG 了。</p><p>出来之后发现大家都 $148​$ 起步..T1 有正解的，但还有一堆利用数据范围改小的，以及一堆 $70​$ 分算错复杂度的。</p><p>T1 我写的数据分治是不可能 $85​$ 以上的，所以特别怕 $70​$ 分做法最后 $90​$ 或者 $95​$。</p><p>然后下午一看，我自己倒是没挂分，$85+20+28=133​$，可其它和我写一样东西的都是 $100+20+40​$..</p><p>T1 数据范围不知道是不是为了防止爆 int 而改小就算了，复杂度完全错误的 $70​$ 分做法竟然直接 A 了..就很自闭。T3 其他人的 $n^4​$ 常数比我小一截，我也不好说什么..只不过那些“数据有梯度”的出题人凭什么不多给几档部分分啊？</p><p>感觉还是赛制问题啊..没有 Subtask 并且现场评测的 OI 赛制出题人也很无奈吧..</p><p>把 NOI 嘉年华咕了（玩一些体育运动之类的游戏得奖品什么的），回寝室躺了一会儿，又看了一遍 <a href="https://blog.csdn.net/VFleaKing/article/details/90384225" target="_blank" rel="noopener">四色的NOI</a>，感觉自己的心境和 vfk Cu 那年挺像的..只不过就算把 vfk Fe 那年去掉，我也比 vfk 少一年啊..</p><p>讲题的话..放一张 T2 讲题的图吧：</p><img src="/NIO9102-落雨大/d1t2.jpg"><h2 id="Day-116195171"><a href="#Day-116195171" class="headerlink" title="Day 116195171"></a>Day 116195171</h2><p>今天是社会活动日。</p><p>听说真的有人没去..不知道会不会扣分。</p><p><del>坐 D7 的被奶了：</del></p><img src="/NIO9102-落雨大/d7700.jpg"><p>在博物馆先打了把四人南，然后去随便逛了半个小时。</p><p>暗示 route 数据水：</p><img src="/NIO9102-落雨大/routesea.jpg"><p>暗示 Day 2 Au 线 30 Ag 线 20：</p><img src="/NIO9102-落雨大/auag.jpg"><p><del>假毛</del>，<del>请大家自行脑补假毛在风中打转的样子</del>。</p><img src="/NIO9102-落雨大/wuliang.jpg"><p>晚上是 zzq 和象的见面会，感觉还是象比较励志，其它三名国家队都是小学开始学的..刷题量好像非常恐怖，而“好好打模拟赛”对我来说几乎不需要解释..我知道平时我是怎样在打模拟赛的，“这个知识点还没学”，“这题没意思”，“题解看不懂”，“这题太简单了，只是考场 sb 了而已，懒得写”，“我先按我的计划补知识点，模拟赛不重要”，最后一题都没有改。这样的话我又在渴求什么呢。</p><blockquote><p>以为自己很努力了，但是不知为何还是系统告诉我：Mission Failed. Play Again.</p><p>不知道原因。</p><p>张着嘴巴我可以说出一堆：经验少啦，在弱省啦，题做得少啦，数学太弱啦……</p><p>但是这是不是真正的原因？怎样解决？</p><p>天地无言。</p><p>—— vfk《四色的NOI》</p></blockquote><p>可我甚至不能“以为自己很努力了”。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>今天的纸质题面考前是正面朝上的。</p><p>果然有交互，还依然是 I 君。</p><p>等等，T2 斗主地？</p><p>等等，T1 128MB？简洁数据结构.pdf</p><p>开始考试，T1，线段树优化连边？爆空间。88 可能能卡过？感觉很难卡，还得数据分治，写了不到 5min 就放弃了，去写了 72 分。</p><p>T2，dp 算洗牌前是 $i​$ 洗牌后是 $j​$ 的概率，第四个点矩阵快速幂，很快就写完了，一遍过样例。这个时候两小时多一点。</p><p>考前就想着靠交互翻盘了，还剩接近 3h 肝交互，感觉海星。</p><p>这个数据范围好像不太统一啊..既然强制数据分治的话不如会一档写一档好了。</p><p>先把 $\mathcal O(n^2)$ 次询问的写了，一开始还写错了，写成了 $n$ 次修改，差点挂掉 $8$ 分。</p><p>然后想了一会儿想到了性质 $A$ 一个期望 $\log$ 的做法。写完 + 调完之后 3h 多一点。</p><p>然后开始想 T3 各种各样的部分分，乱搞了 2h 一无所获。</p><p>出来之后发现大家 T1 都会 K-D Tree，又听说 T2 结论题可以打表..感觉 Ag 基本上没了啊。</p><p><del>我博客用模 998244353 的等比数列，是不是暗示 T2 模 998244353 等差数列，会被禁赛啊。</del></p><p>下午看成绩，$72+30+36=138$，发现 T2 30，原因是 a 数组开小了…只不过不挂分应该也是 Cu，<del>问题不大</del>。</p><p><del>讲题的时候松松松把 NOI 弄成了鸭子营。</del></p><p>T2 出题人表示：不止要让训练有素的选手进队，也要让那些能够发现题目性质的选手进队。感觉要是不能打表的话这样的想法也挺有道理的..</p><p>出排名，果然 <font color="#B87333">Cu</font> 了。</p><p>HB 只有 jxl 和 lwc Ag。只不过两个 E 都上了 Ag 分数线。</p><p>zyy 捧杯了，zzy rk2，zzq rk3，_rqy rk4，jumpmelon rk6，myh rk7，zhf rk19。</p><p>看到熟悉的名字进集训队的感觉真的很奇妙。</p><p>晚上去高校宣讲看热闹。</p><p>清华那位老师的气质真的就完全不一样（之前 THUWC 和 THUSC 的时候就体会地非常明显了），有条不紊地讲出硬核的优点（而不是那些花里胡哨的东西）（也没有一种”我是来完成任务“的感觉）（也不会说“那我今天就用这个 PPT 来讲一下”“那我就不用 PPT 了”这样的话），感觉讲了非常多，最后正好卡时讲完了（其它学校都感觉没讲啥就匆匆忙忙结束了）（<del>只不过这也可能是学校实力原因</del>）。（顺带一提，THU 没用 PPT）</p><p>北大：我准备了一个 PPT，发邮件的时候挂了，今天我把 PPT 带过来了，我是干讲还是用 PPT，你们觉得怎么样比较好？</p><p>主持人：抱歉，请遵守规则口头讲。</p><p>北大：我觉得准备这么一个 PPT 不给大家看实在是对不起大家。</p><p>（说着就打开了 PPT）</p><p>？？？</p><p>天津大学很快就讲完了，然后说“不用打铃了”，很多人鼓掌..感觉 THU 那样打铃的同时有条不紊地结束才比较帅啊（</p><p>感觉武大也讲的海星，也是真的在讲而不是完成任务，感觉比较自然。</p><p>华东师范大学：男生们可以和很多文科的女生交流。女生们也不要担心，因为你们也可以和很多文科的女生交流。emm…</p><p>排在最后的三个学校直接咕了…</p><p><del>只不过我一个 Cu 凭什么评价高校宣讲啊。</del></p><p>“我也是有约的人了！”「两年 OI 换一纸签约」—— 一名拿到人大一等约的我省高二选手。</p><p>好像还有面试到晚上十二点，最后拿到“替补二等约”的选手..</p><p>看到身边的人退役更是一种说不出的感觉。</p><h2 id="Day-232390342"><a href="#Day-232390342" class="headerlink" title="Day 232390342"></a>Day 232390342</h2><p>早上咕掉嘉年华，去机房把 D1T1 写了，然后试图学习 k-d tree。</p><p>感觉资料还是太少了，也不知道网上那些复杂度是不是对的..</p><p>下午闭幕式。大家该 <font color="gold">Au</font> 的 <font color="gold">Au</font>，该捧<font color="gold">杯</font>的捧<font color="gold">杯</font>，<del>该扫射的灯光师继续扫射</del>。</p><p>结束之后真的落雨大了..下了一个多小时的大雨，<del>选手袜子没了</del>。</p><img src="/NIO9102-落雨大/pb.jpg"><img src="/NIO9102-落雨大/Cu.jpg"><p>我双色 NOI 的第一色，是<font color="#B87333">古铜色</font>的。</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>本来不想写 Day 4 的，但广州南的便利店竟然没有泡面，<del>必须得吐槽一下</del>。</p><p>G1114 竟然没有插座，<del>更得吐槽了</del>。</p><p>那么，长沙一中再会。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><del>估计会比较咕</del></p><h3 id="D1T1"><a href="#D1T1" class="headerlink" title="D1T1"></a><a href="https://loj.ac/problem/3156" target="_blank" rel="noopener">D1T1</a></h3><p>“去年 D1T1 最短路，今年也是呢”选手自闭了。</p><p>出考场听说斜率优化，以为是斜率优化预处理等待时间的连边然后跑最短路。</p><p>看了题解才知道原来这题根本不用最短路，连 DAG 最短路都不用..</p><p>把边按结束时间（$q_i$）排序，令 $f_i$ 表示走完第 $i$ 条边后还需要的烦躁值的最小值。</p><p>$\begin{aligned}f_i&amp;=\min\limits_{p_j\ge q_i,x_j=y_i}\{A(p_j-q_i)^2+B(p_j-q_i)+C+q_j-q_i+f_j\}\\&amp;=\min\limits_{p_j\ge q_i,x_j=y_i}\{Ap_j^2+Bp_j+q_j+f_j-2Ap_jq_i\}+Aq_i^2-Bq_i+C-q_i\end{aligned}​$</p><p>然后就可以斜率优化了。（因为转移有 $x_j=y_i$ 的限制，要开 $n$ 个双端队列，但<strong>不要开 deque</strong>，开大量 deque 是会 MLE 的。写法的话，用 vector 存，普通方法写就好了。）</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><p>按理来说题解里不应该包含模板，只不过这也不是什么官方题解，我就懒得换成正常写法了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="keyword">int</span> randint</span><br><span class="line">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;<span class="keyword">return</span>(<span class="keyword">int</span>)rng()%(r-l+<span class="number">1</span>)+l;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">read()&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c</span><br><span class="line">=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T</span><br><span class="line">&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span></span></span></span><br><span class="line"><span class="function"><span class="params">&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%s"</span>,x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;</span><br><span class="line">is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write</span><br><span class="line">(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span></span><br><span class="line">,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%s"</span>,x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span></span><br><span class="line">enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value ||(</span><br><span class="line">is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const</span><br><span class="line">&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)</span><br><span class="line">read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span></span><br><span class="line">iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;</span><br><span class="line"><span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);sp;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span></span><br><span class="line">wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span>*x)</span></span>&#123;write(x);sp;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);br;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args</span></span></span><br><span class="line"><span class="function"><span class="params">...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wtb(</span><br><span class="line">args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...</span><br><span class="line">Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="keyword">void</span> wte</span><br><span class="line">(<span class="keyword">const</span> T&amp;x,Args...args)&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span></span><br><span class="line">x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a, b, c, id[M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, p, q, f;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> q &gt; b.q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Point(<span class="keyword">int</span> j = <span class="number">0</span>): x(<span class="number">2</span> * a * e[j].p), y(a * e[j].p * e[j].p + b * e[j].p + e[j].q + e[j].f) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Point &amp; a1, <span class="keyword">const</span> Point &amp; a2, <span class="keyword">const</span> Point &amp; a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a1.x == a2.x) <span class="keyword">return</span> a1.y &lt; a2.y;</span><br><span class="line">        <span class="keyword">return</span> (a1.y - a3.y) * (a2.x - a3.x) &gt;= (a2.y - a3.y) * (a1.x - a3.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y - k * x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Deque</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; q;</span><br><span class="line">    <span class="keyword">int</span> ql, qr;</span><br><span class="line">    Deque()</span><br><span class="line">    &#123;</span><br><span class="line">        q.resize(<span class="number">1</span>);</span><br><span class="line">        ql = <span class="number">1</span>;</span><br><span class="line">        qr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ql &gt; qr; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> Point &amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ++qr;</span><br><span class="line">        <span class="keyword">if</span> (q.size() == qr) q.push_back(x);</span><br><span class="line">        <span class="keyword">else</span> q[qr] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ql &lt; qr &amp;&amp; q[ql + <span class="number">1</span>].cal(e[i].q) &lt;= q[ql].cal(e[i].q)) ++ql;</span><br><span class="line">        e[i].f = q[ql].cal(e[i].q) + a * e[i].q * e[i].q - b * e[i].q + c - e[i].q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> Point &amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ql &lt; qr &amp;&amp; cmp(x, q[qr], q[qr - <span class="number">1</span>])) --qr;</span><br><span class="line">        push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    read(n, m, a, b, c);</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m) read(e[i].u, e[i].v, e[i].p, e[i].q);</span><br><span class="line">    ++m;</span><br><span class="line">    e[m].u = <span class="number">0</span>;</span><br><span class="line">    e[m].v = <span class="number">1</span>;</span><br><span class="line">    e[m].p = <span class="number">0</span>;</span><br><span class="line">    e[m].q = <span class="number">0</span>;</span><br><span class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m) id[i] = i;</span><br><span class="line">    sort(id + <span class="number">1</span>, id + m + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> e[x].p &gt; e[y].p; &#125;);</span><br><span class="line">    <span class="keyword">int</span> idp = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].v == n)</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (idp &lt;= m &amp;&amp; e[id[idp]].p &gt;= e[i].q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[id[idp]].f &lt; INF) q[e[id[idp]].u].insert(Point(id[idp]));</span><br><span class="line">            ++idp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q[e[i].v].empty())</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].f = INF;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q[e[i].v].cal(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m) <span class="keyword">if</span> (e[i].u == <span class="number">0</span>) wte(e[i].f);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D1T3"><a href="#D1T3" class="headerlink" title="D1T3"></a><a href="https://loj.ac/problem/3158" target="_blank" rel="noopener">D1T3</a></h3><p>其实可以模拟费用流，但如果你写一篇模拟费用流的题解，会发现那是一篇费用流建图的题解和一篇贪心题解拼起来。所以下面是一篇纯贪心题解。</p><p>我们要从两个序列中各选 $k$ 个下标，考虑每一步（选择一组下标）：</p><ul><li>如果还允许选两个不一样的下标，那就从剩下还没选的数里选最大的 $a$ 和最大的 $b$。</li><li>如果无法选择不一样的下标了，那么有三种选择：<ol><li>选择一组 $a_i+b_i$（即 $a$, $b$ 下标相同）</li><li>$a_i$ 被选了，$b_i$ 没有被选，那么把 $a_i$ 与 $b_i$ 匹配，再给 $a_i$ 原来匹配的那个 $b_j$ 找到一个剩下的里面最大的 $a_k$，然后把 $b_j$ 和 $a_k$ 匹配。</li><li>把第二条的 $a$ 和 $b$ 互换。</li></ol></li></ul><p>那么，维护剩下的最大的 $a$，剩下的最大的 $b$，剩下的最大的 $a+b$，$a_i$ 已匹配的最大的 $b_i$，$b_i$ 已匹配的最大的 $a_i$，剩余可选择的不一样下标个数，每个数匹配的数，就可以完成这个贪心了。</p><p>前三个最大值排序即可，后两个最大值使用堆维护。细节有些多，写的时候注意每一步都确保每个量正确更新了。尤其需要注意的是“剩余可选择的不一样下标个数”的更新。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, k, dif, a[N], b[N], ida[N], idb[N], idab[N], pa, pb, pab, fa[N], fb[N]; <span class="comment">// dif 是剩余可选择的不一样下标个数，id 是用来排序的，pa，pb，pab 记录用到了第几个值（即当前最大值是 a[pa] 之类的），fa，fb 分别记录 a_i 和 b_i 匹配的数的下标</span></span><br><span class="line">priority_queue&lt;pii&gt; sa, sb, emptypq; <span class="comment">// sa 是 b 已匹配的 a，sb 是 a 已匹配的 b，emptypq 是用来多测清空的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">// 匹配两个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    --dif;</span><br><span class="line">    fa[u] = v;</span><br><span class="line">    fb[v] = u;</span><br><span class="line">    <span class="keyword">if</span> (u == v) --dif; <span class="comment">// 去重，否则会在下面三行代码里加两次</span></span><br><span class="line">    <span class="keyword">if</span> (fb[u]) ++dif;</span><br><span class="line">    <span class="keyword">else</span> sb.push(pii(b[u], u));</span><br><span class="line">    <span class="keyword">if</span> (fa[v]) ++dif;</span><br><span class="line">    <span class="keyword">else</span> sa.push(pii(a[v], v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">// 断开匹配</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++dif;</span><br><span class="line">    <span class="keyword">if</span> (fb[u]) --dif;</span><br><span class="line">    <span class="keyword">if</span> (fa[v]) --dif;</span><br><span class="line">    <span class="keyword">if</span> (u == v) ++dif; <span class="comment">// 去重</span></span><br><span class="line">    fa[u] = fb[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">geta</span><span class="params">()</span> <span class="comment">// 获取当前剩余的最大 a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (fa[ida[pa]]) ++pa;</span><br><span class="line">    <span class="keyword">return</span> pii(a[ida[pa]], ida[pa]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getb</span><span class="params">()</span> <span class="comment">// 获取当前剩余的最大 b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (fb[idb[pb]]) ++pb;</span><br><span class="line">    <span class="keyword">return</span> pii(b[idb[pb]], idb[pb]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getab</span><span class="params">()</span> <span class="comment">// 获取当前剩余的最大 a + b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pab &lt;= n &amp;&amp; (fa[idab[pab]] || fb[idab[pab]])) ++pab;</span><br><span class="line">    <span class="keyword">return</span> pii(pab &lt;= n ? a[idab[pab]] + b[idab[pab]] : -INF, idab[pab]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getsa</span><span class="params">()</span> <span class="comment">// 获取 b 已选的最大 a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!sa.empty() &amp;&amp; fa[sa.top().second]) sa.pop();</span><br><span class="line">    <span class="keyword">return</span> sa.empty() ? pii(-INF, <span class="number">0</span>) : sa.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getsb</span><span class="params">()</span> <span class="comment">// 获取 a 已选的最大 b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!sb.empty() &amp;&amp; fb[sb.top().second]) sb.pop();</span><br><span class="line">    <span class="keyword">return</span> sb.empty() ? pii(-INF, <span class="number">0</span>) : sb.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        pa = pb = pab = <span class="number">1</span>;</span><br><span class="line">        sa = sb = emptypq;</span><br><span class="line">        <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line">        <span class="built_in">memset</span>(fb, <span class="number">0</span>, <span class="keyword">sizeof</span>(fb));</span><br><span class="line"></span><br><span class="line">        n = read();</span><br><span class="line">        k = read();</span><br><span class="line">        dif = k - read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) b[i] = read();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ida[i] = idb[i] = idab[i] = i;</span><br><span class="line">        sort(ida + <span class="number">1</span>, ida + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> a[x] &gt; a[y];&#125;);</span><br><span class="line">        sort(idb + <span class="number">1</span>, idb + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> b[x] &gt; b[y];&#125;);</span><br><span class="line">        sort(idab + <span class="number">1</span>, idab + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> a[x] + b[x] &gt; a[y] + b[y];&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dif) link(geta().second, getb().second);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pii nab = getab();</span><br><span class="line">                pii na_a = getsa();</span><br><span class="line">                pii na_b = getb();</span><br><span class="line">                pii nb_a = geta();</span><br><span class="line">                pii nb_b = getsb();</span><br><span class="line">                <span class="keyword">if</span> (nab.first &gt;= na_a.first + na_b.first &amp;&amp; nab.first &gt;= nb_a.first + nb_b.first) link(nab.second, nab.second);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (na_a.first + na_b.first &gt;= nb_a.first + nb_b.first)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> t = fb[na_a.second];</span><br><span class="line">                    cut(t, na_a.second);</span><br><span class="line">                    link(t, na_b.second);</span><br><span class="line">                    link(na_a.second, na_a.second);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> t = fa[nb_b.second];</span><br><span class="line">                    cut(nb_b.second, t);</span><br><span class="line">                    link(nb_a.second, t);</span><br><span class="line">                    link(nb_b.second, nb_b.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans += (fa[i] ? a[i] : <span class="number">0</span>) + (fb[i] ? b[i] : <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我也来到 NOI 了，呢。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++11 enable_if 的使用</title>
    <link href="https://ouuan.github.io/C-11-enable-if-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://ouuan.github.io/C-11-enable-if-的使用/</id>
    <published>2019-07-02T17:24:13.000Z</published>
    <updated>2019-07-06T12:29:04.646Z</updated>
    
    <content type="html"><![CDATA[<p>今天想更新一下自己的 <a href="https://github.com/ouuan/CF-template" target="_blank" rel="noopener">CF 模板</a>，然后发现由于写法问题可能要给每种整型（int，long，long long，unsigned int，unsigned long long……）分别定义函数，于是尝试搜了一下有没有什么好的代码重用方式，发现了 enable_if，还挺好用的，但去网上搜教程可能比较难学..我乱搞了两三个小时才学会。于是就来分享一下..</p><a id="more"></a><h2 id="重载的匹配"><a href="#重载的匹配" class="headerlink" title="重载的匹配"></a>重载的匹配</h2><h3 id="SFINAE"><a href="#SFINAE" class="headerlink" title="SFINAE"></a>SFINAE</h3><p>SFINAE 是 substitution failure is not an error 的缩写，即匹配失败不是错误。就是说，匹配重载的函数 / 类时如果匹配后会引发编译错误，这个函数 / 类就不会作为候选。这是一个 C++11 的新特性，也是 enable_if 最核心的原理。</p><h3 id="完整的重载匹配顺序（SFINAE-下）"><a href="#完整的重载匹配顺序（SFINAE-下）" class="headerlink" title="完整的重载匹配顺序（SFINAE 下）"></a>完整的重载匹配顺序（SFINAE 下）</h3><ol><li>找到候选函数，去掉其中会引发编译错误的。</li><li>完全匹配 &gt; 提升转换 &gt; 标准转换 &gt; 用户定义的转换。<ul><li>完全匹配：<ol><li>值 ↔ 引用</li><li>[] → *</li><li>type(argument-list) → (type *)(argument-list)（函数指针）</li><li>type → const / volatile type</li><li>type * → const type</li><li>type * → volatile type *</li></ol></li><li>提升转换：char / shorts → int，float → double。</li><li>标准转换：int → char，long → double。</li><li>用户定义的转换：类中的构造函数，类型转换函数等。</li></ul></li><li>非模板函数优先于模板函数。</li><li>寻找“最佳匹配”，我自己也不是很了解，可以参见 《C++ Primer Plus（第五版）》8.5.4 或上网搜索。</li></ol><p>若经过以上过程仍有多个候选函数，则会引发二义性错误。</p><h2 id="enable-if-的原理"><a href="#enable-if-的原理" class="headerlink" title="enable_if 的原理"></a>enable_if 的原理</h2><p>enable_if 的定义类似于下面的代码：（只有 Cond = true 时定义了 type）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">bool</span> Cond, <span class="class"><span class="keyword">class</span> <span class="title">T</span> = <span class="title">void</span>&gt; <span class="title">struct</span> <span class="title">enable_if</span> &#123;</span>&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">enable_if</span>&lt;true, T&gt; &#123;</span> <span class="keyword">typedef</span> T type; &#125;;</span><br></pre></td></tr></table></figure><p>这样的话，<code>enable_if&lt;true, T&gt;::type</code> 即为 <code>T</code>，而 <code>enable_if&lt;false, T&gt;::type</code> 会引发编译错误（在 SFINAE 下，即不将包含这一 enable_if 的函数 / 类作为候选）。</p><h2 id="enable-if-的使用"><a href="#enable-if-的使用" class="headerlink" title="enable_if 的使用"></a>enable_if 的使用</h2><p>enable_if 可以在任何地方充当一个类型使用，可以有实际意义，也可以新增一个多余的仅用来 enable / unable 的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="keyword">typename</span> enable_if&lt;a + b == <span class="number">233</span>, <span class="keyword">bool</span>&gt;::type is233()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="keyword">typename</span> enable_if&lt;a + b != <span class="number">233</span>, <span class="keyword">bool</span>&gt;::type is233()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; is233&lt;<span class="number">1</span>, <span class="number">232</span>&gt;() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; is233&lt;<span class="number">114514</span>, <span class="number">1919</span>&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只不过，大多数时候 enable_if 都用来判断模板参数的类型，此时一般要和 <code>is_integral</code> 等模板类结合使用。</p><p>有关 <code>is_integral</code> 等相关模板类的信息可以参见 <a href="http://www.cplusplus.com/reference/type_traits/" target="_blank" rel="noopener">C++ Reference</a>。</p><p><code>is_integral&lt;T&gt;::value</code> 是一个布尔值，在 <code>T</code> 为整型时为真，否则为假。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> = <span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value, <span class="keyword">void</span>&gt;::type&gt;</span><br><span class="line"><span class="keyword">bool</span> isodd(T x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; isodd(<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; isodd(<span class="string">'a'</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; isodd("qwq"); -- compile error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 OutputIterator 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIt, <span class="keyword">typename</span> = <span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag, <span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value || (is_base_of&lt;forward_iterator_tag, <span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value &amp;&amp; !is_const&lt;OutputIt&gt;::value)&gt;::type&gt;</span><br><span class="line"><span class="keyword">void</span> read(OutputIt __first, OutputIt __last) &#123; <span class="keyword">for</span> (; __first != __last; ++__first) read(*__first); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想更新一下自己的 &lt;a href=&quot;https://github.com/ouuan/CF-template&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF 模板&lt;/a&gt;，然后发现由于写法问题可能要给每种整型（int，long，long long，unsigned int，unsigned long long……）分别定义函数，于是尝试搜了一下有没有什么好的代码重用方式，发现了 enable_if，还挺好用的，但去网上搜教程可能比较难学..我乱搞了两三个小时才学会。于是就来分享一下..&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="泛型编程" scheme="https://ouuan.github.io/tags/%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="https://ouuan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Surreal Numbers 阅读笔记</title>
    <link href="https://ouuan.github.io/Surreal-Numbers-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/Surreal-Numbers-阅读笔记/</id>
    <published>2019-06-26T07:05:09.000Z</published>
    <updated>2019-07-03T07:29:28.286Z</updated>
    
    <content type="html"><![CDATA[<p>今天模拟赛遇到了一道需要超现实数的题目，赛后在阅读 <a href="http://www.matrix67.com/blog/archives/6333" target="_blank" rel="noopener">Matrix67 的博客</a> 时听说了唐纳德所著的《Surreal Numbers》（中译：研究之美）这本书，于是就阅读了一下。</p><p>大约会把书里的定理证一遍吧..</p><p>学习超现实数的时候请假装自己不知道关于数字的一切知识，并且不要把定义的名字真的当回事（某些定义有着熟悉的名字，但可能与我们熟知的意义相同，也可能不同）。</p><p><a href="/Surreal-Numbers-阅读笔记/[研究之美].（美）高德纳.扫描版.pdf">小说下载地址</a></p><a id="more"></a><p>本文可能比较咕，不知道什么时候能填完坑…</p><h2 id="Conway’s-rules"><a href="#Conway’s-rules" class="headerlink" title="Conway’s rules"></a>Conway’s rules</h2><p>（<del>翻译挺神仙的</del>）</p><blockquote><p>创生二道，大小诸数盖由此出。</p></blockquote><ol><li><p>凡数，皆合于前创二数之集，其位左者，无一大于或似于其位右者。</p></li><li><p>甲数小于或似于乙数，当且仅当甲数之左集中无一大于或似于乙数，且乙数之右集中无一小于或似于甲数。</p></li></ol><blockquote><p>Conway 检视二道，连呼妙哉！此二道真妙绝。</p></blockquote><h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>比较运算符上画一道斜线表示不满足该运算符。</p><p>$x\le y$ 表示 $x$ 小于或似于 $y$。</p><p>$x\ge y$ 表示 $y\le x$。</p><p>$x\equiv y$ 表示 $x$ 似于 $y$，即 $x\le y$ 且 $y\le x$。</p><p>根据下文会介绍的定理 (T4)，“不小于或似于” 即 “大于且不似于”，所以可以定义 $x&lt;y$ 表示 $x\not\ge y$，$x&gt;y$ 表示 $x\not\le y$。</p><p>$A\le x​$（$A​$ 是一个集合，$x​$ 是一个数）表示 $A​$ 中任意一个元素都 $\le x​$。（其它运算符类似）</p><p>$x\le A$（$A$ 是一个集合，$x$ 是一个数）表示 $A\ge x​$。（其它运算符类似）</p><p>$A\le B$（$A$ 和 $B$ 都是集合）表示 $A$ $\le$ $B$ 中任意一个元素。（其它运算符类似）</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>一个数 $x$ 可以表示为 $(X_L,X_R)$ 的形式，其中 $X_L$ 表示 $x$ 的左集，$X_R$ 表示 $x$ 的右集。即 $x=(X_L,X_R)$。</p><p>$x_L$ 表示 $X_L$ 中的一个元素，$x_R$ 表示 $X_R$ 中的一个元素。</p><h3 id="Rule-1"><a href="#Rule-1" class="headerlink" title="Rule #1"></a>Rule #1</h3><p>$$x_L\not\ge x_R$$</p><h3 id="Rule-2"><a href="#Rule-2" class="headerlink" title="Rule #2"></a>Rule #2</h3><p>$$x\le y\Leftrightarrow X_L\not\ge y\land Y_R\not\le x$$</p><h2 id="Theorems"><a href="#Theorems" class="headerlink" title="Theorems"></a>Theorems</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>$$x\le y\land y\le z\Rightarrow x\le z​$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"><p>假设该命题不成立，即存在 $x\le y,y\le z,x\not\le z​$。</p><p>$\because x\not\le z$</p><p>$\therefore \exists x_L\ge z\lor\exists z_R\le x​$</p><p>当 $x_L\ge z$ 时</p><p>​    $\because x\le y$</p><p>​    $\therefore x_L\not\ge y​$</p><p>​    $\therefore y\le z,z\le x_L,y\not\le x_L​$</p><p>当 $z_R\le x$ 时</p><p>​    $\because y\le z$</p><p>​    $\therefore z_R\not\le y$</p><p>​    $\therefore z_R\le x,x\le y,z_R\not\le y$</p><p>综上，无论是哪种情形，都会得到新的一组不满足原命题的数，而这组数的其中一个数会比原来的三个数中的一个创造的早，新的这组数的另外两个数就是原来的三个数中另外两个数。这样的话，若出现了一组不满足原命题的数，创造时间就会不断向前追溯，而追溯是有尽头的，因此这种情形不可能出现。</p><p>证毕。</p></div></div><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>$$X_L\le x\le X_R$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>$x\le x$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>$$x\not\le y\Rightarrow y\le x$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>$$x&lt;y\land y\le z\Rightarrow x&lt;z$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T6"><a href="#T6" class="headerlink" title="T6"></a>T6</h3><p>$$x\le y\land y&lt;z\Rightarrow x&lt;z$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T7"><a href="#T7" class="headerlink" title="T7"></a>T7</h3><p>$$Y_L&lt;x&lt;Y_R\Rightarrow x\equiv(x_L\bigcup Y_L,x_R\bigcup Y_R)$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><p>（本文咕咕中……）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天模拟赛遇到了一道需要超现实数的题目，赛后在阅读 &lt;a href=&quot;http://www.matrix67.com/blog/archives/6333&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Matrix67 的博客&lt;/a&gt; 时听说了唐纳德所著的《Surreal Numbers》（中译：研究之美）这本书，于是就阅读了一下。&lt;/p&gt;
&lt;p&gt;大约会把书里的定理证一遍吧..&lt;/p&gt;
&lt;p&gt;学习超现实数的时候请假装自己不知道关于数字的一切知识，并且不要把定义的名字真的当回事（某些定义有着熟悉的名字，但可能与我们熟知的意义相同，也可能不同）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/Surreal-Numbers-阅读笔记/[研究之美].（美）高德纳.扫描版.pdf&quot;&gt;小说下载地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="博弈论" scheme="https://ouuan.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="超现实数" scheme="https://ouuan.github.io/tags/%E8%B6%85%E7%8E%B0%E5%AE%9E%E6%95%B0/"/>
    
  </entry>
  
</feed>
