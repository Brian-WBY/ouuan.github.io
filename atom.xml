<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-06-16T10:30:42.466Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ouuan 的出题规范</title>
    <link href="https://ouuan.github.io/ouuan-%E7%9A%84%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/"/>
    <id>https://ouuan.github.io/ouuan-的出题规范/</id>
    <published>2019-06-16T03:24:12.000Z</published>
    <updated>2019-06-16T10:30:42.466Z</updated>
    
    <content type="html"><![CDATA[<p>首先，你需要意识到，自己出的题是要<strong>给别人做</strong>的。</p><a id="more"></a><p>请不要说这是一句废话。这是做一名好的出题人必须要明白的。</p><p>出题比起展示自己，更是服务他人。</p><h2 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h2><h3 id="关于原题"><a href="#关于原题" class="headerlink" title="关于原题"></a>关于原题</h3><p>原题大致可分为完全一致、几乎一致和做法一致三种。</p><ul><li>完全一致：使用一题的 AC 代码可以 AC 另一题。</li><li>几乎一致：由一题的 AC 代码改动至另一题的 AC 代码可以由一个不会该题的人完成。</li><li>做法一致：核心思路、做法一致，但代码实现上、不那么关键的细节上有差异。</li></ul><p>这三种原题自下而上为包含关系。</p><p>以下情况不应出现：</p><ol><li>在明知有“几乎一致”的原题的情况下出原题。</li><li>由于未使用搜索引擎查找导致自己不清楚有原题，从而出了“几乎一致”的原题。</li><li>在“做法一致”的原题广为人知（如：NOIp、NOI 原题）时出原题。</li><li>在带有选拔性的考试的非送分题中出现“做法一致”的原题。</li></ol><p>以下情况最好不要出现：</p><ol><li>在明知有至少为“做法一致”的原题的情况下出原题。</li><li>由于未使用搜索引擎查找导致自己不清楚有原题，从而出了“做法一致”的原题。</li><li>在任何情况下出“几乎一致”的原题。</li></ol><p>可以放宽要求的例外情况：</p><ol><li>校内模拟赛。</li><li>以专题训练为目的的模拟赛。</li><li>难度较低的比赛，或是定位为送分题的题目。</li></ol><h3 id="关于毒瘤题"><a href="#关于毒瘤题" class="headerlink" title="关于毒瘤题"></a>关于毒瘤题</h3><p>“毒瘤题”是一个非常模糊而主观的观念，我在这只是引用一些前人关于此的探讨，加以自己的一些理解。这个话题是非常开放的，欢迎大家来发表自己的观点。</p><blockquote><p>一道好题不应该是两道题拼在一起，一道好题会有自己的idea —— 而它应该不加过多包装地突出这个idea。</p><p>一道好题应该新颖。真正的好题，应该是能让人脑洞出新的好题的好题。</p><p>—— vfk《UOJ精神之源流》</p></blockquote><p>例子：<a href="https://www.luogu.org/problemnew/show/P5346" target="_blank" rel="noopener">【XR-1】柯南家族</a>，做法的前后两部分完全割裂，前半部分为<a href="https://www.luogu.org/problemnew/show/P5353" target="_blank" rel="noopener">【模板】树上后缀排序</a>，后半部分是经典树上问题。</p><blockquote><p>一类OI题以数学为主，无论是题目描述还是做法都是数学题的特征，并且解法中不含算法相关的知识点，这类OI题目统称为纯数学题。</p><p>—— 王天懿《论偏题的危害》</p></blockquote><p>经典例子：<a href="https://www.luogu.org/problemnew/show/P3951" target="_blank" rel="noopener">NOIP2017 小凯的疑惑</a></p><p>我自己的标准是：尽量不要出数学填空题。但这样的纯数学题也不是完全不可取，有时纯粹地考察一些 OI 常用数学知识也是可以接受的。</p><blockquote><p>一部分偏题中牵涉到了大学物理的内容，导致选手在面对这些从未接触过的物理知识点时变得不知所措，造成了知识上的隔膜。</p><p>—— 王天懿《论偏题的危害》</p></blockquote><p>经典例子：<a href="https://uoj.ac/problem/159" target="_blank" rel="noopener">【清华集训2015】多边形下海</a></p><p>不止是物理，OI 题目中不应过多涉及到其它学科的知识，如果涉及应当给予详细的解释，不应使其它学科的知识作为解题的重大障碍。</p><blockquote><p>一道好题无论难度如何，都应该具有自己的思维难度，需要选手去思考并发现一些性质。</p><p>一道好题的代码可以长，但一定不是通过强行嵌套或者增加条件而让代码变长，而是长得自然，让人感觉这个题的代码就应该是这么长。</p><p>—— 王天懿《论偏题的危害》</p></blockquote><p>经典例子：<a href="https://www.luogu.org/problemnew/show/P2482" target="_blank" rel="noopener">[SDOI2010]猪国杀</a>，<a href="https://uoj.ac/problem/98" target="_blank" rel="noopener">【集训队互测2015】未来程序·改</a></p><p>在一般的 OI 比赛中，思维难度应占主要部分。当然，如 THUWC / THUSC 的 Day 2+ 那样的工程题也有其存在的道理 —— 毕竟体验营的目的除了考察选手的算法设计能力，还有和大学学习对接的工程代码以及文档学习能力。但在一般的 OI 比赛中，考察更多的应当还是算法设计与思维能力。</p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>题目背景最好尽量简短。</p><p>在题目背景较长时，应当与题目描述分开。</p><p>需要绝对避免的情况：题目背景严重影响题意的理解。</p><p>必要时，可以提供与背景结合的题目描述与简洁的题目描述两个版本。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>题目中的每个可能不被理解的定义都应得到解释，不应凭空冒出未加定义的概念。例如：在 <a href="https://codeforces.com/problemset/problem/1172/D" target="_blank" rel="noopener">CF1172D Nauuo and Portals</a> 中，你必须在题面中解释什么是“传送门”。</p><p>题目中涉及到的每个概念应当使用单一的词汇来描述。例如：不应一会儿说“费用”，一会儿说“代价“。</p><p>不应不加说明地使用与原义、常见义不同的词汇。例如：不应不加说明地用“路径”代指一条边。</p><p>你需要保证你的题面不会自相矛盾。例如：在 <a href="https://codeforces.com/problemset/problem/1173/A" target="_blank" rel="noopener">CF 1173A Nauuo and Votes</a> 中，没有把 “?” 作为一种 “result”，是因为 “?” 的含义是 “there are more than one possible results”。</p><p>你需要保证你的题面不能被错误理解而自圆其说，即使这种理解是反常识、没有人会这么去想的。例如：在 <a href="https://codeforces.com/problemset/problem/1172/D" target="_blank" rel="noopener">CF1172D Nauuo and Portals</a> 中，之所以要繁琐地定义 “walk into” 并与 “teleport” 区分，是为了防止这种理解：通过传送门可以到另一个传送门，而到了传送门会传送，因此会反复横跳。</p><p>顺着读题目描述应当能看懂每一句话，并理解题目的任务与要求。至少在紧接着的下一段话中疑惑能够得到解释，而不是需要在若干段后才能得到解释，或者要看了输入输出格式才能明白题意，甚至需要根据样例来猜题意。例如：在 <a href="https://guoj.icu/problem/1171" target="_blank" rel="noopener">「GuOJ Round #1」琪露诺的冰雪宴会</a> 中，在输出格式才第一次出现了题目的目标“雾之湖最终能接收到的最大水量”，再加上“灵梦当然能很快算出来清理完全部小溪的总费用是多少”这句带有误解性质的话，更容易使人读错题意，这是不可取的，应当在题目描述中就对题目的目标进行说明。（在这个例子中还存在题目背景严重影响题意理解的问题。）</p><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入输出格式清晰<strong>完整</strong>即可，没有死板的要求，个人建议参照 CF 的题目来写输入输出格式，具体可以参考 <a href="/bad-round-与出题人的坚守/rules.jpg">cf 出题人须知</a>。</p><p>可以参考的一些句子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行包含三个正整数 $n$, $m$, $k$ ($1\le n,m\le 2\cdot 10^5$, $1\le k\le 100$) — $n$ 表示数列的长度，$m$ 表示操作个数，$k$ 的意义见题目描述。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第二行包含 $n$ 个非负整数 $a_1,a_2,\ldots,a_n$ ($1\le a_i\le 10^9$) — 题目给出的数列。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接下来的 $m$ 行中的第 $i$ 行包含两个正整数 $l_i$ 和 $r_i$ ($1\le l_i\le r_i\le n$)，表示第 $i$ 次操作在区间 $[l_i,r_i]$ 上进行。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接下来的 $n-1$ 行，每行包含两个正整数 $u$ 和 $v$ ($1\le u,v\le n$)，表示 $u$ 和 $v$ 之间由一条边相连。</span><br><span class="line"></span><br><span class="line">数据保证给出的边能构成一棵树。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的唯一一行包含一个由小写拉丁字母构成的非空字符串，其长度不超过 $10^6$。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第二行包含一个小数点后不超过三位的实数 $x$，意义见题目描述。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出包含一个实数，当你的输出与标准答案之间的绝对误差或相对误差小于 $10^&#123;-6&#125;$ 时视作正确。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出的第二行包含 $n$ 个正整数，表示你构造的一组方案 — 其中第 $i$ 个数表示你打出的第 $i$ 张牌的编号。</span><br><span class="line"></span><br><span class="line">如果有多组合法的答案，可以任意输出其中一组。</span><br></pre></td></tr></table></figure><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>按照 CF 的要求，数据范围要写在输入格式里，但在国内，数据范围往往是写在题目的最后的。</p><p>数据范围中最容易犯的错误就是不完整。输入中的每一个数、每一个字符串都应该有清晰的界定。在上文所给出的输入输出格式示例中就有一些数据范围的正确写法。</p><p>数据范围的常见遗漏：</p><ol><li>“整数”中的“整”。</li><li>题面中只说了是“整数”没说是“正整数”，并且数据范围中只有上限没有下限。</li><li>字符串没说字符集。</li><li>实数没说小数点后位数。</li><li>某些变量没有给范围。</li></ol><p>你需要保证标程可以通过满足题面所述数据范围的任何一组数据。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>样例应当有一定的强度，能够查出一些简单的错误。</p><p>有多种操作的题，每种操作都应在样例中出现。</p><p>有多种输出的题（如 <a href="https://codeforces.com/problemset/problem/1173/A" target="_blank" rel="noopener">CF 1173A Nauuo and Votes</a>），每种输出都应在样例中出现。例外：实际上不可能无解，但要求判断是否有解的题目。</p><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>题目描述越复杂、越不易理解就越应当有详细的样例解释。</p><p>题目难度越简单就越应当有详细的样例解释。</p><p>详细的样例解释可以选择配上图片。</p><p>较大的样例可以没有样例解释。</p><h2 id="时限、空间限制与部分分"><a href="#时限、空间限制与部分分" class="headerlink" title="时限、空间限制与部分分"></a>时限、空间限制与部分分</h2><p>时限与空间限制的目的是卡掉复杂度错误的做法。（当然，也是为了防止评测用时过长，如：只对交互次数有限制而对时间复杂度没有限制的交互题也有时间限制。）</p><p>因此，原则上时间限制应当选取不使错误做法通过的尽量大的值。</p><p>一般地，时限应满足以下要求：</p><ol><li>至少为 std 在最坏情况下用时的两倍。</li><li>如果比赛允许使用 Java，应使 Java 能够通过。</li><li>不应使错误做法通过（实在卡不掉、想放某种错解过除外）。</li></ol><p>为了更好地在放大常数做法过的同时卡掉错解，一般可以采用同时增大数据范围和时限的方法。但要注意，有时正解（由于缓存等玄学问题）会在数据范围增大时有极大的常数增加，此时增大数据范围不一定能够增大正解与错解之间用时的差距。</p><p>在有部分分的赛制中，还可以通过设置有梯度的数据、数据范围稍小的数据来使较为优秀的错解和大常数正解不能通过，同时使其获得较高的部分分。</p><p>需要注意的是，在数据范围小于 $5\cdot 10^5$ 时，应当考虑是否能使用<a href="/n方过百万-暴力碾标算——指令集优化的基础使用">指令集</a>通过。</p><p>一般情况下空间限制应当设置的足够大，除非空间复杂度更优的做法的确十分巧妙，值得卡掉空间复杂度大的做法。这种情况下可以考虑设置空间限制较松的部分分。值得注意的是，如果不想卡掉空间消耗较大的做法，数据结构题一般需要设置较大的空间限制。</p><blockquote><p>一道好题应该具有它的选拔性质，具有足够的区分度。应该至少4档部分分，让新手可以拿到分，让高手能够展示自己的实力。</p><p>—— vfk《UOJ精神之源流》</p></blockquote><p>部分分一般分为较小数据范围与特殊性质两种。</p><p>较小数据范围一般要设置多档，即使你想不到某种复杂度的做法，也可以考虑给这种复杂度一档分。一般来说，为了避免卡常，可以设置一档极限数据除以二的部分分。</p><p>特殊性质部分分的设置要依具体题目而定。理想的特殊性质部分分应当是能够引导选手思考正解的。与较小数据范围部分分不同，在你不会针对某种特殊性质的做法时，最好不要给这种特殊性质一档分。例如：<a href="https://www.luogu.org/problemnew/show/P5400" target="_blank" rel="noopener">[CTS2019]随机立方体</a> 的 $k=1​$ 这档部分分在讲题时就被很多人吐槽，称这档部分分妨碍了思考正解。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="数据的多样性与强度"><a href="#数据的多样性与强度" class="headerlink" title="数据的多样性与强度"></a>数据的多样性与强度</h3><p>在不绑 Subtask，按测试点给分时，本部分内容可以酌情不遵守。</p><p>数据中应当包含每个变量的最小值与最大值。</p><p>数据中应当包含各种各样的构造，即使你不知道什么错解会挂在这组构造上。</p><p>需要特别提醒的是，如果有整型溢出的可能，一定要卡掉会溢出的做法。在有部分分的赛制中，不应使不开 long long 的人得到比暴力一样甚至更低的分数。</p><h3 id="如果有-pretests"><a href="#如果有-pretests" class="headerlink" title="如果有 pretests"></a>如果有 pretests</h3><p>pretests 应尽量强（，同时尽量少）。换言之，你需要在 pt 中（用尽量少的数据组数）包含该题的所有已知叉点。（括号中为个人观点。）</p><p>如果你希望出现少量而非没有 fst，你可以问问 Sooke 对这件事的看法（Sooke 曾经坚称“fst 是 CF 的灵魂”，在我的强烈要求下，在 <a href="https://codeforces.com/problemset/problem/1172/A" target="_blank" rel="noopener">CF1172A Nauuo and Cards</a> 中，他构造了许多数据，在 pt 中卡掉了所有已知错解，最后，这题在比赛中 Div.2 的 fst 率为 $18.5\%$）。</p><h3 id="一些造数据的技巧"><a href="#一些造数据的技巧" class="headerlink" title="一些造数据的技巧"></a>一些造数据的技巧</h3><p>在平常的出题中使用 <a href="https://polygon.codeforces.com/" target="_blank" rel="noopener">Polygon</a> 可能不是最为方便的选择，但 Polygon 为我们提供的出题方式十分值得借鉴。</p><p>简而言之，在 Polygon 中，数据要么是手造，要么由 generator 生成。而这个 generator 使用 testlib.h，并且使用命令行参数来设置数据范围、构造类型等参数。</p><p>使用 testlib.h 的好处是，它内置了随机数生成器 <code>rnd.next()</code>，它在不同平台上返回同样的结果，并且其种子是基于整个命令行参数生成的，不用手动设置种子，并且在参数一样时生成的数据总是一样的。</p><p>使用命令行参数的好处是，你可以写一个 .bat 文件（或者 Linux 下的 .sh 文件），把生成数据的命令写进去，可以十分方便地生成数据。</p><p><a href="https://codeforces.com/blog/entry/18291" target="_blank" rel="noopener">更多关于 generator 的教程</a>。</p><p>如果你愿意，还可以写一个 validator。validator 是用来检查数据合法性的，在 cf 赛制中由于 hack 的存在是必备的，而在其它赛制中，validator 相当于给数据上了一道保险锁，个人十分推荐写一个 validator。</p><p><a href="https://codeforces.com/blog/entry/18426" target="_blank" rel="noopener">更多关于 validator 的教程</a>。</p><p>推荐一个我自己经常使用的生成输出文件的 bat：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /R <span class="string">"%cd%"</span> %%i <span class="keyword">in</span> (*.<span class="keyword">in</span>) <span class="keyword">do</span> ( </span><br><span class="line"><span class="built_in">echo</span> %%i</span><br><span class="line">validator &lt; %%i</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 pause</span><br><span class="line">std &lt; %%i &gt; %%~ni.out</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="Special-Judge"><a href="#Special-Judge" class="headerlink" title="Special Judge"></a>Special Judge</h2><p>SPJ 是一个很国内的叫法，在 CF 上，只是分为可选的几种内置 checker 和自定义 checker。</p><p>checker 一般使用 testlib.h 编写，<a href="/使用-testlib-h-写-lemon-SPJ/">在 lemon 中也可以使用 testlib.h</a>。一般来说，不使用 testlib.h 是很难写好 checker 的，因为你要应对各种各样的不合法输出，需要极强的鲁棒性。</p><p>编写 checker 需要注意以下两点：</p><ol><li>你需要应对各种不合法的输出，因此，请检查读入的每个变量是否在合法范围中（<code>readInt(minvalue, maxvalue)</code>）。例如：读入一个在 check 过程中会作为数组下标的变量时必须检查其范围，否则可能引发数组越界，有时这会导致 RE，有时则可能判为 AC。</li><li>原则上 checker 中不应检查空白字符（即，不应使用 readSpace()、readEoln()、readEof()，值得一提的是，testlib.h 会自动检查是否有多余的输出）。</li></ol><p><a href="https://codeforces.com/blog/entry/18431" target="_blank" rel="noopener">更多关于 checker 的教程</a>。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题解的目标是让预计会来参加比赛的人都能看懂。所以官方题解详细程度的要求会比一般的题解高。</p><h3 id="关于部分分"><a href="#关于部分分" class="headerlink" title="关于部分分"></a>关于部分分</h3><p>在有部分分的题目中，题解里可以考虑写一写部分分的做法。</p><h3 id="关于知识点"><a href="#关于知识点" class="headerlink" title="关于知识点"></a>关于知识点</h3><p>解题中用到的知识点应当写出来。对于一些难度和题目难度相当的知识点，最好给出学习该知识点的资料（比如一篇博客的地址）。“这样，再这样，然后<strong>用一些技巧</strong>就可以了”，而其中的“一些技巧”并不是谁都会的，这种情况要绝对避免。</p><h3 id="关于定义"><a href="#关于定义" class="headerlink" title="关于定义"></a>关于定义</h3><p>题解中不要凭空冒出来一些概念。</p><p>例如：dp 的题解要解释清楚状态的定义。</p><p>再例如：cy 曾经写过一版 <a href="https://codeforces.com/problemset/problem/1172/F" target="_blank" rel="noopener">CF1172F Nauuo and Bug</a> 的题解，其中对“分段函数”没有定义，这是绝对不可取的。</p><h3 id="关于细节"><a href="#关于细节" class="headerlink" title="关于细节"></a>关于细节</h3><p>具体的实现细节如果比较巧妙最好写出来，否则的话“详见代码”也是可以的。如果“详见代码”的话，最好在代码中加上一定的注释。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><p>标程中最好去掉冗余部分。比如，有人在题解中保留了完整的 define 模板（为了提高做题速度，包含大量 define 与常用函数，常用于 CF 等在线比赛），并且其中很大一部分都没有用到，这是不好的。</p><p>上文已经说过了，如果涉及到一些题解中没有详细说明的实现细节，最好加上适量的注释。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><h3 id="比赛通知中的题目难度需真实"><a href="#比赛通知中的题目难度需真实" class="headerlink" title="比赛通知中的题目难度需真实"></a>比赛通知中的题目难度需真实</h3><p>感觉这个是比赛通知中比较需要注意的一点。</p><p>如果不会评难度可以不评..</p><blockquote><p>Remember that authors tend to underestimate the difficulty of their problems.</p><p>—— Codeforces PROPOSE A PROBLEM 页面的提醒</p></blockquote><p>需要特别强调的是，如果你以 CF 的难度来进行类比（如：该比赛为 Div.2 A ~ Div.2 E 难度），不仅是难度需要与 CF Div.2 类似，题型也应当是 CF 风格。</p><h3 id="题目难度的分配"><a href="#题目难度的分配" class="headerlink" title="题目难度的分配"></a>题目难度的分配</h3><p>在类国内 OI 的模拟赛中，往往是三道题的整体难度与比赛难度相当即可。</p><p>在类 CF / ATC 这种线上赛的比赛中，需要尽量保证难度的递增（虽然由于对难度的误估很多时候都并不能真正做到），并且尽量避免出现大的 difficulty gap。可以通过把一题分为难易两题（两个 Subtask）来减少 difficulty gap。</p><h3 id="题目知识点的分配"><a href="#题目知识点的分配" class="headerlink" title="题目知识点的分配"></a>题目知识点的分配</h3><p>一场比赛应尽量涵盖较广的知识点（专题训练赛当然除外）。</p><p>经典反例：涵盖了动态规划、期望、组合计数、容斥原理、多项式等多种知识点的 CTS2019。（<del>组题人：我要从五道题里选六道，我也很无奈啊。</del>）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://vfleaking.blog.uoj.ac/blog/909" target="_blank" rel="noopener">vfk《UOJ精神之源流》</a></li><li><a href="/ouuan-的出题规范/7-王天懿-论偏题的危害.ppt">王天懿《论偏题的危害》</a></li><li><a href="/bad-round-与出题人的坚守/rules.jpg">cf 出题人须知</a></li><li><a href="https://blog.csdn.net/VFleaKing/article/details/90521383" target="_blank" rel="noopener">vfk 博客</a>中的<a href="https://www.luogu.org/paste/sxvu97yz" target="_blank" rel="noopener">CF出题人的自我修养</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，你需要意识到，自己出的题是要&lt;strong&gt;给别人做&lt;/strong&gt;的。&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="出题" scheme="https://ouuan.github.io/tags/%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2460 [BJWC2011]元素（线性基，贪心）</title>
    <link href="https://ouuan.github.io/BZOJ2460-BJWC2011-%E5%85%83%E7%B4%A0%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9F%BA%EF%BC%8C%E8%B4%AA%E5%BF%83%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ2460-BJWC2011-元素（线性基，贪心）/</id>
    <published>2019-06-14T14:00:27.000Z</published>
    <updated>2019-06-15T12:45:56.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P4570" target="_blank" rel="noopener">洛谷</a></p><p><a href="http://darkbzoj.tk/problem/2460" target="_blank" rel="noopener">darkbzoj</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你 $n$ 个带权值的数（数和权值是两个东西），求一个权值最大的异或线性无关子集，即取这个子集的任意一个非空子集，异或和都不为零。</p><p>原题 $n\le1000$，实际上可以轻松 $n\le10^5$。数 $10^{18}$，权值 $10^4$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>看到这题，就随便贪心一下：按权值排序，插入到线性基所在的线性空间的元素集合里（说的这么绕口是因为“插入到线性基里”是一种极不严谨的表述，而且无法和真正的“插入到线性基里”区分开），如果插入到了线性基里，就把答案加上这个数的权值。</p><p>然后…过了？</p><p>仔细一想发现也不难证。</p><p>首先，一堆线性无关的向量中，如果加进来一个线性相关的，一定可以删掉这些向量（包括刚加进来这个）中的某一个（并不是任意一个，但只要一个就可以了），让它们变得线性无关。这个性质在异或中可能不那么显然，但线性相关就相当于方程组中有一个多余的方程（可以由其它方程推出来），这时只要删掉一个方程就不会有多余的方程了，这样就是大家所熟知的了。</p><p>因此，考虑加入一个元素时删掉谁呢？当然是权值小的那一个。如果事先排好序，加不进去的时候不加就好了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; pil; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line">pil a[N];</span><br><span class="line">ll p[<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld%d"</span>, &amp;a[i].second, &amp;a[i].first);</span><br><span class="line"></span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x = a[i].second;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">59</span>; ~j; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j]) x ^= p[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p[j] = x;</span><br><span class="line">                    ans += a[i].first;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三倍经验"><a href="#三倍经验" class="headerlink" title="三倍经验"></a>三倍经验</h2><p><a href="https://www.luogu.org/problemnew/show/P3265" target="_blank" rel="noopener">[JLOI2015]装备购买</a>  和 <a href="https://www.luogu.org/problemnew/show/P4301" target="_blank" rel="noopener">[CQOI2013]新Nim游戏</a> 是两道和此题几乎完全一样的题，<font color="white">前者是用一个类似高斯消元的过程代替异或，后者要利用到 Nim 游戏的经典结论。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4570&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://darkbzoj.tk/problem/2460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darkbzoj&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你 $n$ 个带权值的数（数和权值是两个东西），求一个权值最大的异或线性无关子集，即取这个子集的任意一个非空子集，异或和都不为零。&lt;/p&gt;
&lt;p&gt;原题 $n\le1000$，实际上可以轻松 $n\le10^5$。数 $10^{18}$，权值 $10^4$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线性基" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>线性基学习笔记</title>
    <link href="https://ouuan.github.io/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/线性基学习笔记/</id>
    <published>2019-06-12T07:20:12.000Z</published>
    <updated>2019-06-14T10:07:13.443Z</updated>
    
    <content type="html"><![CDATA[<p>又是在网上搜不到讲的比较清楚的博客的算法…虽然没找到写的好的博客，但结合若干篇写的不算太差的博客，勉强是学会了..</p><p>线性基在 OI 中特指集合为若干个非负整数，运算为异或的线性基，通常用来处理一些异或相关的问题。</p><a id="more"></a><h2 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h2><p><a href="https://baike.baidu.com/item/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4/5936597" target="_blank" rel="noopener">百度百科</a>说的就非常详细了，请完整阅读一遍。</p><p><a href="https://www.bilibili.com/video/av6731067" target="_blank" rel="noopener">3b1b 的视频</a>也很不错，如果不了解线性代数相关知识可以看一看。</p><h2 id="线性基的定义"><a href="#线性基的定义" class="headerlink" title="线性基的定义"></a>线性基的定义</h2><p>下文中的“线性基”均指 OI 中“线性基”的常见意思。</p><h3 id="线性基所在的线性空间"><a href="#线性基所在的线性空间" class="headerlink" title="线性基所在的线性空间"></a>线性基所在的线性空间</h3><ul><li><p>元素集合：若干个非负整数（线性基可以说是关于若干个非负整数的，在有的教程中称其为“异或集合”）。</p></li><li><p>数域： $\{0,1\}$（也就是说，线性组合是选择一个子集异或起来，$0$, $1$ 就分别代表不选或选某个元素）。</p></li><li><p>元素间运算：异或。</p></li><li><p>数乘：普通的数乘。</p></li></ul><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3><p>线性基就是上文所述的线性空间的一组基底，它具有以下性质：</p><ol><li><p>在线性基中任取若干个元素，它们的异或不为零。即它们线性无关。</p></li><li><p>其所在线性空间中每个元素都有唯一的方案由线性基中元素异或得到。</p></li><li>选取线性基中若干个元素异或起来得到一个元素，用这个元素去替换原线性基中任意一个元素，得到的新线性基张成的空间不变。</li></ol><p>可以发现这就是线性空间基底的性质和线性基所在线性空间的定义合在一起。</p><h2 id="线性基的构造"><a href="#线性基的构造" class="headerlink" title="线性基的构造"></a>线性基的构造</h2><h3 id="构造出的线性基额外满足的性质"><a href="#构造出的线性基额外满足的性质" class="headerlink" title="构造出的线性基额外满足的性质"></a>构造出的线性基额外满足的性质</h3><p>线性基中的每个元素的二进制最高位均不同，并且，我们称二进制最高位为第 $i$ 位的元素称为“线性基的第 $i$ 位”。</p><p>这个性质在构造和实际应用中非常方便，但要注意，它并不是线性基所在线性空间的基底所满足的必要条件。然而下文所述线性基均满足此性质，因为它真的很实用。</p><h3 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h3><p>我们考虑如何在已有一组线性基的情况下，向线性空间的元素集合中插入一个元素。</p><p>插入新的元素后，我们需要满足：</p><ol><li>线性基张成的空间中包含新插入的元素。</li><li>线性基仍然线性无关。</li></ol><p>具体地，我们依次考虑新插入元素的每个为一的二进制位，若线性基不存在这一位，那么将这个新元素加入线性基中。</p><p>否则，将新元素异或上线性基的这一位，然后继续处理下一位。</p><p>因为插入一个元素等同于插入其异或上线性基中的一个元素，所以性质一满足。</p><p>从构造过程中就可以看出，已有线性基无法异或得到这个新元素，所以性质二满足。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p[i] 表示线性基的第 j 位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">60</span>; ~j; --j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((x &gt;&gt; j) &amp; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j]) x ^= p[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[j] = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基的经典应用"><a href="#线性基的经典应用" class="headerlink" title="线性基的经典应用"></a>线性基的经典应用</h2><h3 id="判断一个数能否由若干数的子集异或得到"><a href="#判断一个数能否由若干数的子集异或得到" class="headerlink" title="判断一个数能否由若干数的子集异或得到"></a>判断一个数能否由若干数的子集异或得到</h3><p>假装你要把它插入到线性空间的元素集合中，看线性基是否需要新增元素即可。</p><h3 id="最大子集异或和"><a href="#最大子集异或和" class="headerlink" title="最大子集异或和"></a>最大子集异或和</h3><p>求出线性基，依次考虑线性基的每一位，若异或上能让答案更大（即答案的这一位为零）就异或上。因为如果不异或上，这一位就是零，无论后面的位如何，都比这一位为 $1$ 劣。</p><p><a href="https://www.luogu.org/problemnew/show/P3812" target="_blank" rel="noopener">Luogu P3812 【模板】线性基</a></p><h3 id="第-k-小子集异或和"><a href="#第-k-小子集异或和" class="headerlink" title="第 $k$ 小子集异或和"></a>第 $k$ 小子集异或和</h3><p>需要构造特殊的线性基，满足线性基中有的位都只在线性基中的一个数中出现。例如：原线性基为 <code>1100</code> 和 <code>0111</code>，这时线性基中有 $2,3$ 两位，而第二位（$2^2$ 这一位）在 <code>1100</code> 和 <code>0111</code> 中都出现了，所以应该修改为 <code>1011</code> 和 <code>0111</code>。</p><p>这可以用一个类似于高斯消元的过程完成：处理第 $i$ 位时，依次考虑每个比 $i$ 小的线性基中的位，若第 $i$ 位的该二进制位为 $1$ 就异或这一位。除了先用普通方法构建线性基再转化，也可以在构建时就进行处理（详见代码）。无论哪种方式，复杂度都会再乘上一个额外的二进制位数。</p><p>得到这样一个具有特殊性质的线性基后，就可以构造第 $k$ 小子集异或和了：把 $k$ 二进制拆分，每一位的 $0$ / $1$ 对应异或时选 / 不选线性基<strong>存在的</strong>这一位（比如说，二进制位的 $2^3$ 位对应线性基中第四小的存在的位）。证明也很简单，线性基中存在的位的 <code>0/1</code> 唯一确定了一个异或出的数，由于每个位只在一个基中为 $1​$，这些位组成的二进制数的大小就可以代表异或出的数的大小。</p><p> <a href="https://loj.ac/problem/114" target="_blank" rel="noopener">LOJ #114. k 大异或和</a>，毒瘤题，先不说题目名是假的，这个“非空集合”的限制非常的无聊..$0$ 本来就是线性基的线性组合之一，非要选“非空集合”，就得判一下给你的数中有没有能被其它线性基表示的数，实际上判一下线性基中元素个数是否为 $n​$ 即可。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line">ull p[<span class="number">60</span>], a[<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ull x, k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%llu"</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">51</span>; ~j; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j]) x ^= p[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (k = j - <span class="number">1</span>; ~k; --k) <span class="keyword">if</span> ((x &gt;&gt; k) &amp; <span class="number">1</span>) x ^= p[k];</span><br><span class="line">                    <span class="keyword">for</span> (k = j + <span class="number">1</span>; k &lt;= <span class="number">60</span>; ++k) <span class="keyword">if</span> ((p[k] &gt;&gt; j) &amp; <span class="number">1</span>) p[k] ^= x;</span><br><span class="line">                    p[j] = x;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">51</span>; ++i) <span class="keyword">if</span> (p[i]) a[cnt++] = p[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= (<span class="number">1u</span>ll &lt;&lt; cnt) + (cnt != n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt != n) --k;</span><br><span class="line">        <span class="keyword">for</span> (x = i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1u</span>ll)</span><br><span class="line">            &#123;</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h2><p><a href="https://www.luogu.org/problemnew/show/P3292" target="_blank" rel="noopener">[SCOI2016]幸运数字</a></p><p><a href="https://www.luogu.org/problemnew/show/P4570" target="_blank" rel="noopener">[BJWC2011]元素</a></p><p><a href="https://www.luogu.org/problemnew/show/P3265" target="_blank" rel="noopener">[JLOI2015]装备购买</a></p><p><a href="https://www.luogu.org/problemnew/show/P4301" target="_blank" rel="noopener">[CQOI2013]新Nim游戏</a></p><p><a href="https://www.luogu.org/problemnew/show/P4151" target="_blank" rel="noopener">[WC2011]最大XOR和路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是在网上搜不到讲的比较清楚的博客的算法…虽然没找到写的好的博客，但结合若干篇写的不算太差的博客，勉强是学会了..&lt;/p&gt;
&lt;p&gt;线性基在 OI 中特指集合为若干个非负整数，运算为异或的线性基，通常用来处理一些异或相关的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性基" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
      <category term="线性代数" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>bad round 与出题人的坚守</title>
    <link href="https://ouuan.github.io/bad-round-%E4%B8%8E%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E5%9D%9A%E5%AE%88/"/>
    <id>https://ouuan.github.io/bad-round-与出题人的坚守/</id>
    <published>2019-06-09T04:56:10.000Z</published>
    <updated>2019-06-16T03:27:35.668Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>等你等了五千年，只为这一刹那的回眸一笑。</p></blockquote><p>这句话作为台前幕后的标准开头应该是没问题的。</p><p>只不过果然还是写不出 vfk 的水平啊…写的比较散乱。而且是前后断断续续地写的，有的写于赛前，有的写于赛后，所以会有行文不连贯的地方，可能也会有后来忘记修正的地方。</p><a id="more"></a><h2 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h2><p>（借用一下 vfk 的标题 qaq）</p><p>一切源于一篇博客。</p><p>大约是<a href="https://blog.csdn.net/VFleaKing/article/details/90521383" target="_blank" rel="noopener">这篇</a>和<a href="https://blog.csdn.net/VFleaKing/article/details/90522020" target="_blank" rel="noopener">这篇</a>。</p><p>看到这篇博客的时候，是去年（2018）十二月，手里正有刚刚想到的一个 idea，也就是 1C —— Pictures。</p><p>当时我自己搞了个<a href="https://ouuan.github.io/randpic/people/">简单的随机图片</a>，然后脑海里就冒出了这个 idea，虽然刚想出来的时候并不会做..</p><p>然后就拿着去找 Sooke 了..</p><p>我：您有兴趣看一眼我出的一道题吗？</p><p>Sooke：我会 $2^n​$。</p><p>Sooke：想出洛谷公开赛？</p><p>我：不。</p><p>Sooke：想出 cf？</p><p>我：嗯。</p><img src="/bad-round-与出题人的坚守/sh2d2w.png"><p>翻翻消息记录发现当时自己太天真了…（2 months 都算少的）</p><p>然后我在不会做的情况下第二天写了个英文题面..</p><p>然后 Sooke 给我扔了套他出给 PJ 组的题，让我从里面挑给 Div.2，然后我挑了 2B —— Chess。一开始 Sooke 还想把它放在 2A..</p><p>ylh 想了道不错的 1A，然而后来因为树太多就换掉了..</p><p>然后 PinkRabbit 加入了团队，把 Pictures 切掉了（其实花了 2h…只不过比赛和出题还是不一样的，应该有不少人 A？）。</p><p>之后莫名想到了 2A 的 idea，只不过题面一开始不是 upvote / downvote，是幼儿园里老师给小朋友发两种类型的糖果..后来感觉出 cf 用 upvote / downvote 挺合适的。</p><p>“我们这场要有交互题！” 我在群里喊出这句话，然后没过几天我就在洗澡的时候想到了 <del>1D —— Binary Tree。一开始我还加了个它是堆的限制，过了几个月才想到可以 BFS…树剖的做法是 Sooke 想到的，之前我差点想用我的 nsqrtn 做 std。</del>这道题是这样的，有一棵以 $1$ 为根的二叉树，你可以询问两点间距离，在 $n\log n$ 次询问内求每个点的父亲。</p><p>然后 ylh 想了个 1B，结果最后也没有被采用 qaq</p><p>这样六道题就齐了，然而果然还是不想出 div.2 only 鸭…到处找人要题没要到（包括后来出了<del>两</del>一题的 lk..），结果 lk 跟我说 lxl 可以出题。然后就有了 <del>1F</del>1E。lxl 说要自己写题面，然而一直咕了几个月都没写..</p><p>然后..当时我们的想法是出五题场，把 pictures / binary tree 放 div.1，差点都提交 proposal 了，然而我还是觉得 1B 得换..</p><p>然后，我去了雅礼集训，和 lk 面基了，<del>就有了 1E —— GCD。一开始 GCD 是没有根号不带 log 做法的，可 lxl 问了 ccz，就有了。</del></p><p>然后 Sooke 出了一道 dl 的博弈论，我不太喜欢，然而一开始还是让它过了..最后还是给换了 qaq</p><p>后来 lk 出了 2C（一开始手牌和牌堆的牌不一定相等，我不会做，就改成了相等..），Sooke 拿出了 2D，这场就有了。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>一开始我们还想抢 round 555 的（受 vfk 250 的影响 qaq）..</p><p>给 300iq 发了个私信，问什么时候能审，能不能抢 555。然后..</p><img src="/bad-round-与出题人的坚守/pm.png"><p>一开始还以为可以的，结果发现第一条才是真的，第二条是假的..（注意 cf 私信顺序从下往上）</p><p>我们之前出题的时候就几乎把 <a href="https://polygon.codeforces.com/" target="_blank" rel="noopener">Polygon</a> 上要干的事干完了，然而，Aleph0（round 551 出题人）发来了一份 cf 出题须知（不知道是不是 vfk 博客里提到那个长篇英语阅读..），然后发现一堆东西要改..只不过一两天也就改完了。最大的问题是数据要么纯手造要么用 generator，即不能用数据生成器生成出来放 Polygon 上..我自己造的数据还好，lxl 的数据 generator 的参数已经弄丢了，<del>而且lxl 又特别咕</del>。</p><p>听说 300iq 有 qq，所以就试着加了一下 300iq，拉进了群里。</p><p>然后是 300iq 开始审（gu）题（gu），题目比较顺利地全过审了，（然而断断续续的等了好几天），binary tree 获得了 “Great problem!” 的评价。得知必须放 Java 过，然而不需要让 Java 在一半时限内通过（尤指 GCD 这题，不然卡不掉带 log 做法了…），还是比较可以接受的..</p><p>300iq 好像有验不完的题和无尽的 coordinating，所以经常失踪..<del>contribution 只排第七举报了。</del></p><p>决定比赛时间真是件难事..从一开始的 round 555 抢不到，到 5.18 是 APIO &amp; 俄罗斯最后一轮国家队选拔（这俩是一个东西..），再到 5.21 ~ 5.26 得放弃 whk / sc 选手，然后 6.8 和 Google Code Jam 冲突，6 月一堆 whk 考试，7 月不仅太晚还有 ISIJ，NOI……无论选什么时间都会放弃一部分人，<font color="white">就像某部门决定调整某些政策一样。</font></p><p>最后还是端午节拯救世界..大家好像都比较同意 6.7。</p><p>从北京回来的高铁上，突然看到 Sooke 在群里“A big hug to 300iq!”</p><p>诶诶诶，上 contests 了！</p><p>诶诶诶，之前开玩笑说的 0x233 真来了！</p><p>于是想搞个什么宣传一下。</p><p>想了想感觉雀不错，就 p 了张图：</p><img src="/bad-round-与出题人的坚守/poster.jpg"><p>结果最后还是插进来一场 Div.2 … 0x233 没了…</p><p>lxl 自己说要写题面，咕了两个多月，终于：</p><img src="/bad-round-与出题人的坚守/bxlb.png"><p>然后 xht37 和神仙 rushcheyo 都来验题了。听说所有题都被 rushcheyo 秒了..</p><h2 id="风怒"><a href="#风怒" class="headerlink" title="风怒"></a>风怒</h2><p>Round #0x233 开始了。</p><p>Sooke：这个 F 也是树上问距离诶。</p><p>我：好像和 WC2018 即时战略有点像？</p><p>再一看..<del>非常冷静地</del>在群里宣布，我们的 1D binary tree 没了。</p><p>二叉树被替换为了操作二，剩下的部分和我们题的做法完全一样——树剖。</p><p>感觉挺难受的..赛前四天撞题谁顶得住啊。而且我自己挺喜欢这题的，感觉做法非常巧妙。而且我们的题不给出树的形态，有的做法只能过那道题，不能过我们这题。</p><p>只不过 Sooke 之前就提过 Portals 这道题，于是就想换成 Portals。</p><p>一波未平，一波又起。</p><p>cy：这个 GCD 好像和一场中国比赛有点像。</p><p>然后扔上来一篇题解，求的东西不一样，但做法大同小异。</p><p>ok，风怒撞题。</p><p>然后群里就各种方案了..</p><p>cy 扔上来了四道题..</p><p>lk：我去找 _rqy 要一道计数！</p><p>lxl：第十一分块！</p><p>于此同时，我们发现 Portals 原来想的做法是假的，给 300iq 也没能切掉..</p><p>当时有点想出五题场，或者强行把 GCD 出出来，毕竟不完全一样。</p><p>只不过好消息还是传来了，Sooke 想到了 Portals 的正解，Bug（<del>其实我现在想换这题名字了，还是 modadd 好听</del>）的分块做法和线段树做法也相继有了。</p><p>然后，经过讨论，我们<del>不知道为什么</del>觉得换题之后码量比原来减少了，结果就决定把时间改成 2h。</p><p>lk 坚持认为 portals 是一道非常难的题。cy 给 portals 的评分比 1EF 都高。最后还是放在了 1D。<del>然后赛后被喷 PJ 题放 1D。</del>最后每题 AC 人数还是单调下降的，<del>说明题目顺序安排的没有任何问题。</del>关于 cards 和 circle，我们是认为对于 div.2 选手 circle 更难，而 div.1 选手顺切无所谓，所以就这样放了。而且 circle 更简单也可能是对于中国选手。<del>而且我们这场每个偶数题都比前一题好写。</del></p><p>因为 cy 把 lxl 题切了，modadd 做了比较久，而且 lxl 和 300iq 都认为 modadd 更难，而且我看了题解之后会做 lxl 题不会 modadd，所以就把 modadd 放在了 F。</p><p>于是比赛的题目得到了最终的确定，也就是大家看到的这几题。</p><p>然后就是紧张的造题了。</p><p>写 modadd 题面里的伪代码时，去网上搜了半天，终于搞出来了一份特别丑的..然后想起来 3 LGM 那场 Chinese Round 的 G 有伪代码，就去找象要，结果没要到..自己研究了半天文档还是不会，就去找 zzq 要，然后顺利要到了。</p><p>由于自己本来就菜，又被长期的睡眠不足 + 极度紧张的造题给降智，我看了半天 cy 写的 modadd 题解都不会做..然后我要在不会做的情况下造数据..就胡乱造了一点。只不过这题就算纯随机应该也够强。</p><p>本来 lxl 题的数据也是个大问题，我自己是个链菊花随机完全二叉树出题人，lxl 又是只鸽子..幸好 300iq 帮忙造了一点数据，把 Spaly（单旋）也卡掉了。</p><p>大约在比赛前 2h，基本上所有东西都造完了。然后，KAN 突然在赛前 1h 出现，<del>删掉了一堆题面里的逗号</del>，提了一堆题面的 Issues..然后就不停修锅，差点都忘记发 scoring distribution 了。</p><p>赛前 5min 的时候终于把 KAN 提的所有 Issues fix 了..</p><p>为了连贯性先讲了下造题的事。</p><p>然后是上帝视角..其实其它权限都没怎么用，只不过 ban 掉了 xht37 参加比赛（</p><p><del>只不过有的选项看着很爽</del>，比如，一开始 problems 是空的你可以 add problems（最后是 300iq 还是谁加的，那时我还在修锅），还有喜闻乐见的 Is it rated? 选项，rated 范围，能否查看排行榜，什么时候开始封榜，能不能 vp。</p><p>赛前在造锅和修锅之余，也会盯着 registrants 看。然后就看到 JOHNKRAM 报了，司报了，xyx 报了，myy 报了，ACRush 报了，_rqy 报了，txc 报了，Radewoosh 报了，<del>800iq 报了</del>，dmy 报了，kcz 报了，yyb 报了，ljh 报了，wqy 报了，yww 报了……群里大约就是上文去掉逗号，加上换行符和感叹号。</p><p>最后倒计时的时候真的就像 vfk 那篇博客一样。</p><p>还有 5 秒。</p><p>题面有锅吗？</p><p>还有 4 秒。</p><p>数据有锅吗？</p><p>还有 3 秒。</p><p>题面或者数据有锅吗？</p><p>还有 2 秒。</p><p>题面和数据有锅吗？</p><p>还有 1 秒。</p><p>有锅也修不了了，<del>contribution 见鬼去吧！</del></p><p>…..</p><p>没办法，赛前 5min 还在修锅的我就是这么想的..只不过最后除了 circle 的样例解释没什么锅。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>比赛就这么开始了。cf 并没有卡诶。</p><p>Div.1 怎么卡住了..</p><p>完了，史上最难 1A 实锤了..</p><p>6min 的时候终于有人过了 1A，div.2 那边已经成片过 A 了。</p><p>然后第二个 div.1 AC 是 B..完了，要被喷 swap(A, B) 了。</p><p>25min 的时候有人过 1D 了。赛前我就奶过 portals 一血会比 pictures 早，lk 还不信。</p><p>然后我们就看着司登顶之后一点点地往下掉..</p><p>赛时真的可以看 system test 的结果，只不过评测优先度比较低。在 problems 界面还可以看到每题已经测了几个人的 st，其中有多少个过了。成功让 Sooke 学到了再强的 pt 也会有人 fst 这个道理。</p><p>当然我们还得回答参赛者的提问。</p><blockquote><p>what mean is the draw the top card from the pile?</p><p>意思是 可以在最顶上的一张画画？</p></blockquote><p>海星，是不是可以画数字上去。</p><blockquote><p>In Test 1</p><p>why is the output:</p><p>2</p><p>1 1</p><p>2 1</p><p>is wrong?</p><p>I think it is legitimate.</p></blockquote><p>一看评测记录，他第一行输出的 1，悲惨的故事。</p><p>问的最多的是 pictures 权值减到负怎么办..于是让 300iq 发了个 announcement。</p><p>还有一位坚称 cards 样例 3 答案是 16 的老哥，好像是在手上把牌排好序了。</p><blockquote><p>Hi! I am a Chinese! Could you explain why there is a “19****17” in the sample 3?</p></blockquote><p>回答分为 text，yes，no 和 no comments，正好可以回答他。</p><blockquote><p>problem D in the example the edges for bad permutation are drawn incorrectly</p></blockquote><p>嗯，额，诶？？woc 真的画错了..打开本地造 notes 的 pptx，发现是对的..这个锅 Sooke 背了。</p><p>赶紧让 300iq 发了个 announcement，然后去修锅。</p><p>修好了之后让 300iq 发个 fixed，结果一直没发..</p><p>然后看到司在猛肝 1F..然后听群友们说，他写的是 1 log 正解，被卡常了..woc，那不是得去谢罪，卡分块把 treap 卡掉了..但我们不能做什么，只能为他默哀。后来才听说司写的 $\log^2$..</p><p>300iq：check it out，<a href="https://codeforces.com/contest/1172/submission/55260499" target="_blank" rel="noopener">https://codeforces.com/contest/1172/submission/55260499</a> 。</p><p>然后之后半个小时几乎都在尝试卡他..然而根本卡不掉..赛后私信问他，也没太看懂他的做法，只不过他说他相信这个做法是对的..</p><p>然后在迷迷糊糊的看榜，回答问题，尝试卡人中，2h 就这么过去了。</p><p>dmy 被我们送上黑红了，然而好多神仙被狙了..</p><p>1F 的英文题解还没好..contribution 要没了。</p><p>果然比赛结束 announcement 的 up 就开始往下掉，只不过没掉很多。</p><p>有位神仙 hack 了 cards，而且是 hack 了过了 st 的..之后我才发现，我之前没意识到不打空白牌可能步数比求那个 max 还大，他的 test 就是针对这个卡的，如果你发现能直接 1~n 就输出答案就过了，如果把两者取 min 就挂了。</p><p>然后开始弄中文题解。hexo 博客折叠块总是漏掉百分号，漏掉引号，搞了半个多小时才搞好..</p><p>搞了一整天，整个人都非常晕，然而这时我要尝试去写自己还不完全会的 1F 的英文题解..写到一半还是放弃了，就去发 editorial，先把 1F 空着了。</p><p>之后 300iq 同意帮忙写题解，就去睡觉了。</p><p>自我感觉 good problems, bad round。如果能不强求在原定的端午节把比赛出出来，或许能办的更好。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>出这场 cf，究竟是为了什么。</p><p>肯定不是为了钱。虽然 cf 会发工资，但要是为了钱，我肯定不会去出 cf，要耗费的时间精力太多了。</p><p>真的不推荐其他人在退役之前去出 cf，不然的话，可能出着出着就退役了。</p><p>把这么多本可以用来刷题的时间用来出 cf，后悔吗？</p><p>其实，也是一份宝贵的经历吧。与其说后悔，不如说害怕自己的努力不被人认可，如果数百小时的努力换来的是他人的批评甚至 unrated，可能就真的不只是后悔了。</p><p>出这场 cf，我得到了什么呢？</p><p>以往的团队合作中，我要么是作为参与者而非组织者，要么其他成员都只是默默完成自己的任务。而且所谓的“团队合作”多半是学校里所谓的“研究性学习”。要统一各方面的意见，的确是一件难事。一开始面对“fst 是 cf 灵魂”的 Sooke（看来他负责的 cards 挺有灵魂的…），然后是“我一眼就切了”和“我想不到啊”的 lk，“来道大分块啊” 的 lxl，还有自说自话，不对自己说的话里提到的概念加以定义或解释，让人根本看不懂的 cy。协调各方的意见可能是一件需要学习的事情吧。</p><p>然后的话，也是影响比较大的，我对题目和出题人的要求提升了很多。回首自己之前在洛谷的两场公开赛，第一场漏洞满篇，<del>满屏毒瘤</del>，第二场也有不少的问题。出了 cf 之后，不仅是自己出题变得更加规范了，对自己做的题要求也更严了。国内很多题目质量堪忧，因为题目的外在（题面、题解、数据范围、输入输出格式）而非 idea 本身过于毒瘤而不想做题的事也会发生，抱怨其他题目、比赛成了家常便饭。但回首想来，我也是从一个毒瘤大模拟、无意义 dp 出题人成长起来的。</p><p>我讨厌不用心的出题人，讨厌不严谨甚至误导人的博客，因为，我认为出题给别人做、写博客给别人看是应当对别人负责的。如果没有精力、不想负责的话，出题给自己做，博客保存在本地就好了，发出来干什么？即使是能力不够，也得有认真负责的态度才行。如果没有，别人骂你，只当骂醒好了。如果骂不醒，那着实该骂。</p><blockquote><p>一道好题应该被仔细推敲过。好题应该有很强的数据，好题应该有清晰的题面，好题的标程应该优美题解应该详尽。</p><p>一道好题不应该是两道题拼在一起，一道好题会有自己的idea —— 而它应该不加过多包装地突出这个idea。</p><p>一道好题应该新颖。真正的好题，应该是能让人脑洞出新的好题的好题。</p><p>一道好题应该具有它的选拔性质，具有足够的区分度。应该至少4档部分分，让新手可以拿到分，让高手能够展示自己的实力。</p><p>—— vfk《<a href="http://vfleaking.blog.uoj.ac/blog/909" target="_blank" rel="noopener">UOJ精神之源流</a>》</p></blockquote><p>当我指出其他人题目里的种种不足，当我抛开他人博客中不严谨的话语而豁然开朗大叫原文之漏洞满篇时，有没有想过他人付出的心血呢？当然有，只是我认为尊重不是基于付出，而是基于负责的态度，基于真正做了什么的。就好比你追一个女孩子，辛辛苦苦付出了那么多，如果不提升自己，如果不付出真心，别人凭什么喜欢你？</p><p>说到底，对写给别人的东西负责，是我自己的一种坚守，我自己并不是总能做到，也不是生来就能做到。但我会努力去做，无论在怎样的大环境下，我想尽我所能创造一片小小的净土。</p><blockquote><p>我们所可以自慰的，想来想去，也还是所谓对于将来的希望。希望是附丽于存在的，有存在，便有希望，有希望，便是光明。如果历史家的话不是诳话，则世界上的事物可还没有因为黑暗而长存的先例。黑暗只能附丽于渐就灭亡的事物，一灭亡，黑暗也就一同灭亡了，它不永久。然而将来是永远要有的，并且总要光明起来;只要不做黑暗的附着物，为光明而灭亡，则我们一定有悠久的将来，而且一定是光明的将来。</p><p>—— 鲁迅《记谈话》（十二省联考 2019 hope 题解）</p></blockquote><p>说回这场 cf，我按照 cf 出题规范去出题，一遍遍地检查，直接原因当然是 cf 是如此要求的。但我这么去做，绝不只是为了过审，而是为了上千名参赛者，我认为我有理由以认真负责的态度，准备一场好的 cf，呈现给大家 —— 当然也包括正在读着这篇博客的你。</p><p>现在我也能够体会到 vfk 当时写《UOJ精神之源流》时的心情了。执著的坚守与残酷现实的矛盾，出题人与参赛者的隔阂，心中交杂的歉意与不甘……无论这场 cf 是否让你满意，我想，我做到了我应该做的，仍然走在自己一直坚持的那条路上。</p><p>尽管发生了一些意外，或许这场 cf 并不让你满意，但我认为，I did my best.</p><p>附：cf 出题须知</p><img src="/bad-round-与出题人的坚守/rules.jpg">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;等你等了五千年，只为这一刹那的回眸一笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话作为台前幕后的标准开头应该是没问题的。&lt;/p&gt;
&lt;p&gt;只不过果然还是写不出 vfk 的水平啊…写的比较散乱。而且是前后断断续续地写的，有的写于赛前，有的写于赛后，所以会有行文不连贯的地方，可能也会有后来忘记修正的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="出题" scheme="https://ouuan.github.io/categories/%E5%87%BA%E9%A2%98/"/>
    
    
      <category term="Codeforces" scheme="https://ouuan.github.io/tags/Codeforces/"/>
    
      <category term="出题" scheme="https://ouuan.github.io/tags/%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #564 中文题解</title>
    <link href="https://ouuan.github.io/Codeforces-Round-564-%E4%B8%AD%E6%96%87%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/Codeforces-Round-564-中文题解/</id>
    <published>2019-06-07T14:38:47.000Z</published>
    <updated>2019-06-16T03:27:09.063Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/bad-round-与出题人的坚守">台前幕后</a></p><p><a href="https://codeforces.com/contest/1172" target="_blank" rel="noopener">contest on CF</a></p><a id="more"></a><h1 id="2A-Nauuo-and-Votes"><a href="#2A-Nauuo-and-Votes" class="headerlink" title="2A Nauuo and Votes"></a><a href="https://codeforces.com/problemset/problem/1173/A" target="_blank" rel="noopener">2A Nauuo and Votes</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>$x$ 个人 upvote，$y$ 个人 downvote，$z$ 个人随机 upvote / downvote，问最后总计 up 的多 / down 的多 / up = down / 结果不确定。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>考虑两种极端情况：</p><ol><li>所有随机投的人都 upvote。</li><li>所有随机投的人都 downvote。</li></ol><p>如果这两种情况结果一样，结果就是答案；否则结果不确定。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> result[<span class="number">4</span>] = &#123;<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'0'</span>, <span class="string">'?'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == y ? <span class="number">2</span> : x &lt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; result[solve(x + z, y) == solve(x, y + z) ? solve(x, y) : <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="2B-Nauuo-and-Chess"><a href="#2B-Nauuo-and-Chess" class="headerlink" title="2B Nauuo and Chess"></a><a href="https://codeforces.com/problemset/problem/1173/B" target="_blank" rel="noopener">2B Nauuo and Chess</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>在一个 $m\times m$ 的棋盘上放 $n$ 颗棋子，第 $i$ 颗棋子的坐标为 $(r_i,c_i)$，需要满足 $|r_i-r_j|+|c_i-c_j|\ge|i-j|$，求 $m$ 的最小值以及任意一种摆放方案。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><ol><li><p>$m\ge\left\lfloor\frac n 2\right\rfloor+1$</p><p>$\because\begin{cases}|r_1-r_n|+|c_1-c_n|\ge n-1\|r_1-r_n|\le m-1\|c_1-c_n|\le m-1\end{cases}$</p><p>$\therefore m-1+m-1\ge n-1$</p><p>$\therefore m\ge\frac{n+1}2$</p><p>$\because m\text{是整数}$</p><p>$\therefore m\ge\left\lfloor\frac n 2\right\rfloor+1$</p></li><li><p>$m$ 可以取到 $\left\lfloor\frac n 2\right\rfloor+1$</p><p>在每一斜行放一颗棋子即可，即：$r_i+c_i=i+1$。因为 $|r_i-r_j|+|c_i-c_j|\ge|r_i+c_i-r_j-c_j|$。</p></li></ol></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, ans;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    ans = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= ans; ++i) <span class="built_in">printf</span>(<span class="string">"\n%d 1"</span>, i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n - ans + <span class="number">1</span>; ++i) <span class="built_in">printf</span>(<span class="string">"\n%d %d"</span>, ans, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1A-Nauuo-and-Cards"><a href="#1A-Nauuo-and-Cards" class="headerlink" title="1A Nauuo and Cards"></a><a href="https://codeforces.com/problemset/problem/1172/A" target="_blank" rel="noopener">1A Nauuo and Cards</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>$n$ 张带标号的牌和 $n$ 张空白牌，$n$ 张在手上剩下在牌堆里（牌堆有序），每次可以从手上选一张牌放牌堆底部并从牌堆顶部抽一张牌，需要使牌堆从上到下递增地放 $1$ ~ $n$，求最小操作数。</p><p>$1\le n\le2\times10^5$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>首先尝试不打空白牌能否直接完成。如果能就是最优解，否则最优解一定是先打若干空白牌然后再也不打空白牌。计 $p_i$ 为 $i$ 在牌堆的初始位置（初始在手上为 $0$），那么答案为 $\max\limits_{i = 1}^n(p_i - i + 1 + n)$（每张牌最早在第 $p_i + 1$ 张被打出，还要打 $n-i$ 张）。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], p[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        p[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">        p[b[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; p[i] == p[<span class="number">1</span>] + i - <span class="number">1</span>; ++i);</span><br><span class="line">        <span class="keyword">if</span> (p[i - <span class="number">1</span>] == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt;= n &amp;&amp; p[j] &lt;= j - i; ++j);</span><br><span class="line">            <span class="keyword">if</span> (j &gt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) ans = max(ans, p[i] - i + <span class="number">1</span> + n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1B-Nauuo-and-Circle"><a href="#1B-Nauuo-and-Circle" class="headerlink" title="1B Nauuo and Circle"></a><a href="https://codeforces.com/problemset/problem/1172/B" target="_blank" rel="noopener">1B Nauuo and Circle</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>圆上画一 $n$ 点树，树给定，边要求直而不交，画法与排列一一对应，求方案数。</p><p>$2\le n\le 2\times10^5$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>首先，如果选一个根使其变为有根树，可以发现每棵子树一定在一段连续的弧上。</p><p>考虑 DP，令 $f_u$ 为子树 $u$ 方案数，那么 $f_u=(|son(u)| + [u\ne root])!\prod\limits_{v\in son(u)}f_v$，$ans = nf_{root}​$。（先固定根的位置，每棵子树要为儿子排位置，如果非根自己也要参与排位置，然后再画子树。）</p><p>事实上不需要 DP，答案为每个点的度数阶乘之积乘上 $n​$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans, d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, u, v;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    ans = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        ans = (ll) ans * (++d[u]) % mod * (++d[v]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1C-Nauuo-and-Pictures"><a href="#1C-Nauuo-and-Pictures" class="headerlink" title="1C Nauuo and Pictures"></a><a href="https://codeforces.com/problemset/problem/1172/C2" target="_blank" rel="noopener">1C Nauuo and Pictures</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>给你一个长度为 $n$ 的数列 $w_{1..n}$，其中有一些位置是”被喜欢的”，其它位置是“不被喜欢的”，进行 $m$ 次操作，每次随机选一个数，选到第 $i$ 个数的概率是 $\frac{w_i}{\sum_{j=1}^nw_j}$，如果选到一个“被喜欢的”位置，就会把这个位置上的数加一，否则减一。问 $m$ 次操作过后每个数的期望值，对 $998244353$ 取模。</p><p>$1\le n\le2\times 10^5$，$1\le m\le3000$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p><strong>裸dp</strong></p><p>先只看一个“被喜欢的”位置，这个位置的初始值是 $w$。</p><p>计 $SA$ 为“被喜欢的”数之和，$SB$ 为“不被喜欢的”数之和。</p><p>令 $f_w[i][j][k]$ 表示：现在 $SA=j$，$SB=k$，一个值为 $w$ 、“被喜欢的”位置经过 $i$ 次操作后的期望值。</p><p>边界情况：$f_w[0][j][k]=w$。</p><p>转移：</p><ol><li>下一次操作选到了当前这个位置。概率：$\frac w{j+k}$。转移到：$f_{w+1}[i-1][j+1][k]$。</li><li>下一次操作选到了另一个“被喜欢的”位置。概率：$\frac{j-w}{j+k}$。转移到：$f_w[i-1][j+1][k]$。</li><li>下一次操作选到了一个“不被喜欢的”位置。概率：$\frac k{j+k}$。转移到：$f_w[i-1][j][k-1]$。</li></ol><p>所以，$f_w[i][j][k]=\frac w{j+k}f_{w+1}[i-1][j+1][k]+\frac{j-w}{j+k}f_w[i-1][j+1][k]+\frac k{j+k}f_w[i-1][j][k-1]​$。</p><p>令 $g_w[i][j][k]$ 表示“不被喜欢的”的对应状态，计算方式类似。</p><p>这样大约能过简单版。</p><p><strong>优化</strong></p><p>有两个优化：</p><ol><li><p>$f_w[i][j][k]=wf_1[i][j][k]$</p><p>证明：</p><p>$i=0$ 时显然成立。</p><p>假设已经证明了 $f_w[i-1][j][k]=wf_1[i-1][j][k]$，就可以归纳地证明 $f_w[i][j][k]=wf_1[i][j][k]$：</p><p>$\begin{aligned}f_1[i][j][k]&amp;=\frac 1{j+k}f_2[i-1][j+1][k]+\frac{j-1}{j+k}f_1[i-1][j+1][k]+\frac k{j+k}f_1[i-1][j][k-1]\\&amp;=\frac2{j+k}f_1[i-1][j+1][k]+\frac{j-1}{j+k}f_1[i-1][j+1][k]+\frac k{j+k}f_1[i-1][j][k-1]\\&amp;=\frac{j+1}{j+k}f_1[i-1][j+1][k]+\frac k{j+k}f_1[i-1][j][k-1]\end{aligned}$</p><p>$\begin{aligned}f_w[i][j][k]&amp;=\frac w{j+k}f_{w+1}[i-1][j+1][k]+\frac{j-w}{j+k}f_w[i-1][j+1][k]+\frac k{j+k}f_w[i-1][j][k-1]\\&amp;=\frac{w(w+1)}{j+k}f_1[i-1][j+1][k]+\frac{w(j-w)}{j+k}f_1[i-1][j+1][k]+\frac {wk}{j+k}f_1[i-1][j][k-1]\\&amp;=\frac{w(j+1)}{j+k}f_1[i-1][j+1][k]+\frac {wk}{j+k}f_1[i-1][j][k-1]\\&amp;=wf_1[i][j][k]\end{aligned}$</p><p>还有一个比较简单但不那么严谨的理解方式：每一步期望的增量都与期望成正比。（这里被 _rqy 喷了，出题人就是菜，这个证明写不严谨。）</p><p>这样的话就只用计算 $f_1[i][j][k]$ 了。</p></li><li><p>注意到 $i,\,j,\,k,\,m$ 有一些联系。实际上可以令 $f’_w[i][j]$ 表示 $f_w[m-i-j][SA+i][SB-j]$（这里的 $SA$ 和 $SB$ 都是未操作时的初始值）。</p></li></ol><p>令 $g’_1[i][j]$ 表示 $g_w[m-i-j][SA+i][SB-j]$，计算方式类似。</p><p><strong>总结</strong></p><p>$f’_1[i][j]=1 (i+j=m)$</p><p>$f’_1[i][j]=\frac{SA+i+1}{SA+SB+i-j}f’_1[i+1][j]+\frac{SB-j}{SA+SB+i-j}f’_1[i][j+1] (i+j&lt;m)$</p><p>$g’_1[i][j]=1 (i+j=m)$</p><p>$g’_1[i][j]=\frac{SA+i}{SA+SB+i-j}g’_1[i+1][j]+\frac{SB-j-1}{SA+SB+i-j}g’_1[i][j+1] (i+j&lt;m)$</p><p>“被喜欢的”位置答案是 $w_if’_1[0][0]$，“不被喜欢的”位置答案是 $w_ig’_1[0][0]$。</p><p>如果每次去算逆元就是 $\mathcal O(n+m^2\log p)$，预处理出来就是 $\mathcal O(n+m^2+m\log p)$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//calculate the modular multiplicative inverse</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">x = (ll) x * x % mod;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], w[N], f[M][M], g[M][M], inv[M &lt;&lt; <span class="number">1</span>], sum[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</span><br><span class="line">sum[a[i]] += w[i];</span><br><span class="line">sum[<span class="number">2</span>] += w[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = max(<span class="number">0</span>, m - sum[<span class="number">0</span>]); i &lt;= <span class="number">2</span> * m; ++i) inv[i] = qpow(sum[<span class="number">2</span>] + i - m, mod - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = m; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">f[i][m - i] = g[i][m - i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = min(m - i - <span class="number">1</span>, sum[<span class="number">0</span>]); j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j] = ((ll) (sum[<span class="number">1</span>] + i + <span class="number">1</span>) * f[i + <span class="number">1</span>][j] + (ll) (sum[<span class="number">0</span>] - j) * f[i][j + <span class="number">1</span>]) % mod * inv[i - j + m] % mod;</span><br><span class="line">g[i][j] = ((ll) (sum[<span class="number">1</span>] + i) * g[i + <span class="number">1</span>][j] + (ll) (sum[<span class="number">0</span>] - j - <span class="number">1</span>) * g[i][j + <span class="number">1</span>]) % mod * inv[i - j + m] % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">int</span>((ll) w[i] * (a[i] ? f[<span class="number">0</span>][<span class="number">0</span>] : g[<span class="number">0</span>][<span class="number">0</span>]) % mod));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1D-Nauuo-and-Portals"><a href="#1D-Nauuo-and-Portals" class="headerlink" title="1D Nauuo and Portals"></a><a href="https://codeforces.com/problemset/problem/1172/D" target="_blank" rel="noopener">1D Nauuo and Portals</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>在一个 $n\times n$ 的网格里放传送门，指定从第 $i$ 行进从第 $r_i$ 行出，从第 $i$ 列进从第 $c_i$ 列出，$r_{1..n}$ 和 $c_{1..n}$ 都是排列，求方案。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>考虑一个 $n*n$ 的问题如何转化成 $(n-1)\times(n-1)$：满足第一行和第一列。</p><p>如果已经满足直接变成 $(n-1)\times(n-1)$。</p><p>否则找到第一行中应该放在第一列那个和第一列中应该放在第一行那个，这两个位置各放一个传送门即可。</p><p>这题可以 $\mathcal O(n)$ 做，但 checker 要 $\mathcal O(n^2)$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Portal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, p, q;</span><br><span class="line">Portal(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _p, <span class="keyword">int</span> _q): x(_x), y(_y), p(_p), q(_q) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Portal&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], c[N], d[N], ra[N], rb[N], rc[N], rd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">rb[b[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">ra[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) c[i] = d[i] = rc[i] = rd[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] == ra[i] &amp;&amp; d[i] == rb[i]) <span class="keyword">continue</span>;</span><br><span class="line">ans.push_back(Portal(i, rc[ra[i]], rd[rb[i]], i));</span><br><span class="line"><span class="keyword">int</span> t1 = c[i];</span><br><span class="line"><span class="keyword">int</span> t2 = d[i];</span><br><span class="line">swap(c[i], c[rc[ra[i]]]);</span><br><span class="line">swap(d[i], d[rd[rb[i]]]);</span><br><span class="line">swap(rc[ra[i]], rc[t1]);</span><br><span class="line">swap(rd[rb[i]], rd[t2]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> k : ans) <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>, k.x, k.y, k.p, k.q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1E-Nauuo-and-ODT"><a href="#1E-Nauuo-and-ODT" class="headerlink" title="1E Nauuo and ODT"></a><a href="https://codeforces.com/problemset/problem/1172/E" target="_blank" rel="noopener">1E Nauuo and ODT</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>给你一棵 $n$ 个点，点有颜色的树。一条简单路径的权值是其上颜色数，求所有简单路径的权值之和（路径有序，即 $u\rightarrow v$ 和 $v\rightarrow u$ 算两条）。带修，$m$ 次单点颜色修改，每修改一次输出一次。</p><p>$n,m\le 4\times10^5$，$7.5s$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>对每种颜色分别考虑不含该颜色的简单路径条数。</p><p>令当前处理的颜色为 $c$，把颜色为 $c$ 的视为白色，不是 $c$ 的视为黑色，那么不含 $c$ 的路径条数就是每个黑联通块的大小的平方和，修改就是当颜色是 $c$ $\leftrightarrow$ 颜色不是 $c$ 时翻转一个点的颜色。所以，问题转化成了黑白两色的树，单点翻转颜色，维护黑联通块大小的平方和。这个转化后的问题可以用很多数据结构做，比如：<del>lxl：top tree 随便维护</del>。这篇题解里使用 Link/cut Tree.</p><p>对每个点维护子树大小，儿子大小平方和，在 link/cut 的时候更新答案即可。有一个<del>大家熟知的</del> trick，就是每个黑点向父亲连边，这样真正的联通块就是 Link/cut Tree 里的联通块删掉根。</p><p>具体看图吧，图讲的挺清楚的：</p><p><img src="/Codeforces-Round-564-中文题解/tutorial1.png"></p><p><img src="/Codeforces-Round-564-中文题解/tutorial2.png"></p><p><img src="/Codeforces-Round-564-中文题解/tutorial3.png"></p><p>LCT 的部分就是这样，计算答案的时候先初始化一个全是黑点的树，离线处理每个颜色，处理完一个颜色反着改回去。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa, ch[<span class="number">2</span>], siz, sizi;</span><br><span class="line">    ll siz2i;</span><br><span class="line">    <span class="function">ll <span class="title">siz2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (ll) siz * siz; &#125;</span><br><span class="line">&#125; t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"><span class="keyword">int</span> n, m, c[N], f[N];</span><br><span class="line">ll ans, delta[N];</span><br><span class="line"><span class="keyword">bool</span> bw[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mod[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, u, v;</span><br><span class="line">    ll last;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, c + i);</span><br><span class="line">        mod[c[i]][<span class="number">0</span>].push_back(i);</span><br><span class="line">        mod[c[i]][<span class="number">1</span>].push_back(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) t[i].siz = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v);</span><br><span class="line">        add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        mod[c[u]][<span class="number">0</span>].push_back(u);</span><br><span class="line">        mod[c[u]][<span class="number">1</span>].push_back(i);</span><br><span class="line">        c[u] = v;</span><br><span class="line">        mod[v][<span class="number">0</span>].push_back(u);</span><br><span class="line">        mod[v][<span class="number">1</span>].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) link(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mod[i][<span class="number">0</span>].size())</span><br><span class="line">        &#123;</span><br><span class="line">            delta[<span class="number">0</span>] += (ll)n * n;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mod[i][<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            delta[<span class="number">0</span>] += (ll)n * n;</span><br><span class="line">            last = (ll)n * n;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mod[i][<span class="number">0</span>].size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            u = mod[i][<span class="number">0</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (bw[u] ^= <span class="number">1</span>)</span><br><span class="line">                cut(u);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                link(u);</span><br><span class="line">            <span class="keyword">if</span> (j == mod[i][<span class="number">0</span>].size() - <span class="number">1</span> || mod[i][<span class="number">1</span>][j + <span class="number">1</span>] != mod[i][<span class="number">1</span>][j])</span><br><span class="line">            &#123;</span><br><span class="line">                delta[mod[i][<span class="number">1</span>][j]] += ans - last;</span><br><span class="line">                last = ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = mod[i][<span class="number">0</span>].size() - <span class="number">1</span>; ~j; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            u = mod[i][<span class="number">0</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (bw[u] ^= <span class="number">1</span>)</span><br><span class="line">                cut(u);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                link(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = (ll) n * n * n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans -= delta[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d "</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == t[t[x].fa].ch[<span class="number">0</span>] || x == t[t[x].fa].ch[<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = t[x].fa;</span><br><span class="line">    <span class="keyword">int</span> z = t[y].fa;</span><br><span class="line">    <span class="keyword">int</span> k = x == t[y].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (nroot(y)) t[z].ch[y == t[z].ch[<span class="number">1</span>]] = x;</span><br><span class="line">    t[x].fa = z;</span><br><span class="line">    t[y].ch[k] = t[x].ch[k ^ <span class="number">1</span>];</span><br><span class="line">    t[t[x].ch[k ^ <span class="number">1</span>]].fa = y;</span><br><span class="line">    t[x].ch[k ^ <span class="number">1</span>] = y;</span><br><span class="line">    t[y].fa = x;</span><br><span class="line">    pushup(y);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (nroot(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = t[x].fa;</span><br><span class="line">        <span class="keyword">int</span> z = t[y].fa;</span><br><span class="line">        <span class="keyword">if</span> (nroot(y)) (x == t[y].ch[<span class="number">1</span>]) ^ (y == t[z].ch[<span class="number">1</span>]) ? rotate(x) : rotate(y);</span><br><span class="line">        rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; x; x = t[y = x].fa)</span><br><span class="line">    &#123;</span><br><span class="line">        Splay(x);</span><br><span class="line">        t[x].sizi += t[t[x].ch[<span class="number">1</span>]].siz;</span><br><span class="line">        t[x].sizi -= t[y].siz;</span><br><span class="line">        t[x].siz2i += t[t[x].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">        t[x].siz2i -= t[y].siz2();</span><br><span class="line">        t[x].ch[<span class="number">1</span>] = y;</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(x);</span><br><span class="line">    <span class="keyword">while</span> (t[x].ch[<span class="number">0</span>]) x = t[x].ch[<span class="number">0</span>];</span><br><span class="line">    Splay(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = f[x];</span><br><span class="line">    Splay(x);</span><br><span class="line">    ans -= t[x].siz2i + t[t[x].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">    <span class="keyword">int</span> z = findroot(y);</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans -= t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">    t[x].fa = y;</span><br><span class="line">    Splay(y);</span><br><span class="line">    t[y].sizi += t[x].siz;</span><br><span class="line">    t[y].siz2i += t[x].siz2();</span><br><span class="line">    pushup(y);</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans += t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = f[x];</span><br><span class="line">    access(x);</span><br><span class="line">    ans += t[x].siz2i;</span><br><span class="line">    <span class="keyword">int</span> z = findroot(y);</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans -= t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">    Splay(x);</span><br><span class="line">    t[x].ch[<span class="number">0</span>] = t[t[x].ch[<span class="number">0</span>]].fa = <span class="number">0</span>;</span><br><span class="line">    pushup(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans += t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[x].siz = t[t[x].ch[<span class="number">0</span>]].siz + t[t[x].ch[<span class="number">1</span>]].siz + t[x].sizi + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v != f[u])</span><br><span class="line">        &#123;</span><br><span class="line">            f[v] = u;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1F-Nauuo-and-Bug"><a href="#1F-Nauuo-and-Bug" class="headerlink" title="1F Nauuo and Bug"></a><a href="https://codeforces.com/problemset/problem/1172/F" target="_blank" rel="noopener">1F Nauuo and Bug</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p><img src="/Codeforces-Round-564-中文题解/pseudocode.png"></p><p>给 $a$ 和 $p$，多组询问 $sum(a,l,r,p)$。</p><p>数列长度 $10^6$，询问次数 $2\times10^5$，值域 $-10^9$ ~ $10^9$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>区间询问一般采用分块、线段树等方法维护，这些方法都要求我们单独求出较少个区间的答案后进行合并。我们考虑将 Sum 函数改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int sum(int l, int r, int p, int x) &#123;</span><br><span class="line">  for (int i = l; i &lt;= r; ++i)</span><br><span class="line">    x = modadd(x, a[i], p);</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>固定 $p$ 和一个区间，sum 是一个关于 x 的分段函数，可以看出段数为 $O(r-l)$，因为 sum 的结果一定可以写成 $x+s_{l..r}-np$，其中 $s_{l..r}$ 是 $a_{l..r}$ 的区间和，随着 $x$ 的增大，$n$ 不会减小，而 $0 \le n \le r-l+1$，所以段数是线性的。</p><p>此时有一个简单的分块做法。将序列分为大小为 $B$ 的 $\frac n B$ 块，每块内预处理出这个块的 sum 函数后用一个存有每段端点的数组记录下来；计算这个函数的方法相当暴力，采用增量法，每次将已有的函数和单点合并后重构每段的起止端点，这将消耗 $O(\frac n B \times B^2=nB)$ 的时间。查询时用二分计算单点上函数的值即可，每次询问的时间是 $O(B+\frac n B \log B)$。认为 $n,q$ 同阶，取 $B=\Theta(\sqrt{n \log n})$ 时复杂度最优为 $O(n \sqrt{n \log n})$。</p><p>得到更好的时间复杂度需要一个观察：分段函数中每段的长度都至少是 $P$。证明考虑对区间长度 $n$ 归纳。当 $n=1$ 时由于只有两段，长度均为无穷大，显然；$n&gt;1$ 时考虑将前 $n-1$ 个形成的函数和最后一个合并。详细考虑合并的过程，对于 $f(x)=x+s_{1..n-1}-mP(a \le x \le b)$ 的段，$x + s_{1..n}-mP\ge P \to x \ge (m+1)P-s_{1..n}$ 的部分需要多减一次 $P$，从而会和下一段进行合并。考虑这段函数，减少了一个后缀 $[(m+1)P-s_{1..n},b]$，从上一段合并过来的增加了一段前缀 $[mP-s_{1..n},a]$，新的区间为 $[\min(a,mP-s_{1..n}),\min(b,(m+1)P-s_{1..n}-1]$，简单讨论可知长度仍然不小于 $P$。</p><p>我们改为采用线段树维护，查询区间被分解成 $O(\log n)$ 个线段树上区间，假如我们能求出所有线段树上区间的分段函数，即可每次查询 $O(\log^2 n)$ 时间解决。我们求解 $[l..r]$ 的函数时，考虑从 $[l..mid]$ 的函数 $f(x)$ 和 $[mid+1..r]$ 的函数 $g(x)$ 合并而来，合并后的函数即为 $g(f(x))$。我们在的分段函数 $f$ 上按 $x$ 升序扫描，维护 $f(x)$ 对应 $g$ 中的哪一段。当 $x$ 移向 $f$ 中的下一段时，我们从之前 $f(x)$ 的位置暴力移动向新的函数。注意每次移动到下一段 $f(x)$ 只是减 $P$，$f(x)$ 在 $g$ 中的位置会左移，但前面证明过所有段的长度都至少为 $P$，所以 $f(x)$ 的位置只会左移至多一段。当 $x$ 在 $f$ 的同一段中移动时，$f(x)$ 的位置只会右移，从而由均摊分析知道合并的时间是线性的。综上我们在 $O(n \log n+q \log ^2 n)$ 的时间内解决了本题，这是非常优秀的。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = (ll)<span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, P, a[N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; func[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; merge(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;ll&gt; &amp;f, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;ll&gt; &amp;g) &#123;</span><br><span class="line">    ll suml = sum[mid] - sum[l - <span class="number">1</span>], sumr = sum[r] - sum[mid];</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; ret(f.size() + g.size() - <span class="number">1</span>, inf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)f.size(); ++i) &#123;</span><br><span class="line">        ll xl = f[i], xr = (i + <span class="number">1</span> == (<span class="keyword">int</span>)f.size() ? inf : f[i + <span class="number">1</span>] - <span class="number">1</span>), yl = xl + suml - (ll)i * P, yr = xr + suml - (ll)i * P;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; g[j] &gt; yl) --j;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; (<span class="keyword">int</span>)g.size() &amp;&amp; (j == <span class="number">0</span> || g[j] &lt;= yl)) ++j;</span><br><span class="line">        --j;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; (<span class="keyword">int</span>)g.size() &amp;&amp; g[j] &lt;= yr; ++j)</span><br><span class="line">            ret[i + j] = min(ret[i + j], max(xl, g[j] - suml + (ll)i * P));</span><br><span class="line">    &#125;</span><br><span class="line">    ret[<span class="number">0</span>] = -inf;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        func[u].push_back(-inf);</span><br><span class="line">        func[u].push_back(P - a[l]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    func[u] = merge(l, r, mid, func[u &lt;&lt; <span class="number">1</span>], func[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, ll now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> now + sum[r] - sum[l - <span class="number">1</span>] - (ll)P * (upper_bound(func[u].begin(), func[u].end(), now) - func[u].begin() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, now);</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, now);</span><br><span class="line">    <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, query(u &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, now));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;P);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l, r; m--;) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, r, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/bad-round-与出题人的坚守&quot;&gt;台前幕后&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1172&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;contest on CF&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://ouuan.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>使用 testlib.h 写 lemon SPJ</title>
    <link href="https://ouuan.github.io/%E4%BD%BF%E7%94%A8-testlib-h-%E5%86%99-lemon-SPJ/"/>
    <id>https://ouuan.github.io/使用-testlib-h-写-lemon-SPJ/</id>
    <published>2019-05-22T05:59:32.000Z</published>
    <updated>2019-05-22T06:04:25.992Z</updated>
    
    <content type="html"><![CDATA[<p>不用 testlib.h 是不可能写好 checker 的（逃</p><a id="more"></a><p>大约这样就可以了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ofstream fscore;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fscore.open(argv[<span class="number">5</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> score = atoi(argv[<span class="number">4</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sprintf</span>(cmd, <span class="string">"testlibchecker %s %s %s %s"</span>, argv[<span class="number">1</span>], argv[<span class="number">2</span>], argv[<span class="number">3</span>], argv[<span class="number">6</span>]);</span><br><span class="line">    <span class="keyword">if</span> (system(cmd)) fscore &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> fscore &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    fscore.close();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 testlibchecker 实际使用时要使用绝对路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不用 testlib.h 是不可能写好 checker 的（逃&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="评测" scheme="https://ouuan.github.io/tags/%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>300iq奔北坡</title>
    <link href="https://ouuan.github.io/300iq%E5%A5%94%E5%8C%97%E5%9D%A1/"/>
    <id>https://ouuan.github.io/300iq奔北坡/</id>
    <published>2019-05-12T13:45:13.000Z</published>
    <updated>2019-05-27T11:02:11.950Z</updated>
    
    <content type="html"><![CDATA[<p>由于实在想不到这次是什么记了，所以就叫 300iq 奔北坡好了。</p><p>实际上是一篇 CTS &amp; APIO &amp; THUSC 2019 游记。</p><a id="more"></a><h2 id="Arrival"><a href="#Arrival" class="headerlink" title="Arrival"></a>Arrival</h2><p>因为是去北京所以要二次安检，然后剪刀被收了..一开始还说我有两把剪刀，然后又过了一次安检就没有了..最后的结果是吃方便面的时候撕不开酱料包，用圆规戳开的。</p><p>车上先是在熟悉的文章、字符串和 Reverses 三道题上分别自闭，然后开始看题解，看 border 相关论文，然后就开始看 THUPC 的榜，然后不小心被 300iq 看到了 300iq_ben_bei_po。</p><p>到了之后，发现 Sooke 就比我们早到一点点——实际上比我们早一趟地铁左右。到酒店的时候办入住排队，Sooke 刚好就在我们几个人前面，然后就愉快地面基了。</p><p>下午去试机，现场写了一道我们那场 cf 的题，（<del>证明了如果会做还是可以在场上写出来的</del>）。</p><p>然后，从 Sooke 来试机起，简单教了一下 Sooke 用 noilinux，一起吃了晚饭，一起走回酒店，然后发现 Sooke 房间就在我隔壁，然后 Sooke 就待在我房间里了，准备看我打他验的那场 cf。</p><p>之前 THUWC 的时候试机坐 pr 右边的右边，这次又是来的时间差不多 + 住隔壁..比较神奇。</p><p>晚上智商比较掉线（可能和前一天没睡好略有关系），掉了波分。</p><h2 id="CTS-Day-1"><a href="#CTS-Day-1" class="headerlink" title="CTS Day 1"></a>CTS Day 1</h2><p>咕了 5min（<del>为什么 cf 每次都是 35 开始</del>）</p><p>开考前就注意到 T1 12s，原来是 10 组数据…（ctr：我本机 1.Xs，评测姬 6.Xs，怎么办啊）</p><p>第一眼就觉得 T1 的暴力好像不太会做，阶乘会挂。</p><p>然后去看 T2，3min 想到三方做法，然后又花了 3min 去掉一维，然后 10min 左右写 + 调完了 48 分。</p><p>T3 是个提答，（可能是雅礼集训那道五子棋的原因），我就直接搞了个估价函数，每次枚举所有可能的位置，选估价函数最大的那个。前三个点都是立刻出结果，第二个点只有 9 分，然后就把后面的点挂着跑。发现第四个点非常特殊，所以就数了一下每种块各有几个，然后直接在草稿纸上算出方案，然后若干个 for 循环输出。</p><p>然后，本来以为 T2 $m=0, 1, 2$ 的几个点要大力数据分治，然后发现如果 $n\ge d+2m-1$ 直接输出 $d^n$ 就好了..</p><p>然后，发现 T3 后面的一个点跑了 1h 还没跑出来，于是就开始乱搞。先是调循环步长，发现还是跑的特别慢。然后就加了个剪枝，每一行找到第一个可以放的位置就放，快了很多。最后把两个点分别跑出来了 3 分和 4 分。</p><p>回去看 T1，发现一个剪枝搜索的方法（实际上和那个七方 dp 思路差不多…），然后写到一半想起来可以打表..最后写了个可以在 1s 内跑完一组的搜索，还是打了个表交上去。</p><p>最后是 $10+60+46$，被所有人踩了。</p><p>为什么我没想到 T1 的七方 dp 呢..当时脑子里大概是 $12\rightarrow2^n$，然而有三维，要 $2^{nml}$，做不了，不做了…（题解：一看就是<del>指数级</del>多项式算法）</p><h2 id="CTS-Day-2"><a href="#CTS-Day-2" class="headerlink" title="CTS Day 2"></a>CTS Day 2</h2><p>又咕了 5min。</p><p>第一眼，T1 计几，考场不能开计几。</p><p>第二眼，T2 字符串！woc，还是个计数。</p><p>第三眼，T3 这是棵树！这边怎么还有反的..</p><p>看了一圈还是感觉 T1 最可做…然而我先去推了一会儿 T2，没有任何成果。T3 的暴力也不会写..</p><p>冷静了一下想到了 T1 $30​$ 分做法，就写了一个。考场上还算错复杂度了..只不过问题不大。</p><p>然后在三题之间轮流自闭，T1 猜到了凸包合并后更优肯定要合并，也写了个两两尝试合并，然而过不去样例三，就没管了。（95 分做法：随机合并，记录过程中最优解，直到快超时。）</p><p>快结束的时候写了个 T2 10 分爆搜，发现要跑 4s，然后就写了个字符离散化..实际上可以被类似 <code>bdfhjlnprt</code> 之类的串卡掉，只不过还是过了。</p><p>最后是 $10+30+0$，好像还挺大众（</p><h2 id="CTS-其它"><a href="#CTS-其它" class="headerlink" title="CTS 其它"></a>CTS 其它</h2><p>讲题比较自闭..就记得 _rqy 自己上台吐槽两天四道计数，组题人（同时是 D1T3 出题人）说“我要从五道题里面选六道题，我也很无奈啊”。</p><p>另外首师大附中里的有张摄影的标题戳到我了…（<del>不要说我中二</del>）（<del>也不要在意右边，那是手指挡住了</del>）</p><img src="/300iq奔北坡/yakusoku.jpg"><p>录了个<a href="https://www.bilibili.com/video/av52574050" target="_blank" rel="noopener">论文答辩</a>。</p><p>最后闭幕式的时候 wh 和 dzd 的讲话还是非常精彩。譬如：知识点涵盖了容斥原理，动态规划，概率论……<font style="opacity: 0">为什么要去掉这个 C 呢？没有钱是干不了这个活的，收的钱也不一定够</font></p><p>dzd 还抱着好像是某位博士的女儿上了台..</p><img src="/300iq奔北坡/girl1.jpg"><img src="/300iq奔北坡/girl2.jpg"><p>在 cf 上<a href="https://codeforc.es/blog/entry/66927#comment-511486" target="_blank" rel="noopener">抢了个评论</a>。上午答辩完就差不多猜到了名单，然而不敢提前发，就提前写好了评论，一公布立马发出去了。感觉的确可以从答辩判断名单，某个 twr 硬是觉得有黑幕还被 up 了我就很没有办法。</p><p><del>cf 出题组全员 Ag。</del></p><h2 id="APIO-讲课-Day-1"><a href="#APIO-讲课-Day-1" class="headerlink" title="APIO 讲课 Day 1"></a>APIO 讲课 Day 1</h2><p>上午缓存管理，下午 PJ dp ？？</p><h2 id="APIO-考试"><a href="#APIO-考试" class="headerlink" title="APIO 考试"></a>APIO 考试</h2><p>开场 5min 就交了一发 WA..把 A 的暴力交错题了，一看发现纸质题面和实际顺序不一样（好像是翻译的时候还没给题目顺序…）</p><p>评测系统果然是不需要数据分治的，每个子任务分别提交就可以了，会分别在所有提交中取 max。只不过如果出现特殊情况，要由 CCF 来收题，这样写可能会比较惨..</p><p>先把 T1 的暴力和无修改写了，然后把 T2 的 10 分写了，然后把 T3 暴力、询问长度一、零变一写了，然后把 T1 链写了。这些分好像都比较水..过程中想了会儿各种正解，写完的时候大约是 3h。</p><p>然后，感觉 T1 的树应该可做，然而不会做。T3 的修改在询问前好像也不太会。然后去看只有 10 分的 T2，怎么这么多 subtask，我一个都不会啊..然后，我发现好像有循环节，然后就是本场比赛最蠢的一个地方，我把循环节暴力跑出来，然后用 map 判下标..然后想了个特别麻烦的 5 分做法，一直调到考试结束…</p><p>最后分数就是前 3h 写的 $43+10+60$，一出考场发现所有人都是 243 / 203 … 说好的 100+ <font color="gold">Au</font> 呢？以后再也不能按往年分数线打比赛了…</p><h2 id="APIO-讲题"><a href="#APIO-讲题" class="headerlink" title="APIO 讲题"></a>APIO 讲题</h2><ul><li>考虑让大象写题解</li><li>大象写了一篇题解</li><li>讲完了</li></ul><h2 id="APIO-讲课-Day-2"><a href="#APIO-讲课-Day-2" class="headerlink" title="APIO 讲课 Day 2"></a>APIO 讲课 Day 2</h2><p>上午是 THUWC 时来过的 lzj，又是图像渲染。</p><p>下午是四场讲题里最正常的一场（树上线性问题），前半部分是 <del>希望的超详细题解</del> 自顶向下 dp + 长链剖分，后半部分，后半部分是什么啊..好像是各种神仙题，比如树上线性（不带反阿克曼）并查集……</p><h2 id="APIO-颁奖"><a href="#APIO-颁奖" class="headerlink" title="APIO 颁奖"></a>APIO 颁奖</h2><p>五页 113 艹，成功压线 Cu。</p><p>四页 203 <font color="gold">Au</font> 比 <font color="silver">Ag</font> 多艹。</p><p><font color="silver">Ag</font> 前几都是神仙艹。</p><h2 id="THUSC-Day-1"><a href="#THUSC-Day-1" class="headerlink" title="THUSC Day -1"></a>THUSC Day -1</h2><p>THUSC 电脑的用户名是 THUSC Day 0-Test、THUSC Day0、THUSC Day1-1 和 THUSC Day1-2。（为什么 Day -1 要提 THUSC 电脑用户名？因为今天是 Day -1。）</p><p>收到选手须知，划重点：WireShark，O3，python，Ubuntu 16.04，没写考试安排。</p><p>学一波 WireShark 好了。</p><p><del>结果颓了一整天</del></p><p>晚上 11 点睡了，好像很久没睡这么早了..</p><h2 id="THUSC-Day-0"><a href="#THUSC-Day-0" class="headerlink" title="THUSC Day 0"></a>THUSC Day 0</h2><p>为什么 tdoj waiting 显示满分啊..一开始我还以为 pt 是假的（</p><p>试机自闭了，sb 字符串二分想了无限假做法，开始怀疑自己的智商。</p><p><del>开营式全是硬广</del>，感觉还是 THUWC 的有意思些，哦不对，那好像是闭幕式…</p><p>一进考场就发生了一件很神奇的事，94 和 96 中间没有 95..于是我换了一台机子。</p><p>比赛咕了 $40min$（<del>传统艺能</del>）。</p><p>开场看 T1，很快发现了（<del>在没有操作 3 时</del>）取空的情况只会发生不超过 $n$ 次，20min 的时候已经完全构思好了正解，然而不知道为什么以为操作 3 会破坏复杂度，就写了个 60 分..第一次尝试在草稿纸上完整地写下要维护哪些量，每个操作各要具体怎么修改怎么询问，写了半张草稿纸，然后写代码极其顺畅，1h 的时候就把 60 分部分分 1A 了。然后发现 $l=r$ 也很水，就写了个 $80$ 分的数据分治，然后各种挂，又过了 $40min$ 才写完，共 $6.2KB$。</p><p>然后看了眼 T2，$k=20\rightarrow2^k$，$\min\rightarrow minmax$ 容斥 $\rightarrow$ 不会做（<del>鬼知道我怎么想的</del>），然后去看 T3，侧信道攻击是什么啊..OI 题名全是骗人的.jpg。往后一看，好像还真是题目背景里说的那回事..好像不太可做，回去看 T2。woc 这不是个 sb 题吗…在最短路上就是 $dis[u][k]+dis[k][v]=dis[u][v]$，然后随手写了个 $3^k$——对每个救援队记录哪些点可以。然后发现改成对每个点记录哪些救援队可以，就可以轻松 $n2^k$ 了..pt 1A，然后就没管了。</p><p>犹豫了一下，决定还是先别侧信道攻击了，回来看 T1。woc 我又 sb 了，操作三不破坏复杂度啊，每次单点加最多把一个空的变成不空，所以还是只会有不超过 $n+m$ 次取空..于是在 $60​$ 分代码的基础上只加一个函数，其它全都不用改，就 pp 了。</p><p>然后去看 T3，这个 $10$ 分，可以枚举 $w$，枚举 $y$，枚举 $q$……诶，询问数超了，那就 <code>get_w()</code>.. woc，直接 <code>for (i = 0; i &lt; 500; ++i) Qs[i] = i;</code> 不就可以了吗，我又 sb 了..把枚举删掉，写上 for 循环，一交，怎么爆零了？woc，没设置 $u$ 和 ​$v$…那后面的分怎么做啊..先 <code>get_w()</code> <code>get_y()</code> 吧..二分一下 $q$..怎么过不了啊..哦，是快速幂，所以 $time$ 并不关于 $q$ 单调..那就以二分结果为中心往两边爆搜吧..$subtask2$ 拿了 $16$，继续各种乱搞，拿不到分了，考试结束了。</p><p>感觉好像比较大众分啊..可能会被 T3（&amp; 可能比较弱的 pt &amp; 把 THUSC 当成 IOI 赛制打的选手）区分出来了。</p><p>大约在宾馆见识到了真正的“抽水马桶”…不是按，不是转，是抽..</p><p>晚上睡得比前一天还早（</p><h2 id="THUSC-Day-1-1"><a href="#THUSC-Day-1-1" class="headerlink" title="THUSC Day 1-1"></a>THUSC Day 1-1</h2><p>94 和 96 中间还是没有 95…</p><p>比赛又咕了 $30min$。</p><p>开场，T1 不是 sb 题吗 $\rightarrow$ 没过 pt $\rightarrow $ 读错题了？$\rightarrow​$ 草，只有灯塔可以点亮..（鬼知道我为什么在点亮数轴（大约是以为每个点都有灯塔，只是一部分有游客吧..</p><p>于是 20min 才把 T1 过掉（</p><p>然后去看 T2，前两个 subtask 好像挺好写的..继续看 T3，考场上好像不能开计算几何来着（</p><p>然而我还是开了..emm..这玩意不用取模诶..哦，好像每种本质不同的划分都可以用一条两圆公切线表示。但是，怎么求公切线啊..用各种方法算了一个小时，算出来的结果都很麻烦，感觉会算错，于是就没管了（然而降智的效果已经达到了</p><p>先写了前两个 subtask，然后发现好像可以处理出每个右端点向左种类数增加的地方，然后写了个假做法写自闭了，最后大致上想到了单调栈做法，然后好像是以为假掉了，也可能没太想清楚，最后写了个 $\mathcal O(nm^2)​$ 交上去…</p><p>成功被计几 &amp; 自己的假做法降智，被区分了，白给 $48$ 分。</p><h2 id="THUSC-Day-1-2"><a href="#THUSC-Day-1-2" class="headerlink" title="THUSC Day 1-2"></a>THUSC Day 1-2</h2><p>果然是网络题..</p><p>有了 WC 的经验，没仔细阅读学习手册直接开始做，还是写了 $1h$ T1..</p><p>T2 的 $8$ 分是 CRC32，WC 写过，然后..写了 $1h$，WA 了 $1h$。学习手册里的 CRC32 样例过了，输出中间结果 data 转 01 看起来也没什么问题..不知道怎么回事。</p><p>大众分好像是 $48$，㕛被区分了。</p><h2 id="THUSC-Day-2"><a href="#THUSC-Day-2" class="headerlink" title="THUSC Day 2"></a>THUSC Day 2</h2><p><del>听说线 428 ？emm..成功被白给区分了。</del></p><p><del>只不过也没什么白给不白给的，就是不熟练才会白给，会做也没用啊.</del></p><p>网传线假掉了…</p><p>我妈在八点半接到我爸的电话，说我爸接到了 THU 电话…</p><p>然后，赶去西郊宾馆，等了 2.5h，好像是分块后按字典序排？<del>中途还见到了在其它 SC 游记里听说过的搭矿泉水瓶</del>。</p><p>面试大约是自我介绍 + 提问 + 嘤语阅读。毕竟我也是受了其他人游记一定的帮助，简单说一下需要注意的问题..</p><ol><li>自我介绍不需要提 OI 成绩。我一开始说我的 OI 成绩被打断了，好像是考官有成绩..（其实是看别人游记说教官提问“你的 OI 最好成绩”我才说的 qaq</li><li>提问会和自我介绍相关。反正我是这样的..比如，我自我介绍的时候提了一下对人工智能略有了解，就被问了有哪些了解、有什么看法之类的。所以建议自我介绍可以提一提自己熟悉的计算机科学领域，然后在相关方面准备一下可能的问题回答。</li><li>嘤语阅读要尝试看懂。大约是计算机科学专业文章，一开始会给你 $30s$ 左右看一遍，然后我当时只是想了想应该怎么读，没有仔细看。读了一遍之后他问我看懂了什么，然后就 GG 了..个人感觉这个部分是我面试挂的最惨的地方（</li></ol><p>下午讲题 + 科研 / 科协 / <del>蒜</del>算协 介绍，感觉不如 WC 有意思..可能是时间比较短，而且也听过一遍类似的内容了..（<del>有个人工智能简笔画妹子挺有意思的</del>）</p><p>然后，荣获 3=，就去赶火车了..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于实在想不到这次是什么记了，所以就叫 300iq 奔北坡好了。&lt;/p&gt;
&lt;p&gt;实际上是一篇 CTS &amp;amp; APIO &amp;amp; THUSC 2019 游记。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>回文自动机（PAM）学习笔记</title>
    <link href="https://ouuan.github.io/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88PAM%EF%BC%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/回文自动机（PAM）学习笔记/</id>
    <published>2019-05-10T14:31:05.000Z</published>
    <updated>2019-05-12T13:49:25.409Z</updated>
    
    <content type="html"><![CDATA[<p>PAM 是一种处理回文串相关问题的有力工具。</p><p><del>又是一句废话。</del></p><a id="more"></a><h2 id="PAM-是什么？"><a href="#PAM-是什么？" class="headerlink" title="PAM 是什么？"></a>PAM 是什么？</h2><h3 id="首先它是个自动机…"><a href="#首先它是个自动机…" class="headerlink" title="首先它是个自动机…"></a>首先它是个自动机…</h3><p>PAM 是一个接受且仅接受某个字符串的所有回文子串的<strong>中心及右半部分</strong>的 <a href="/后缀自动机（SAM）学习笔记/#确定有限状态自动机（DFA）">DFA</a>。</p><p>“中心及右边部分”在奇回文串中就是字面意思，在偶回文串中定义为一个特殊字符加上右边部分。这个定义看起来很奇怪，但它能让 PAM 真正成为一个自动机，而不仅是两棵树。</p><h3 id="PAM-的状态及转移"><a href="#PAM-的状态及转移" class="headerlink" title="PAM 的状态及转移"></a>PAM 的状态及转移</h3><p>PAM 的每个状态都表示一个回文子串，其中包含两个特殊状态，$len$ 分别为 $0$ 和 $-1​$，它们分别作为偶回文子串和奇回文子串两棵树的根。</p><p>PAM 的转移表示在串的两侧各加上同一个字符，因此 $len$ 也会加二。PAM 显然是分别以 $0$ 和 $-1$ 为根的两棵树，因为每个状态由唯一的状态转移而来（删掉两端的字符）。</p><p>和 SAM / AC 自动机一样，PAM 也有 $fail$ 边，同样表示真后缀中在自动机里的最长状态（也就是最长回文真后缀）。</p><p>为了让 PAM 符合自动机的定义，可以在概念上从 $-1$ 到 $0$ 连一条特殊字符边，然后以 $-1$ 作为起始状态。然而在代码实现里没有人会这么做。</p><h2 id="PAM-的构建"><a href="#PAM-的构建" class="headerlink" title="PAM 的构建"></a>PAM 的构建</h2><h3 id="一个性质"><a href="#一个性质" class="headerlink" title="一个性质"></a>一个性质</h3><p>在一个字符串后添加一个字符，至多增加一个之前没有出现过的回文子串，且该回文子串必定是原串的一个回文真后缀两侧加上新添加的这个字符。</p><p>简单证明：如果新添加的字符处在多个回文子串内，找到最长的一个，剩下的都可以沿其中心翻折过去，所以一定出现过。</p><p>这个性质既说明了 PAM 的状态数是 $\mathcal O(n)$ 的，也为后文的构建方法提供了依据。</p><h3 id="基础构建法"><a href="#基础构建法" class="headerlink" title="基础构建法"></a>基础构建法</h3><p>这是一个增量算法，即每次以均摊 $\mathcal O(1)$ 的复杂度向 PAM 基于的字符串的末尾添加一个字符。</p><p>记上次达到的状态为 $p$，字符串为 $s$，当前添加的字符是字符串中第 $pos$ 位，我们在 $p$ 的 $fail$ 链上找到最长的一个状态满足 $s[pos-len(u)-1]=s[pos]$，那么当前到达的状态就是 $\delta(u,s[pos])$，如果这个转移不存在则新建节点并连 $fail$：在 $fail(p)$ 的 $fail$ 链上找到最长的满足上述条件的状态，其 $s[pos]$ 转移即为新建节点的 $fail$。特别地，如果 $p$ 是特殊状态 $-1$，新建节点的 $fail$ 要设为 $0$。</p><p>因为 $p​$ 和 $fail(p)​$ 都是在 $fail​$ 树上爬上爬下，其中每添加一个字符最多向下爬一次，所以复杂度是均摊 $\mathcal O(1)​$ 的。</p><p>当然如果用 map 存边复杂度就会带 log。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, fail, ch[<span class="number">26</span>];</span><br><span class="line">&#125; pam[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, p = <span class="number">2</span>, tot = <span class="number">2</span>, pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    pam[<span class="number">1</span>].len = <span class="number">-1</span>;</span><br><span class="line">    pam[<span class="number">2</span>].fail = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (pos = <span class="number">1</span>; pos &lt;= n; ++pos) extend();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = s[pos] - <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[pos - pam[p].len - <span class="number">1</span>] != s[pos]) p = pam[p].fail;</span><br><span class="line">    <span class="keyword">if</span> (pam[p].ch[x]) p = pam[p].ch[x];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> np = ++tot;</span><br><span class="line">        pam[p].ch[x] = np;</span><br><span class="line">        pam[np].len = pam[p].len + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">1</span>) pam[np].fail = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (p = pam[p].fail; s[pos - pam[p].len - <span class="number">1</span>] != s[pos]; p = pam[p].fail);</span><br><span class="line">            pam[np].fail = pam[p].ch[x];</span><br><span class="line">        &#125;</span><br><span class="line">        p = np;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="其它构建法"><a href="#其它构建法" class="headerlink" title="其它构建法"></a>其它构建法</h3><p>PAM 还有支持前后端插入删除、复杂度不是均摊的构建方法，<del>但我先咕着</del>..感兴趣的话可以看 2017 国家候选队论文《回文树及其应用 翁文涛》。</p><h2 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h2><p><a href="https://www.luogu.org/problemnew/show/P3649" target="_blank" rel="noopener">[APIO2014]回文串</a><font color="white">，裸题。和其它自动机一样通过 fail 树子树和来统计出现次数。</font></p><p><a href="https://www.luogu.org/problemnew/show/CF835D" target="_blank" rel="noopener">CF835D Palindromic characteristics</a>（注意原题数据范围较小，这题可以线性做）<font color="white">，从 fail 链上 len / 2 处转移即可，我比较菜只会倍增所以多个 log。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PAM 是一种处理回文串相关问题的有力工具。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;又是一句废话。&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="PAM" scheme="https://ouuan.github.io/tags/PAM/"/>
    
  </entry>
  
  <entry>
    <title>CF17E Palisection（manacher）</title>
    <link href="https://ouuan.github.io/CF17E-Palisection%EF%BC%88manacher%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF17E-Palisection（manacher）/</id>
    <published>2019-05-10T14:06:18.000Z</published>
    <updated>2019-05-10T14:13:26.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/CF17E" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://codeforces.com/contest/17/problem/E" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个字符串，求有多少对相交的回文子串。（包含算作相交，<del>自交不算</del>）</p><p>字符串长度小于等于 $2\times 10^6$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先 manacher 求出每个中心的最长回文串半径。</p><p>然后，通过差分可以求出每个位置作为左端点 / 右端点各有多少个回文串（知道每个中心的半径之后就相当于区间加），记为 $l_i$, $r_i$。</p><p>最后，我们把问题转化为求不相交的回文子串对数，这样的话就是 $\sum\limits_{i = 2}^n\sum\limits_{j=1}^{i-1}l_ir_j$，预处理一下 $r​$ 的前缀和就可以算了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">51123987</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n, p[N &lt;&lt; <span class="number">1</span>], mid, rt, l[N], r[N], pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">for</span> (i = n * <span class="number">2</span> + <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp; <span class="number">1</span>) s[i] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">else</span> s[i] = s[i / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mid = rt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n * <span class="number">2</span> + <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = min(rt - i, p[mid * <span class="number">2</span> - i]);</span><br><span class="line"><span class="keyword">while</span> (s[i + p[i] + <span class="number">1</span>] == s[i - p[i] - <span class="number">1</span>]) ++p[i];</span><br><span class="line"><span class="keyword">if</span> (i + p[i] &gt; rt)</span><br><span class="line">&#123;</span><br><span class="line">mid = i;</span><br><span class="line">rt = i + p[i];</span><br><span class="line">&#125;</span><br><span class="line">++l[(i - p[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">--l[(i &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">++r[(i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">--r[(i + p[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">ans = (ans + (p[i] + <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = (ll) ans * (ans - <span class="number">1</span>) % mod * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">l[i] += l[i - <span class="number">1</span>];</span><br><span class="line">r[i] += r[i - <span class="number">1</span>];</span><br><span class="line">pre[i] = (pre[i - <span class="number">1</span>] + r[i]) % mod;</span><br><span class="line">ans = (ans - (ll) l[i] * pre[i - <span class="number">1</span>] % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF17E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/17/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个字符串，求有多少对相交的回文子串。（包含算作相交，&lt;del&gt;自交不算&lt;/del&gt;）&lt;/p&gt;
&lt;p&gt;字符串长度小于等于 $2\times 10^6$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="manacher" scheme="https://ouuan.github.io/tags/manacher/"/>
    
  </entry>
  
  <entry>
    <title>CF432D Prefixes and Suffixes（KMP）</title>
    <link href="https://ouuan.github.io/CF432D-Prefixes-and-Suffixes%EF%BC%88KMP%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF432D-Prefixes-and-Suffixes（KMP）/</id>
    <published>2019-05-10T13:56:54.000Z</published>
    <updated>2019-05-10T14:05:31.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/CF432D" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://codeforces.com/contest/432/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个字符串，分别求出每个长度的既是其前缀又是其后缀的串出现的次数。</p><p>字符串长度小于等于 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>第一眼，SAM 裸题。</p><p>然后意识到只用管前缀，KMP 可以达到同样的效果。</p><p>做法和 SAM 完全一样：从末尾跳 next 来找到所有前后缀相同的位置（也就是 SAM 的接受状态），然后倒序枚举 $f_{next[i]}+=f_i$（也就是 SAM 的统计子树和）。</p><p>多说两句：fail、parent 和 next 其实是一样的东西，但 KMP / AC 自动机的状态是所有前缀，SAM 的状态是所有子串（并被压缩为了 right 集合等价类）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, nxt[N], stk[N], top, f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (k &amp;&amp; s[i] != s[k + <span class="number">1</span>]) k = nxt[k];</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[k + <span class="number">1</span>]) ++k;</span><br><span class="line">nxt[i] = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">++f[i];</span><br><span class="line">f[nxt[i]] += f[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = n; i; i = nxt[i]) stk[++top] = i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, top);</span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, stk[top], f[stk[top]]);</span><br><span class="line">--top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF432D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/432/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个字符串，分别求出每个长度的既是其前缀又是其后缀的串出现的次数。&lt;/p&gt;
&lt;p&gt;字符串长度小于等于 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="KMP" scheme="https://ouuan.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>CF494B Obsessive String (KMP,计数dp)</title>
    <link href="https://ouuan.github.io/CF494B-Obsessive-String-KMP-%E8%AE%A1%E6%95%B0dp/"/>
    <id>https://ouuan.github.io/CF494B-Obsessive-String-KMP-计数dp/</id>
    <published>2019-05-05T05:16:44.000Z</published>
    <updated>2019-05-05T05:44:46.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/CF494B" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://codeforces.com/contest/494/problem/B" target="_blank" rel="noopener">CF contest</a></p><p><a href="http://codeforces.com/problemset/problem/494/B" target="_blank" rel="noopener">CF problemset</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你两个字符串 $S$ 和 $T$，你需要在 $S$ 中取若干个（至少一个）不相交的子串，使得每个子串都包含 $T$，求方案数模 $10^9+7$。</p><p>字符串长度小于等于 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先用某种字符串算法求出 $T$ 在 $S$ 中匹配的所有位置（一般人都会选择 KMP）。</p><p>记 $|S|=n$, $|T|=m$。</p><p>然后，我们记 $p_i$ 表示 $[i+m,n]$ 中最小的匹配位置（也就是 $S[i+1..n]$ 这个子串第一个匹配的位置），记 $q_i$ 表示 $[1,i]$ 中最大的匹配位置（也就是 $S[1..i]$ 这个子串最后一个匹配的位置）。</p><p>然后开始 dp，令 $f_i​$ 表示子串 $S[i+1..n]​$ 的答案。转移时，我们考虑选择下一个子串的右端点和左端点。右端点可以在 $[q_i,n]​$ 中选取，而对于一个右端点 $j​$，可以选择的左端点有 $p_j-m-i+1​$ 个。另外，也可以不继续选择下一个子串。所以可以得到转移方程：</p><p>$$f_i=1+\sum\limits_{j=q_i}^nf_j(p_j-m-i+1)$$</p><p>如果我们把 $g_i=\sum\limits_{j=i}^nf_jp_j$ 和 $h_i=\sum\limits_{j=i}^nf_j$ 分别存下来，就可以得到 $f_i=1+g_{q_i}-(m+i-1)f_{q_i}$，然后就可以 $\mathcal O(n)$ 计算了。</p><p>最后，这样计算的话会把一个子串都不选计入总数，所以答案要减一。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"><span class="keyword">int</span> n, m, nxt[N], q[N], p[N], f[N], g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s + <span class="number">1</span>, t + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (k &amp;&amp; t[i] != t[k + <span class="number">1</span>]) k = nxt[k];</span><br><span class="line">        <span class="keyword">if</span> (t[i] == t[k + <span class="number">1</span>]) ++k;</span><br><span class="line">        nxt[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (k &amp;&amp; s[i] != t[k + <span class="number">1</span>]) k = nxt[k];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[k + <span class="number">1</span>]) ++k;</span><br><span class="line">        <span class="keyword">if</span> (k == m) q[i - m] = p[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!p[i]) p[i] = p[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!q[i]) q[i] = q[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (q[i]) f[i] = (<span class="number">1</span> + g[q[i]] - (ll) f[q[i]] * (m + i - <span class="number">1</span>) % mod + mod) % mod;</span><br><span class="line">        <span class="keyword">else</span> f[i] = <span class="number">1</span>;</span><br><span class="line">        g[i] = ((ll) f[i] * p[i] + g[i + <span class="number">1</span>]) % mod;</span><br><span class="line">        f[i] = (f[i] + f[i + <span class="number">1</span>]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (f[<span class="number">0</span>] - f[<span class="number">1</span>] + mod - <span class="number">1</span>) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF494B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/494/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF contest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/494/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF problemset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你两个字符串 $S$ 和 $T$，你需要在 $S$ 中取若干个（至少一个）不相交的子串，使得每个子串都包含 $T$，求方案数模 $10^9+7$。&lt;/p&gt;
&lt;p&gt;字符串长度小于等于 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="KMP" scheme="https://ouuan.github.io/tags/KMP/"/>
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1009 [HNOI2008]GT考试（KMP/AC自动机，矩阵乘法）</title>
    <link href="https://ouuan.github.io/BZOJ1009-HNOI2008-GT%E8%80%83%E8%AF%95%EF%BC%88KMP-AC%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%8C%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ1009-HNOI2008-GT考试（KMP-AC自动机，矩阵乘法）/</id>
    <published>2019-05-03T11:07:11.000Z</published>
    <updated>2019-05-03T11:30:39.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P3193" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.tk/problem/1009" target="_blank" rel="noopener">darkbzoj</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给一个长为 $m$ 的字符串，字符集 $0$ ~ $9$，求长为 $n$ 的字符串中不含给定字符串作为子串的字符串有多少个，对 $k$ 取模。</p><p>$n\le10^9$，$m\le20$，$k\le1000$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先用 KMP / AC 自动机搞出转移：$f_{i,j}$ 表示从状态 $i$ （或者说位置 $i$，KMP 里就是位置，AC 自动机里虽然是节点但也和位置差不多）起，在后面加 $j$ 个字符，满足要求的字符串个数，则 $f_{i,j} = \sum\limits_{x=0}^9f_{tr[i][x],j-1}$，其中 $tr[i][x]$ 表示状态 $i$ 的字符 $x$ 转移。AC 自动机中不用解释了，KMP 里面就是 $tr[i][x]=\begin{cases}i+1&amp;(s[i+1]=x)\\tr[next[i]][x]&amp;(s[i+1]\ne x)\end{cases}$。</p><p>发现每层（相同的 $j$）的转移都是类似的，实际上可以用矩阵表示两层间的转移：</p><p>$$A\times\begin{bmatrix}f_{0,j}\\f_{1,j}\\\vdots\\f_{m-1,j}\end{bmatrix}=\begin{bmatrix}f_{0,j+1}\\f_{1,j+1}\\\vdots\\f_{m-1,j+1}\end{bmatrix}$$</p><p>（只到 $m-1$ 是因为 $f_{m,j}=0$）</p><p>其中 $A​$ 是我们要求的一个矩阵，$A_{i,j}​$ 就是 $\sum\limits_{x=0}^9[tr[i][x]=j]​$，求出来之后矩阵快速幂就好了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, mod, nxt[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[N][N];</span><br><span class="line">    Matrix() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> a[x]; &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(Matrix &amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix out;</span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    out[i][j] = (out[i][j] + a[i][k] * b[k][j]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, ans = <span class="number">0</span>;</span><br><span class="line">    Matrix mul;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;n, &amp;m, &amp;mod, s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (k &amp;&amp; s[i] != s[k + <span class="number">1</span>]) k = nxt[k];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[k + <span class="number">1</span>]) ++k;</span><br><span class="line">        nxt[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = i; k &amp;&amp; s[k + <span class="number">1</span>] - <span class="string">'0'</span> != j; k = nxt[k]);</span><br><span class="line">            <span class="keyword">if</span> (s[k + <span class="number">1</span>] - <span class="string">'0'</span> == j) ++k;</span><br><span class="line">            ++mul[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mul = qpow(mul, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) ans = (ans + mul[<span class="number">0</span>][i]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix out;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) out[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = out * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h3><p>如果觉得我的 AC 自动机写法比较清奇可以看看<a href="/AC自动机学习笔记">我的 AC 自动机学习笔记</a>..</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, mod, tr[N][<span class="number">10</span>], fail[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[N][N];</span><br><span class="line">    Matrix() &#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); &#125;</span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> a[x]; &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(Matrix &amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix out;</span><br><span class="line">        <span class="keyword">int</span> i, j, k;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    out[i][j] = (out[i][j] + a[i][k] * b[k][j]) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, ans = <span class="number">0</span>;</span><br><span class="line">    Matrix mul;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;n, &amp;m, &amp;mod, s + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i) tr[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[i][s[i + <span class="number">1</span>] - <span class="string">'0'</span>] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i + <span class="number">1</span>] - <span class="string">'0'</span> == j) fail[i + <span class="number">1</span>] = tr[fail[i]][j];</span><br><span class="line">            <span class="keyword">else</span> tr[i][j] = tr[fail[i]][j];</span><br><span class="line">            ++mul[i - <span class="number">1</span>][tr[i][j] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mul = qpow(mul, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) ans = (ans + mul[<span class="number">0</span>][i]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix out;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) out[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = out * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3193&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://darkbzoj.tk/problem/1009&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darkbzoj&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给一个长为 $m$ 的字符串，字符集 $0$ ~ $9$，求长为 $n$ 的字符串中不含给定字符串作为子串的字符串有多少个，对 $k$ 取模。&lt;/p&gt;
&lt;p&gt;$n\le10^9$，$m\le20$，$k\le1000$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="AC自动机" scheme="https://ouuan.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="KMP" scheme="https://ouuan.github.io/tags/KMP/"/>
    
      <category term="矩阵乘法" scheme="https://ouuan.github.io/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2434 [NOI2011]阿狸的打字机（AC自动机，树状数组）</title>
    <link href="https://ouuan.github.io/BZOJ2434-NOI2011-%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA%EF%BC%88AC%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%8C%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ2434-NOI2011-阿狸的打字机（AC自动机，树状数组）/</id>
    <published>2019-04-29T13:36:58.000Z</published>
    <updated>2019-04-30T06:36:03.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P2414" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.tk/problem/2434" target="_blank" rel="noopener">darkbzoj</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>初始一个空串，三种操作：</p><ol><li>添加一个字符。</li><li>删除一个字符。</li><li>打印当前字符串、</li></ol><p>多组询问，每次问第 $x$ 个打印的字符串在第 $y$ 个打印的字符串中出现了几次。</p><p>操作数和询问数都不超过 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>先建个 AC 自动机。</p><p>fail 树上的祖先是后缀，Trie 上根到一个点的路径是一个前缀，后缀的前缀是子串，因此只要把 Trie 上路径标出来，在 fail 树里统计子树就好了。也就是说，求出 $y$ 的所有前缀中以 $x$ 为后缀的数量。</p><p>具体来说，用 fail 树求 dfs 序，然后对 Trie 树进行 dfs，进入一个节点将其（在树状数组中）加一，退出时减一，把询问按 $y$ 存下来，访问到一个点时对以其作为 $y$ 的所有询问计算 $x​$ 在 fail 树中的子树和即为答案。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N], to[N], cnt;</span><br><span class="line"><span class="keyword">int</span> n, m, tr[N][<span class="number">26</span>], trie[N][<span class="number">26</span>], tot = <span class="number">1</span>, fail[N], fa[N], id[N], BIT[N], dfn[N], dfntot, exi[N], ans[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; query[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, u, x, y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) tr[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, u = <span class="number">1</span>; s[i]; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'B'</span>) u = fa[u];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'P'</span>) id[++n] = u;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!tr[u][c]) fa[tr[u][c] = ++tot] = u;</span><br><span class="line">            u = tr[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(trie, tr, <span class="keyword">sizeof</span>(tr));</span><br><span class="line"></span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[u][i])</span><br><span class="line">            &#123;</span><br><span class="line">                fail[tr[u][i]] = tr[fail[u]][i];</span><br><span class="line">                q.push(tr[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> tr[u][i] = tr[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= tot; ++i) add(fail[i], i);</span><br><span class="line"></span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x = read();</span><br><span class="line">        y = read();</span><br><span class="line">        query[id[y]].push_back(pii(id[x], i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++dfntot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = nxt[i]) dfs1(to[i]);</span><br><span class="line">    exi[u] = dfntot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    modify(dfn[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; query[u].size(); ++i) ans[query[u][i].second] = qsum(exi[query[u][i].first]) - qsum(dfn[query[u][i].first] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v = trie[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v) dfs2(v);</span><br><span class="line">    &#125;</span><br><span class="line">    modify(dfn[u], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; p &lt;= tot; p += (p &amp; -p))</span><br><span class="line">    &#123;</span><br><span class="line">        BIT[p] += x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; p; p -= (p &amp; -p))</span><br><span class="line">    &#123;</span><br><span class="line">        out += BIT[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2414&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://darkbzoj.tk/problem/2434&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darkbzoj&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;初始一个空串，三种操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加一个字符。&lt;/li&gt;
&lt;li&gt;删除一个字符。&lt;/li&gt;
&lt;li&gt;打印当前字符串、&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;多组询问，每次问第 $x$ 个打印的字符串在第 $y$ 个打印的字符串中出现了几次。&lt;/p&gt;
&lt;p&gt;操作数和询问数都不超过 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="AC自动机" scheme="https://ouuan.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="树状数组" scheme="https://ouuan.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机学习笔记</title>
    <link href="https://ouuan.github.io/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/AC自动机学习笔记/</id>
    <published>2019-04-29T07:39:10.000Z</published>
    <updated>2019-05-10T14:45:13.346Z</updated>
    
    <content type="html"><![CDATA[<p>AC 自动机其实我去年就学过了，但当时大约只是会敲模板而已..现在几乎全忘光了。于是复习一下，顺便（较为本质地）讲解一下。</p><a id="more"></a><h2 id="AC-自动机是什么？"><a href="#AC-自动机是什么？" class="headerlink" title="AC 自动机是什么？"></a>AC 自动机是什么？</h2><p>说到这我真的想喷一下网上的各种教程..连“是什么”都不说清楚就开始讲“有什么用”和”怎么用“，怎能知其所以然？ </p><p>形式上，AC 自动机基于由若干模式串构成的 Trie 树，并在此之上增加了一些 fail 边；本质上，<strong>AC 自动机是一个关于若干模式串的 DFA（确定有限状态自动机），接受且仅接受以某一个模式串作为后缀的字符串。</strong></p><p>并且，与一般自动机不同的，AC 自动机还有 <strong>关于某个模式串的接受状态</strong>（我自己起的名字..），也就是与某个模式串匹配（以某个模式串为后缀）的那些状态。</p><p>关于 DFA，我在 <a href="/后缀自动机（SAM）学习笔记/#确定有限状态自动机（DFA）">SAM 学习笔记里</a> 已经讲过了。</p><p>引用一下 2006 年集训队论文《王赟–tire图的构造活用及改进》中的一张图：</p><img src="/AC自动机学习笔记/lw.png"><p>有了 AC 自动机，我们把一个文本串逐位地输入到自动机中，当匹配时就会处于接受状态。</p><h2 id="AC-自动机怎样构建？"><a href="#AC-自动机怎样构建？" class="headerlink" title="AC 自动机怎样构建？"></a>AC 自动机怎样构建？</h2><p>大致分为两个过程：</p><ol><li>构建模式串组成的 Trie 树。</li><li>连 fail 边。</li></ol><p><del>第一个过程不用讲吧。</del></p><h3 id="fail-边是什么？"><a href="#fail-边是什么？" class="headerlink" title="fail 边是什么？"></a>fail 边是什么？</h3><p>fail 边是 AC 自动机上一种特殊的边，其意义为：当 $u​$ 在 Trie 树上没有字符 $c​$ 的出边时，将 $\delta(u,c)​$ 定义为 $\delta(fail(u),c)​$（特例：初始状态若不存在某字符出边则连向自己，也可以理解为 $\forall c\in\Sigma,\delta(fail(start),c)=start​$）。</p><p>另外，fail 边的作用类似于 KMP 算法中的 next 数组。</p><h3 id="fail-边怎么连？"><a href="#fail-边怎么连？" class="headerlink" title="fail 边怎么连？"></a>fail 边怎么连？</h3><p>我们发现一个状态的 fail 边连向的其实就是这个状态的一个自动机上最长真后缀。</p><p>为什么呢..感性理解一下，失配了就不看前几位了..</p><p>然后就很好连了：对 Trie 树进行 BFS，将 $fail(\delta(u,c))$ 设为 $\delta(fail(u),c)$。因为一个串加上一个字符的最长真后缀就是这个串的最长真后缀加上这个字符..</p><p>另外将 $\delta(u,c)$ 设为 $\delta(fail(u),c)$ 可以显式地在代码中完成。</p><p>再另外，要么 BFS 开始的时候将根节点的孩子入队，要么将 $fail(root)$ 的每个儿子都设为 $root​$。否则根的儿子的 fail 边会连向自己。（也就是上文所述的“特例”。）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) tr[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">    u = q.front();</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[u][i])</span><br><span class="line">        &#123;</span><br><span class="line">            fail[tr[u][i]] = tr[fail[u]][i];</span><br><span class="line">            q.push(tr[u][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> tr[u][i] = tr[fail[u]][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fail-树"><a href="#fail-树" class="headerlink" title="fail 树"></a>fail 树</h3><p>由于每个点都只连出一条 fail 边，且连到的点对应的字符串长度更小，所以 fail 边构成了一棵 <strong>fail 树</strong>。</p><p>如果学过 SAM 的话，可能会发现 fail 树和 parent 树很像..实际上它们具有的性质是相同的，然而构成它们的状态不同——parent 树是所有 right 集合等价类（也就是 SAM 上的所有节点），而 fail 树是 Trie 上的每个前缀（也就是 AC 自动机上的所有节点）。</p><p>作为一个自动机，我还没讲 AC 自动机的接受状态是哪些..其实就是 Trie 树上的那些终止节点在 fail 树上的整个子树的并。</p><p>而 <strong>关于某个模式串的接受状态</strong>，也就是与某个模式串匹配（以某个模式串为后缀）的那些状态，就是那个串在 Trie 树上的终止节点在 fail 树上的子树。知道这个也就知道怎么用 AC 自动机进行多模式串匹配了（建出 fail 树，记录自动机上的每个状态被匹配了几次，最后求出每个模式串在 Trie 上的终止节点在 fail 树上的子树总匹配次数就可以了）。</p><div><div class="fold_hider"><div class="close hider_title">洛谷 P3796 参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">160</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N * L], nxt[N * L], to[N * L], cnt;</span><br><span class="line"><span class="keyword">int</span> n, tr[N * L][<span class="number">26</span>], fail[N * L], tot, suc[N * L], siz[N * L];</span><br><span class="line"><span class="keyword">char</span> s[N][L], t[M];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">pii ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, u;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="keyword">sizeof</span>(tr));</span><br><span class="line">        <span class="built_in">memset</span>(suc, <span class="number">0</span>, <span class="keyword">sizeof</span>(suc));</span><br><span class="line">        <span class="built_in">memset</span>(siz, <span class="number">0</span>, <span class="keyword">sizeof</span>(siz));</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        tot = <span class="number">1</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) tr[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">            ans[i].first = <span class="number">0</span>;</span><br><span class="line">            ans[i].second = i;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>, u = <span class="number">1</span>; s[i][j]; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> c = s[i][j] - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (!tr[u][c]) tr[u][c] = ++tot;</span><br><span class="line">                u = tr[u][c];</span><br><span class="line">            &#125;</span><br><span class="line">            suc[u] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.push(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tr[u][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    fail[tr[u][i]] = tr[fail[u]][i];</span><br><span class="line">                    q.push(tr[u][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> tr[u][i] = tr[fail[u]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, u = <span class="number">1</span>; t[i]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            u = tr[u][t[i] - <span class="string">'a'</span>];</span><br><span class="line">            ++siz[u];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= tot; ++i) add(fail[i], i);</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        sort(ans + <span class="number">1</span>, ans + n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -ans[<span class="number">1</span>].first);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n &amp;&amp; ans[i].first == ans[<span class="number">1</span>].first; ++i) <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s[ans[i].second]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v = to[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">    ans[suc[u]].first -= siz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h2><p><a href="https://www.luogu.org/problemnew/show/P3966" target="_blank" rel="noopener">[TJOI2013]单词</a><font color="white">，基本上是道裸题。</font></p><p><a href="https://www.luogu.org/problemnew/show/P2444" target="_blank" rel="noopener">[POI2000]病毒</a><font color="white">，不访问接受状态找环即可。</font></p><p><a href="https://www.luogu.org/problemnew/show/P2414" target="_blank" rel="noopener">[NOI2011]阿狸的打字机</a><font color="white">，对 Trie 进行 dfs 并打根到当前点的标记，在 fail 树上统计子树标记和。</font><a href="/BZOJ2434-NOI2011-%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA%EF%BC%88AC%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%8C%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%EF%BC%89/"><font color="white">我的题解</font></a></p><h2 id="与-KMP-之间的关系"><a href="#与-KMP-之间的关系" class="headerlink" title="与 KMP 之间的关系"></a>与 KMP 之间的关系</h2><p>放在最后面是因为我认为 KMP 并不是 AC 自动机的前置知识..然而他们之间的确有着千丝万缕的联系。</p><p><strong>「KMP 是个自动机」</strong></p><p>要是早有人告诉我这句话估计我早就（真正地）学会 KMP 了..</p><p>KMP 自动机的主体是一条链，加上了一些“next 边”（其实就是 AC 自动机的 fail 边）。</p><p>而 KMP 自动机之于 AC 自动机，就像 SAM 之于广义 SAM。</p><p>也就是很多人常说的一句话：AC 自动机就是 Trie 上 KMP。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AC 自动机其实我去年就学过了，但当时大约只是会敲模板而已..现在几乎全忘光了。于是复习一下，顺便（较为本质地）讲解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="AC自动机" scheme="https://ouuan.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2010]航空管制（建反图，拓扑排序，优先队列）</title>
    <link href="https://ouuan.github.io/NOI2010-%E8%88%AA%E7%A9%BA%E7%AE%A1%E5%88%B6%EF%BC%88%E5%BB%BA%E5%8F%8D%E5%9B%BE%EF%BC%8C%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%89/"/>
    <id>https://ouuan.github.io/NOI2010-航空管制（建反图，拓扑排序，优先队列）/</id>
    <published>2019-04-19T05:00:29.000Z</published>
    <updated>2019-04-19T05:20:35.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P1954" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个 DAG，每个点有个值 $k_i$。</p><p>第一问：求一个拓扑排序，使每个点出现的位置不超过 $k_i$。</p><p>第二问：在满足第一问的拓扑排序中，求每个点分别的最早出现位置。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>第一眼看到这题，在多少之前 $\rightarrow$ 反过来考虑，因为之前好像做过 PJ 难度的类似题目..</p><p>然而第二眼就变成了：拓扑排序裸题！然后愉快地写了个假贪心..</p><p>不能随便放过自己的直觉啊..</p><p>正解就是建反图，这样一定可以每次选 $k$ 最大的，用优先队列拓扑排序就可以了。</p><p>第二问的话，还是建反图，依次考虑每个点，不把当前考虑的点加入优先队列中，直到无法符合要求便是答案。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[M], to[M], cnt;</span><br><span class="line"><span class="keyword">int</span> n, m, k[N], ind[N], in[N], stk[N], top;</span><br><span class="line">priority_queue&lt;pii&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, u, v, x, ans;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, k + i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(v, u);</span><br><span class="line">        ++ind[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(in, ind, <span class="keyword">sizeof</span>(in));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!in[i]) q.push(pii(k[i], i));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        u = stk[++top] = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            v = to[i];</span><br><span class="line">            <span class="keyword">if</span> (--in[v] == <span class="number">0</span>) q.push(pii(k[v], v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (top) <span class="built_in">printf</span>(<span class="string">"%d "</span>,stk[top--]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = n;</span><br><span class="line">        <span class="built_in">memcpy</span>(in, ind, <span class="keyword">sizeof</span>(in));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!in[i]) q.push(pii(k[i], i));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            u = q.top().second;</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span> (u == x) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (k[u] &lt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            --ans;</span><br><span class="line">            <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                v = to[i];</span><br><span class="line">                <span class="keyword">if</span> (--in[v] == <span class="number">0</span>) q.push(pii(k[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个 DAG，每个点有个值 $k_i$。&lt;/p&gt;
&lt;p&gt;第一问：求一个拓扑排序，使每个点出现的位置不超过 $k_i$。&lt;/p&gt;
&lt;p&gt;第二问：在满足第一问的拓扑排序中，求每个点分别的最早出现位置。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="优先队列" scheme="https://ouuan.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="拓扑排序" scheme="https://ouuan.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>十二省联考2019 游记 &amp; 题解</title>
    <link href="https://ouuan.github.io/%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019-%E6%B8%B8%E8%AE%B0-%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/十二省联考2019-游记-题解/</id>
    <published>2019-04-08T07:39:51.000Z</published>
    <updated>2019-04-29T12:22:58.804Z</updated>
    
    <content type="html"><![CDATA[<p>口中喊着「僕勝つから。ぜったい、勝て来るから。」的你，真的付出了桐山般的努力吗？</p><a id="more"></a><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h1><p>晚上看 WF 直播，为了看滚榜睡得很晚，结果最后滚的时候 b 站那几个直播的去海底捞吃火锅，然后断断续续的….最后也没有看完滚榜，还是第二天才看的排名…</p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>由于前一天睡得比较晚，所以下午睡了两个小时。晚上 vp 了一场 cf。</p><p>然后..本来想早点睡，结果由于下午睡了两个小时，睡不着了..最后很晚才睡。在床上看了四集半《三月的狮子》..（半是因为看困了，于是赶紧抓住机会睡了。）</p><h1 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>早上起来的时候感觉特别清醒，后来才想起来，初三有段时间也不怎么睡，也是刚起来的时候并不会很困..走起路来有种 ふわふわ 的感觉..一直持续到快到华科的时候，才稍微觉得有点困..</p><p>拿到题之后看了眼 T1，异或 $\rightarrow$ 可持久化 01 Trie，求前 $k$ 大之和 $\rightarrow$ 分成 $n$ 类每类的最大值塞堆里。大致的思路真的是一眼就想出来了..然而并没有想到三元组的做法，虽然 18 年暑假去安师大附中集训的时候做过一道那样的题..</p><p>我想的做法是记录在 Trie 上 dfs 到的位置，然后根据位置求下一个。一开始我写的是每个点记录父亲，然后写+调 $2h$ 才想起来：这是可持久化啊，怎么记录父亲…然后尝试加了个 map 来记录不同版本的父亲，变成 $\log^2$，然后大样例跑了 $13s$，还 WA…</p><p>于是就先把 T1 放了一下，去看 T2。这 T2 什么鬼题面？（赛后结合讲题 PPT 里的简述一下就明白题意了，可能是简述的原因，也可能是没睡好考场上 sb 了..只不过一个没有题目背景的题为什么不写简述题意呢..）看了半天稍微看懂题意了，然后一看第一档暴力，好像第一档就得写个 $20min$ ~ $0.5h$ 的..我的习惯是先写 PJ 难度暴力，然后写正解，最后写不好写的部分分，所以就先放着了。</p><p>然后去看 T3..没想到竟然能在考场上碰到 ydc 的题面..先把 998244353 切了，然后写了个从最大值起枚举模数，然后..1145141？唐 突 恶 臭，<code>//echouctr</code> 警告。赛后得知有人直接（<del>抱着恶臭的想法</del>）试出来了..还有只枚举质数的..想不明白为什么要给个质数..搞的我还写了扩展欧拉定理和求 $\varphi$（虽然也没有太麻烦..）。<code>1_?+</code> 直接弃了。<code>wa</code> 尝试把快速幂里的 <code>long long</code> 去掉，然后没过，就也弃了。后面的..猜到了 <code>p</code> 是质数，根据 <code>0/+/-</code> 猜到了 <code>u</code> 是 $\mu$，猜到了 <code>g</code> 是原根..nmdwsm是区间筛啊..</p><p>回来看 T1，重构的决定还算比较果断，换了种找后继的方式：记录 dfs 路径以及每个点被搜到的次数，满了就换个儿子，否则按原路径往下。写的还算比较顺利，不到 $1h$ 就过了大样例，然后开始对拍，也过拍了。然后，把 <code>rand()</code> 的范围开到 <code>unsigned</code>..不过拍了？？检查了一下，所有该开 <code>unsigned</code> 的地方都开了，于是把所有参与位运算的 <code>1</code> 都改成了 <code>1u</code>，还是过不了..然后我就开始 sb 了：先把 <code>unsigned int</code> 改成 <code>unsigned long long</code>，发现过不了，<strong>然后改回 unsigned int</strong>，再把循环的范围从 <code>31</code> 改成 <code>32</code>.. 然后我就各种检查，直到考试结束也没过拍..考后发现，是一种边界情况的一行代码放错位置了，除了同时开 <code>unsigned long long</code> 和循环范围 <code>32</code>，也可以把那行代码换个位置来解决。</p><p>下午得知正式选手好像必须参加讲题？看分，发现第一题竟然过了..脸挺好的。T2 <code>puts(&quot;-1&quot;)</code> 果然没分。T3 写多少是多少（废话，这种题..）。$100+0+19$，$rk6$，被吊锤了..在其他省就垫底了..</p><p>晚上打了场 Global，神仙 <code>Div.2 A~C &amp; Div.1 E/F</code> 场..写完 A ~ E 之后发现所有人包括 tourist 都是五题，而且 tourist 在我之前半个小时就写完五题了..于是就不想打了。又过了快一个小时，发现有好多人在 hack A，于是就去看了下，hack 了一个写法奇怪的 A。最后涨了不少分..</p><p>还好晚上顺利睡着了..</p><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><p>由于昨天调 T1 调的心态爆炸才去看后面的题导致整场爆炸，于是这次先看了每道题..</p><p>看了看 T1，除了 dp 没啥想法，先写了个 $20$ 分暴力，准备把 dp 留到后面写。真的是 sb 了，没想到可以压两维，只压了一维..</p><p>然后去看 T2，第一眼并没有什么想法..暴力连第二档都不太会写，于是先写了个 $\mathcal O(n^n)$。</p><p>然后去看 T3，emm..暴力怎么写啊.webp。</p><p>然后去上了个厕所。在厕所里想到了 T2 的做法..写的比较顺利，大概不到 $1h$ 吧..就第一次测挂了，改了个小地方就过了所有样例。然后对拍，也过拍了。然后测了下链..RE了？？冷静了一下，猜测是爆栈了，直接去问了监考，答复是栈空间和内存限制一样，然后就愉快地本地开栈过了。</p><p>然后去写 T1 的 dp..一开始尝试单数组滚动，然后挂了。于是改成 01 滚动，又调了好久才过..</p><p>最后去写 T3，决定只写 $k=1$。先写了下 $k=1$ &amp; $l=n$ 的 dp，很快就写完了。然后去写剩下的 $k=1$，算了下复杂度，$\mathcal O(nl^2)$，感觉好悬..然后发现可以用 NTT 优化到 $\mathcal O(nl\log l)$，然后开始写 NTT，然后..NTT 没调出来..考前应该写一写的..因为比较头铁，NTT 一直调到了离考试结束 $15min$，然后开始 rush $\mathcal O(nl^2)$，失败了..</p><p>出考场不久，想起来自己 T1 好像忘清空了..<del>辣鸡温馨提示</del>。然后我在影响正确性/不影响正确性之间反复切换了几次结论..最后在看成绩之前得出的结论是，我没有限制（$k=0$）的点稳挂，剩下的点大概率挂。</p><p>去看成绩，$20+100+8$。T1 竟然有 $20$？难道是 $k\ne0$ 的点都过了？听完讲题之后去看评测结果，发现是 $k=0$ 的两个点过了…至今没想明白，只不过如果清空了数组就是 $40$ 了。</p><p>最后是两天总分第四（<del>和去年一样，白学了</del>），加上 NOIP 还是被胡队爆踩了..</p><p>晚上两天挂分 $100+$ 的<del>裸</del>罗队在裙里问为什么 D2T2 $75​$ 分，我把他的代码复制到 LOJ 发现过了..</p><p>冷静了一下，感觉不可能是 OJ 的问题，所以不开 C++11 测了一下，果然没过..因为前几天写 OI Wiki 的时候查过，所以很快就猜到了，是 <code>swap</code> 的问题.. <code>priority_queue</code> 的 <code>swap</code> 在不开 C++11 时是 $\mathcal O(n)$ 的。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="D1T1"><a href="#D1T1" class="headerlink" title="D1T1"></a>D1T1</h2><h3 id="考场做法"><a href="#考场做法" class="headerlink" title="考场做法"></a>考场做法</h3><p>建可持久化 01 Trie，把区间异或和转化成两个前缀异或和的异或，然后对每个右端点就可以找到最大的异或和，扔进堆里。找最大值的时候记录一下在 Trie 上的路径，以及每一层经过的次数。堆里弹出一个值后插入下一个值时根据记录的路径来找：如果经过次数大于子树当前节点的 <code>siz</code> 就换个儿子并清空比他更深的节点的记录的经过次数，否则按记录的路径走。如果 Trie 的根都满了就不 <code>push</code> 了。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ui,<span class="keyword">int</span>&gt; pui;</span><br><span class="line"></span><br><span class="line"><span class="function">ui <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,ch[<span class="number">2</span>];</span><br><span class="line">&#125; t[N*<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rt[N],tot,d[N][<span class="number">35</span>],cnt[N][<span class="number">35</span>];</span><br><span class="line">ui pre[N];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">priority_queue&lt;pui&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,ui y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,u,v,root;</span><br><span class="line">    u=root=++tot;</span><br><span class="line">    t[u].val=t[x].val+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        v=((y&gt;&gt;i)&amp;<span class="number">1u</span>);</span><br><span class="line">        t[u].ch[v^<span class="number">1</span>]=t[x].ch[v^<span class="number">1</span>];</span><br><span class="line">        u=t[u].ch[v]=++tot;</span><br><span class="line">        x=t[x].ch[v];</span><br><span class="line">        t[u].val=t[x].val+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i,j,u,v,r;</span><br><span class="line">    ui x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]^read();</span><br><span class="line">        u=rt[i]=ins(rt[i<span class="number">-1</span>],pre[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (x=<span class="number">0</span>,j=<span class="number">31</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            v=(((pre[i]&gt;&gt;j)&amp;<span class="number">1u</span>)^<span class="number">1u</span>);</span><br><span class="line">            <span class="keyword">if</span> (t[u].ch[v])</span><br><span class="line">            &#123;</span><br><span class="line">                x|=(<span class="number">1u</span>&lt;&lt;j);</span><br><span class="line">                d[i][j]=u=t[u].ch[v];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> d[i][j]=u=t[u].ch[v^<span class="number">1</span>];</span><br><span class="line">            ++cnt[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        q.push(pui(x,i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=q.top().first;</span><br><span class="line">        r=q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (u=rt[r],i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            v=(((pre[r]&gt;&gt;i)&amp;<span class="number">1u</span>)^<span class="number">1u</span>);</span><br><span class="line">            <span class="keyword">if</span> (cnt[r][i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt[r][i];</span><br><span class="line">                <span class="keyword">if</span> (t[u].ch[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    x|=(<span class="number">1u</span>&lt;&lt;i);</span><br><span class="line">                    u=d[r][i]=t[u].ch[v];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> u=d[r][i]=t[u].ch[v^<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cnt[r][i]&lt;t[d[r][i]].val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[r][i]==t[u].ch[v]) x|=(<span class="number">1u</span>&lt;&lt;i);</span><br><span class="line">                ++cnt[r][i];</span><br><span class="line">                u=d[r][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j=i;j&gt;=<span class="number">0</span>;--j) cnt[r][j]=<span class="number">0</span>;</span><br><span class="line">                ++cnt[r][i];</span><br><span class="line">                u=d[r][i]=t[u].ch[v^<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt[r][<span class="number">31</span>]==t[rt[r]].val) <span class="keyword">continue</span>;</span><br><span class="line">        q.push(pui(x,r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="题解做法"><a href="#题解做法" class="headerlink" title="题解做法"></a>题解做法</h3><p>除了找后继都是差不多的，找后继的方法是找完 $[0,r)$ 之后把 $[0,ans)$ 和 $(ans,r)$ 塞进堆里。</p><h3 id="正常人做法"><a href="#正常人做法" class="headerlink" title="正常人做法"></a><del>正常人做法</del></h3><p>翻了下 LOJ 最短解，然后被自己蠢哭了..</p><p>直接记录每个右端点已经找到第 $k$  大了，然后找第 $k$ 大的方式类似值域线段树/平衡树找第 $k​$ 大…</p><h2 id="D1T2"><a href="#D1T2" class="headerlink" title="D1T2"></a>D1T2</h2><p>讲一下 SAM 做法.. sb 选手不适合打 SA。</p><p>把所有串翻转，B 是 A 的前缀就变成了 B 是 A 的后缀。</p><p>是后缀就是 parent 树上的祖先，或者同一个节点且 len 更小。</p><p>把所有 A/B 串对应的节点按在 A/B 中的 len 拆点，每个 parent 树上的节点从较小的 len 向较大的 len 连边，A 串对应的点 &amp; len 向 A 串连边，B 串向对应的点 &amp; len 连边。</p><p>然后拓扑排序/记忆化搜索即可。</p><p><del>当然如果你像我一样 sb，可以按 dfs 序用线段树优化连边，就可以（假装）不用拆点了..</del></p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,par,ch[<span class="number">26</span>];</span><br><span class="line">&#125; sam[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p,tot,fa[N&lt;&lt;<span class="number">1</span>][<span class="number">20</span>],sta[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N*<span class="number">5</span>],nxt[N*<span class="number">6</span>],to[N*<span class="number">6</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> n,na,nb,m,a[N],alen[N],b[N],blen[N],w[N*<span class="number">5</span>],tot2;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; aln[N&lt;&lt;<span class="number">1</span>],bln[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; aid[N&lt;&lt;<span class="number">1</span>],bid[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,f[N*<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> vis1[N*<span class="number">5</span>],vis2[N*<span class="number">5</span>],loop;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,l,r,u,pre,T;</span><br><span class="line"></span><br><span class="line">    T=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        reverse(s+<span class="number">1</span>,s+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(sam[i].ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(sam[i].ch));</span><br><span class="line">            aln[i].clear();</span><br><span class="line">            aid[i].clear();</span><br><span class="line">            bln[i].clear();</span><br><span class="line">            bid[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span>(w));</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(vis1,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis1));</span><br><span class="line">        <span class="built_in">memset</span>(vis2,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis2));</span><br><span class="line">        cnt=ans=<span class="number">0</span>;</span><br><span class="line">        p=tot=<span class="number">1</span>;</span><br><span class="line">        loop=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sta[i]=tot+<span class="number">1</span>;</span><br><span class="line">            insert(s[i]-<span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=tot;++i) fa[i][<span class="number">0</span>]=sam[i].par;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">18</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=tot;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                fa[i][j]=fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        na=read();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=na;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            r=n+<span class="number">1</span>-read();</span><br><span class="line">            l=n+<span class="number">1</span>-read();</span><br><span class="line">            u=sta[r];</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">18</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sam[fa[u][j]].len&gt;r-l)</span><br><span class="line">                &#123;</span><br><span class="line">                    u=fa[u][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i]=u;</span><br><span class="line">            alen[i]=r-l+<span class="number">1</span>;</span><br><span class="line">            aln[u].insert(alen[i]);</span><br><span class="line">            bln[u].insert(alen[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nb=read();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=nb;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            r=n+<span class="number">1</span>-read();</span><br><span class="line">            l=n+<span class="number">1</span>-read();</span><br><span class="line">            u=sta[r];</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">18</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sam[fa[u][j]].len&gt;r-l)</span><br><span class="line">                &#123;</span><br><span class="line">                    u=fa[u][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            b[i]=u;</span><br><span class="line">            blen[i]=r-l+<span class="number">1</span>;</span><br><span class="line">            bln[u].insert(blen[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tot2=tot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=tot;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bln[i].empty()) add(sam[i].par,i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> k : aln[i]) w[aid[i][k]=++tot2]=k;</span><br><span class="line">                pre=sam[i].par;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> k : bln[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    add(pre,bid[i][k]=++tot2);</span><br><span class="line">                    <span class="keyword">if</span> (aln[i].find(k)!=aln[i].end()) add(tot2,aid[i][k]);</span><br><span class="line">                    pre=tot2;</span><br><span class="line">                &#125;</span><br><span class="line">                add(tot2,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m=read();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            l=read();</span><br><span class="line">            r=read();</span><br><span class="line">            add(aid[a[l]][alen[l]],bid[b[r]][blen[r]]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=na;++i) ans=max(ans,dp(aid[a[i]][alen[i]]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loop) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis2[u]) <span class="keyword">return</span> f[u];</span><br><span class="line">    <span class="keyword">if</span> (vis1[u]) loop=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (loop) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vis1[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> i,v;</span><br><span class="line">    f[u]=w[u];</span><br><span class="line">    <span class="keyword">for</span> (i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        f[u]=max(f[u],dp(v)+w[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    vis2[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> f[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> np=++tot;</span><br><span class="line">    sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p&amp;&amp;!sam[p].ch[x])</span><br><span class="line">    &#123;</span><br><span class="line">        sam[p].ch[x]=np;</span><br><span class="line">        p=sam[p].par;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p) sam[np].par=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> q=sam[p].ch[x];</span><br><span class="line">        <span class="keyword">if</span> (sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].par=q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(sam[nq].ch,sam[q].ch,<span class="keyword">sizeof</span>(sam[q].ch));</span><br><span class="line">            sam[nq].par=sam[q].par;</span><br><span class="line">            sam[q].par=sam[np].par=nq;</span><br><span class="line">            <span class="keyword">while</span> (p&amp;&amp;sam[p].ch[x]==q)</span><br><span class="line">            &#123;</span><br><span class="line">                sam[p].ch[x]=nq;</span><br><span class="line">                p=sam[p].par;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p=np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt]=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    to[cnt]=v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="D1T3"><a href="#D1T3" class="headerlink" title="D1T3"></a>D1T3</h2><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><h4 id="3"><a href="#3" class="headerlink" title="# 3"></a># 3</h4><p>欧拉定理，边读入边取模。</p><h4 id="4"><a href="#4" class="headerlink" title="# 4"></a># 4</h4><p>找到最大值往上枚举 / <del>抱着恶臭的想法直接猜出来</del>。</p><h4 id="5"><a href="#5" class="headerlink" title="# 5"></a># 5</h4><p>按 $x$ 排序后发现有两组相邻的 $x$ 差小于等于 $10$，由于 $p|(y_119^{x_2-x_1}-y_2)$，求出这两组的 $gcd$ 即可。</p><h4 id="6-7"><a href="#6-7" class="headerlink" title="# 6 / 7"></a># 6 / 7</h4><p>先自然溢出再取模。</p><p># 7 暴力找循环节即可。需要注意循环节中不含 $1$ .. 所以不能直接通过 $1$ 来判断循环节，可以用 <code>set</code>。 </p><h3 id="区间筛质数-莫比乌斯函数"><a href="#区间筛质数-莫比乌斯函数" class="headerlink" title="区间筛质数/莫比乌斯函数"></a>区间筛质数/莫比乌斯函数</h3><h4 id="9-12"><a href="#9-12" class="headerlink" title="# 9 / 12"></a># 9 / 12</h4><p>用 $\sqrt n$ 以内的质数筛后面的。</p><h4 id="10-13"><a href="#10-13" class="headerlink" title="# 10 / 13"></a># 10 / 13</h4><p>用 $5\times10^7$ 以内的数筛后面的，然后把错误的项打表。</p><p>好像可以用 Miller-Rabin 不打表做，不太会..</p><p>几个优化码长的小技巧：</p><ol><li>数组里面存差分。</li><li>把 $5\times10^7$ 略微调大，但要注意不要 TLE。</li><li>把数组压成字符串。</li></ol><h3 id="区间筛原根"><a href="#区间筛原根" class="headerlink" title="区间筛原根"></a>区间筛原根</h3><h4 id="14"><a href="#14" class="headerlink" title="# 14"></a># 14</h4><p>直接判断 $p-1$ 除掉每个质因数后是否是 $a^x\equiv1\pmod p$ 的解。</p><h4 id="15"><a href="#15" class="headerlink" title="# 15"></a># 15</h4><p>先找到任意一个原根 $g$。</p><p>预处理出 $x​$ 是 $g​$ 的 $k​$ 次幂，那么 $x​$ 是原根当且仅当 $k​$ 和 $p-1​$ 互质。</p><h4 id="16"><a href="#16" class="headerlink" title="# 16"></a># 16</h4><p>枚举质数判断即可快速找到 $p$。（说是快速还是要跑几十秒..）</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><p><a href="https://loj.ac/submission/412233" target="_blank" rel="noopener">LOJ 最慢解</a></p><h2 id="D2T1"><a href="#D2T1" class="headerlink" title="D2T1"></a>D2T1</h2><p>搞三个背包：</p><ol><li>整个城市都没有限制的城市选择阵营。</li><li>没有限制的学校选择派系。</li><li>有限制的学校选择阵营&amp;派系，注意每个有限制的城市要选一个有限制的学校作为“代表”，在背包时对阵营的贡献为整个城市的总和。</li></ol><p>最后再枚举第三个背包的每一项，对答案的贡献就是这一项乘上前两个背包中可以和这一项一起选的方案数，实际上是一段连续的区间，所以前两个背包预处理一下前缀和就可以算了。</p><p>用值域优化一下背包的枚举范围，总复杂度是 $\mathcal O(nm+k^2wm)$。</p><p>整体思路不难，知识点只有背包..然而还是写了整整一晚上。</p><p>在寝室调到快十二点，虽然觉得自己挺 sb 的，但本地在 lemon 上 ac 的时候..真的好爽啊。</p><p>不得不说寝室写题效率就是高，又爽。<del><font color="white">写完还能看一集三狮</font></del></p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">35</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> b,s,p;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((~p&amp;&amp;~y.p)||(p==<span class="number">-1</span>&amp;&amp;y.p==<span class="number">-1</span>)) <span class="keyword">return</span> b&lt;y.b;</span><br><span class="line">        <span class="keyword">if</span> (p==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,c,m,f[M],g[M],h[M][K*V][<span class="number">2</span>],zy[<span class="number">2</span>],px[<span class="number">2</span>],sum[N],tot[<span class="number">4</span>],ans;</span><br><span class="line"><span class="keyword">bool</span> ban[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,i,j,k,x,y,tmp[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span>(h));</span><br><span class="line">        <span class="built_in">memset</span>(tot,<span class="number">0</span>,<span class="keyword">sizeof</span>(tot));</span><br><span class="line">        <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(ban,<span class="literal">false</span>,<span class="keyword">sizeof</span>(ban));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;n,&amp;c,zy+<span class="number">0</span>,zy+<span class="number">1</span>,px+<span class="number">0</span>,px+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].b,&amp;a[i].s);</span><br><span class="line">            sum[a[i].b]+=a[i].s;</span><br><span class="line">            a[i].p=<span class="number">-1</span>;</span><br><span class="line">            tot[<span class="number">0</span>]+=a[i].s;</span><br><span class="line">            tot[<span class="number">1</span>]+=a[i].s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            a[x].p=y;</span><br><span class="line">            ban[a[x].b]=<span class="literal">true</span>;</span><br><span class="line">            tot[<span class="number">0</span>]-=a[x].s;</span><br><span class="line">            tot[<span class="number">2</span>]+=a[x].s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=c;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ban[i]||!sum[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tot[<span class="number">1</span>]-=sum[i];</span><br><span class="line">                tot[<span class="number">3</span>]+=sum[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j=min(zy[<span class="number">0</span>],tot[<span class="number">1</span>]);j&gt;=sum[i];--j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j&gt;=sum[i]) f[j]=(f[j]+f[j-sum[i]])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=zy[<span class="number">0</span>];++j) f[j]=(f[j<span class="number">-1</span>]+f[j])%mod;</span><br><span class="line"></span><br><span class="line">        g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=m+<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j=min(px[<span class="number">0</span>],tot[<span class="number">0</span>]);j&gt;=a[i].s;--j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j&gt;=a[i].s) g[j]=(g[j]+g[j-a[i].s])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=px[<span class="number">0</span>];++j) g[j]=(g[j<span class="number">-1</span>]+g[j])%mod;</span><br><span class="line"></span><br><span class="line">        h[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=m;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j=min(tot[<span class="number">3</span>],zy[<span class="number">0</span>]);j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (k=tot[<span class="number">2</span>];k&gt;=<span class="number">0</span>;--k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (x=<span class="number">0</span>;x&lt;=<span class="number">1</span>;++x)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp[x]=<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (y=<span class="number">0</span>;y&lt;=<span class="number">1</span>;++y)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((x^<span class="number">1</span>)*<span class="number">2</span>+(y^<span class="number">1</span>)==a[i].p||j&lt;x*sum[a[i].b]||k&lt;y*a[i].s) <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">if</span> (a[i].b!=a[i+<span class="number">1</span>].b||i==m) tmp[x]=(<span class="number">0l</span>l+tmp[x]+h[j-x*sum[a[i].b]][k-y*a[i].s][x^<span class="number">1</span>]+h[j-x*sum[a[i].b]][k-y*a[i].s][x])%mod;</span><br><span class="line">                            <span class="keyword">else</span> tmp[x]=(tmp[x]+h[j][k-y*a[i].s][x])%mod;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    h[j][k][<span class="number">0</span>]=tmp[<span class="number">0</span>];</span><br><span class="line">                    h[j][k][<span class="number">1</span>]=tmp[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=tot[<span class="number">3</span>]&amp;&amp;j&lt;=zy[<span class="number">0</span>];++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (zy[<span class="number">0</span>]-j&lt;tot[<span class="number">3</span>]-j+tot[<span class="number">1</span>]-zy[<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;=tot[<span class="number">2</span>];++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (px[<span class="number">0</span>]-k&lt;tot[<span class="number">2</span>]-k+tot[<span class="number">0</span>]-px[<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                ans=(ans+(ll)(h[j][k][<span class="number">0</span>]+h[j][k][<span class="number">1</span>])*(f[zy[<span class="number">0</span>]-j]-(tot[<span class="number">3</span>]-j+tot[<span class="number">1</span>]-zy[<span class="number">1</span>]&gt;<span class="number">0</span>?f[tot[<span class="number">3</span>]-j+tot[<span class="number">1</span>]-zy[<span class="number">1</span>]<span class="number">-1</span>]:<span class="number">0</span>))%mod*(g[px[<span class="number">0</span>]-k]-(tot[<span class="number">2</span>]-k+tot[<span class="number">0</span>]-px[<span class="number">1</span>]&gt;<span class="number">0</span>?g[tot[<span class="number">2</span>]-k+tot[<span class="number">0</span>]-px[<span class="number">1</span>]<span class="number">-1</span>]:<span class="number">0</span>)))%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(ans+mod)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="D2T2"><a href="#D2T2" class="headerlink" title="D2T2"></a>D2T2</h2><p>用堆维护每个子树的答案（堆里每个元素为每一组的最大值），合并的时候弹出两个堆顶取 max 记录下来，直到其中一个堆为空，再把记录的值加到非空的那个堆里，就是新的答案。可以两两合并，也可以把儿子合并了再加上自己。合并时每弹出两个元素、加入一个元素，元素的总数就会减少一，所以总复杂度是 $\mathcal O(n\log n)$。注意，不能用 <code>=</code> 来复制堆，而要用 <code>swap</code>，而且要开 C++11。如果不开 C++11 可以记录 id 然后 swap id。</p><p>贪心合并就不严格证了，感觉稍有点类似<a href="https://codeforces.com/contest/1119/problem/B" target="_blank" rel="noopener">最近那场 CF 的 B</a>？</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[N];</span><br><span class="line"><span class="keyword">int</span> n,a[N],mxdep[N];</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    n=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) a[i]=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;++i) son[read()].push_back(i);</span><br><span class="line"></span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) sort(son[i].begin(),son[i].end(),[](<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;<span class="keyword">return</span> mxdep[x]&gt;mxdep[y];&#125;);</span><br><span class="line"></span><br><span class="line">    dfs2(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q[<span class="number">1</span>].empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=q[<span class="number">1</span>].top();</span><br><span class="line">        q[<span class="number">1</span>].pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v,mx;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;son[u].size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v=son[u][i];</span><br><span class="line">        dfs2(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u].size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (son[u].size()&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!q[son[u][<span class="number">1</span>]].empty())</span><br><span class="line">            &#123;</span><br><span class="line">                mx=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;son[u].size();++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    v=son[u][i];</span><br><span class="line">                    <span class="keyword">if</span> (q[v].empty()) <span class="keyword">break</span>;</span><br><span class="line">                    mx=max(mx,q[v].top());</span><br><span class="line">                    q[v].pop();</span><br><span class="line">                &#125;</span><br><span class="line">                tmp.push_back(mx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q[u].swap(q[son[u][<span class="number">0</span>]]);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;tmp.size();++i) q[u].push(tmp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    q[u].push(a[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;son[u].size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v=son[u][i];</span><br><span class="line">        dfs1(v);</span><br><span class="line">        mxdep[u]=max(mxdep[u],mxdep[v]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="D2T3"><a href="#D2T3" class="headerlink" title="D2T3"></a>D2T3</h2><p>待填。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;口中喊着「僕勝つから。ぜったい、勝て来るから。」的你，真的付出了桐山般的努力吗？&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="省选" scheme="https://ouuan.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>树分块学习笔记</title>
    <link href="https://ouuan.github.io/%E6%A0%91%E5%88%86%E5%9D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/树分块学习笔记/</id>
    <published>2019-03-30T13:18:50.000Z</published>
    <updated>2019-04-02T23:52:55.593Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现 <a href="https://oi-wiki.org/" target="_blank" rel="noopener">OI Wiki</a> 的“树分块”是空的，本来想凭着之前写的<a href="https://ouuan.github.io/%E8%8E%AB%E9%98%9F%E3%80%81%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%81%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/">莫队教程</a>水一水，结果被告知已经有人写过树上莫队了..于是就得详细介绍一下树分块除了树上莫队以外的应用..然而我除了糖果公园只做过一道树分块..（结果最后并没有找到这道题以外的其它题..）</p><a id="more"></a><h2 id="树分块的方式"><a href="#树分块的方式" class="headerlink" title="树分块的方式"></a>树分块的方式</h2><p>可以参考 <a href="https://oi-wiki.org/misc/mo-algo/#_14" target="_blank" rel="noopener">OI Wiki/莫队算法/真-树上莫队</a>。</p><p>也可以参考 <a href="https://ouuan.github.io/%E8%8E%AB%E9%98%9F%E3%80%81%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%81%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/#%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F">ouuan的博客/莫队、带修莫队、树上莫队详解/树上莫队</a>。</p><p>树上莫队同样可以参考以上两篇文章。</p><h2 id="树分块的应用"><a href="#树分块的应用" class="headerlink" title="树分块的应用"></a>树分块的应用</h2><p>树分块除了应用于莫队，还可以灵活地运用到某些树上问题中。但可以用树分块解决的题目往往都有更优秀的做法，所以相关的题目较少。</p><p>顺带提一句，“gty的妹子树”的树分块做法可以被菊花图卡掉。</p><h3 id="BZOJ4763-雪辉"><a href="#BZOJ4763-雪辉" class="headerlink" title="BZOJ4763 雪辉"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4763" target="_blank" rel="noopener">BZOJ4763 雪辉</a></h3><p>先进行树分块，然后对每个块的关键点，预处理出它到祖先中每个关键点的路径上颜色的 bitset，以及每个关键点的最近关键点祖先，复杂度是 $\mathcal O(n\sqrt n+\frac{nc}{32})​$，其中 $n\sqrt n​$ 是暴力从每个关键点向上跳的复杂度，$\frac{nc}{32}​$ 是把 $\mathcal O(n)​$ 个 bitset 存下来的复杂度。</p><p>回答询问的时候，先从路径的端点暴力跳到所在块的关键点，再从所在块的关键点一块一块地向上跳，直到 $lca$ 所在块，然后再暴力跳到 $lca$。关键点之间的 bitset 已经预处理了，剩下的在暴力跳的过程中计算。单次询问复杂度是 $\mathcal O(\sqrt n+\frac c{32})$，其中 $\sqrt n$ 是块内暴力跳以及块直接向上跳的复杂度，$\mathcal O(\frac c{32})$ 是将预处理的结果与暴力跳的结果合并的复杂度。数颜色个数可以用 bitset 的 <code>count()</code>，求 $\operatorname{mex}$ 可以用 bitset 的 <code>_Find_first()</code>。</p><p>所以，总复杂度为 $\mathcal O((n+m)(\sqrt n+\frac c{32}))​$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B=<span class="number">666</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C=<span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> n,m,type,c[N],fa[N],dep[N],sta[N],top,tot,bl[N],key[N/B+<span class="number">5</span>],p[N],keyid[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">bitset</span>&lt;C&gt; bs[N/B+<span class="number">5</span>][N/B+<span class="number">5</span>],temp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,u,v,x,y,k,lastans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line">    type=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) c[i]=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        u=read();</span><br><span class="line">        v=read();</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!tot) ++tot;</span><br><span class="line">    <span class="keyword">if</span> (keyid[key[tot]]==tot) keyid[key[tot]]=<span class="number">0</span>;</span><br><span class="line">    key[tot]=<span class="number">1</span>;</span><br><span class="line">    keyid[<span class="number">1</span>]=tot; </span><br><span class="line">    <span class="keyword">while</span> (top) bl[sta[top--]]=tot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i) <span class="comment">//预处理</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[key[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[key[i]]=<span class="literal">true</span>;</span><br><span class="line">        temp.reset();</span><br><span class="line">        <span class="keyword">for</span> (u=key[i];u;u=fa[u])</span><br><span class="line">        &#123;</span><br><span class="line">            temp[c[u]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (keyid[u])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!p[key[i]]&amp;&amp;u!=key[i]) p[key[i]]=u;</span><br><span class="line">                bs[keyid[key[i]]][keyid[u]]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        k=read();</span><br><span class="line">        temp.reset();</span><br><span class="line">        <span class="keyword">while</span> (k--)</span><br><span class="line">        &#123;</span><br><span class="line">            u=x=read()^lastans;</span><br><span class="line">            v=y=read()^lastans;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (key[bl[x]]!=key[bl[y]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[key[bl[x]]]&gt;dep[key[bl[y]]])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x==u) <span class="comment">//若是第一次跳先暴力跳到关键点</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">while</span> (x!=key[bl[u]])</span><br><span class="line">                        &#123;</span><br><span class="line">                            temp[c[x]]=<span class="number">1</span>;</span><br><span class="line">                            x=fa[x];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> x=p[x]; <span class="comment">//否则跳一整块</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (y==v)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">while</span> (y!=key[bl[v]])</span><br><span class="line">                        &#123;</span><br><span class="line">                            temp[c[y]]=<span class="number">1</span>;</span><br><span class="line">                            y=fa[y];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> y=p[y];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (keyid[x]) temp|=bs[keyid[key[bl[u]]]][keyid[x]];</span><br><span class="line">            <span class="keyword">if</span> (keyid[y]) temp|=bs[keyid[key[bl[v]]]][keyid[y]];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (x!=y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[x]&gt;dep[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[c[x]]=<span class="number">1</span>;</span><br><span class="line">                    x=fa[x];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp[c[y]]=<span class="number">1</span>;</span><br><span class="line">                    y=fa[y];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp[c[x]]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans1=temp.count(),ans2=(~temp)._Find_first();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans1,ans2);</span><br><span class="line">        lastans=(ans1+ans2)*type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v,t=top;</span><br><span class="line">    <span class="keyword">for</span> (i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (v==fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[v]=u;</span><br><span class="line">        dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">        dfs(v);</span><br><span class="line">        <span class="keyword">if</span> (top-t&gt;=B)</span><br><span class="line">        &#123;</span><br><span class="line">            key[++tot]=u;</span><br><span class="line">            <span class="keyword">if</span> (!keyid[u]) keyid[u]=tot;</span><br><span class="line">            <span class="keyword">while</span> (top&gt;t) bl[sta[top--]]=tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt]=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    to[cnt]=v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BZOJ4812-由乃打扑克"><a href="#BZOJ4812-由乃打扑克" class="headerlink" title="BZOJ4812 由乃打扑克"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4812" target="_blank" rel="noopener">BZOJ4812 由乃打扑克</a></h3><p>这题和上一题基本一样，唯一的区别是得到 bitset 后如何计算答案。</p><p><del>由于BZOJ是计算所有测试点总时限，不好卡，所以可以用 <code>_Find_next()</code> 水过去。</del></p><p>正解是每 $16$ 位一起算，先预处理出 $2^{16}$ 种可能的情况高位连续 $1$ 的个数、低位连续 $1$ 的个数以及中间的贡献。只不过这样要手写 bitset，因为标准库的 bitset 不能取某 $16$ 位..</p><p>代码可以参考<a href="https://www.cnblogs.com/FallDream/p/bzoj4763.html" target="_blank" rel="noopener">这篇博客</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现 &lt;a href=&quot;https://oi-wiki.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OI Wiki&lt;/a&gt; 的“树分块”是空的，本来想凭着之前写的&lt;a href=&quot;https://ouuan.github.io/%E8%8E%AB%E9%98%9F%E3%80%81%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%81%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/&quot;&gt;莫队教程&lt;/a&gt;水一水，结果被告知已经有人写过树上莫队了..于是就得详细介绍一下树分块除了树上莫队以外的应用..然而我除了糖果公园只做过一道树分块..（结果最后并没有找到这道题以外的其它题..）&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="分块" scheme="https://ouuan.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="树分块" scheme="https://ouuan.github.io/tags/%E6%A0%91%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>2019省选复习周做题计划</title>
    <link href="https://ouuan.github.io/2019%E7%9C%81%E9%80%89%E5%A4%8D%E4%B9%A0%E5%91%A8%E5%81%9A%E9%A2%98%E8%AE%A1%E5%88%92/"/>
    <id>https://ouuan.github.io/2019省选复习周做题计划/</id>
    <published>2019-03-30T01:25:04.000Z</published>
    <updated>2019-04-29T12:23:17.510Z</updated>
    
    <content type="html"><![CDATA[<p>随便找了点省选前需要复习的知识点相关的题目..</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="LCT-树剖"><a href="#LCT-树剖" class="headerlink" title="LCT/树剖"></a>LCT/树剖</h2><p><a href="http://uoj.ac/problem/207" target="_blank" rel="noopener"><del>共价大爷游长沙</del></a></p><p><a href="https://www.luogu.org/problemnew/show/P3676" target="_blank" rel="noopener">小清新数据结构题</a></p><p><a href="https://www.luogu.org/problemnew/show/P4234" target="_blank" rel="noopener">最小差值生成树</a></p><p><a href="https://www.luogu.org/problemnew/show/SP2666" target="_blank" rel="noopener">QTREE4</a></p><h2 id="淀粉质"><a href="#淀粉质" class="headerlink" title="淀粉质"></a>淀粉质</h2><p><a href="https://www.luogu.org/problemnew/show/P2664" target="_blank" rel="noopener">树上游戏</a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><a href="https://www.luogu.org/problemnew/show/P4022" target="_blank" rel="noopener">[APIO2014]回文串</a></p><p><a href="https://www.luogu.org/problemnew/show/P4094" target="_blank" rel="noopener">[HEOI2016/TJOI2016]字符串</a></p><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p><a href="https://www.luogu.org/problemnew/show/P4735" target="_blank" rel="noopener"><del>最大异或和</del></a></p><p><a href="https://www.luogu.org/problemnew/show/P4551" target="_blank" rel="noopener">最长异或路径</a></p><h2 id="整体二分-树套树"><a href="#整体二分-树套树" class="headerlink" title="整体二分/树套树"></a>整体二分/树套树</h2><p><a href="https://www.luogu.org/problemnew/show/P3332" target="_blank" rel="noopener">[ZJOI2013]K大数查询</a></p><h2 id="cdq分治"><a href="#cdq分治" class="headerlink" title="cdq分治"></a>cdq分治</h2><p><a href="https://www.luogu.org/problemnew/show/P4169" target="_blank" rel="noopener">[Violet]天使玩偶/SJY摆棋子</a></p><p><a href="https://www.luogu.org/problemnew/show/P4027" target="_blank" rel="noopener">[NOI2007]货币兑换</a></p><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p><a href="https://www.luogu.org/problemnew/show/P3312" target="_blank" rel="noopener">[SDOI2014]数表</a></p><p><a href="https://www.luogu.org/problemnew/show/P3911" target="_blank" rel="noopener"><del>最小公倍数之和</del></a></p><p><a href="https://remmina.github.io/BZPRO/JudgeOnline/4176.html" target="_blank" rel="noopener">Lucas的数论</a></p><h2 id="组合数学、容斥原理、斯特林数"><a href="#组合数学、容斥原理、斯特林数" class="headerlink" title="组合数学、容斥原理、斯特林数"></a>组合数学、容斥原理、斯特林数</h2><p><a href="https://www.luogu.org/problemnew/show/P4707" target="_blank" rel="noopener">重返现世</a></p><p><a href="https://www.luogu.org/problemnew/show/P4091" target="_blank" rel="noopener">[HEOI2016/TJOI2016]求和</a></p><p><a href="https://www.luogu.org/problemnew/show/P4827" target="_blank" rel="noopener">[国家集训队] Crash 的文明世界</a></p><h2 id="多项式、生成函数"><a href="#多项式、生成函数" class="headerlink" title="多项式、生成函数"></a>多项式、生成函数</h2><p><a href="https://remmina.github.io/BZPRO/JudgeOnline/3028.html" target="_blank" rel="noopener">食物</a></p><p><a href="https://remmina.github.io/BZPRO/JudgeOnline/3509.html" target="_blank" rel="noopener"> [CodeChef] COUNTARI</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3160" target="_blank" rel="noopener">万径人踪灭</a></p><p><a href="https://www.luogu.org/problemnew/show/CF438E" target="_blank" rel="noopener">The Child and Binary Tree</a></p><p><a href="https://remmina.github.io/BZPRO/JudgeOnline/3456.html" target="_blank" rel="noopener">城市规划</a></p><p><a href="https://www.luogu.org/problemnew/show/P4389" target="_blank" rel="noopener">付公主的背包</a></p><p><a href="https://www.luogu.org/problemnew/show/P4705" target="_blank" rel="noopener">玩游戏</a></p><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><p>共价大爷游长沙：如果要获取一个点的子树信息，要么 access 父亲 Splay 自己然后看实+虚+自己，要么 access 自己然后看虚+自己。</p><p>最大异或和：一开始尝试用线段树合并做，复杂度是 $\mathcal O(n(\log(n+m)+\log w)+m\log(n+m)\log w)$，卡常卡不过去，尝试用 <code>bitset</code> 优化，后来发现除以 $32$ 被 $\log$ 掉了，加上带来的一些常数后根本没有优化.. 只不过后来发现可持久化 Trie 真的挺好写的，（只要会主席树不需要学也能 yy 出来的感觉）。</p><p>最后果然没做几道题..只不过比我想象中还要少一点..</p><p>写了点 OI Wiki，过程中也写了几道计划外的题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随便找了点省选前需要复习的知识点相关的题目..&lt;/p&gt;
    
    </summary>
    
      <category term="计划" scheme="https://ouuan.github.io/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="省选" scheme="https://ouuan.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
      <category term="题表" scheme="https://ouuan.github.io/tags/%E9%A2%98%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>树状数组——从背模板到树套树</title>
    <link href="https://ouuan.github.io/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E2%80%94%E2%80%94%E4%BB%8E%E8%83%8C%E6%A8%A1%E6%9D%BF%E5%88%B0%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    <id>https://ouuan.github.io/树状数组——从背模板到树套树/</id>
    <published>2019-03-26T13:38:45.000Z</published>
    <updated>2019-04-02T23:53:36.521Z</updated>
    
    <content type="html"><![CDATA[<p><del>这是一篇披着PJ组数据结构外衣的树套树教程。</del></p><p>大约会（尝试着）较为本质地简介一下树状数组？</p><a id="more"></a><h1 id="基础树状数组"><a href="#基础树状数组" class="headerlink" title="基础树状数组"></a>基础树状数组</h1><p>树状数组，英文名 BIT(Binary Indexed Tree)（<del>不是TreeArray</del>）。</p><p>原理的话..看图大约是一目了然的：</p><img src="/树状数组——从背模板到树套树/BIT.png"><p>其中，黑色的矩形（包括红色的正方形）代表这一部分的和，而红色的正方形代表这部分和在树状数组中的下标。如果把这些区间连边，就像是一棵二叉树，所以叫树状数组。</p><p>举几个栗子，$BIT[3]$ 表示 $A[3]$，$BIT[6]$ 表示 $A[5]+A[6]$，$BIT[12]$ 表示 $A[9]+A[10]+A[11]+A[12]$。</p><p>我们把每个下标用二进制表示，可以发现，二进制表示的末尾有 $k​$ 个 $0​$，在树状数组里它就代表一段长为 $2^k​$ 的区间的和。由于树状数组和下标的二进制联系紧密，所以英文叫 Binary Indexed Tree。</p><p>可以定义 $lowbit(x)$ 为 $x$ 的二进制表示中最低位的 $1$ 表示的数。如 $lowbit(101_{(2)})=1$，$lowbit(110100_{(2)}=4)$，这样的话，树状数组中下标为 $x$ 的元素就表示了一段长为 $lowbit(x)$ 的区间的和。</p><p>由于计算机中存储带符号整数的方式，$lowbit(x)=$<code>x&amp;-x</code>，具体原因可以自行搜索“补码”。</p><p>考虑如何更新树状数组：如果我们要更新第 $p$ 位，先更新 $BIT[p]$，再更新 $BIT[p+lowbit(p)]$，再更新 $BIT[p+lowbit(p)+lowbit(p+lowbit(p))]$……一直更新到原数列的长度。</p><p>考虑如何查询某个前缀和：如果我们要查询前 $p$ 位的前缀和，结果就是 $BIT[p]+BIT[p-lowbit(p)]+BIT[p-lowbit(p)-lowbit(p-lowbit(p))]$……一直查询到 $lowbit$ 为 $1$ 的节点。</p><p>把树状数组看成二叉树，深度不超过 $\log(n)$，所以单次操作复杂度是 $\mathcal O(\log n)$。</p><p>大概就是这样，代码比较简短：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;p&lt;=n;p+=(p&amp;-p)) BIT[p]+=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p;p-=(p&amp;-p)) out+=BIT[p];</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="稍进阶一点点的树状数组"><a href="#稍进阶一点点的树状数组" class="headerlink" title="稍进阶一点点的树状数组"></a>稍进阶一点点的树状数组</h1><p><del>由于本篇教程是“从背模板到树套树”而不是“摆脱线段树与平衡树”，所以不会提及那方面的高级用法。</del></p><h2 id="维护前缀积"><a href="#维护前缀积" class="headerlink" title="维护前缀积"></a>维护前缀积</h2><p>把+改成*。</p><h2 id="维护前缀异或和"><a href="#维护前缀异或和" class="headerlink" title="维护前缀异或和"></a>维护前缀异或和</h2><p>把+改成^。</p><h2 id="维护前缀矩阵积"><a href="#维护前缀矩阵积" class="headerlink" title="维护前缀矩阵积"></a>维护前缀矩阵积</h2><p><del>把+改成矩阵乘法。</del></p><p>诶，等等，怎么全WA了？</p><p>因为矩阵乘法不具有交换律..</p><p>比如说，两个矩阵 $A$ 和 $B$，树状数组里存的是 $A$ 和 $A\times B$，把 $A$ 乘上 $C$ 后树状数组里第二项我们期望它是 $A\times C\times B$，而实际上它是 $A\times B\times C$..</p><h2 id="所以树状数组到底在维护什么？"><a href="#所以树状数组到底在维护什么？" class="headerlink" title="所以树状数组到底在维护什么？"></a>所以树状数组到底在维护什么？</h2><blockquote><p>警告：本人其实没怎么学过群论..下文群论相关可能有口胡成分。</p></blockquote><p>在维护一个阿贝尔群..</p><p>等等，群是什么？<del>群号多少？</del></p><p>..就是一堆元素，定义了一种运算，它满足结合律、交换律，有单位元（谁和它运算都得到本身）、逆元（每个元素都存在一个元素运算后得到单位元）。如果只是前缀信息按理来说是不需要逆元的..然而一般都是要维护区间信息，而不只是前缀信息，所以需要逆元..</p><h1 id="树状数组套动态开点线段树"><a href="#树状数组套动态开点线段树" class="headerlink" title="树状数组套动态开点线段树"></a>树状数组套动态开点线段树</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><del>终于到正题了。</del></p><p><del>我们来定义一个阿贝尔群：</del></p><p>它的元素是一些同构的动态开点线段树，运算是把对应节点的信息相加，要求节点维护的信息是阿贝尔群。</p><p>一般来说，主席树可以解决的静态问题带修就要用树套树了..</p><p>修改就是把树状数组里的+换成动态开点线段树的修改操作，<del>询问就是把+换成merge</del>。直接 merge 复杂度好像不太对..（其实我不太会证线段树合并复杂度..）所以可以开个数组，把需要询问的节点存下来，然后在询问函数里合并信息。如果是询问区间，就把两个端点在树状数组里对应的节点存下来。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="P2617-Dynamic-Rankings"><a href="#P2617-Dynamic-Rankings" class="headerlink" title="P2617 Dynamic Rankings"></a><a href="https://www.luogu.org/problemnew/show/P2617" target="_blank" rel="noopener"><strong>P2617</strong> Dynamic Rankings</a></h3><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,ls,rs;</span><br><span class="line">&#125; t[N&lt;&lt;<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,tot,a[N],BIT[N],lsh[N&lt;&lt;<span class="number">1</span>],cnt,tp[N],l[N],r[N],xx[N],totx,toty,x[N],y[N];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) lsh[++cnt]=a[i]=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tp[i]=<span class="number">0</span>;</span><br><span class="line">            l[i]=read();</span><br><span class="line">            r[i]=read();</span><br><span class="line">            xx[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tp[i]=<span class="number">1</span>;</span><br><span class="line">            l[i]=read();</span><br><span class="line">            lsh[++cnt]=xx[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(lsh+<span class="number">1</span>,lsh+cnt+<span class="number">1</span>);</span><br><span class="line">    cnt=unique(lsh+<span class="number">1</span>,lsh+cnt+<span class="number">1</span>)-lsh;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=lower_bound(lsh+<span class="number">1</span>,lsh+cnt,a[i])-lsh;</span><br><span class="line">        change(i,a[i],<span class="number">1</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tp[i])</span><br><span class="line">        &#123;</span><br><span class="line">            change(l[i],a[l[i]],<span class="number">-1</span>);</span><br><span class="line">            change(l[i],a[l[i]]=xx[i]=lower_bound(lsh+<span class="number">1</span>,lsh+cnt,xx[i])-lsh,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            totx=toty=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j=l[i]<span class="number">-1</span>;j;j-=(j&amp;-j)) x[++totx]=BIT[j];</span><br><span class="line">            <span class="keyword">for</span> (j=r[i];j;j-=(j&amp;-j)) y[++toty]=BIT[j];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,cnt,xx[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;p&lt;=n;p+=(p&amp;-p)) BIT[p]=modify(BIT[p],<span class="number">1</span>,cnt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=++tot;</span><br><span class="line">    t[u]=t[x];</span><br><span class="line">    t[u].val+=type;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p&lt;mid) t[u].ls=modify(t[u].ls,l,mid,p,type);</span><br><span class="line">    <span class="keyword">else</span> t[u].rs=modify(t[u].rs,mid,r,p,type);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span> lsh[l];</span><br><span class="line">    <span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) sum-=t[t[x[i]].ls].val;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) sum+=t[t[y[i]].ls].val;</span><br><span class="line">    <span class="keyword">if</span> (sum&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) x[i]=t[x[i]].ls;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) y[i]=t[y[i]].ls;</span><br><span class="line">        <span class="keyword">return</span> query(l,l+r&gt;&gt;<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) x[i]=t[x[i]].rs;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) y[i]=t[y[i]].rs;</span><br><span class="line">        <span class="keyword">return</span> query(l+r&gt;&gt;<span class="number">1</span>,r,k-sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="P3380-【模板】二逼平衡树（树套树）"><a href="#P3380-【模板】二逼平衡树（树套树）" class="headerlink" title="P3380 【模板】二逼平衡树（树套树）"></a><a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener"><strong>P3380</strong> 【模板】二逼平衡树（树套树）</a></h3><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,ls,rs;</span><br><span class="line">&#125; t[N&lt;&lt;<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,tot,a[N],BIT[N],lsh[N&lt;&lt;<span class="number">1</span>],cnt,op[N],l[N],r[N],k[N],totx,toty,X[<span class="number">20</span>][N],Y[<span class="number">20</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,p;</span><br><span class="line"></span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) a[i]=lsh[++cnt]=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        op[i]=read();</span><br><span class="line">        <span class="keyword">if</span> (op[i]==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l[i]=read();</span><br><span class="line">            k[i]=lsh[++cnt]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l[i]=read();</span><br><span class="line">            r[i]=read();</span><br><span class="line">            k[i]=read();</span><br><span class="line">            <span class="keyword">if</span> (op[i]!=<span class="number">2</span>) lsh[++cnt]=k[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(lsh+<span class="number">1</span>,lsh+cnt+<span class="number">1</span>);</span><br><span class="line">    cnt=unique(lsh+<span class="number">1</span>,lsh+cnt+<span class="number">1</span>)-lsh;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=lower_bound(lsh+<span class="number">1</span>,lsh+cnt,a[i])-lsh;</span><br><span class="line">        modify(i,a[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (op[i]==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k[i]=lower_bound(lsh+<span class="number">1</span>,lsh+cnt,k[i])-lsh;</span><br><span class="line">            modify(l[i],a[l[i]],<span class="number">-1</span>);</span><br><span class="line">            modify(l[i],a[l[i]]=k[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            totx=toty=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=l[i]<span class="number">-1</span>;p;p-=(p&amp;-p)) X[<span class="number">0</span>][++totx]=BIT[p];</span><br><span class="line">            <span class="keyword">for</span> (p=r[i];p;p-=(p&amp;-p)) Y[<span class="number">0</span>][++toty]=BIT[p];</span><br><span class="line">            <span class="keyword">if</span> (op[i]==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(<span class="number">1</span>,cnt,k[i]));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k[i]=lower_bound(lsh+<span class="number">1</span>,lsh+cnt,k[i])-lsh;</span><br><span class="line">                <span class="keyword">if</span> (op[i]==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,qsum(<span class="number">1</span>,cnt,<span class="number">1</span>,k[i],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op[i]==<span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> rk=qsum(<span class="number">1</span>,cnt,<span class="number">1</span>,k[i],<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (rk) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(<span class="number">1</span>,cnt,rk));</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,-INF);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> rk=qsum(<span class="number">1</span>,cnt,<span class="number">1</span>,k[i]+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (rk&lt;=r[i]-l[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(<span class="number">1</span>,cnt,rk+<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,INF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;p&lt;=n;p+=(p&amp;-p)) BIT[p]=insert(BIT[p],<span class="number">1</span>,cnt,x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=++tot;</span><br><span class="line">    t[u]=t[x];</span><br><span class="line">    t[u].val+=type;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p&lt;mid) t[u].ls=insert(t[u].ls,l,mid,p,type);</span><br><span class="line">    <span class="keyword">else</span> t[u].rs=insert(t[u].rs,mid,r,p,type);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qsum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;=R||r&lt;=L) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;R&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) sum-=t[X[d][i]].val;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) sum+=t[Y[d][i]].val;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) X[d+<span class="number">1</span>][i]=t[X[d][i]].ls;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) Y[d+<span class="number">1</span>][i]=t[Y[d][i]].ls;</span><br><span class="line">    sum=qsum(l,l+r&gt;&gt;<span class="number">1</span>,L,R,d+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) X[d+<span class="number">1</span>][i]=t[X[d][i]].rs;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) Y[d+<span class="number">1</span>][i]=t[Y[d][i]].rs;</span><br><span class="line">    <span class="keyword">return</span> sum+qsum(l+r&gt;&gt;<span class="number">1</span>,r,L,R,d+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span> lsh[l];</span><br><span class="line">    <span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) sum-=t[t[X[<span class="number">0</span>][i]].ls].val;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) sum+=t[t[Y[<span class="number">0</span>][i]].ls].val;</span><br><span class="line">    <span class="keyword">if</span> (sum&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) X[<span class="number">0</span>][i]=t[X[<span class="number">0</span>][i]].ls;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) Y[<span class="number">0</span>][i]=t[Y[<span class="number">0</span>][i]].ls;</span><br><span class="line">        <span class="keyword">return</span> kth(l,l+r&gt;&gt;<span class="number">1</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=totx;++i) X[<span class="number">0</span>][i]=t[X[<span class="number">0</span>][i]].rs;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=toty;++i) Y[<span class="number">0</span>][i]=t[Y[<span class="number">0</span>][i]].rs;</span><br><span class="line">    <span class="keyword">return</span> kth(l+r&gt;&gt;<span class="number">1</span>,r,k-sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CQOI2011-动态逆序对"><a href="#CQOI2011-动态逆序对" class="headerlink" title="[CQOI2011]动态逆序对"></a><a href="https://www.luogu.org/problemnew/show/P3157" target="_blank" rel="noopener">[CQOI2011]动态逆序对</a></h3><p>这题用树套树做有点卡空间..需要把带返回值的动态开点改成直接修改。</p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,ls,rs;</span><br><span class="line">&#125; t[N*<span class="number">90</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>&amp; u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[N],p[N],del[N],BIT[N],x[<span class="number">20</span>][<span class="number">20</span>],y[<span class="number">20</span>][<span class="number">20</span>],xtot,ytot,tot;</span><br><span class="line"><span class="keyword">bool</span> deleted[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,out[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        p[a[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        del[i]=p[read()];</span><br><span class="line">        deleted[del[i]]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!deleted[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j=a[i];j;j-=(j&amp;-j)) ans+=BIT[j];</span><br><span class="line">            <span class="keyword">for</span> (j=a[i];j&lt;=n;j+=(j&amp;-j)) ++BIT[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(BIT,<span class="number">0</span>,<span class="keyword">sizeof</span>(BIT));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!deleted[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j=i;j&lt;=n;j+=(j&amp;-j))</span><br><span class="line">            &#123;</span><br><span class="line">                change(BIT[j],<span class="number">1</span>,n+<span class="number">1</span>,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=m;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        xtot=ytot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=del[i];j;j-=(j&amp;-j)) y[<span class="number">0</span>][++ytot]=BIT[j];</span><br><span class="line">        ans+=query(<span class="number">1</span>,n+<span class="number">1</span>,a[del[i]]+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        xtot=ytot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=del[i];j;j-=(j&amp;-j)) x[<span class="number">0</span>][++xtot]=BIT[j];</span><br><span class="line">        <span class="keyword">for</span> (j=n;j;j-=(j&amp;-j)) y[<span class="number">0</span>][++ytot]=BIT[j];</span><br><span class="line">        ans+=query(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>,a[del[i]],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (j=del[i];j&lt;=n;j+=(j&amp;-j)) change(BIT[j],<span class="number">1</span>,n+<span class="number">1</span>,a[del[i]]);</span><br><span class="line">        out[i]=ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,out[i]); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>&amp; u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) u=++tot; </span><br><span class="line">    ++t[u].val;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p&lt;mid) change(t[u].ls,l,mid,p);</span><br><span class="line">    <span class="keyword">else</span> change(t[u].rs,mid,r,p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;=R||r&lt;=L) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,ret=<span class="number">0</span>,mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;R&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=xtot;++i) ret-=t[x[d][i]].val;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=ytot;++i) ret+=t[y[d][i]].val;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=xtot;++i) x[d+<span class="number">1</span>][i]=t[x[d][i]].ls;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=ytot;++i) y[d+<span class="number">1</span>][i]=t[y[d][i]].ls;</span><br><span class="line">    ret+=query(l,mid,L,R,d+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=xtot;++i) x[d+<span class="number">1</span>][i]=t[x[d][i]].rs;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=ytot;++i) y[d+<span class="number">1</span>][i]=t[y[d][i]].rs;</span><br><span class="line">    ret+=query(mid,r,L,R,d+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;这是一篇披着PJ组数据结构外衣的树套树教程。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;大约会（尝试着）较为本质地简介一下树状数组？&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="https://ouuan.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="树套树" scheme="https://ouuan.github.io/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>cdq分治学习笔记</title>
    <link href="https://ouuan.github.io/cdq%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/cdq分治学习笔记/</id>
    <published>2019-03-26T10:49:44.000Z</published>
    <updated>2019-04-02T23:52:40.773Z</updated>
    
    <content type="html"><![CDATA[<p>cdq分治也是咕了好久了..最近总算把它学了。</p><p><del>cdq分治是一种离线算法，可以代替一些复杂的数据结构，降低代码难度，减小常数。</del>废话大家都知道。</p><a id="more"></a><p>本文未完待续（cdq分治的其它应用，如维护凸壳，待填坑）。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>感觉cdq分治不如叫“ex归并排序”，就是<strong>以操作的时间作为初始顺序，在递归处理的过程中按位置归并排序</strong>。</p><p>更一般地说，对于一个二维偏序 $P(i,j)=P_1(a_i,a_j)\land P_2(b_i,b_j)​$，位置 $i​$ 的修改对位置 $j​$ 的询问（询问为类前缀和形式，区间询问需拆成两个前缀询问）有影响当且仅当 $P(i,j)=true​$，cdq分治就是以其中一维为初始顺序，对另一维进行归并排序的过程中计算左区间里修改的总和，将左区间修改的影响应用到右区间。</p><p>学会了之后就会发现，cdq分治的确就是这样，已经描述的很清楚了，然而在没学会的时候估计是看不懂上面这段话的..所以结合具体题目来看一看吧。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="P3374-【模板】树状数组-1"><a href="#P3374-【模板】树状数组-1" class="headerlink" title="P3374 【模板】树状数组 1"></a><a href="https://www.luogu.org/problemnew/show/P3374" target="_blank" rel="noopener"><strong>P3374</strong> 【模板】树状数组 1</a></h2><p><del>树状数组裸题！</del>冷静，我们来用ex归并排序做..（嗯，我决定就这么叫它了）</p><p>按照我们上面说的，我们把操作存下来，询问拆成两个前缀和相减，初始值视作修改，需要存的信息有操作的种类（修改、询问的左端点减一、询问的右端点），操作的位置（$p$、$l-1$、$r$）以及修改加上的值/询问的编号。如果写法正常的话你已经以操作的时间作为初始顺序了..</p><p>然后，写个归并排序，按操作的位置排序，同一个位置的修改要放在询问的前面。然后，在归并排序的过程中，遇到左区间里的修改就更新左区间修改的总和，遇到右区间里的询问就用记录的“左区间修改的总和”更新这个询问的答案。</p><div><div class="fold_hider"><div class="close hider_title">具体见代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> type,p,val; <span class="comment">//type为2表示修改，type为-1表示左端点减一，type为1表示右端点</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> p==b.p?type&gt;b.type:p&lt;b.p; &#125;</span><br><span class="line">&#125; q[N&lt;&lt;<span class="number">2</span>],tmp[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,tot,qtot;</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,op,x,y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="comment">//初始值视作修改</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        q[++tot].type=<span class="number">2</span>;</span><br><span class="line">        q[tot].p=i;</span><br><span class="line">        q[tot].val=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q[++tot].type=<span class="number">2</span>;</span><br><span class="line">            q[tot].p=x;</span><br><span class="line">            q[tot].val=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//询问拆成两个前缀和相减</span></span><br><span class="line">        &#123;</span><br><span class="line">            q[++tot].type=<span class="number">-1</span>;</span><br><span class="line">            q[tot].p=x<span class="number">-1</span>;</span><br><span class="line">            q[tot].val=++qtot;</span><br><span class="line">            q[++tot].type=<span class="number">1</span>;</span><br><span class="line">            q[tot].p=y;</span><br><span class="line">            q[tot].val=qtot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solve(<span class="number">1</span>,tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=qtot;++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,mid;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    i=k=l;</span><br><span class="line">    j=mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve(l,mid);</span><br><span class="line">    solve(mid,r);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid&amp;&amp;j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i]&lt;q[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i].type==<span class="number">2</span>) sum+=q[i].val; <span class="comment">//记录左区间里的修改之和</span></span><br><span class="line">            tmp[k++]=q[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[j].type!=<span class="number">2</span>) ans[q[j].val]+=q[j].type*sum; <span class="comment">//将左区间里的修改应用到右区间里的询问</span></span><br><span class="line">            tmp[k++]=q[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid) tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[j].type!=<span class="number">2</span>) ans[q[j].val]+=q[j].type*sum;</span><br><span class="line">        tmp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;r;++i) q[i]=tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>之前说过ex归并排序本质上是一个二维偏序限制了修改对询问的影响，所以也可以先按位置排序再按时间排序。只不过..这样写很奇怪，很麻烦，常数又大。然而为了理解ex归并排序的本质，我还是写了份这个做法..</p><div><div class="fold_hider"><div class="close hider_title">一种奇怪的写法</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> type,tim,p,val;</span><br><span class="line">    Node(<span class="keyword">int</span> _type=<span class="number">0</span>,<span class="keyword">int</span> _tim=<span class="number">0</span>,<span class="keyword">int</span> _p=<span class="number">0</span>,<span class="keyword">int</span> _val=<span class="number">0</span>):type(_type),tim(_tim),p(_p),val(_val)&#123;&#125;</span><br><span class="line">&#125; q[N&lt;&lt;<span class="number">2</span>],tmp[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,tot,qtot;</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,op,x,y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        q[++tot]=Node(<span class="number">2</span>,<span class="number">0</span>,i,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>) q[++tot]=Node(<span class="number">2</span>,i,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q[++tot]=Node(<span class="number">-1</span>,i,x<span class="number">-1</span>,++qtot);</span><br><span class="line">            q[++tot]=Node(<span class="number">1</span>,i,y,qtot);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(q+<span class="number">1</span>,q+tot+<span class="number">1</span>,[](<span class="keyword">const</span> Node&amp; x,<span class="keyword">const</span> Node&amp; y)&#123;<span class="keyword">return</span> x.p==y.p?x.type&gt;y.type:x.p&lt;y.p;&#125;);</span><br><span class="line"></span><br><span class="line">    solve(<span class="number">1</span>,tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=qtot;++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,mid;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    i=k=l;</span><br><span class="line">    j=mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve(l,mid);</span><br><span class="line">    solve(mid,r);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid&amp;&amp;j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i].tim&lt;q[j].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i].type==<span class="number">2</span>) sum+=q[i].val;</span><br><span class="line">            tmp[k++]=q[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[j].type!=<span class="number">2</span>) ans[q[j].val]+=q[j].type*sum;</span><br><span class="line">            tmp[k++]=q[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid) tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[j].type!=<span class="number">2</span>) ans[q[j].val]+=q[j].type*sum;</span><br><span class="line">        tmp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;r;++i) q[i]=tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="P3810-【模板】三维偏序（陌上花开）"><a href="#P3810-【模板】三维偏序（陌上花开）" class="headerlink" title="P3810 【模板】三维偏序（陌上花开）"></a><a href="https://www.luogu.org/problemnew/show/P3810" target="_blank" rel="noopener"><strong>P3810</strong> 【模板】三维偏序（陌上花开）</a></h1><p>有两种做法，一种是cdq分治套树状数组，需要注意的有两点，一是清空树状数组可以用时间戳，二是 $a,\,b,\,c$ 都相等的元素要合并。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,w,f;</span><br><span class="line">&#125; a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,d[N],BIT[K],vis[K],tim,tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;b[i].a,&amp;b[i].b,&amp;b[i].c);</span><br><span class="line">        b[i].w=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>,[](<span class="keyword">const</span> Node&amp; x,<span class="keyword">const</span> Node&amp; y)&#123;<span class="keyword">return</span> x.a==y.a?(x.b==y.b?x.c&lt;y.c:x.b&lt;y.b):x.a&lt;y.a;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i].a!=b[i+<span class="number">1</span>].a||b[i].b!=b[i+<span class="number">1</span>].b||b[i].c!=b[i+<span class="number">1</span>].c) a[++tot]=b[i];</span><br><span class="line">        <span class="keyword">else</span> b[i+<span class="number">1</span>].w+=b[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solve(<span class="number">1</span>,tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i) d[a[i].f+a[i].w]+=a[i].w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,d[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,mid;</span><br><span class="line">    i=k=l;</span><br><span class="line">    j=mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve(l,mid);</span><br><span class="line">    solve(mid,r);</span><br><span class="line">    ++tim;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid&amp;&amp;j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].b&lt;=a[j].b)</span><br><span class="line">        &#123;</span><br><span class="line">            add(a[i].c,a[i].w);</span><br><span class="line">            b[k++]=a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[j].f+=query(a[j].c);</span><br><span class="line">            b[k++]=a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid) b[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[j].f+=query(a[j].c);</span><br><span class="line">        b[k++]=a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;r;++i) a[i]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;p&lt;=k;p+=(p&amp;-p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[p]!=tim)</span><br><span class="line">        &#123;</span><br><span class="line">            BIT[p]=<span class="number">0</span>;</span><br><span class="line">            vis[p]=tim;</span><br><span class="line">        &#125;</span><br><span class="line">        BIT[p]+=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p;p-=(p&amp;-p)) <span class="keyword">if</span> (vis[p]==tim) out+=BIT[p];</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>还有一种做法是cdq分治套cdq分治：</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,d,w,id;</span><br><span class="line">&#125; a[N],b[N],c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,d[N],tot,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;b[i].a,&amp;b[i].b,&amp;b[i].c);</span><br><span class="line">        b[i].w=<span class="number">1</span>;</span><br><span class="line">        b[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>,[](<span class="keyword">const</span> Node&amp; x,<span class="keyword">const</span> Node&amp; y)&#123;<span class="keyword">return</span> x.a==y.a?(x.b==y.b?x.c&lt;y.c:x.b&lt;y.b):x.a&lt;y.a;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i].a!=b[i+<span class="number">1</span>].a||b[i].b!=b[i+<span class="number">1</span>].b||b[i].c!=b[i+<span class="number">1</span>].c) a[++tot]=b[i];</span><br><span class="line">        <span class="keyword">else</span> b[i+<span class="number">1</span>].w+=b[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solve(<span class="number">1</span>,tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i) d[ans[a[i].id]+a[i].w]+=a[i].w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,d[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,mid;</span><br><span class="line">    i=k=l;</span><br><span class="line">    j=mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve(l,mid);</span><br><span class="line">    solve(mid,r);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid&amp;&amp;j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].b&lt;=a[j].b)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].d=a[i].w;</span><br><span class="line">            b[k++]=a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[j].d=<span class="number">0</span>;</span><br><span class="line">            b[k++]=a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].d=a[i].w;</span><br><span class="line">        b[k++]=a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[j].d=<span class="number">0</span>;</span><br><span class="line">        b[k++]=a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;r;++i) a[i]=b[i];</span><br><span class="line">    solve2(l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,mid,sum=<span class="number">0</span>;</span><br><span class="line">    i=k=l;</span><br><span class="line">    j=mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve2(l,mid);</span><br><span class="line">    solve2(mid,r);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid&amp;&amp;j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i].c&lt;=b[j].c)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=b[i].d;</span><br><span class="line">            c[k++]=b[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[j].d) ans[b[j].id]+=sum;</span><br><span class="line">            c[k++]=b[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid) c[k++]=b[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b[j].d) ans[b[j].id]+=sum;</span><br><span class="line">        c[k++]=b[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;r;++i) b[i]=c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="cdq分治求偏序对的本质"><a href="#cdq分治求偏序对的本质" class="headerlink" title="cdq分治求偏序对的本质"></a>cdq分治求偏序对的本质</h1><p>（下文中“偏序问题”即求满足偏序关系的数对个数。而”高维偏序“实际上是多个严格弱序的并。非严格偏序与之类似，主要是在代码上有些细节改变。）</p><p>大家知道，二维偏序可以先按一维排序后用普通的归并排序解决，那为什么“三维偏序”不可以呢？</p><p>首先，按其中一维排序相当于降了一维，问题就变成了“为什么一维偏序可以用普通的归并排序解决，而二维偏序不可以”。</p><p>原因就在于，两个偏序关系的并，不一定具有不可比性的传递性。（Strict Weak Ordering 相关内容参见<a href="https://ouuan.github.io/%E6%B5%85%E8%B0%88%E9%82%BB%E9%A1%B9%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/#%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F">我的另一篇博客</a>）</p><p>可以证明，两个严格弱序的并一定是一个严格偏序，但不一定是一个严格弱序。而 cdq 分治可以将多个严格弱序的并进行降维，每一次 cdq 分治都标记出哪些位置会对其它位置有贡献，并按某一维排序。</p><p>上面说的有点乱..简单概括一下。排序可以降维，只有严格弱序能排序，高维偏序不一定是严格弱序，cdq 分治在排序的过程中标记了元素之间如何贡献答案。所以 cdq 分治就可以解决高维偏序问题了..</p><p>所以，我们可以写出一份 cdq 分治求 $k$ 维偏序对的代码：</p><p>题意简述：第一行 $n,\,k$，后 $n$ 行每行 $k$ 个数 $a_{i,1..k}$，对每个 $i$ 求 $\forall d\in[1,k],\,a_{i,d}&lt;a_{j,d}$ 的 $j$ 个数。</p><p>当然，$n$ 要足够大，否则会被暴力艹。只不过理论上来说，如果维数是常数，复杂度就比暴力更优…</p><p><a href="https://www.luogu.org/problemnew/show/U66865" target="_blank" rel="noopener">随便造的一个模板题</a></p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w[K],type,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (w[<span class="number">0</span>]!=y.w[<span class="number">0</span>]) <span class="keyword">return</span> w[<span class="number">0</span>]&lt;y.w[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;++i) <span class="keyword">if</span> (w[i]!=y.w[i]) <span class="keyword">return</span> w[i]&gt;y.w[i]; <span class="comment">//如果是非严格偏序都应该顺着排，严格偏序除了第一维都应该倒着排。这是由于相等元素可以/不可以转移。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[K][N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="number">0</span>][i].id=i;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;k;++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a[<span class="number">0</span>][i].w+j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(a[<span class="number">0</span>]+<span class="number">1</span>,a[<span class="number">0</span>]+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    solve(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,p,mid,sum=<span class="number">0</span>;</span><br><span class="line">    i=p=l;</span><br><span class="line">    j=mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve(l,mid,d);</span><br><span class="line">    solve(mid,r,d);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid&amp;&amp;j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[d<span class="number">-1</span>][i].w[d]&lt;a[d<span class="number">-1</span>][j].w[d])</span><br><span class="line">        &#123;</span><br><span class="line">            a[d][p]=tmp[p]=a[d<span class="number">-1</span>][i++];</span><br><span class="line">            <span class="keyword">if</span> (d&gt;<span class="number">1</span>&amp;&amp;a[d][p].type!=<span class="number">1</span>) a[d][p].type=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a[d][p].type=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (d==k<span class="number">-1</span>) ++sum;</span><br><span class="line">            &#125;</span><br><span class="line">            ++p; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[d][p]=tmp[p]=a[d<span class="number">-1</span>][j++];</span><br><span class="line">            <span class="keyword">if</span> (d&gt;<span class="number">1</span>&amp;&amp;a[d][p].type!=<span class="number">2</span>) a[d][p].type=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a[d][p].type=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (d==k<span class="number">-1</span>) ans[a[d][p].id]+=sum;</span><br><span class="line">            &#125;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;mid)</span><br><span class="line">    &#123;</span><br><span class="line">        a[d][p]=tmp[p]=a[d<span class="number">-1</span>][i++];</span><br><span class="line">        <span class="keyword">if</span> (d&gt;<span class="number">1</span>&amp;&amp;a[d][p].type!=<span class="number">1</span>) a[d][p].type=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> a[d][p].type=<span class="number">1</span>;</span><br><span class="line">        ++p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[d][p]=tmp[p]=a[d<span class="number">-1</span>][j++];</span><br><span class="line">        <span class="keyword">if</span> (d&gt;<span class="number">1</span>&amp;&amp;a[d][p].type!=<span class="number">2</span>) a[d][p].type=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[d][p].type=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (d==k<span class="number">-1</span>) ans[a[d][p].id]+=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        ++p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=l;i&lt;r;++i) a[d<span class="number">-1</span>][i]=tmp[i];</span><br><span class="line">    <span class="keyword">if</span> (d&lt;k<span class="number">-1</span>) solve(l,r,d+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cdq分治也是咕了好久了..最近总算把它学了。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;cdq分治是一种离线算法，可以代替一些复杂的数据结构，降低代码难度，减小常数。&lt;/del&gt;废话大家都知道。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="离线算法" scheme="https://ouuan.github.io/tags/%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    
      <category term="cdq分治" scheme="https://ouuan.github.io/tags/cdq%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
</feed>
