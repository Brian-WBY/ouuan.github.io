<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-08-27T12:34:02.246Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF1208G Polygons（数论）</title>
    <link href="https://ouuan.github.io/CF1208G-Polygons%EF%BC%88%E6%95%B0%E8%AE%BA%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1208G-Polygons（数论）/</id>
    <published>2019-08-27T12:08:56.000Z</published>
    <updated>2019-08-27T12:34:02.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/1208/problem/G" target="_blank" rel="noopener">CF</a></p><p><a href="https://www.luogu.org/problem/CF1208G" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给定 $n$ 和 $k$，你需要在圆上画 $k$ 个不超过 $n$ 条边的正多边形，求顶点去重后至少有多少个。</p><p>$3\le n\le10^6$，$1\le k\le n-2$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><ol><li><p>所有正多边形至少有一个公共顶点。可以感性理解，也可以看 <a href="https://codeforces.com/blog/entry/69357?#comment-538545" target="_blank" rel="noopener">imp 的评论</a>。</p></li><li><p>选了 $x$ 边形就选了 $x$ 的所有约数（除了 $1$ 和 $2$）边形一定最优，因为选因数相当于是免费的。</p></li></ol><p>那么，我们可以把 $x$ 边形的第 $y$ 个顶点看成分数 $\dfrac y x$，这样的话，在已经选了 $x$ 的所有约数的前提下，选 $x$ 边形的代价就是 $\varphi(x)$。这样的话，问题就变成了求最小的 $k$ 个 $\varphi$ 之和。</p><p>但是，一边形和二边形是不存在的，需要特殊考虑。</p><p>“一边形”其实就是那个所有正多边形的公共点，只需要在计算答案时加一即可。</p><p>“二边形”会且仅会影响偶数边形，相当于“一旦选了某个偶数边形，答案加一”。因为 $\varphi(x)=1$ 的 $x$ 只有 $1$ 和 $2$， 而 $\varphi(x)=2$ 的 $x$ 只有 $3$, $4$, $6$，所以只有仅选择正三角形这种情况会受到影响。特判 $k=1$ 输出 $3$ 即可。</p><p>用线性筛 + nth_element（值域不大，其实也可以线性排序）即可做到 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k, p[N], tot, phi[N];</span><br><span class="line"><span class="keyword">bool</span> np[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) phi[x] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[x] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nth_element(phi + <span class="number">1</span>, phi + k + <span class="number">3</span>, phi + n + <span class="number">1</span>); <span class="comment">// 选了最小的 k+2 个，其中前两个是“一边形”和“二边形”的代价</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; ++i) ans += phi[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1208/problem/G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/CF1208G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给定 $n$ 和 $k$，你需要在圆上画 $k$ 个不超过 $n$ 条边的正多边形，求顶点去重后至少有多少个。&lt;/p&gt;
&lt;p&gt;$3\le n\le10^6$，$1\le k\le n-2$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://ouuan.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>一些注意事项</title>
    <link href="https://ouuan.github.io/%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://ouuan.github.io/一些注意事项/</id>
    <published>2019-08-18T16:22:36.000Z</published>
    <updated>2019-08-18T16:34:57.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>—— 简单题不 sb 是什么水平？</p><p>—— 国家队水平。</p></blockquote><a id="more"></a><h2 id="sb-错误"><a href="#sb-错误" class="headerlink" title="sb 错误"></a>sb 错误</h2><p>开 long long 时记得快读也要开 long long。</p><p>记得删调试信息，尤其是 cerr。</p><p>多测时要小心使用 memset。</p><p>operator 前面记得加返回值类型名。（dev c++ 不报错不警告）</p><h2 id="sb-想不到"><a href="#sb-想不到" class="headerlink" title="sb 想不到"></a>sb 想不到</h2><p>多次二分时想一想能不能用双指针。</p><p>计数 → 什么是重复的，什么是相同的。</p><p>最优化 → 什么是不优的，什么是不劣的。</p><p>要是怎么样就好了 → 能不能转化成这样。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;—— 简单题不 sb 是什么水平？&lt;/p&gt;
&lt;p&gt;—— 国家队水平。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="注意事项" scheme="https://ouuan.github.io/tags/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>AGC007F Shik and Copying String（贪心，实现）</title>
    <link href="https://ouuan.github.io/AGC007F-Shik-and-Copying-String%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>https://ouuan.github.io/AGC007F-Shik-and-Copying-String（贪心，实现）/</id>
    <published>2019-08-16T15:34:10.000Z</published>
    <updated>2019-08-18T09:37:44.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/AT2173" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://atcoder.jp/contests/agc007/tasks/agc007_f" target="_blank" rel="noopener">AtCoder</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你初始串 $S_0$ 和目标串 $T$，每一步操作可以将当前串 $S_i$ 变成 $S_{i+1}$，其中：</p><p>$$S_{i+1}[j]=\begin{cases}S_i[1]&amp;j=1\\S_i[j]\text{ 或 }S_{i+1}[j-1]&amp;j&gt;1\end{cases}$$</p><p>求最少需要几次操作可以将当前串变为 $T$。</p><p>串长 $10^6​$。</p><a id="more"></a><p>这题题解真的难写..之前觉得别人的题解写的不清楚，然而自己也写的不是很清楚…</p><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，这个过程可以用折线表示：</p><img src="/AGC007F-Shik-and-Copying-String（贪心，实现）/zx.png"><p>（如果您在色觉方面存在障碍，还请见谅。）</p><p>可以发现，每条折线都尽量靠右是最优的，一旦画不下了，就加一行。</p><p>现在问题变成了如何高效地维护这一贪心。</p><p>当 $S_0=T$ 时，先特判掉，输出 $0​$。</p><p>由于每次拐点都会往左下移动一格，我们可以用队列来维护当前折线的每个拐点（折线往右拐的点，也就是 $S_i[j]=S_i[j-1]$ 的 $j-1$ 这个点）（不包括最后一行的拐点），其中靠近队首表示靠下（离 $T$ 较近）的拐点，靠近队尾表示靠上（靠近 $S_0$）的拐点。</p><p>详见代码（因为这题文字写出来不如代码好理解）：</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == t) <span class="comment">// 特判两串相等</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> up = n - <span class="number">1</span>, down = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (down &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (down &amp;&amp; t[down - <span class="number">1</span>] == t[down]) --down; <span class="comment">// 找到当前折线在最后一行最左的位置</span></span><br><span class="line">        <span class="keyword">while</span> (up &gt;= <span class="number">0</span> &amp;&amp; (up &gt; down || s[up] != t[down])) --up; <span class="comment">// 找到当前折线在第一行最左的位置</span></span><br><span class="line">        <span class="keyword">if</span> (up &lt; <span class="number">0</span>) <span class="comment">// 如果第一行没有对应的字符，输出无解</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; q.front() - q.size() &gt;= down) q.pop(); <span class="comment">// 把当前折线不会碰到的部分弹出</span></span><br><span class="line">        <span class="keyword">if</span> (up != down) q.push(up); <span class="comment">// 如果当前折线真的是“折线”而不是竖直下来不拐弯，就把 S1 的拐点压入队列</span></span><br><span class="line">        ans = max(ans, (<span class="keyword">int</span>)q.size() + <span class="number">1</span>); <span class="comment">// 后文会解释为什么这样更新答案</span></span><br><span class="line">        --down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>这个维护拐点的方式应该画画图就能明白。</p><p>最后剩下一个问题：为什么是这样更新答案？</p><p>换句话说：为什么答案是拐点个数的历史最大值？（加一是因为没有维护最后一行的拐点）</p><p>如果没有这个 pop 操作，应该是很显然的。但 pop 操作破坏了“队列中每个元素对应除最后一行外每一行最左位置”这个性质。</p><p>这里需要一个引理：</p><blockquote><p>除了最后一行的拐点，其它拐点一定位于连续的前几行。</p></blockquote><p>我们可以归纳地证明：</p><ul><li>对于最右的那条折线，显然成立。</li><li>对于之后的每条折线，一定是先贴着上一条折线，再直接往下到最后一行。由于上一条折线满足引理，如果中途有一段没有拐点而后又出现拐点，中途的那一段就没有紧贴上一条折线。</li></ul><p>有了这个引理，就可以<del>感性理解</del>说明为什么有 pop 操作的情况下答案依然是拐点个数的历史最大值了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/AT2173&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/agc007/tasks/agc007_f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AtCoder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你初始串 $S_0$ 和目标串 $T$，每一步操作可以将当前串 $S_i$ 变成 $S_{i+1}$，其中：&lt;/p&gt;
&lt;p&gt;$$S_{i+1}[j]=\begin{cases}S_i[1]&amp;amp;j=1\\S_i[j]\text{ 或 }S_{i+1}[j-1]&amp;amp;j&amp;gt;1\end{cases}$$&lt;/p&gt;
&lt;p&gt;求最少需要几次操作可以将当前串变为 $T$。&lt;/p&gt;
&lt;p&gt;串长 $10^6​$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="实现" scheme="https://ouuan.github.io/tags/%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>一些有趣的小工程</title>
    <link href="https://ouuan.github.io/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E5%B0%8F%E5%B7%A5%E7%A8%8B/"/>
    <id>https://ouuan.github.io/一些有趣的小工程/</id>
    <published>2019-08-10T11:22:23.000Z</published>
    <updated>2019-08-14T06:50:32.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说实话我觉得竞赛题目挺坑爹的……木有啥意思。人类为何要出题刁难人类。</p><p>我更喜欢做的事情是写点工程啥的 &gt;_&lt;… 做做小游戏挺好玩的。</p><p>—— vfk 《四色的 NOI》</p></blockquote><p>（<del>这算哪门子引用啊</del>）</p><a id="more"></a><h3 id="BZOJ-Local-Judge"><a href="#BZOJ-Local-Judge" class="headerlink" title="BZOJ-Local-Judge"></a><a href="https://github.com/ouuan/BZOJ-Local-Judge" target="_blank" rel="noopener">BZOJ-Local-Judge</a></h3><p>我自己现在做 BZOJ 上有的题全都用这个了。真的非常方便。</p><h3 id="Despised"><a href="#Despised" class="headerlink" title="Despised"></a><a href="https://github.com/ouuan/Despised" target="_blank" rel="noopener">Despised</a></h3><p>除了选项单一，<del>我觉得这是我用过体验最好的被鄙视小程序了</del>。感觉加一些错误选项比较好，不然背着背着就变成背错误选项了。<del>希望明年不要咕。</del></p><h3 id="Tree-Generator"><a href="#Tree-Generator" class="headerlink" title="Tree-Generator"></a><a href="https://github.com/ouuan/Tree-Generator" target="_blank" rel="noopener">Tree-Generator</a></h3><p>造树挺方便的。（<del>顺便<a href="http://codeforces.com/blog/entry/68835" target="_blank" rel="noopener">求 up</a></del>）。</p><h3 id="Anti-YiGeDingLia"><a href="#Anti-YiGeDingLia" class="headerlink" title="Anti-YiGeDingLia"></a><a href="https://github.com/ouuan/Anti-YiGeDingLia" target="_blank" rel="noopener">Anti-YiGeDingLia</a></h3><p><a href="/antiyigedinglia">Demo</a></p><p>大家知道 QQ 的接龙红包吗？我写这个东西的时候接龙红包特别火，然而大家都很喜欢“一个顶俩” qaq。有了这个项目，当你看到 yi 结尾时就能及时一把死拿啦！</p><h3 id="LuoguPaintBoard"><a href="#LuoguPaintBoard" class="headerlink" title="LuoguPaintBoard"></a><a href="https://github.com/ouuan/LuoguPaintBoard" target="_blank" rel="noopener">LuoguPaintBoard</a></h3><p>顾名思义，是画洛谷冬日绘板用的。<del>我明年一定画个ひなた！</del></p><h3 id="Code-Disturber"><a href="#Code-Disturber" class="headerlink" title="Code-Disturber"></a><a href="https://github.com/ouuan/Code-Disturber" target="_blank" rel="noopener">Code-Disturber</a></h3><p>并没有什么用，<del>实际作用是用 emoji 美化代码。</del></p><h3 id="SwapArrayDimension"><a href="#SwapArrayDimension" class="headerlink" title="SwapArrayDimension"></a><a href="https://github.com/ouuan/SwapArrayDimension" target="_blank" rel="noopener">SwapArrayDimension</a></h3><p>或许是个实用的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说实话我觉得竞赛题目挺坑爹的……木有啥意思。人类为何要出题刁难人类。&lt;/p&gt;
&lt;p&gt;我更喜欢做的事情是写点工程啥的 &amp;gt;_&amp;lt;… 做做小游戏挺好玩的。&lt;/p&gt;
&lt;p&gt;—— vfk 《四色的 NOI》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（&lt;del&gt;这算哪门子引用啊&lt;/del&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工程" scheme="https://ouuan.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1758 [WC2010]重建计划（二分答案，长链剖分）</title>
    <link href="https://ouuan.github.io/BZOJ1758-WC2010-%E9%87%8D%E5%BB%BA%E8%AE%A1%E5%88%92%EF%BC%88%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%EF%BC%8C%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ1758-WC2010-重建计划（二分答案，长链剖分）/</id>
    <published>2019-07-23T12:24:05.000Z</published>
    <updated>2019-08-27T12:58:06.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P4292" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一棵带边权的树，求所有长度在 $[L,U]$ 这个范围内的路径里平均权值（总权值除以边数）的最大值。</p><p>$2\le n\le 10^5$，保证至少有一条满足要求的路径。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p><code>#define 父亲 单亲</code>（<del>如果有谴责“父亲节点”人士的话</del>）</p><p>首先可以二分答案，就可以把每条边的边权都减去二分的答案，然后转化为判断有没有权值和为正的符合长度要求的路径。</p><p>然后有点分治和长链剖分两种做法，本题解介绍长链剖分的做法。</p><p>由于合并时要区间查询最大值，可以用线段树来维护。</p><p>具体来说，我们可以像重链剖分一样计算 dfs 序时优先 dfs 重（长）儿子，这样的话长链的 dfs 序就是连续的一段。当我们处理到子树 $u$ 时，$dfn_u+k$ 这个位置上的值表示自 $u$ 起向下长度为 $k$ 的路径的最大权值。可以发现不同长链之间不会互相影响，而重儿子的信息只要一个区间加就可以继承给父亲。所以，每次先 dfs 重儿子把信息继承上来，并检查有没有权值和为正的符合长度要求的路径，然后 dfs 轻儿子并枚举深度，在线段树中查询对应的一段长度合法的区间的最大值来检查有没有权值和为正的符合长度要求的路径，并将轻儿子信息也合并上来。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>代码用了 CF 模板，还请谅解..（只不过这种题就算按正常码风写估计也很难看懂吧..不如自己思考细节如何实现）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="keyword">int</span> randint</span><br><span class="line">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;<span class="keyword">return</span>(<span class="keyword">int</span>)rng()%(r-l+<span class="number">1</span>)+l;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">read()&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c</span><br><span class="line">=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T</span><br><span class="line">&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span></span></span></span><br><span class="line"><span class="function"><span class="params">&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%s"</span>,x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;</span><br><span class="line">is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write</span><br><span class="line">(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span></span><br><span class="line">,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%s"</span>,x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span></span><br><span class="line">enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value ||(</span><br><span class="line">is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const</span><br><span class="line">&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)</span><br><span class="line">read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span></span><br><span class="line">iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;</span><br><span class="line"><span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);sp;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span></span><br><span class="line">wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span>*x)</span></span>&#123;write(x);sp;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);br;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args</span></span></span><br><span class="line"><span class="function"><span class="params">...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wtb(</span><br><span class="line">args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...</span><br><span class="line">Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="keyword">void</span> wte</span><br><span class="line">(<span class="keyword">const</span> T&amp;x,Args...args)&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span></span><br><span class="line">x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (cur &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (cur &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> mx[N &lt;&lt; <span class="number">2</span>], tag[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ms(mx, <span class="number">0</span>);</span><br><span class="line">        ms(tag, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mx[x] += y;</span><br><span class="line">        tag[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(tag[cur]) &lt; eps) <span class="keyword">return</span>;</span><br><span class="line">        add(ls, tag[cur]);</span><br><span class="line">        add(rs, tag[cur]);</span><br><span class="line">        tag[cur] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        up(mx[cur], x);</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">if</span> (p &lt; mid) modify(ls, l, mid, p, x);</span><br><span class="line">        <span class="keyword">else</span> modify(rs, mid, r, p, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">madd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) add(cur, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pushdown(cur);</span><br><span class="line">            madd(ls, l, mid, L, R, x);</span><br><span class="line">            madd(rs, mid, r, L, R, x);</span><br><span class="line">            mx[cur] = max(mx[ls], mx[rs]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span> -INF;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> mx[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">return</span> max(query(ls, l, mid, L, R), query(rs, mid, r, L, R));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) <span class="keyword">return</span> mx[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">if</span> (p &lt; mid) <span class="keyword">return</span> query(ls, l, mid, p);</span><br><span class="line">        <span class="keyword">return</span> query(rs, mid, r, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], edge[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">    edge[cnt] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, mnlen, mxlen, dep[N], son[N], f[N], dfn[N], dfntot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = <span class="number">1</span>;</span><br><span class="line">    SON(i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        f[v] = edge[i];</span><br><span class="line">        dfs1(v, u);</span><br><span class="line">        <span class="keyword">if</span>(up(dep[u], dep[v] + <span class="number">1</span>)) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++dfntot;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) dfs2(son[u], u);</span><br><span class="line">    SON(i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) dfs2(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag || !son[u]) <span class="keyword">return</span>;</span><br><span class="line">    dfs(son[u], u, x);</span><br><span class="line">    t.madd(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[son[u]], dfn[son[u]] + dep[son[u]], f[son[u]] - x);</span><br><span class="line">    <span class="keyword">if</span> (dep[u] - <span class="number">1</span> &gt;= mnlen &amp;&amp; t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[u] + mnlen, min(dfn[u] + mxlen + <span class="number">1</span>, dfn[u] + dep[u])) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SON(i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(v, u, x);</span><br><span class="line">            t.madd(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[v], dfn[v] + dep[v], f[v] - x);</span><br><span class="line">            For (j, max(<span class="number">0l</span>l, mnlen - dep[u]), min(mxlen - <span class="number">1</span>, dep[v] - <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[v] + j) +</span><br><span class="line">                    t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, max(<span class="number">0l</span>l, mnlen - j - <span class="number">1</span>) + dfn[u], min(dep[u], mxlen - j) + dfn[u]) &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            For (j, <span class="number">0</span>, dep[v] - <span class="number">1</span>) t.modify(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[u] + j + <span class="number">1</span>, t.query(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">1</span>, dfn[v] + j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    t.reset();</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n, mnlen, mxlen);</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">2</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        read(u, v, w);</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, <span class="number">40</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf"</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一棵带边权的树，求所有长度在 $[L,U]$ 这个范围内的路径里平均权值（总权值除以边数）的最大值。&lt;/p&gt;
&lt;p&gt;$2\le n\le 10^5$，保证至少有一条满足要求的路径。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="二分答案" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="长链剖分" scheme="https://ouuan.github.io/tags/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>NIO9102 落雨大</title>
    <link href="https://ouuan.github.io/NIO9102-%E8%90%BD%E9%9B%A8%E5%A4%A7/"/>
    <id>https://ouuan.github.io/NIO9102-落雨大/</id>
    <published>2019-07-15T01:48:38.000Z</published>
    <updated>2019-07-22T10:37:36.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我也来到 NOI 了，呢。</p></blockquote><a id="more"></a><p style="text-align: center"><font color="red" size="5em"><strong>郑重声明</strong></font></p><p style="text-indent: 2em">本博客内所有与 NOI2019（第 36 届全国青少年信息学奥林匹克竞赛）试题相关之内容，均在对应之机试与复评结束之后发布，详细发布时间与内容可以在 <a href="https://github.com/ouuan/ouuan.github.io/commits/master" target="_blank" rel="noopener">commits</a> 中查看。</p><h2 id="Day-499122177"><a href="#Day-499122177" class="headerlink" title="Day 499122177"></a>Day 499122177</h2><p>广二宿舍还是没有网.</p><p>床边的插座不是一般人能插的..（Orz lbw 插上去了）然而因为有时候要去机房（其实基本上也就刚到那天晚上没事去了..），所以后来还是拔下来了。然后发现不带 220V 转 USB 母头的插头真是个错误的决定..虽然可以用笔记本充电，可如果在寝室门口充电就没法用电脑，所以没法一会儿充电脑用手机、一会儿充手机用电脑。</p><p>晚餐有点抽卡的感觉..看名字很难看出拿到手上的到底是什么东西（</p><p>吃完晚饭去自习室水了半小时群，然后打短裙 OJ。</p><p>切完前两题，好像 rk 5..</p><p>然后看 C，问满足一堆条件的个数..一眼容斥..然后真的写了 1h 的容斥 qaq</p><p>好不容易过拍了，提交，又 WA 了..</p><p>在群里一问，woc，p 不是排列…</p><p>5 min 后过了，愉快地垫底了..</p><p>过于自闭，看了眼 D，没秒掉，就懒得去想了。</p><p>赛后听说 C 可以状压，一想，真的可以状压…..学傻了.webp</p><h2 id="Day-557219762"><a href="#Day-557219762" class="headerlink" title="Day 557219762"></a>Day 557219762</h2><p>咕掉早饭把火车上剩的吃了。</p><p>（开幕式竟然没有 wh 讲话）</p><p>（<del>灯光打得好！覆盖方位广！给灯光师点个赞！</del>）</p><p>果然有<del>公开处刑</del>大头照展示，只不过速度比较快，问题不大。</p><p>感觉大家喊的口号都听不太清啊..</p><p><del>明 示 爆 零 ：</del></p><img src="/NIO9102-落雨大/zero0.jpg"><img src="/NIO9102-落雨大/zero1.jpg"><p>dzd 的讲话中，有这么一段话：</p><blockquote><p>无论何种情况，这个竞赛都会继续下去。因为这个竞赛是正当的，是正义的，合法的。</p></blockquote><div><div class="fold_hider"><div class="close hider_title">听到这段话，又想起 ひなた 在桥边含泪喊出的那段话了。</div></div><div class="fold"><blockquote><p>但是，我没有后悔，不能后悔，因为，我所做的事情一定没有错！</p></blockquote><p>（欢迎大家来 <a href="https://hitokoto.cn/?id=4359" target="_blank" rel="noopener">Hitokoto</a> 点赞 <button id="hitokoto-like-4359" onclick="hitokotoLike('4359', '#hitokoto-like-4359')" title="通过给句子点赞可以增加其出现概率，由于技术原因并不能在博客中显示赞数与点赞是否成功的信息（红心表示成功发送点赞请求，但如果同 IP 重复点赞就会失败），如需查看可以点击左边的“Hitokoto”链接。"><i class="menu-item-icon fa fa-fw fa-heart"></i></button>）</p><p>（当然还有 <a href="https://hitokoto.cn/?id=4358" target="_blank" rel="noopener">这句</a> <button id="hitokoto-like-4358" onclick="hitokotoLike('4358', '#hitokoto-like-4358')" title="通过给句子点赞可以增加其出现概率，由于技术原因并不能在博客中显示赞数与点赞是否成功的信息（红心表示成功发送点赞请求，但如果同 IP 重复点赞就会失败），如需查看可以点击左边的“这句”链接。"><i class="menu-item-icon fa fa-fw fa-heart"></i></button>）</p></div></div><p>NOI 可能真的如 dzd 所说，带有一些“净化灵魂”的成分在吧。</p><p>最后<del>鸽子蛋</del>破不开，<del>明示摆脱不了爆零的命运</del>。</p><p>（离场后目击 dzd 被采访）</p><p>中餐感觉海星..还是得看看别人买到的是什么再选。（千万不要用排除法来选</p><p>中午写了写博客，<a href="https://github.com/ouuan/Despised/" target="_blank" rel="noopener">做了遍笔试</a>，睡了会儿觉。</p><p>还是感觉好方..毕竟被鄙视用的错误选项从来没变过（</p><p>结果笔试挺水的..题目和题库里完全一样（没有之前在 vfk 博客里看见的“那道题不选 foobar.sh”之类的情况），很多题都不是四个选项而是更少，所以没有任何奇怪的错误选项..</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>看到 T1 就很快想出了 70 分的拆点做法，写完之后几乎一遍过了大样例。</p><p>然后去把 T2 和 T3 的 20 + 28 写了，此时 $1.5h​$ 左右。</p><p>然后去写 T1 $A=0$ 的部分分，各种写挂写了接近 $2h$..</p><p>然后感觉 T2 还是没什么想法，T3 想了几个假贪心，又想了几个假网络流，最后还剩半小时的时候想到了一个考后才叉掉的 $n^3\log$ 的假贪心（讲题时发现稍微改动一下就是正确的 40 分做法..），<del>幸好</del>没写完，不然万一过了样例就 GG 了。</p><p>出来之后发现大家都 $148​$ 起步..T1 有正解的，但还有一堆利用数据范围改小的，以及一堆 $70​$ 分算错复杂度的。</p><p>T1 我写的数据分治是不可能 $85​$ 以上的，所以特别怕 $70​$ 分做法最后 $90​$ 或者 $95​$。</p><p>然后下午一看，我自己倒是没挂分，$85+20+28=133​$，可其它和我写一样东西的都是 $100+20+40​$..</p><p>T1 数据范围不知道是不是为了防止爆 int 而改小就算了，复杂度完全错误的 $70​$ 分做法竟然直接 A 了..就很自闭。T3 其他人的 $n^4​$ 常数比我小一截，我也不好说什么..只不过那些“数据有梯度”的出题人凭什么不多给几档部分分啊？</p><p>感觉还是赛制问题啊..没有 Subtask 并且现场评测的 OI 赛制出题人也很无奈吧..</p><p>把 NOI 嘉年华咕了（玩一些体育运动之类的游戏得奖品什么的），回寝室躺了一会儿，又看了一遍 <a href="https://blog.csdn.net/VFleaKing/article/details/90384225" target="_blank" rel="noopener">四色的NOI</a>，感觉自己的心境和 vfk Cu 那年挺像的..只不过就算把 vfk Fe 那年去掉，我也比 vfk 少一年啊..</p><p>讲题的话..放一张 T2 讲题的图吧：</p><img src="/NIO9102-落雨大/d1t2.jpg"><h2 id="Day-116195171"><a href="#Day-116195171" class="headerlink" title="Day 116195171"></a>Day 116195171</h2><p>今天是社会活动日。</p><p>听说真的有人没去..不知道会不会扣分。</p><p><del>坐 D7 的被奶了：</del></p><img src="/NIO9102-落雨大/d7700.jpg"><p>在博物馆先打了把四人南，然后去随便逛了半个小时。</p><p>暗示 route 数据水：</p><img src="/NIO9102-落雨大/routesea.jpg"><p>暗示 Day 2 Au 线 30 Ag 线 20：</p><img src="/NIO9102-落雨大/auag.jpg"><p><del>假毛</del>，<del>请大家自行脑补假毛在风中打转的样子</del>。</p><img src="/NIO9102-落雨大/wuliang.jpg"><p>晚上是 zzq 和象的见面会，感觉还是象比较励志，其它三名国家队都是小学开始学的..刷题量好像非常恐怖，而“好好打模拟赛”对我来说几乎不需要解释..我知道平时我是怎样在打模拟赛的，“这个知识点还没学”，“这题没意思”，“题解看不懂”，“这题太简单了，只是考场 sb 了而已，懒得写”，“我先按我的计划补知识点，模拟赛不重要”，最后一题都没有改。这样的话我又在渴求什么呢。</p><blockquote><p>以为自己很努力了，但是不知为何还是系统告诉我：Mission Failed. Play Again.</p><p>不知道原因。</p><p>张着嘴巴我可以说出一堆：经验少啦，在弱省啦，题做得少啦，数学太弱啦……</p><p>但是这是不是真正的原因？怎样解决？</p><p>天地无言。</p><p>—— vfk《四色的NOI》</p></blockquote><p>可我甚至不能“以为自己很努力了”。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>今天的纸质题面考前是正面朝上的。</p><p>果然有交互，还依然是 I 君。</p><p>等等，T2 斗主地？</p><p>等等，T1 128MB？简洁数据结构.pdf</p><p>开始考试，T1，线段树优化连边？爆空间。88 可能能卡过？感觉很难卡，还得数据分治，写了不到 5min 就放弃了，去写了 72 分。</p><p>T2，dp 算洗牌前是 $i​$ 洗牌后是 $j​$ 的概率，第四个点矩阵快速幂，很快就写完了，一遍过样例。这个时候两小时多一点。</p><p>考前就想着靠交互翻盘了，还剩接近 3h 肝交互，感觉海星。</p><p>这个数据范围好像不太统一啊..既然强制数据分治的话不如会一档写一档好了。</p><p>先把 $\mathcal O(n^2)$ 次询问的写了，一开始还写错了，写成了 $n$ 次修改，差点挂掉 $8$ 分。</p><p>然后想了一会儿想到了性质 $A$ 一个期望 $\log$ 的做法。写完 + 调完之后 3h 多一点。</p><p>然后开始想 T3 各种各样的部分分，乱搞了 2h 一无所获。</p><p>出来之后发现大家 T1 都会 K-D Tree，又听说 T2 结论题可以打表..感觉 Ag 基本上没了啊。</p><p><del>我博客用模 998244353 的等比数列，是不是暗示 T2 模 998244353 等差数列，会被禁赛啊。</del></p><p>下午看成绩，$72+30+36=138$，发现 T2 30，原因是 a 数组开小了…只不过不挂分应该也是 Cu，<del>问题不大</del>。</p><p><del>讲题的时候松松松把 NOI 弄成了鸭子营。</del></p><p>T2 出题人表示：不止要让训练有素的选手进队，也要让那些能够发现题目性质的选手进队。感觉要是不能打表的话这样的想法也挺有道理的..</p><p>出排名，果然 <font color="#B87333">Cu</font> 了。</p><p>HB 只有 jxl 和 lwc Ag。只不过两个 E 都上了 Ag 分数线。</p><p>zyy 捧杯了，zzy rk2，zzq rk3，_rqy rk4，jumpmelon rk6，myh rk7，zhf rk19。</p><p>看到熟悉的名字进集训队的感觉真的很奇妙。</p><p>晚上去高校宣讲看热闹。</p><p>清华那位老师的气质真的就完全不一样（之前 THUWC 和 THUSC 的时候就体会地非常明显了），有条不紊地讲出硬核的优点（而不是那些花里胡哨的东西）（也没有一种”我是来完成任务“的感觉）（也不会说“那我今天就用这个 PPT 来讲一下”“那我就不用 PPT 了”这样的话），感觉讲了非常多，最后正好卡时讲完了（其它学校都感觉没讲啥就匆匆忙忙结束了）（<del>只不过这也可能是学校实力原因</del>）。（顺带一提，THU 没用 PPT）</p><p>北大：我准备了一个 PPT，发邮件的时候挂了，今天我把 PPT 带过来了，我是干讲还是用 PPT，你们觉得怎么样比较好？</p><p>主持人：抱歉，请遵守规则口头讲。</p><p>北大：我觉得准备这么一个 PPT 不给大家看实在是对不起大家。</p><p>（说着就打开了 PPT）</p><p>？？？</p><p>天津大学很快就讲完了，然后说“不用打铃了”，很多人鼓掌..感觉 THU 那样打铃的同时有条不紊地结束才比较帅啊（</p><p>感觉武大也讲的海星，也是真的在讲而不是完成任务，感觉比较自然。</p><p>华东师范大学：男生们可以和很多文科的女生交流。女生们也不要担心，因为你们也可以和很多文科的女生交流。emm…</p><p>排在最后的三个学校直接咕了…</p><p><del>只不过我一个 Cu 凭什么评价高校宣讲啊。</del></p><p>“我也是有约的人了！”「两年 OI 换一纸签约」—— 一名拿到人大一等约的我省高二选手。</p><p>好像还有面试到晚上十二点，最后拿到“替补二等约”的选手..</p><p>看到身边的人退役更是一种说不出的感觉。</p><h2 id="Day-232390342"><a href="#Day-232390342" class="headerlink" title="Day 232390342"></a>Day 232390342</h2><p>早上咕掉嘉年华，去机房把 D1T1 写了，然后试图学习 k-d tree。</p><p>感觉资料还是太少了，也不知道网上那些复杂度是不是对的..</p><p>下午闭幕式。大家该 <font color="gold">Au</font> 的 <font color="gold">Au</font>，该捧<font color="gold">杯</font>的捧<font color="gold">杯</font>，<del>该扫射的灯光师继续扫射</del>。</p><p>结束之后真的落雨大了..下了一个多小时的大雨，<del>选手袜子没了</del>。</p><img src="/NIO9102-落雨大/pb.jpg"><img src="/NIO9102-落雨大/Cu.jpg"><p>我双色 NOI 的第一色，是<font color="#B87333">古铜色</font>的。</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>本来不想写 Day 4 的，但广州南的便利店竟然没有泡面，<del>必须得吐槽一下</del>。</p><p>G1114 竟然没有插座，<del>更得吐槽了</del>。</p><p>那么，长沙一中再会。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><del>估计会比较咕</del></p><h3 id="D1T1"><a href="#D1T1" class="headerlink" title="D1T1"></a><a href="https://loj.ac/problem/3156" target="_blank" rel="noopener">D1T1</a></h3><p>“去年 D1T1 最短路，今年也是呢”选手自闭了。</p><p>出考场听说斜率优化，以为是斜率优化预处理等待时间的连边然后跑最短路。</p><p>看了题解才知道原来这题根本不用最短路，连 DAG 最短路都不用..</p><p>把边按结束时间（$q_i$）排序，令 $f_i$ 表示走完第 $i$ 条边后还需要的烦躁值的最小值。</p><p>$\begin{aligned}f_i&amp;=\min\limits_{p_j\ge q_i,x_j=y_i}\{A(p_j-q_i)^2+B(p_j-q_i)+C+q_j-q_i+f_j\}\\&amp;=\min\limits_{p_j\ge q_i,x_j=y_i}\{Ap_j^2+Bp_j+q_j+f_j-2Ap_jq_i\}+Aq_i^2-Bq_i+C-q_i\end{aligned}​$</p><p>然后就可以斜率优化了。（因为转移有 $x_j=y_i$ 的限制，要开 $n$ 个双端队列，但<strong>不要开 deque</strong>，开大量 deque 是会 MLE 的。写法的话，用 vector 存，普通方法写就好了。）</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><p>按理来说题解里不应该包含模板，只不过这也不是什么官方题解，我就懒得换成正常写法了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="keyword">int</span> randint</span><br><span class="line">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;<span class="keyword">return</span>(<span class="keyword">int</span>)rng()%(r-l+<span class="number">1</span>)+l;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">read()&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c</span><br><span class="line">=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T</span><br><span class="line">&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span></span></span></span><br><span class="line"><span class="function"><span class="params">&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%s"</span>,x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;</span><br><span class="line">is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write</span><br><span class="line">(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span></span><br><span class="line">,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%s"</span>,x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>*x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span></span><br><span class="line">enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value ||(</span><br><span class="line">is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const</span><br><span class="line">&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)</span><br><span class="line">read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span></span><br><span class="line">iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;</span><br><span class="line"><span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);sp;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span></span><br><span class="line">wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">char</span>*x)</span></span>&#123;write(x);sp;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);br;&#125;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args</span></span></span><br><span class="line"><span class="function"><span class="params">...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wtb(</span><br><span class="line">args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span></span><br><span class="line">T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...</span><br><span class="line">Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="keyword">void</span> wte</span><br><span class="line">(<span class="keyword">const</span> T&amp;x,Args...args)&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span></span><br><span class="line">x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a, b, c, id[M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, p, q, f;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Edge &amp; b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> q &gt; b.q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Point(<span class="keyword">int</span> j = <span class="number">0</span>): x(<span class="number">2</span> * a * e[j].p), y(a * e[j].p * e[j].p + b * e[j].p + e[j].q + e[j].f) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Point &amp; a1, <span class="keyword">const</span> Point &amp; a2, <span class="keyword">const</span> Point &amp; a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a1.x == a2.x) <span class="keyword">return</span> a1.y &lt; a2.y;</span><br><span class="line">        <span class="keyword">return</span> (a1.y - a3.y) * (a2.x - a3.x) &gt;= (a2.y - a3.y) * (a1.x - a3.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y - k * x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Deque</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; q;</span><br><span class="line">    <span class="keyword">int</span> ql, qr;</span><br><span class="line">    Deque()</span><br><span class="line">    &#123;</span><br><span class="line">        q.resize(<span class="number">1</span>);</span><br><span class="line">        ql = <span class="number">1</span>;</span><br><span class="line">        qr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ql &gt; qr; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> Point &amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ++qr;</span><br><span class="line">        <span class="keyword">if</span> (q.size() == qr) q.push_back(x);</span><br><span class="line">        <span class="keyword">else</span> q[qr] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ql &lt; qr &amp;&amp; q[ql + <span class="number">1</span>].cal(e[i].q) &lt;= q[ql].cal(e[i].q)) ++ql;</span><br><span class="line">        e[i].f = q[ql].cal(e[i].q) + a * e[i].q * e[i].q - b * e[i].q + c - e[i].q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> Point &amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ql &lt; qr &amp;&amp; cmp(x, q[qr], q[qr - <span class="number">1</span>])) --qr;</span><br><span class="line">        push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    read(n, m, a, b, c);</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m) read(e[i].u, e[i].v, e[i].p, e[i].q);</span><br><span class="line">    ++m;</span><br><span class="line">    e[m].u = <span class="number">0</span>;</span><br><span class="line">    e[m].v = <span class="number">1</span>;</span><br><span class="line">    e[m].p = <span class="number">0</span>;</span><br><span class="line">    e[m].q = <span class="number">0</span>;</span><br><span class="line">    sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m) id[i] = i;</span><br><span class="line">    sort(id + <span class="number">1</span>, id + m + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> e[x].p &gt; e[y].p; &#125;);</span><br><span class="line">    <span class="keyword">int</span> idp = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].v == n)</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (idp &lt;= m &amp;&amp; e[id[idp]].p &gt;= e[i].q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[id[idp]].f &lt; INF) q[e[id[idp]].u].insert(Point(id[idp]));</span><br><span class="line">            ++idp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q[e[i].v].empty())</span><br><span class="line">        &#123;</span><br><span class="line">            e[i].f = INF;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q[e[i].v].cal(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    For (i, <span class="number">1</span>, m) <span class="keyword">if</span> (e[i].u == <span class="number">0</span>) wte(e[i].f);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D1T3"><a href="#D1T3" class="headerlink" title="D1T3"></a><a href="https://loj.ac/problem/3158" target="_blank" rel="noopener">D1T3</a></h3><p>其实可以模拟费用流，但如果你写一篇模拟费用流的题解，会发现那是一篇费用流建图的题解和一篇贪心题解拼起来。所以下面是一篇纯贪心题解。</p><p>我们要从两个序列中各选 $k$ 个下标，考虑每一步（选择一组下标）：</p><ul><li>如果还允许选两个不一样的下标，那就从剩下还没选的数里选最大的 $a$ 和最大的 $b$。</li><li>如果无法选择不一样的下标了，那么有三种选择：<ol><li>选择一组 $a_i+b_i$（即 $a$, $b$ 下标相同）</li><li>$a_i$ 被选了，$b_i$ 没有被选，那么把 $a_i$ 与 $b_i$ 匹配，再给 $a_i$ 原来匹配的那个 $b_j$ 找到一个剩下的里面最大的 $a_k$，然后把 $b_j$ 和 $a_k$ 匹配。</li><li>把第二条的 $a$ 和 $b$ 互换。</li></ol></li></ul><p>那么，维护剩下的最大的 $a$，剩下的最大的 $b$，剩下的最大的 $a+b$，$a_i$ 已匹配的最大的 $b_i$，$b_i$ 已匹配的最大的 $a_i$，剩余可选择的不一样下标个数，每个数匹配的数，就可以完成这个贪心了。</p><p>前三个最大值排序即可，后两个最大值使用堆维护。细节有些多，写的时候注意每一步都确保每个量正确更新了。尤其需要注意的是“剩余可选择的不一样下标个数”的更新。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, k, dif, a[N], b[N], ida[N], idb[N], idab[N], pa, pb, pab, fa[N], fb[N]; <span class="comment">// dif 是剩余可选择的不一样下标个数，id 是用来排序的，pa，pb，pab 记录用到了第几个值（即当前最大值是 a[pa] 之类的），fa，fb 分别记录 a_i 和 b_i 匹配的数的下标</span></span><br><span class="line">priority_queue&lt;pii&gt; sa, sb, emptypq; <span class="comment">// sa 是 b 已匹配的 a，sb 是 a 已匹配的 b，emptypq 是用来多测清空的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">// 匹配两个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    --dif;</span><br><span class="line">    fa[u] = v;</span><br><span class="line">    fb[v] = u;</span><br><span class="line">    <span class="keyword">if</span> (u == v) --dif; <span class="comment">// 去重，否则会在下面三行代码里加两次</span></span><br><span class="line">    <span class="keyword">if</span> (fb[u]) ++dif;</span><br><span class="line">    <span class="keyword">else</span> sb.push(pii(b[u], u));</span><br><span class="line">    <span class="keyword">if</span> (fa[v]) ++dif;</span><br><span class="line">    <span class="keyword">else</span> sa.push(pii(a[v], v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">// 断开匹配</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++dif;</span><br><span class="line">    <span class="keyword">if</span> (fb[u]) --dif;</span><br><span class="line">    <span class="keyword">if</span> (fa[v]) --dif;</span><br><span class="line">    <span class="keyword">if</span> (u == v) ++dif; <span class="comment">// 去重</span></span><br><span class="line">    fa[u] = fb[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">geta</span><span class="params">()</span> <span class="comment">// 获取当前剩余的最大 a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (fa[ida[pa]]) ++pa;</span><br><span class="line">    <span class="keyword">return</span> pii(a[ida[pa]], ida[pa]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getb</span><span class="params">()</span> <span class="comment">// 获取当前剩余的最大 b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (fb[idb[pb]]) ++pb;</span><br><span class="line">    <span class="keyword">return</span> pii(b[idb[pb]], idb[pb]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getab</span><span class="params">()</span> <span class="comment">// 获取当前剩余的最大 a + b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pab &lt;= n &amp;&amp; (fa[idab[pab]] || fb[idab[pab]])) ++pab;</span><br><span class="line">    <span class="keyword">return</span> pii(pab &lt;= n ? a[idab[pab]] + b[idab[pab]] : -INF, idab[pab]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getsa</span><span class="params">()</span> <span class="comment">// 获取 b 已选的最大 a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!sa.empty() &amp;&amp; fa[sa.top().second]) sa.pop();</span><br><span class="line">    <span class="keyword">return</span> sa.empty() ? pii(-INF, <span class="number">0</span>) : sa.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getsb</span><span class="params">()</span> <span class="comment">// 获取 a 已选的最大 b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!sb.empty() &amp;&amp; fb[sb.top().second]) sb.pop();</span><br><span class="line">    <span class="keyword">return</span> sb.empty() ? pii(-INF, <span class="number">0</span>) : sb.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        pa = pb = pab = <span class="number">1</span>;</span><br><span class="line">        sa = sb = emptypq;</span><br><span class="line">        <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line">        <span class="built_in">memset</span>(fb, <span class="number">0</span>, <span class="keyword">sizeof</span>(fb));</span><br><span class="line"></span><br><span class="line">        n = read();</span><br><span class="line">        k = read();</span><br><span class="line">        dif = k - read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) b[i] = read();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ida[i] = idb[i] = idab[i] = i;</span><br><span class="line">        sort(ida + <span class="number">1</span>, ida + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> a[x] &gt; a[y];&#125;);</span><br><span class="line">        sort(idb + <span class="number">1</span>, idb + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> b[x] &gt; b[y];&#125;);</span><br><span class="line">        sort(idab + <span class="number">1</span>, idab + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> a[x] + b[x] &gt; a[y] + b[y];&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dif) link(geta().second, getb().second);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pii nab = getab();</span><br><span class="line">                pii na_a = getsa();</span><br><span class="line">                pii na_b = getb();</span><br><span class="line">                pii nb_a = geta();</span><br><span class="line">                pii nb_b = getsb();</span><br><span class="line">                <span class="keyword">if</span> (nab.first &gt;= na_a.first + na_b.first &amp;&amp; nab.first &gt;= nb_a.first + nb_b.first) link(nab.second, nab.second);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (na_a.first + na_b.first &gt;= nb_a.first + nb_b.first)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> t = fb[na_a.second];</span><br><span class="line">                    cut(t, na_a.second);</span><br><span class="line">                    link(t, na_b.second);</span><br><span class="line">                    link(na_a.second, na_a.second);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> t = fa[nb_b.second];</span><br><span class="line">                    cut(nb_b.second, t);</span><br><span class="line">                    link(nb_a.second, t);</span><br><span class="line">                    link(nb_b.second, nb_b.second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans += (fa[i] ? a[i] : <span class="number">0</span>) + (fb[i] ? b[i] : <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我也来到 NOI 了，呢。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++11 enable_if 的使用</title>
    <link href="https://ouuan.github.io/C-11-enable-if-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://ouuan.github.io/C-11-enable-if-的使用/</id>
    <published>2019-07-02T17:24:13.000Z</published>
    <updated>2019-07-06T12:29:04.646Z</updated>
    
    <content type="html"><![CDATA[<p>今天想更新一下自己的 <a href="https://github.com/ouuan/CF-template" target="_blank" rel="noopener">CF 模板</a>，然后发现由于写法问题可能要给每种整型（int，long，long long，unsigned int，unsigned long long……）分别定义函数，于是尝试搜了一下有没有什么好的代码重用方式，发现了 enable_if，还挺好用的，但去网上搜教程可能比较难学..我乱搞了两三个小时才学会。于是就来分享一下..</p><a id="more"></a><h2 id="重载的匹配"><a href="#重载的匹配" class="headerlink" title="重载的匹配"></a>重载的匹配</h2><h3 id="SFINAE"><a href="#SFINAE" class="headerlink" title="SFINAE"></a>SFINAE</h3><p>SFINAE 是 substitution failure is not an error 的缩写，即匹配失败不是错误。就是说，匹配重载的函数 / 类时如果匹配后会引发编译错误，这个函数 / 类就不会作为候选。这是一个 C++11 的新特性，也是 enable_if 最核心的原理。</p><h3 id="完整的重载匹配顺序（SFINAE-下）"><a href="#完整的重载匹配顺序（SFINAE-下）" class="headerlink" title="完整的重载匹配顺序（SFINAE 下）"></a>完整的重载匹配顺序（SFINAE 下）</h3><ol><li>找到候选函数，去掉其中会引发编译错误的。</li><li>完全匹配 &gt; 提升转换 &gt; 标准转换 &gt; 用户定义的转换。<ul><li>完全匹配：<ol><li>值 ↔ 引用</li><li>[] → *</li><li>type(argument-list) → (type *)(argument-list)（函数指针）</li><li>type → const / volatile type</li><li>type * → const type</li><li>type * → volatile type *</li></ol></li><li>提升转换：char / shorts → int，float → double。</li><li>标准转换：int → char，long → double。</li><li>用户定义的转换：类中的构造函数，类型转换函数等。</li></ul></li><li>非模板函数优先于模板函数。</li><li>寻找“最佳匹配”，我自己也不是很了解，可以参见 《C++ Primer Plus（第五版）》8.5.4 或上网搜索。</li></ol><p>若经过以上过程仍有多个候选函数，则会引发二义性错误。</p><h2 id="enable-if-的原理"><a href="#enable-if-的原理" class="headerlink" title="enable_if 的原理"></a>enable_if 的原理</h2><p>enable_if 的定义类似于下面的代码：（只有 Cond = true 时定义了 type）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">bool</span> Cond, <span class="class"><span class="keyword">class</span> <span class="title">T</span> = <span class="title">void</span>&gt; <span class="title">struct</span> <span class="title">enable_if</span> &#123;</span>&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">enable_if</span>&lt;true, T&gt; &#123;</span> <span class="keyword">typedef</span> T type; &#125;;</span><br></pre></td></tr></table></figure><p>这样的话，<code>enable_if&lt;true, T&gt;::type</code> 即为 <code>T</code>，而 <code>enable_if&lt;false, T&gt;::type</code> 会引发编译错误（在 SFINAE 下，即不将包含这一 enable_if 的函数 / 类作为候选）。</p><h2 id="enable-if-的使用"><a href="#enable-if-的使用" class="headerlink" title="enable_if 的使用"></a>enable_if 的使用</h2><p>enable_if 可以在任何地方充当一个类型使用，可以有实际意义，也可以新增一个多余的仅用来 enable / unable 的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="keyword">typename</span> enable_if&lt;a + b == <span class="number">233</span>, <span class="keyword">bool</span>&gt;::type is233()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="keyword">typename</span> enable_if&lt;a + b != <span class="number">233</span>, <span class="keyword">bool</span>&gt;::type is233()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; is233&lt;<span class="number">1</span>, <span class="number">232</span>&gt;() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; is233&lt;<span class="number">114514</span>, <span class="number">1919</span>&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只不过，大多数时候 enable_if 都用来判断模板参数的类型，此时一般要和 <code>is_integral</code> 等模板类结合使用。</p><p>有关 <code>is_integral</code> 等相关模板类的信息可以参见 <a href="http://www.cplusplus.com/reference/type_traits/" target="_blank" rel="noopener">C++ Reference</a>。</p><p><code>is_integral&lt;T&gt;::value</code> 是一个布尔值，在 <code>T</code> 为整型时为真，否则为假。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> = <span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value, <span class="keyword">void</span>&gt;::type&gt;</span><br><span class="line"><span class="keyword">bool</span> isodd(T x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; isodd(<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; isodd(<span class="string">'a'</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; isodd("qwq"); -- compile error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 OutputIterator 的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIt, <span class="keyword">typename</span> = <span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag, <span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value || (is_base_of&lt;forward_iterator_tag, <span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value &amp;&amp; !is_const&lt;OutputIt&gt;::value)&gt;::type&gt;</span><br><span class="line"><span class="keyword">void</span> read(OutputIt __first, OutputIt __last) &#123; <span class="keyword">for</span> (; __first != __last; ++__first) read(*__first); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想更新一下自己的 &lt;a href=&quot;https://github.com/ouuan/CF-template&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF 模板&lt;/a&gt;，然后发现由于写法问题可能要给每种整型（int，long，long long，unsigned int，unsigned long long……）分别定义函数，于是尝试搜了一下有没有什么好的代码重用方式，发现了 enable_if，还挺好用的，但去网上搜教程可能比较难学..我乱搞了两三个小时才学会。于是就来分享一下..&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="泛型编程" scheme="https://ouuan.github.io/tags/%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C++" scheme="https://ouuan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Surreal Numbers 阅读笔记</title>
    <link href="https://ouuan.github.io/Surreal-Numbers-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/Surreal-Numbers-阅读笔记/</id>
    <published>2019-06-26T07:05:09.000Z</published>
    <updated>2019-07-03T07:29:28.286Z</updated>
    
    <content type="html"><![CDATA[<p>今天模拟赛遇到了一道需要超现实数的题目，赛后在阅读 <a href="http://www.matrix67.com/blog/archives/6333" target="_blank" rel="noopener">Matrix67 的博客</a> 时听说了唐纳德所著的《Surreal Numbers》（中译：研究之美）这本书，于是就阅读了一下。</p><p>大约会把书里的定理证一遍吧..</p><p>学习超现实数的时候请假装自己不知道关于数字的一切知识，并且不要把定义的名字真的当回事（某些定义有着熟悉的名字，但可能与我们熟知的意义相同，也可能不同）。</p><p><a href="/Surreal-Numbers-阅读笔记/[研究之美].（美）高德纳.扫描版.pdf">小说下载地址</a></p><a id="more"></a><p>本文可能比较咕，不知道什么时候能填完坑…</p><h2 id="Conway’s-rules"><a href="#Conway’s-rules" class="headerlink" title="Conway’s rules"></a>Conway’s rules</h2><p>（<del>翻译挺神仙的</del>）</p><blockquote><p>创生二道，大小诸数盖由此出。</p></blockquote><ol><li><p>凡数，皆合于前创二数之集，其位左者，无一大于或似于其位右者。</p></li><li><p>甲数小于或似于乙数，当且仅当甲数之左集中无一大于或似于乙数，且乙数之右集中无一小于或似于甲数。</p></li></ol><blockquote><p>Conway 检视二道，连呼妙哉！此二道真妙绝。</p></blockquote><h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>比较运算符上画一道斜线表示不满足该运算符。</p><p>$x\le y$ 表示 $x$ 小于或似于 $y$。</p><p>$x\ge y$ 表示 $y\le x$。</p><p>$x\equiv y$ 表示 $x$ 似于 $y$，即 $x\le y$ 且 $y\le x$。</p><p>根据下文会介绍的定理 (T4)，“不小于或似于” 即 “大于且不似于”，所以可以定义 $x&lt;y$ 表示 $x\not\ge y$，$x&gt;y$ 表示 $x\not\le y$。</p><p>$A\le x​$（$A​$ 是一个集合，$x​$ 是一个数）表示 $A​$ 中任意一个元素都 $\le x​$。（其它运算符类似）</p><p>$x\le A$（$A$ 是一个集合，$x$ 是一个数）表示 $A\ge x​$。（其它运算符类似）</p><p>$A\le B$（$A$ 和 $B$ 都是集合）表示 $A$ $\le$ $B$ 中任意一个元素。（其它运算符类似）</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>一个数 $x$ 可以表示为 $(X_L,X_R)$ 的形式，其中 $X_L$ 表示 $x$ 的左集，$X_R$ 表示 $x$ 的右集。即 $x=(X_L,X_R)$。</p><p>$x_L$ 表示 $X_L$ 中的一个元素，$x_R$ 表示 $X_R$ 中的一个元素。</p><h3 id="Rule-1"><a href="#Rule-1" class="headerlink" title="Rule #1"></a>Rule #1</h3><p>$$x_L\not\ge x_R$$</p><h3 id="Rule-2"><a href="#Rule-2" class="headerlink" title="Rule #2"></a>Rule #2</h3><p>$$x\le y\Leftrightarrow X_L\not\ge y\land Y_R\not\le x$$</p><h2 id="Theorems"><a href="#Theorems" class="headerlink" title="Theorems"></a>Theorems</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>$$x\le y\land y\le z\Rightarrow x\le z​$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"><p>假设该命题不成立，即存在 $x\le y,y\le z,x\not\le z​$。</p><p>$\because x\not\le z$</p><p>$\therefore \exists x_L\ge z\lor\exists z_R\le x​$</p><p>当 $x_L\ge z$ 时</p><p>​    $\because x\le y$</p><p>​    $\therefore x_L\not\ge y​$</p><p>​    $\therefore y\le z,z\le x_L,y\not\le x_L​$</p><p>当 $z_R\le x$ 时</p><p>​    $\because y\le z$</p><p>​    $\therefore z_R\not\le y$</p><p>​    $\therefore z_R\le x,x\le y,z_R\not\le y$</p><p>综上，无论是哪种情形，都会得到新的一组不满足原命题的数，而这组数的其中一个数会比原来的三个数中的一个创造的早，新的这组数的另外两个数就是原来的三个数中另外两个数。这样的话，若出现了一组不满足原命题的数，创造时间就会不断向前追溯，而追溯是有尽头的，因此这种情形不可能出现。</p><p>证毕。</p></div></div><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>$$X_L\le x\le X_R$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>$x\le x$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>$$x\not\le y\Rightarrow y\le x$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>$$x&lt;y\land y\le z\Rightarrow x&lt;z$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T6"><a href="#T6" class="headerlink" title="T6"></a>T6</h3><p>$$x\le y\land y&lt;z\Rightarrow x&lt;z$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><h3 id="T7"><a href="#T7" class="headerlink" title="T7"></a>T7</h3><p>$$Y_L&lt;x&lt;Y_R\Rightarrow x\equiv(x_L\bigcup Y_L,x_R\bigcup Y_R)$$</p><div><div class="fold_hider"><div class="close hider_title">证明</div></div><div class="fold"></div></div><p>（本文咕咕中……）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天模拟赛遇到了一道需要超现实数的题目，赛后在阅读 &lt;a href=&quot;http://www.matrix67.com/blog/archives/6333&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Matrix67 的博客&lt;/a&gt; 时听说了唐纳德所著的《Surreal Numbers》（中译：研究之美）这本书，于是就阅读了一下。&lt;/p&gt;
&lt;p&gt;大约会把书里的定理证一遍吧..&lt;/p&gt;
&lt;p&gt;学习超现实数的时候请假装自己不知道关于数字的一切知识，并且不要把定义的名字真的当回事（某些定义有着熟悉的名字，但可能与我们熟知的意义相同，也可能不同）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/Surreal-Numbers-阅读笔记/[研究之美].（美）高德纳.扫描版.pdf&quot;&gt;小说下载地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="博弈论" scheme="https://ouuan.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="超现实数" scheme="https://ouuan.github.io/tags/%E8%B6%85%E7%8E%B0%E5%AE%9E%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF708C Centroids（树形dp，up and down）</title>
    <link href="https://ouuan.github.io/CF708C-Centroids%EF%BC%88%E6%A0%91%E5%BD%A2dp%EF%BC%8Cup-and-down%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF708C-Centroids（树形dp，up-and-down）/</id>
    <published>2019-06-23T13:34:21.000Z</published>
    <updated>2019-06-23T13:49:45.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforc.es/contest/708/problem/C" target="_blank" rel="noopener">CF</a></p><p><a href="https://www.luogu.org/problemnew/show/CF708C" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一棵 $n$ 个点的树，对每个点，判断能否删去一条边再加上一条边，使得这个点成为树的重心。（树的重心：将其删去后每个联通块大小不超过 $\frac n 2$）</p><p>$2\le n\le 4\cdot10^5​$</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>up and down，即用两遍 dfs，第一遍用孩子更新父亲，第二遍用父亲更新孩子，好像也叫做“换根 dp”。</p><p>如何修改一条边使一个点成为重心？要把那个点原来最大的子树删掉一条边分成不超过 $\frac n 2$ 的两半，再把切下来那个子树接到这个点上。切下来的那个子树只要不超过 $\frac n 2$ 即可，所以我们希望切下来一个尽可能大的不超过 $\frac n 2$ 的子树，这样剩下来那一半就可以尽量小。</p><p>也就是说，我们需要找到以每个点为根的最大子树，以及每个子树（注意是无根树的每个子树）可以切出来的最大的不超过 $\frac n 2$ 的子树。求这个可以使用 up and down 这个技巧，详见代码。</p><p>求出这个之后，就可以 $\mathcal O(1)$ 判断每个点是否合法了。</p><p>up and down 的过程中有一个小技巧：第二遍 dfs 中用父亲更新孩子时，父亲的 down（父亲的孩子们对父亲的贡献）中要减去当前节点的贡献再更新当前节点的值，所以需要存最大值和次大值，这个可以利用一个小数据结构来简化代码，详见代码中的 <code>struct Node</code>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fi, se;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 向最大值和次大值中插入一个值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; fi)</span><br><span class="line">        &#123;</span><br><span class="line">            se = fi;</span><br><span class="line">            fi = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; se) se = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 得到除了 x 外的最大值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == fi) <span class="keyword">return</span> se;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> fi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dn[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"><span class="keyword">int</span> n, siz[N], fa[N], son[N], up[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, u, v, mx, sz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v);</span><br><span class="line">        add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">    &#123;</span><br><span class="line">        v = son[u];</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u])</span><br><span class="line">        &#123;</span><br><span class="line">            sz = n - siz[u];</span><br><span class="line">            mx = up[u]; <span class="comment">// 也可以 max(dn[v].get(calc(u)), up[v])</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sz = siz[v];</span><br><span class="line">            mx = dn[v].fi; <span class="comment">// 也可以 calc(v)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, sz - mx &lt;= n / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[v] = u;</span><br><span class="line">        dfs1(v);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        dn[u].insert(calc(v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    <span class="keyword">if</span> (n - siz[u] &lt;= n / <span class="number">2</span>)  up[u] = n - siz[u];</span><br><span class="line">    <span class="keyword">else</span> up[u] = max(up[fa[u]], dn[fa[u]].get(calc(u)));</span><br><span class="line">    <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v);</span><br><span class="line">        <span class="keyword">if</span> (siz[v] &gt; siz[son[u]]) son[u] = v; <span class="comment">// son 是一个节点的最大子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n - siz[u] &gt; siz[son[u]]) son[u] = fa[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span> <span class="comment">// 计算孩子对父亲的贡献</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> siz[u] &lt;= n / <span class="number">2</span> ? siz[u] : dn[u].fi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforc.es/contest/708/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF708C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一棵 $n$ 个点的树，对每个点，判断能否删去一条边再加上一条边，使得这个点成为树的重心。（树的重心：将其删去后每个联通块大小不超过 $\frac n 2$）&lt;/p&gt;
&lt;p&gt;$2\le n\le 4\cdot10^5​$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树形dp" scheme="https://ouuan.github.io/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
      <category term="up and down" scheme="https://ouuan.github.io/tags/up-and-down/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2115 [WC2011]最大XOR和路径（线性基，图论）</title>
    <link href="https://ouuan.github.io/BZOJ2115-WC2011-%E6%9C%80%E5%A4%A7XOR%E5%92%8C%E8%B7%AF%E5%BE%84%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9F%BA%EF%BC%8C%E5%9B%BE%E8%AE%BA%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ2115-WC2011-最大XOR和路径（线性基，图论）/</id>
    <published>2019-06-16T12:46:02.000Z</published>
    <updated>2019-06-16T12:53:00.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P4151" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.tk/problem/2115" target="_blank" rel="noopener">darkbzoj</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张带边权的无向图，求 $1$ 到 $n$ 的边权异或和最大的路径。</p><p>点数 $5\times 10^4$，边数 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>我们先随便找一条从 $1$ 到 $n$ 的链，然后看能如何修改它。</p><p>如果我们不走这条链，从某个位置分叉出去，为了回到这条链上，我们一定是从某条岔路走出去，走一个环，再沿着这条岔路走回来。由于边权异或，这条岔路就不会产生贡献。因此，最终答案可以表示为一条链 + 若干个环的异或和。这条链是可以随便选的，因为一条链可以异或若干个环得到另一条链。</p><p>然而，环可能有很多，事实上我们可以得到 dfs 树，只需考虑那些仅包含一条返祖边的环，其它环都可以由若干个这样的环异或得到。代码实现非常简单，具体可以看参考代码。</p><p>找到这些环之后用线性基就可以求出答案了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, head[N], nxt[M &lt;&lt; <span class="number">1</span>], to[M &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line">ll edge[M &lt;&lt; <span class="number">1</span>], dis[N], p[<span class="number">70</span>], ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, u, v;</span><br><span class="line">    ll w;</span><br><span class="line"></span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        u = read();</span><br><span class="line">        v = read();</span><br><span class="line">        w = read();</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ans = dis[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">59</span>; ~i; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!((ans &gt;&gt; i) &amp; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ans ^= p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">59</span>; ~i; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i]) x ^= p[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[i] = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v = to[i];</span><br><span class="line">        w = edge[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) insert(dis[u] ^ dis[v] ^ w);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dis[v] = dis[u] ^ w;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">    edge[cnt] = w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4151&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://darkbzoj.tk/problem/2115&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darkbzoj&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张带边权的无向图，求 $1$ 到 $n$ 的边权异或和最大的路径。&lt;/p&gt;
&lt;p&gt;点数 $5\times 10^4$，边数 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线性基" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>ouuan 的出题规范</title>
    <link href="https://ouuan.github.io/ouuan-%E7%9A%84%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/"/>
    <id>https://ouuan.github.io/ouuan-的出题规范/</id>
    <published>2019-06-16T03:24:12.000Z</published>
    <updated>2019-08-18T16:25:54.664Z</updated>
    
    <content type="html"><![CDATA[<p>首先，你需要意识到，自己出的题是要<strong>给别人做</strong>的。</p><a id="more"></a><p>请不要说这是一句废话。这是做一名好的出题人必须要明白的。</p><p>出题比起展示自己，更是服务他人。</p><h2 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h2><h3 id="关于原题"><a href="#关于原题" class="headerlink" title="关于原题"></a>关于原题</h3><p>原题大致可分为完全一致、几乎一致和做法一致三种。</p><ul><li>完全一致：使用一题的 AC 代码可以 AC 另一题。</li><li>几乎一致：由一题的 AC 代码改动至另一题的 AC 代码可以由一个不会该题的人完成。</li><li>做法一致：核心思路、做法一致，但代码实现上、不那么关键的细节上有差异。</li></ul><p>这三种原题自下而上为包含关系。</p><p>以下情况不应出现：</p><ol><li>在明知有“几乎一致”的原题的情况下出原题。</li><li>由于未使用搜索引擎查找导致自己不清楚有原题，从而出了“几乎一致”的原题。</li><li>在“做法一致”的原题广为人知（如：NOIp、NOI 原题）时出原题。</li><li>在带有选拔性的考试的非送分题中出现“做法一致”的原题。</li></ol><p>以下情况最好不要出现：</p><ol><li>在明知有至少为“做法一致”的原题的情况下出原题。</li><li>由于未使用搜索引擎查找导致自己不清楚有原题，从而出了“做法一致”的原题。</li><li>在任何情况下出“几乎一致”的原题。</li></ol><p>可以放宽要求的例外情况：</p><ol><li>校内模拟赛。</li><li>以专题训练为目的的模拟赛。</li><li>难度较低的比赛，或是定位为送分题的题目。</li></ol><h3 id="关于毒瘤题"><a href="#关于毒瘤题" class="headerlink" title="关于毒瘤题"></a>关于毒瘤题</h3><p>“毒瘤题”是一个非常模糊而主观的观念，我在这只是引用一些前人关于此的探讨，加以自己的一些理解。这个话题是非常开放的，欢迎大家来发表自己的观点。</p><blockquote><p>一道好题不应该是两道题拼在一起，一道好题会有自己的idea —— 而它应该不加过多包装地突出这个idea。</p><p>一道好题应该新颖。真正的好题，应该是能让人脑洞出新的好题的好题。</p><p>—— vfk《UOJ精神之源流》</p></blockquote><p>例子：<a href="https://www.luogu.org/problemnew/show/P5346" target="_blank" rel="noopener">【XR-1】柯南家族</a>，做法的前后两部分完全割裂，前半部分为<a href="https://www.luogu.org/problemnew/show/P5353" target="_blank" rel="noopener">【模板】树上后缀排序</a>，后半部分是经典树上问题。</p><blockquote><p>一类OI题以数学为主，无论是题目描述还是做法都是数学题的特征，并且解法中不含算法相关的知识点，这类OI题目统称为纯数学题。</p><p>—— 王天懿《论偏题的危害》</p></blockquote><p>经典例子：<a href="https://www.luogu.org/problemnew/show/P3951" target="_blank" rel="noopener">NOIP2017 小凯的疑惑</a></p><p>我自己的标准是：尽量不要出数学填空题。但这样的纯数学题也不是完全不可取，有时纯粹地考察一些 OI 常用数学知识也是可以接受的。</p><blockquote><p>一部分偏题中牵涉到了大学物理的内容，导致选手在面对这些从未接触过的物理知识点时变得不知所措，造成了知识上的隔膜。</p><p>—— 王天懿《论偏题的危害》</p></blockquote><p>经典例子：<a href="http://uoj.ac/problem/159" target="_blank" rel="noopener">【清华集训2015】多边形下海</a></p><p>不止是物理，OI 题目中不应过多涉及到其它学科的知识，如果涉及应当给予详细的解释，不应使其它学科的知识作为解题的重大障碍。</p><blockquote><p>一道好题无论难度如何，都应该具有自己的思维难度，需要选手去思考并发现一些性质。</p><p>一道好题的代码可以长，但一定不是通过强行嵌套或者增加条件而让代码变长，而是长得自然，让人感觉这个题的代码就应该是这么长。</p><p>—— 王天懿《论偏题的危害》</p></blockquote><p>经典例子：<a href="https://www.luogu.org/problemnew/show/P2482" target="_blank" rel="noopener">[SDOI2010]猪国杀</a>，<a href="http://uoj.ac/problem/98" target="_blank" rel="noopener">【集训队互测2015】未来程序·改</a></p><p>在一般的 OI 比赛中，思维难度应占主要部分。当然，如 THUWC / THUSC 的 Day 2+ 那样的工程题也有其存在的道理 —— 毕竟体验营的目的除了考察选手的算法设计能力，还有和大学学习对接的工程代码以及文档学习能力。但在一般的 OI 比赛中，考察更多的应当还是算法设计与思维能力。</p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>题目背景最好尽量简短。</p><p>在题目背景较长时，应当与题目描述分开。</p><p>需要绝对避免的情况：题目背景严重影响题意的理解。</p><p>必要时，可以提供与背景结合的题目描述与简洁的题目描述两个版本。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>简而言之，题目描述需要<strong>清晰易懂</strong>。</p><p>题面中的每个可能不被理解的定义都应得到解释，不应凭空冒出未加定义的概念。例如：在 <a href="https://codeforces.com/problemset/problem/1172/D" target="_blank" rel="noopener">CF1172D Nauuo and Portals</a> 中，你必须在题面中解释什么是“传送门”。</p><p>题面中涉及到的每个概念应当使用单一的词汇来描述。例如：不应一会儿说“费用”，一会儿说“代价“。</p><p>不应不加说明地使用与原义、常见义不同的词汇。例如：不应不加说明地用“路径”代指一条边。</p><p>你需要保证你的题面不会自相矛盾。例如：在 <a href="https://codeforces.com/problemset/problem/1173/A" target="_blank" rel="noopener">CF 1173A Nauuo and Votes</a> 中，没有把 “?” 作为一种 “result”，是因为 “?” 的含义是 “there are more than one possible results”。</p><p>你需要保证你的题面不能被错误理解而自圆其说，即使这种理解是反常识、没有人会这么去想的。例如：在 <a href="https://codeforces.com/problemset/problem/1172/D" target="_blank" rel="noopener">CF1172D Nauuo and Portals</a> 中，之所以要繁琐地定义 “walk into” 并与 “teleport” 区分，是为了防止这种理解：通过传送门可以到另一个传送门，而到了传送门会传送，因此会反复横跳。</p><p>顺着读题目描述应当能看懂每一句话，并理解题目的任务与要求。至少在紧接着的下一段话中疑惑能够得到解释，而不是需要在若干段后才能得到解释，或者要看了输入输出格式才能明白题意，甚至需要根据样例来猜题意。例如：在 <a href="https://guoj.icu/problem/1171" target="_blank" rel="noopener">「GuOJ Round #1」琪露诺的冰雪宴会</a> 中，在输出格式才第一次出现了题目的目标“雾之湖最终能接收到的最大水量”，再加上“灵梦当然能很快算出来清理完全部小溪的总费用是多少”这句带有误解性质的话，更容易使人读错题意，这是不可取的，应当在题目描述中就对题目的目标进行说明。（在这个例子中还存在题目背景严重影响题意理解的问题。）</p><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入输出格式清晰<strong>完整</strong>即可，没有死板的要求，个人建议参照 CF 的题目来写输入输出格式，具体可以参考 <a href="/bad-round-与出题人的坚守/rules.jpg">cf 出题人须知</a>。</p><p>需要特别注意的是，如果输出中含有小数，请尽量使用 SPJ。如果无法使用 SPJ，请保证对精度的要求是有限的。</p><p>如果没有保证，对精度的要求可能是无限的。例如：要求保留三位小数，实际答案为 $0.0015$，此时只要有任意大小的误差导致计算出的答案小于 $0.0015$，即使计算出的答案是 $0.0014999999999\cdots$ 也会输出错误的答案。</p><p>保证对精度要求有限的例子：请输出答案四舍五入后保留小数点后三位的结果。令标准答案为 $ans$，数据保证对于任意满足 $\frac{|x-ans|}{\max(1,ans)}&lt;10^{-9}$ 的 $x$，四舍五入后结果与 $ans​$ 四舍五入后相同。</p><p>可以参考的一些句子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行包含三个正整数 $n$, $m$, $k$ ($1\le n,m\le 2\cdot 10^5$, $1\le k\le 100$) — $n$ 表示数列的长度，$m$ 表示操作个数，$k$ 的意义见题目描述。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第二行包含 $n$ 个非负整数 $a_1,a_2,\ldots,a_n$ ($1\le a_i\le 10^9$) — 题目给出的数列。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接下来的 $m$ 行中的第 $i$ 行包含两个正整数 $l_i$ 和 $r_i$ ($1\le l_i\le r_i\le n$)，表示第 $i$ 次操作在区间 $[l_i,r_i]$ 上进行。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接下来的 $n-1$ 行，每行包含两个正整数 $u$ 和 $v$ ($1\le u,v\le n$)，表示 $u$ 和 $v$ 之间由一条边相连。</span><br><span class="line"></span><br><span class="line">数据保证给出的边能构成一棵树。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的唯一一行包含一个由小写英文字母构成的非空字符串，其长度不超过 $10^6$。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入的第二行包含一个小数点后不超过三位的实数 $x$ ($-10^6\le x\le 10^6$)，意义见题目描述。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出包含一个实数，当你的输出与标准答案之间的绝对误差或相对误差小于 $10^&#123;-6&#125;$ 时视作正确。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出的第二行包含 $n$ 个正整数，表示你构造的一组方案 — 其中第 $i$ 个数表示你打出的第 $i$ 张牌的编号。</span><br><span class="line"></span><br><span class="line">如果有多组合法的答案，可以任意输出其中一组。</span><br></pre></td></tr></table></figure><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>按照 CF 的要求，数据范围要写在输入格式里，但在国内，数据范围往往是写在题目的最后的。</p><p>数据范围中最容易犯的错误就是不完整。输入中的每一个数、每一个字符串都应该有清晰的界定。在上文所给出的输入输出格式示例中就有一些数据范围的正确写法。</p><p>数据范围的常见遗漏：</p><ol><li>“整数”中的“整”。</li><li>题面中只说了是“整数”没说是“正整数”，并且数据范围中只有上限没有下限。</li><li>字符串没说字符集。</li><li>实数没说小数点后位数。</li><li>某些变量没有给范围。</li></ol><p>你需要保证标程可以通过满足题面所述数据范围的任何一组数据。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>样例应当有一定的强度，能够查出一些简单的错误。读错题意的人应当能够通过样例发现自己读错了题意。</p><p>有多种操作的题，每种操作都应在样例中出现。</p><p>有多种输出的题（如 <a href="https://codeforces.com/problemset/problem/1173/A" target="_blank" rel="noopener">CF 1173A Nauuo and Votes</a>），每种输出都应在样例中出现。例外：实际上不可能无解，但要求判断是否有解的题目。</p><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>题目描述越复杂、越不易理解就越应当有详细的样例解释。</p><p>题目难度越简单就越应当有详细的样例解释。</p><p>详细的样例解释可以选择配上图片。</p><p>较大的样例可以没有样例解释。</p><p>为了照顾色觉障碍者，最好不要使颜色成为理解样例解释所必备的。可以用彩色图片来美化样例解释，但如果一定要用颜色传递一些必要的信息，最好不要同时出现红黄或者红绿。</p><h2 id="时限、空间限制与部分分"><a href="#时限、空间限制与部分分" class="headerlink" title="时限、空间限制与部分分"></a>时限、空间限制与部分分</h2><p>时限与空间限制的目的是卡掉复杂度错误的做法。（当然，也是为了防止评测用时过长，如：只对交互次数有限制而对时间复杂度没有限制的交互题也有时间限制。）</p><p>因此，原则上时间限制应当选取不使错误做法通过的尽量大的值。</p><p>一般地，时限应满足以下要求：</p><ol><li>至少为 std 在最坏情况下用时的两倍。</li><li>如果比赛允许使用 Java，应使 Java 能够通过。</li><li>不应使错误做法通过（实在卡不掉、想放某种错解过除外）。</li></ol><p>为了更好地在放大常数做法过的同时卡掉错解，一般可以采用同时增大数据范围和时限的方法。但要注意，有时正解（由于缓存等玄学问题）会在数据范围增大时有极大的常数增加，此时增大数据范围不一定能够增大正解与错解之间用时的差距。</p><p>在有部分分的赛制中，还可以通过设置有梯度的数据、数据范围稍小的数据来使较为优秀的错解和大常数正解不能通过，同时使其获得较高的部分分。</p><p>需要注意的是，在数据范围小于 $5\cdot 10^5$ 时，应当考虑是否能使用<a href="/n方过百万-暴力碾标算——指令集优化的基础使用">指令集</a>通过。</p><p>一般情况下空间限制应当设置的足够大，除非空间复杂度更优的做法的确十分巧妙，值得卡掉空间复杂度大的做法。这种情况下可以考虑设置空间限制较松的部分分。值得注意的是，如果不想卡掉空间消耗较大的做法，数据结构题一般需要设置较大的空间限制。</p><blockquote><p>一道好题应该具有它的选拔性质，具有足够的区分度。应该至少4档部分分，让新手可以拿到分，让高手能够展示自己的实力。</p><p>—— vfk《UOJ精神之源流》</p></blockquote><p>部分分一般分为较小数据范围与特殊性质两种。</p><p>较小数据范围一般要设置多档，即使你想不到某种复杂度的做法，也可以考虑给这种复杂度一档分。一般来说，为了避免卡常，可以设置一档极限数据除以二的部分分。</p><p>“数据有梯度”最好用多档部分分替代。</p><p>特殊性质部分分的设置要依具体题目而定。理想的特殊性质部分分应当是能够引导选手思考正解的。与较小数据范围部分分不同，在你不会针对某种特殊性质的做法时，最好不要给这种特殊性质一档分。例如：<a href="https://www.luogu.org/problemnew/show/P5400" target="_blank" rel="noopener">[CTS2019]随机立方体</a> 的 $k=1$ 这档部分分在讲题时就被很多人吐槽，称这档部分分妨碍了思考正解。</p><p>如果不是测试点等分且总分为测试点得分相加（如：绑 Subtask 测试），一定要在题面中说明。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="数据的多样性与强度"><a href="#数据的多样性与强度" class="headerlink" title="数据的多样性与强度"></a>数据的多样性与强度</h3><p>在不绑 Subtask，按测试点给分时，本部分内容可以酌情不遵守。</p><p>数据中应当包含每个变量的最小值与最大值。</p><p>数据中应当包含各种各样的构造，即使你不知道什么错解会挂在这组构造上。</p><p>当然，如果你已知一个（正常人能想的到、写的出的）正确性有问题的错解，要尽量卡掉它。（时间复杂度有问题的错解已在上文讨论过了。）</p><p>需要特别提醒的是，如果有整型溢出的可能，一定要卡掉会溢出的做法。在有部分分的赛制中，不应使不开 long long 的人得到和暴力一样甚至更低的分数。</p><h3 id="如果有-pretests"><a href="#如果有-pretests" class="headerlink" title="如果有 pretests"></a>如果有 pretests</h3><p>pretests 应尽量强（，同时尽量少）。换言之，你需要在 pt 中（用尽量少的数据组数）包含该题的所有已知叉点。（括号中为个人观点。）</p><p>如果你希望出现少量而非没有 fst，你可以问问 Sooke 对这件事的看法（Sooke 曾经坚称“fst 是 CF 的灵魂”，在我的强烈要求下，在 <a href="https://codeforces.com/problemset/problem/1172/A" target="_blank" rel="noopener">CF1172A Nauuo and Cards</a> 中，他构造了许多数据，在 pt 中卡掉了所有已知错解，最后，这题在比赛中 Div.2 的 fst 率为 $18.5\%$）。</p><h3 id="使用-testlib-h-造数据"><a href="#使用-testlib-h-造数据" class="headerlink" title="使用 testlib.h 造数据"></a>使用 testlib.h 造数据</h3><p>在平常的出题中使用 <a href="https://polygon.codeforces.com/" target="_blank" rel="noopener">Polygon</a> 可能不是最为方便的选择（事实上如果是多人协作出题，即使不是出 cf，使用 Polygon 依然是非常棒的选择），但 Polygon 为我们提供的出题方式十分值得借鉴。</p><p>简而言之，在 Polygon 中，数据要么是手造，要么由 generator 生成。而这个 generator 使用 <a href="https://github.com/MikeMirzayanov/testlib" target="_blank" rel="noopener">testlib.h</a>，并且使用命令行参数来设置数据范围、构造类型等参数。</p><p>使用 testlib.h 的好处是，它内置了随机数生成器 <code>rnd.next()</code>，它在不同平台上返回同样的结果，并且其种子是基于整个命令行参数生成的，不用手动设置种子，并且在参数一样时生成的数据总是一样的。</p><p>使用命令行参数的好处是，你可以写一个 .bat 文件（或者 Linux 下的 .sh 文件），把生成数据的命令写进去，可以十分方便地生成数据。</p><p>一个简单的 generator 例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gen.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"testlib.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    registerGen(argc, argv, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    n = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    m = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    k = rnd.next(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) p.push_back(i);</span><br><span class="line">    shuffle(p.begin(), p.end()); <span class="comment">// testlib.h 自带的 random_shuffle，使用 rnd.next() 进行 shuffle</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, n, m, k);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, p[i], <span class="string">" \n"</span>[i == n - <span class="number">1</span>]); <span class="comment">// 把字符串当作数组用，中间空格，末尾换行，是一个造数据时常用的技巧</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gen 10 10 &gt; 1.in</span><br><span class="line">gen 1 1 &gt; 2.in</span><br><span class="line">gen 100 200 &gt; 3.in</span><br><span class="line">gen 2000 1000 &gt; 4.in</span><br><span class="line">gen 100000 100000 &gt; 5.in</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/blog/entry/18291" target="_blank" rel="noopener">官方 generator 教程</a>。</p><p>如果你愿意，还可以写一个 validator。validator 是用来检查数据合法性的，在 cf 赛制中由于 hack 的存在是必备的，而在其它赛制中，validator 相当于给数据上了一道保险锁，个人十分推荐写一个 validator。</p><p><a href="https://codeforces.com/blog/entry/18426" target="_blank" rel="noopener">官方 validator 教程</a>。</p><p>最后推荐一个我自己经常使用的生成输出文件的 bat：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /R <span class="string">"%cd%"</span> %%i <span class="keyword">in</span> (*.<span class="keyword">in</span>) <span class="keyword">do</span> ( </span><br><span class="line"><span class="built_in">echo</span> %%i</span><br><span class="line">validator &lt; %%i</span><br><span class="line"><span class="keyword">if</span> errorlevel 1 pause</span><br><span class="line">std &lt; %%i &gt; %%~ni.out</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="Special-Judge"><a href="#Special-Judge" class="headerlink" title="Special Judge"></a>Special Judge</h2><p>输出方案题和输出浮点数题是两种较为常见的需要使用 SPJ 的题型，其它题目视情况也需要使用 SPJ。在 CF 上，所有题目都必须使用基于 testlib.h 的 checker，例如：题目要求输出若干个整数时，你可以任意输出空白字符（既可以空格也可以换行）。</p><p>checker 一般使用 testlib.h 编写，<a href="/使用-testlib-h-写-lemon-SPJ/">在 lemon 中也可以使用 testlib.h</a>。一般来说，不使用 testlib.h 是很难写好 checker 的，因为你要应对各种各样的不合法输出，需要极强的鲁棒性。</p><p>编写 checker 需要注意以下两点：</p><ol><li>你需要应对各种不合法的输出，因此，请检查读入的每个变量是否在合法范围中（<code>readInt(minvalue, maxvalue)</code>）。例如：读入一个在 check 过程中会作为数组下标的变量时必须检查其范围，否则可能引发数组越界，有时这会导致 RE，有时则可能判为 AC。</li><li>原则上 checker 中不应检查空白字符（即，不应使用 readSpace()、readEoln()、readEof()，值得一提的是，testlib.h 会自动检查是否有多余的输出）。</li></ol><p><a href="https://codeforces.com/blog/entry/18431" target="_blank" rel="noopener">官方 checker 教程</a>。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题解的目标是让预计会来参加比赛的人都能看懂。所以官方题解详细程度的要求会比一般的题解高。</p><h3 id="关于部分分"><a href="#关于部分分" class="headerlink" title="关于部分分"></a>关于部分分</h3><p>在有部分分的题目中，题解里可以考虑写一写部分分的做法。</p><h3 id="关于知识点"><a href="#关于知识点" class="headerlink" title="关于知识点"></a>关于知识点</h3><p>解题中用到的知识点应当写出来。对于一些难度和题目难度相当的知识点，最好给出学习该知识点的资料（比如一篇博客的地址）。“这样，再这样，然后<strong>用一些技巧</strong>就可以了”，而其中的“一些技巧”并不是谁都会的，这种情况要绝对避免。</p><h3 id="关于定义"><a href="#关于定义" class="headerlink" title="关于定义"></a>关于定义</h3><p>题解中不要凭空冒出来一些概念。</p><p>例如：dp 的题解要解释清楚状态的定义。</p><p>再例如：cy 曾经写过一版 <a href="https://codeforces.com/problemset/problem/1172/F" target="_blank" rel="noopener">CF1172F Nauuo and Bug</a> 的题解，其中对“分段函数”没有定义，这是绝对不可取的。</p><h3 id="关于细节"><a href="#关于细节" class="headerlink" title="关于细节"></a>关于细节</h3><p>具体的实现细节如果比较巧妙最好写出来，否则的话“详见代码”也是可以的。如果“详见代码”的话，最好在代码中加上一定的注释。</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><p>标程中最好去掉冗余部分。比如，有人在题解中保留了完整的 define 模板（为了提高做题速度，包含大量 define 与常用函数，常用于 CF 等在线比赛），并且其中很大一部分都没有用到，这是不好的。</p><p>上文已经说过了，如果涉及到一些题解中没有详细说明的实现细节，最好加上适量的注释。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><h3 id="比赛通知中的题目难度需真实"><a href="#比赛通知中的题目难度需真实" class="headerlink" title="比赛通知中的题目难度需真实"></a>比赛通知中的题目难度需真实</h3><p>感觉这个是比赛通知中比较需要注意的一点。</p><p>如果不会评难度可以不评..</p><blockquote><p>Remember that authors tend to underestimate the difficulty of their problems.</p><p>—— Codeforces PROPOSE A PROBLEM 页面的提醒</p></blockquote><p>需要特别强调的是，如果你以 CF 的难度来进行类比（如：该比赛为 Div.2 A ~ Div.2 E 难度），不仅是难度需要与 CF Div.2 类似，题型也应当是 CF 风格。</p><h3 id="题目难度的分配"><a href="#题目难度的分配" class="headerlink" title="题目难度的分配"></a>题目难度的分配</h3><p>在类国内 OI 的模拟赛中，往往是三道题的整体难度与比赛难度相当即可。</p><p>在类 CF / ATC 这种线上赛的比赛中，需要尽量保证难度的递增（虽然由于对难度的误估很多时候都并不能真正做到），并且尽量避免出现大的 difficulty gap。可以通过把一题分为难易两题（两个 Subtask）来减少 difficulty gap。</p><h3 id="题目知识点的分配"><a href="#题目知识点的分配" class="headerlink" title="题目知识点的分配"></a>题目知识点的分配</h3><p>一场比赛应尽量涵盖较广的知识点（专题训练赛当然除外）。</p><p>经典反例：涵盖了动态规划、期望、组合计数、容斥原理、多项式等多种知识点的 CTS2019。（<del>组题人：我要从五道题里选六道，我也很无奈啊。</del>）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="http://vfleaking.blog.uoj.ac/blog/909" target="_blank" rel="noopener">vfk《UOJ精神之源流》</a></li><li><a href="/ouuan-的出题规范/7-王天懿-论偏题的危害.ppt">王天懿《论偏题的危害》</a></li><li><a href="/bad-round-与出题人的坚守/rules.jpg">cf 出题人须知</a></li><li><a href="https://blog.csdn.net/VFleaKing/article/details/90521383" target="_blank" rel="noopener">vfk 博客</a>中的<a href="https://www.luogu.org/paste/sxvu97yz" target="_blank" rel="noopener">CF出题人的自我修养</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，你需要意识到，自己出的题是要&lt;strong&gt;给别人做&lt;/strong&gt;的。&lt;/p&gt;
    
    </summary>
    
      <category term="出题" scheme="https://ouuan.github.io/categories/%E5%87%BA%E9%A2%98/"/>
    
    
      <category term="出题规范" scheme="https://ouuan.github.io/tags/%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2460 [BJWC2011]元素（线性基，贪心）</title>
    <link href="https://ouuan.github.io/BZOJ2460-BJWC2011-%E5%85%83%E7%B4%A0%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9F%BA%EF%BC%8C%E8%B4%AA%E5%BF%83%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ2460-BJWC2011-元素（线性基，贪心）/</id>
    <published>2019-06-14T14:00:27.000Z</published>
    <updated>2019-06-15T12:45:56.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/P4570" target="_blank" rel="noopener">洛谷</a></p><p><a href="http://darkbzoj.tk/problem/2460" target="_blank" rel="noopener">darkbzoj</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你 $n$ 个带权值的数（数和权值是两个东西），求一个权值最大的异或线性无关子集，即取这个子集的任意一个非空子集，异或和都不为零。</p><p>原题 $n\le1000$，实际上可以轻松 $n\le10^5$。数 $10^{18}$，权值 $10^4$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>看到这题，就随便贪心一下：按权值排序，插入到线性基所在的线性空间的元素集合里（说的这么绕口是因为“插入到线性基里”是一种极不严谨的表述，而且无法和真正的“插入到线性基里”区分开），如果插入到了线性基里，就把答案加上这个数的权值。</p><p>然后…过了？</p><p>仔细一想发现也不难证。</p><p>首先，一堆线性无关的向量中，如果加进来一个线性相关的，一定可以删掉这些向量（包括刚加进来这个）中的某一个（并不是任意一个，但只要一个就可以了），让它们变得线性无关。这个性质在异或中可能不那么显然，但线性相关就相当于方程组中有一个多余的方程（可以由其它方程推出来），这时只要删掉一个方程就不会有多余的方程了，这样就是大家所熟知的了。</p><p>因此，考虑加入一个元素时删掉谁呢？当然是权值小的那一个。如果事先排好序，加不进去的时候不加就好了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; pil; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line">pil a[N];</span><br><span class="line">ll p[<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld%d"</span>, &amp;a[i].second, &amp;a[i].first);</span><br><span class="line"></span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x = a[i].second;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">59</span>; ~j; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j]) x ^= p[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p[j] = x;</span><br><span class="line">                    ans += a[i].first;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三倍经验"><a href="#三倍经验" class="headerlink" title="三倍经验"></a>三倍经验</h2><p><a href="https://www.luogu.org/problemnew/show/P3265" target="_blank" rel="noopener">[JLOI2015]装备购买</a>  和 <a href="https://www.luogu.org/problemnew/show/P4301" target="_blank" rel="noopener">[CQOI2013]新Nim游戏</a> 是两道和此题几乎完全一样的题，<font color="white">前者是用一个类似高斯消元的过程代替异或，后者要利用到 Nim 游戏的经典结论。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4570&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://darkbzoj.tk/problem/2460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darkbzoj&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你 $n$ 个带权值的数（数和权值是两个东西），求一个权值最大的异或线性无关子集，即取这个子集的任意一个非空子集，异或和都不为零。&lt;/p&gt;
&lt;p&gt;原题 $n\le1000$，实际上可以轻松 $n\le10^5$。数 $10^{18}$，权值 $10^4$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="线性基" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>线性基学习笔记</title>
    <link href="https://ouuan.github.io/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/线性基学习笔记/</id>
    <published>2019-06-12T07:20:12.000Z</published>
    <updated>2019-08-19T08:10:08.743Z</updated>
    
    <content type="html"><![CDATA[<p>又是在网上搜不到讲的比较清楚的博客的算法…虽然没找到写的好的博客，但结合若干篇写的不算太差的博客，勉强是学会了..</p><p>线性基在 OI 中特指集合为若干个非负整数，运算为异或的线性基，通常用来处理一些异或相关的问题。</p><a id="more"></a><h2 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h2><p><a href="https://baike.baidu.com/item/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4/5936597" target="_blank" rel="noopener">百度百科</a>说的就非常详细了，请完整阅读一遍。</p><p><a href="https://www.bilibili.com/video/av6731067" target="_blank" rel="noopener">3b1b 的视频</a>也很不错，如果不了解线性代数相关知识可以看一看。（如果打不开可以尝试复制网址打开）</p><h2 id="线性基的定义"><a href="#线性基的定义" class="headerlink" title="线性基的定义"></a>线性基的定义</h2><p>下文中的“线性基”均指 OI 中“线性基”的常见意思。</p><h3 id="线性基所在的线性空间"><a href="#线性基所在的线性空间" class="headerlink" title="线性基所在的线性空间"></a>线性基所在的线性空间</h3><ul><li><p>元素集合：若干个非负整数（线性基可以说是关于若干个非负整数的，在有的教程中称其为“异或集合”）。</p></li><li><p>数域： $\{0,1\}$（也就是说，线性组合是选择一个子集异或起来，$0$, $1$ 就分别代表不选或选某个元素）。</p></li><li><p>元素间运算：异或。</p></li><li><p>数乘：普通的数乘。</p></li></ul><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3><p>线性基就是上文所述的线性空间的一组基底，它具有以下性质：</p><ol><li><p>在线性基中任取若干个元素，它们的异或不为零。即它们线性无关。</p></li><li><p>其所在线性空间中每个元素都有唯一的方案由线性基中元素异或得到。</p></li><li>选取线性基中若干个元素异或起来得到一个元素，用这个元素去替换原线性基中任意一个元素，得到的新线性基张成的空间不变。</li></ol><p>可以发现这就是线性空间基底的性质和线性基所在线性空间的定义合在一起。</p><h2 id="线性基的构造"><a href="#线性基的构造" class="headerlink" title="线性基的构造"></a>线性基的构造</h2><h3 id="构造出的线性基额外满足的性质"><a href="#构造出的线性基额外满足的性质" class="headerlink" title="构造出的线性基额外满足的性质"></a>构造出的线性基额外满足的性质</h3><p>线性基中的每个元素的二进制最高位均不同，并且，我们称二进制最高位为第 $i$ 位的元素称为“线性基的第 $i$ 位”。</p><p>这个性质在构造和实际应用中非常方便，但要注意，它并不是线性基所在线性空间的基底所满足的必要条件。然而下文所述线性基均满足此性质，因为它真的很实用。</p><h3 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h3><p>我们考虑如何在已有一组线性基的情况下，向线性空间的元素集合中插入一个元素。</p><p>插入新的元素后，我们需要满足：</p><ol><li>线性基张成的空间中包含新插入的元素。</li><li>线性基仍然线性无关。</li></ol><p>具体地，我们依次考虑新插入元素的每个为一的二进制位，若线性基不存在这一位，那么将这个新元素加入线性基中。</p><p>否则，将新元素异或上线性基的这一位，然后继续处理下一位。</p><p>因为插入一个元素等同于插入其异或上线性基中的一个元素，所以性质一满足。</p><p>从构造过程中就可以看出，已有线性基无法异或得到这个新元素，所以性质二满足。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p[i] 表示线性基的第 j 位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">60</span>; ~j; --j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((x &gt;&gt; j) &amp; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[j]) x ^= p[j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[j] = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性基的经典应用"><a href="#线性基的经典应用" class="headerlink" title="线性基的经典应用"></a>线性基的经典应用</h2><h3 id="判断一个数能否由若干数的子集异或得到"><a href="#判断一个数能否由若干数的子集异或得到" class="headerlink" title="判断一个数能否由若干数的子集异或得到"></a>判断一个数能否由若干数的子集异或得到</h3><p>假装你要把它插入到线性空间的元素集合中，看线性基是否需要新增元素即可。</p><h3 id="最大子集异或和"><a href="#最大子集异或和" class="headerlink" title="最大子集异或和"></a>最大子集异或和</h3><p>求出线性基，依次考虑线性基的每一位，若异或上能让答案更大（即答案的这一位为零）就异或上。因为如果不异或上，这一位就是零，无论后面的位如何，都比这一位为 $1$ 劣。</p><p><a href="https://www.luogu.org/problemnew/show/P3812" target="_blank" rel="noopener">Luogu P3812 【模板】线性基</a></p><h3 id="第-k-小子集异或和"><a href="#第-k-小子集异或和" class="headerlink" title="第 $k$ 小子集异或和"></a>第 $k$ 小子集异或和</h3><p>需要构造特殊的线性基，满足线性基中有的位都只在线性基中的一个数中出现。例如：原线性基为 <code>1100</code> 和 <code>0111</code>，这时线性基中有 $2,3$ 两位，而第二位（$2^2$ 这一位）在 <code>1100</code> 和 <code>0111</code> 中都出现了，所以应该修改为 <code>1011</code> 和 <code>0111</code>。</p><p>这可以用一个类似于高斯消元的过程完成：处理第 $i$ 位时，依次考虑每个比 $i$ 小的线性基中的位，若第 $i$ 位的该二进制位为 $1$ 就异或这一位。除了先用普通方法构建线性基再转化，也可以在构建时就进行处理（详见代码）。无论哪种方式，复杂度都会再乘上一个额外的二进制位数。</p><p>得到这样一个具有特殊性质的线性基后，就可以构造第 $k$ 小子集异或和了：把 $k$ 二进制拆分，每一位的 $0$ / $1$ 对应异或时选 / 不选线性基<strong>存在的</strong>这一位（比如说，二进制位的 $2^3$ 位对应线性基中第四小的存在的位）。证明也很简单，线性基中存在的位的 <code>0/1</code> 唯一确定了一个异或出的数，由于每个位只在一个基中为 $1​$，这些位组成的二进制数的大小就可以代表异或出的数的大小。</p><p> <a href="https://loj.ac/problem/114" target="_blank" rel="noopener">LOJ #114. k 大异或和</a>，毒瘤题，先不说题目名是假的，这个“非空集合”的限制非常的无聊..$0$ 本来就是线性基的线性组合之一，非要选“非空集合”，就得判一下给你的数中有没有能被其它线性基表示的数，实际上判一下线性基中元素个数是否为 $n​$ 即可。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line">ull p[<span class="number">60</span>], a[<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ull x, k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%llu"</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">51</span>; ~j; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j]) x ^= p[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (k = j - <span class="number">1</span>; ~k; --k) <span class="keyword">if</span> ((x &gt;&gt; k) &amp; <span class="number">1</span>) x ^= p[k];</span><br><span class="line">                    <span class="keyword">for</span> (k = j + <span class="number">1</span>; k &lt;= <span class="number">60</span>; ++k) <span class="keyword">if</span> ((p[k] &gt;&gt; j) &amp; <span class="number">1</span>) p[k] ^= x;</span><br><span class="line">                    p[j] = x;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">51</span>; ++i) <span class="keyword">if</span> (p[i]) a[cnt++] = p[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= (<span class="number">1u</span>ll &lt;&lt; cnt) + (cnt != n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt != n) --k;</span><br><span class="line">        <span class="keyword">for</span> (x = i = <span class="number">0</span>; i &lt; cnt; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1u</span>ll)</span><br><span class="line">            &#123;</span><br><span class="line">                x ^= a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h2><p><a href="https://www.luogu.org/problemnew/show/P3292" target="_blank" rel="noopener">[SCOI2016]幸运数字</a><font color="white">，由于不带修，倍增维护线性基即可。用点分治可以一个 log 解决。</font></p><p><a href="https://www.luogu.org/problemnew/show/P4570" target="_blank" rel="noopener">[BJWC2011]元素</a><font color="white">，贪心，从大到小判断是否能加入线性基。</font></p><p><a href="https://www.luogu.org/problemnew/show/P3265" target="_blank" rel="noopener">[JLOI2015]装备购买</a><font color="white">，和上一题基本一样，就是把异或换成高斯消元。</font></p><p><a href="https://www.luogu.org/problemnew/show/P4301" target="_blank" rel="noopener">[CQOI2013]新Nim游戏</a><font color="white">，结合 Nim 游戏经典结论，还是和上面两题一样的。</font></p><p><a href="https://www.luogu.org/problemnew/show/P4151" target="_blank" rel="noopener">[WC2011]最大XOR和路径</a><font color="white">，异或的结果必然是一条链异或上若干个环，找出任意一条链以及只含一条返祖边的环即可线性基解决。</font></p><p><a href="http://darkbzoj.tk/problem/4184" target="_blank" rel="noopener">shallot</a><font color="white">，线段树分治维护线性基。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是在网上搜不到讲的比较清楚的博客的算法…虽然没找到写的好的博客，但结合若干篇写的不算太差的博客，勉强是学会了..&lt;/p&gt;
&lt;p&gt;线性基在 OI 中特指集合为若干个非负整数，运算为异或的线性基，通常用来处理一些异或相关的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性基" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
      <category term="线性代数" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>bad round 与出题人的坚守</title>
    <link href="https://ouuan.github.io/bad-round-%E4%B8%8E%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E5%9D%9A%E5%AE%88/"/>
    <id>https://ouuan.github.io/bad-round-与出题人的坚守/</id>
    <published>2019-06-09T04:56:10.000Z</published>
    <updated>2019-08-07T08:46:17.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>等你等了五千年，只为这一刹那的回眸一笑。</p></blockquote><p>这句话作为台前幕后的标准开头应该是没问题的。</p><p>只不过果然还是写不出 vfk 的水平啊…写的比较散乱。而且是前后断断续续地写的，有的写于赛前，有的写于赛后，所以会有行文不连贯的地方，可能也会有后来忘记修正的地方。</p><a id="more"></a><h2 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h2><p>（借用一下 vfk 的标题 qaq）</p><p>一切源于一篇博客。</p><p>大约是<a href="https://blog.csdn.net/VFleaKing/article/details/90521383" target="_blank" rel="noopener">这篇</a>和<a href="https://blog.csdn.net/VFleaKing/article/details/90522020" target="_blank" rel="noopener">这篇</a>。</p><p>看到这篇博客的时候，是去年（2018）十二月，手里正有刚刚想到的一个 idea，也就是 1C —— Pictures。</p><p>当时我自己搞了个<a href="https://ouuan.github.io/randpic/people/">简单的随机图片</a>，然后脑海里就冒出了这个 idea，虽然刚想出来的时候并不会做..</p><p>然后就拿着去找 Sooke 了..</p><p>我：您有兴趣看一眼我出的一道题吗？</p><p>Sooke：我会 $2^n​$。</p><p>Sooke：想出洛谷公开赛？</p><p>我：不。</p><p>Sooke：想出 cf？</p><p>我：嗯。</p><img src="/bad-round-与出题人的坚守/sh2d2w.png"><p>翻翻消息记录发现当时自己太天真了…（2 months 都算少的）</p><p>然后我在不会做的情况下第二天写了个英文题面..</p><p>然后 Sooke 给我扔了套他出给 PJ 组的题，让我从里面挑给 Div.2，然后我挑了 2B —— Chess。一开始 Sooke 还想把它放在 2A..</p><p>ylh 想了道不错的 1A，然而后来因为树太多就换掉了..</p><p>然后 PinkRabbit 加入了团队，把 Pictures 切掉了（其实花了 2h…只不过比赛和出题还是不一样的，应该有不少人 A？）。</p><p>之后莫名想到了 2A 的 idea，只不过题面一开始不是 upvote / downvote，是幼儿园里老师给小朋友发两种类型的糖果..后来感觉出 cf 用 upvote / downvote 挺合适的。</p><p>“我们这场要有交互题！” 我在群里喊出这句话，然后没过几天我就在洗澡的时候想到了 <del>1D —— Binary Tree。一开始我还加了个它是堆的限制，过了几个月才想到可以 BFS…树剖的做法是 Sooke 想到的，之前我差点想用我的 nsqrtn 做 std。</del>这道题是这样的，有一棵以 $1$ 为根的二叉树，你可以询问两点间距离，在 $n\log n$ 次询问内求每个点的父亲。</p><p>然后 ylh 想了个 1B，结果最后也没有被采用 qaq</p><p>这样六道题就齐了，然而果然还是不想出 div.2 only 鸭…到处找人要题没要到（包括后来出了<del>两</del>一题的 lk..），结果 lk 跟我说 lxl 可以出题。然后就有了 <del>1F</del>1E。lxl 说要自己写题面，然而一直咕了几个月都没写..</p><p>然后..当时我们的想法是出五题场，把 pictures / binary tree 放 div.1，差点都提交 proposal 了，然而我还是觉得 1B 得换..</p><p>然后，我去了雅礼集训，和 lk 面基了，<del>就有了 1E —— GCD。一开始 GCD 是没有根号不带 log 做法的，可 lxl 问了 ccz，就有了。</del></p><p>然后 Sooke 出了一道 dl 的博弈论，我不太喜欢，然而一开始还是让它过了..最后还是给换了 qaq</p><p>后来 lk 出了 2C（一开始手牌和牌堆的牌不一定相等，我不会做，就改成了相等..），Sooke 拿出了 2D，这场就有了。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>一开始我们还想抢 round 555 的（受 vfk 250 的影响 qaq）..</p><p>给 300iq 发了个私信，问什么时候能审，能不能抢 555。然后..</p><img src="/bad-round-与出题人的坚守/pm.png"><p>一开始还以为可以的，结果发现第一条才是真的，第二条是假的..（注意 cf 私信顺序从下往上）</p><p>我们之前出题的时候就几乎把 <a href="https://polygon.codeforces.com/" target="_blank" rel="noopener">Polygon</a> 上要干的事干完了，然而，Aleph0（round 551 出题人）发来了一份 cf 出题须知（不知道是不是 vfk 博客里提到那个长篇英语阅读..），然后发现一堆东西要改..只不过一两天也就改完了。最大的问题是数据要么纯手造要么用 generator，即不能用数据生成器生成出来放 Polygon 上..我自己造的数据还好，lxl 的数据 generator 的参数已经弄丢了，<del>而且lxl 又特别咕</del>。</p><p>听说 300iq 有 qq，所以就试着加了一下 300iq，拉进了群里。</p><p>然后是 300iq 开始审（gu）题（gu），题目比较顺利地全过审了，（然而断断续续的等了好几天），binary tree 获得了 “Great problem!” 的评价。得知必须放 Java 过，然而不需要让 Java 在一半时限内通过（尤指 GCD 这题，不然卡不掉带 log 做法了…），还是比较可以接受的..</p><p>300iq 好像有验不完的题和无尽的 coordinating，所以经常失踪..<del>contribution 只排第七举报了。</del></p><p>决定比赛时间真是件难事..从一开始的 round 555 抢不到，到 5.18 是 APIO &amp; 俄罗斯最后一轮国家队选拔（这俩是一个东西..），再到 5.21 ~ 5.26 得放弃 whk / sc 选手，然后 6.8 和 Google Code Jam 冲突，6 月一堆 whk 考试，7 月不仅太晚还有 ISIJ，NOI……无论选什么时间都会放弃一部分人，<font color="white">就像某部门决定调整某些政策一样。</font></p><p>最后还是端午节拯救世界..大家好像都比较同意 6.7。</p><p>从北京回来的高铁上，突然看到 Sooke 在群里“A big hug to 300iq!”</p><p>诶诶诶，上 contests 了！</p><p>诶诶诶，之前开玩笑说的 0x233 真来了！</p><p>于是想搞个什么宣传一下。</p><p>想了想感觉雀不错，就 p 了张图：</p><img src="/bad-round-与出题人的坚守/poster.jpg"><p>结果最后还是插进来一场 Div.2 … 0x233 没了…</p><p>lxl 自己说要写题面，咕了两个多月，终于：</p><img src="/bad-round-与出题人的坚守/bxlb.png"><p>然后 xht37 和神仙 rushcheyo 都来验题了。听说所有题都被 rushcheyo 秒了..</p><h2 id="风怒"><a href="#风怒" class="headerlink" title="风怒"></a>风怒</h2><p>Round #0x233 开始了。</p><p>Sooke：这个 <a href="https://codeforces.com/problemset/problem/1174/F" target="_blank" rel="noopener">F</a> 也是树上问距离诶。</p><p>我：好像和 WC2018 即时战略有点像？</p><p>再一看..<del>非常冷静地</del>在群里宣布，我们的 1D binary tree 没了。</p><p>UPD：Binary Tree 已上传至 <a href="https://guoj.icu/problem/1210" target="_blank" rel="noopener">GuOJ</a> 和 <a href="https://loj.ac/problem/6669" target="_blank" rel="noopener">LOJ</a>。</p><p>二叉树被替换为了操作二，剩下的部分和我们题的做法完全一样——树剖。</p><p>感觉挺难受的..赛前四天撞题谁顶得住啊。而且我自己挺喜欢这题的，感觉做法非常巧妙。而且我们的题不给出树的形态，有的做法只能过那道题，不能过我们这题。</p><p>只不过 Sooke 之前就提过 Portals 这道题，于是就想换成 Portals。</p><p>一波未平，一波又起。</p><p>cy：这个 GCD 好像和一场中国比赛有点像。</p><p>然后扔上来一篇题解，求的东西不一样，但做法大同小异。</p><p>ok，风怒撞题。</p><p>然后群里就各种方案了..</p><p>cy 扔上来了四道题..</p><p>lk：我去找 _rqy 要一道计数！</p><p>lxl：第十一分块！</p><p>于此同时，我们发现 Portals 原来想的做法是假的，给 300iq 也没能切掉..</p><p>当时有点想出五题场，或者强行把 GCD 出出来，毕竟不完全一样。</p><p>只不过好消息还是传来了，Sooke 想到了 Portals 的正解，Bug（<del>其实我现在想换这题名字了，还是 modadd 好听</del>）的分块做法和线段树做法也相继有了。</p><p>然后，经过讨论，我们<del>不知道为什么</del>觉得换题之后码量比原来减少了，结果就决定把时间改成 2h。</p><p>lk 坚持认为 portals 是一道非常难的题。cy 给 portals 的评分比 1EF 都高。最后还是放在了 1D。<del>然后赛后被喷 PJ 题放 1D。</del>最后每题 AC 人数还是单调下降的，<del>说明题目顺序安排的没有任何问题。</del>关于 cards 和 circle，我们是认为对于 div.2 选手 circle 更难，而 div.1 选手顺切无所谓，所以就这样放了。而且 circle 更简单也可能是对于中国选手。<del>而且我们这场每个偶数题都比前一题好写。</del></p><p>因为 cy 把 lxl 题切了，modadd 做了比较久，而且 lxl 和 300iq 都认为 modadd 更难，而且我看了题解之后会做 lxl 题不会 modadd，所以就把 modadd 放在了 F。</p><p>于是比赛的题目得到了最终的确定，也就是大家看到的这几题。</p><p>然后就是紧张的造题了。</p><p>写 modadd 题面里的伪代码时，去网上搜了半天，终于搞出来了一份特别丑的..然后想起来 3 LGM 那场 Chinese Round 的 G 有伪代码，就去找象要，结果没要到..自己研究了半天文档还是不会，就去找 zzq 要，然后顺利要到了。</p><p>由于自己本来就菜，又被长期的睡眠不足 + 极度紧张的造题给降智，我看了半天 cy 写的 modadd 题解都不会做..然后我要在不会做的情况下造数据..就胡乱造了一点。只不过这题就算纯随机应该也够强。</p><p>本来 lxl 题的数据也是个大问题，我自己是个链菊花随机完全二叉树出题人，lxl 又是只鸽子..幸好 300iq 帮忙造了一点数据，把 Spaly（单旋）也卡掉了。</p><p>大约在比赛前 2h，基本上所有东西都造完了。然后，KAN 突然在赛前 1h 出现，<del>删掉了一堆题面里的逗号</del>，提了一堆题面的 Issues..然后就不停修锅，差点都忘记发 scoring distribution 了。</p><p>赛前 5min 的时候终于把 KAN 提的所有 Issues fix 了..</p><p>为了连贯性先讲了下造题的事。</p><p>然后是上帝视角..其实其它权限都没怎么用，只不过 ban 掉了 xht37 参加比赛（</p><p><del>只不过有的选项看着很爽</del>，比如，一开始 problems 是空的你可以 add problems（最后是 300iq 还是谁加的，那时我还在修锅），还有喜闻乐见的 Is it rated? 选项，rated 范围，能否查看排行榜，什么时候开始封榜，能不能 vp。</p><p>赛前在造锅和修锅之余，也会盯着 registrants 看。然后就看到 JOHNKRAM 报了，司报了，xyx 报了，myy 报了，ACRush 报了，_rqy 报了，txc 报了，Radewoosh 报了，<del>800iq 报了</del>，dmy 报了，kcz 报了，yyb 报了，ljh 报了，wqy 报了，yww 报了……群里大约就是上文去掉逗号，加上换行符和感叹号。</p><p>最后倒计时的时候真的就像 vfk 那篇博客一样。</p><p>还有 5 秒。</p><p>题面有锅吗？</p><p>还有 4 秒。</p><p>数据有锅吗？</p><p>还有 3 秒。</p><p>题面或者数据有锅吗？</p><p>还有 2 秒。</p><p>题面和数据有锅吗？</p><p>还有 1 秒。</p><p>有锅也修不了了，<del>contribution 见鬼去吧！</del></p><p>…..</p><p>没办法，赛前 5min 还在修锅的我就是这么想的..只不过最后除了 circle 的样例解释没什么锅。</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>比赛就这么开始了。cf 并没有卡诶。</p><p>Div.1 怎么卡住了..</p><p>完了，史上最难 1A 实锤了..</p><p>6min 的时候终于有人过了 1A，div.2 那边已经成片过 A 了。</p><p>然后第二个 div.1 AC 是 B..完了，要被喷 swap(A, B) 了。</p><p>25min 的时候有人过 1D 了。赛前我就奶过 portals 一血会比 pictures 早，lk 还不信。</p><p>然后我们就看着司登顶之后一点点地往下掉..</p><p>赛时真的可以看 system test 的结果，只不过评测优先度比较低。在 problems 界面还可以看到每题已经测了几个人的 st，其中有多少个过了。成功让 Sooke 学到了再强的 pt 也会有人 fst 这个道理。</p><p>当然我们还得回答参赛者的提问。</p><blockquote><p>what mean is the draw the top card from the pile?</p><p>意思是 可以在最顶上的一张画画？</p></blockquote><p>海星，是不是可以画数字上去。</p><blockquote><p>In Test 1</p><p>why is the output:</p><p>2</p><p>1 1</p><p>2 1</p><p>is wrong?</p><p>I think it is legitimate.</p></blockquote><p>一看评测记录，他第一行输出的 1，悲惨的故事。</p><p>问的最多的是 pictures 权值减到负怎么办..于是让 300iq 发了个 announcement。</p><p>还有一位坚称 cards 样例 3 答案是 16 的老哥，好像是在手上把牌排好序了。</p><blockquote><p>Hi! I am a Chinese! Could you explain why there is a “19****17” in the sample 3?</p></blockquote><p>回答分为 text，yes，no 和 no comments，正好可以回答他。</p><blockquote><p>problem D in the example the edges for bad permutation are drawn incorrectly</p></blockquote><p>嗯，额，诶？？woc 真的画错了..打开本地造 notes 的 pptx，发现是对的..这个锅 Sooke 背了。</p><p>赶紧让 300iq 发了个 announcement，然后去修锅。</p><p>修好了之后让 300iq 发个 fixed，结果一直没发..</p><p>然后看到司在猛肝 1F..然后听群友们说，他写的是 1 log 正解，被卡常了..woc，那不是得去谢罪，卡分块把 treap 卡掉了..但我们不能做什么，只能为他默哀。后来才听说司写的 $\log^2$..</p><p>300iq：check it out，<a href="https://codeforces.com/contest/1172/submission/55260499" target="_blank" rel="noopener">https://codeforces.com/contest/1172/submission/55260499</a> 。</p><p>然后之后半个小时几乎都在尝试卡他..然而根本卡不掉..赛后私信问他，也没太看懂他的做法，只不过他说他相信这个做法是对的..</p><p>然后在迷迷糊糊的看榜，回答问题，尝试卡人中，2h 就这么过去了。</p><p>dmy 被我们送上黑红了，然而好多神仙被狙了..</p><p>1F 的英文题解还没好..contribution 要没了。</p><p>果然比赛结束 announcement 的 up 就开始往下掉，只不过没掉很多。</p><p>有位神仙 hack 了 cards，而且是 hack 了过了 st 的..之后我才发现，我之前没意识到不打空白牌可能步数比求那个 max 还大，他的 test 就是针对这个卡的，如果你发现能直接 1~n 就输出答案就过了，如果把两者取 min 就挂了。</p><p>然后开始弄中文题解。hexo 博客折叠块总是漏掉百分号，漏掉引号，搞了半个多小时才搞好..</p><p>搞了一整天，整个人都非常晕，然而这时我要尝试去写自己还不完全会的 1F 的英文题解..写到一半还是放弃了，就去发 editorial，先把 1F 空着了。</p><p>之后 300iq 同意帮忙写题解，就去睡觉了。</p><p>自我感觉 good problems, bad round。如果能不强求在原定的端午节把比赛出出来，或许能办的更好。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>出这场 cf，究竟是为了什么。</p><p>肯定不是为了钱。虽然 cf 会发工资，但要是为了钱，我肯定不会去出 cf，要耗费的时间精力太多了。</p><p>真的不推荐其他人在退役之前去出 cf，不然的话，可能出着出着就退役了。</p><p>把这么多本可以用来刷题的时间用来出 cf，后悔吗？</p><p>其实，也是一份宝贵的经历吧。与其说后悔，不如说害怕自己的努力不被人认可，如果数百小时的努力换来的是他人的批评甚至 unrated，可能就真的不只是后悔了。</p><p>出这场 cf，我得到了什么呢？</p><p>以往的团队合作中，我要么是作为参与者而非组织者，要么其他成员都只是默默完成自己的任务。而且所谓的“团队合作”多半是学校里所谓的“研究性学习”。要统一各方面的意见，的确是一件难事。一开始面对“fst 是 cf 灵魂”的 Sooke（看来他负责的 cards 挺有灵魂的…），然后是“我一眼就切了”和“我想不到啊”的 lk，“来道大分块啊” 的 lxl，还有自说自话，不对自己说的话里提到的概念加以定义或解释，让人根本看不懂的 cy。协调各方的意见可能是一件需要学习的事情吧。</p><p>然后的话，也是影响比较大的，我对题目和出题人的要求提升了很多。回首自己之前在洛谷的两场公开赛，第一场漏洞满篇，<del>满屏毒瘤</del>，第二场也有不少的问题。出了 cf 之后，不仅是自己出题变得更加规范了，对自己做的题要求也更严了。国内很多题目质量堪忧，因为题目的外在（题面、题解、数据范围、输入输出格式）而非 idea 本身过于毒瘤而不想做题的事也会发生，抱怨其他题目、比赛成了家常便饭。但回首想来，我也是从一个毒瘤大模拟、无意义 dp 出题人成长起来的。</p><p>我讨厌不用心的出题人，讨厌不严谨甚至误导人的博客，因为，我认为出题给别人做、写博客给别人看是应当对别人负责的。如果没有精力、不想负责的话，出题给自己做，博客保存在本地就好了，发出来干什么？即使是能力不够，也得有认真负责的态度才行。如果没有，别人骂你，只当骂醒好了。如果骂不醒，那着实该骂。</p><blockquote><p>一道好题应该被仔细推敲过。好题应该有很强的数据，好题应该有清晰的题面，好题的标程应该优美题解应该详尽。</p><p>一道好题不应该是两道题拼在一起，一道好题会有自己的idea —— 而它应该不加过多包装地突出这个idea。</p><p>一道好题应该新颖。真正的好题，应该是能让人脑洞出新的好题的好题。</p><p>一道好题应该具有它的选拔性质，具有足够的区分度。应该至少4档部分分，让新手可以拿到分，让高手能够展示自己的实力。</p><p>—— vfk《<a href="http://vfleaking.blog.uoj.ac/blog/909" target="_blank" rel="noopener">UOJ精神之源流</a>》</p></blockquote><p>当我指出其他人题目里的种种不足，当我抛开他人博客中不严谨的话语而豁然开朗大叫原文之漏洞满篇时，有没有想过他人付出的心血呢？当然有，只是我认为尊重不是基于付出，而是基于负责的态度，基于真正做了什么的。就好比你追一个女孩子，辛辛苦苦付出了那么多，如果不提升自己，如果不付出真心，别人凭什么喜欢你？</p><p>说到底，对写给别人的东西负责，是我自己的一种坚守，我自己并不是总能做到，也不是生来就能做到。但我会努力去做，无论在怎样的大环境下，我想尽我所能创造一片小小的净土。</p><blockquote><p>我们所可以自慰的，想来想去，也还是所谓对于将来的希望。希望是附丽于存在的，有存在，便有希望，有希望，便是光明。如果历史家的话不是诳话，则世界上的事物可还没有因为黑暗而长存的先例。黑暗只能附丽于渐就灭亡的事物，一灭亡，黑暗也就一同灭亡了，它不永久。然而将来是永远要有的，并且总要光明起来;只要不做黑暗的附着物，为光明而灭亡，则我们一定有悠久的将来，而且一定是光明的将来。</p><p>—— 鲁迅《记谈话》（十二省联考 2019 hope 题解）</p></blockquote><p>说回这场 cf，我按照 cf 出题规范去出题，一遍遍地检查，直接原因当然是 cf 是如此要求的。但我这么去做，绝不只是为了过审，而是为了上千名参赛者，我认为我有理由以认真负责的态度，准备一场好的 cf，呈现给大家 —— 当然也包括正在读着这篇博客的你。</p><p>现在我也能够体会到 vfk 当时写《UOJ精神之源流》时的心情了。执著的坚守与残酷现实的矛盾，出题人与参赛者的隔阂，心中交杂的歉意与不甘……无论这场 cf 是否让你满意，我想，我做到了我应该做的，仍然走在自己一直坚持的那条路上。</p><p>尽管发生了一些意外，或许这场 cf 并不让你满意，但我认为，I did my best.</p><p>附：<a href="https://docs.google.com/document/d/e/2PACX-1vRhazTXxSdj7JEIC7dp-nOWcUFiY8bXi9lLju-k6vVMKf4IiBmweJoOAMI-ZEZxatXF08I9wMOQpMqC/pub" target="_blank" rel="noopener">cf 出题须知</a></p><img src="/bad-round-与出题人的坚守/rules.jpg"><h2 id="after-后记"><a href="#after-后记" class="headerlink" title="after 后记"></a>after 后记</h2><p>CF 的工资大约咕了一个月。</p><p>付款方式千万不要选 PayPal。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;等你等了五千年，只为这一刹那的回眸一笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话作为台前幕后的标准开头应该是没问题的。&lt;/p&gt;
&lt;p&gt;只不过果然还是写不出 vfk 的水平啊…写的比较散乱。而且是前后断断续续地写的，有的写于赛前，有的写于赛后，所以会有行文不连贯的地方，可能也会有后来忘记修正的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="出题" scheme="https://ouuan.github.io/categories/%E5%87%BA%E9%A2%98/"/>
    
    
      <category term="Codeforces" scheme="https://ouuan.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #564 中文题解</title>
    <link href="https://ouuan.github.io/Codeforces-Round-564-%E4%B8%AD%E6%96%87%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/Codeforces-Round-564-中文题解/</id>
    <published>2019-06-07T14:38:47.000Z</published>
    <updated>2019-08-05T15:06:05.612Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/bad-round-与出题人的坚守">台前幕后</a></p><p><a href="https://codeforces.com/contest/1172" target="_blank" rel="noopener">contest on CF</a></p><a id="more"></a><h1 id="2A-Nauuo-and-Votes"><a href="#2A-Nauuo-and-Votes" class="headerlink" title="2A Nauuo and Votes"></a><a href="https://codeforces.com/problemset/problem/1173/A" target="_blank" rel="noopener">2A Nauuo and Votes</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>$x$ 个人 upvote，$y$ 个人 downvote，$z$ 个人随机 upvote / downvote，问最后总计 up 的多 / down 的多 / up = down / 结果不确定。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>考虑两种极端情况：</p><ol><li>所有随机投的人都 upvote。</li><li>所有随机投的人都 downvote。</li></ol><p>如果这两种情况结果一样，结果就是答案；否则结果不确定。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> result[<span class="number">4</span>] = &#123;<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'0'</span>, <span class="string">'?'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == y ? <span class="number">2</span> : x &lt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result[solve(x + z, y) == solve(x, y + z) ? solve(x, y) : <span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="2B-Nauuo-and-Chess"><a href="#2B-Nauuo-and-Chess" class="headerlink" title="2B Nauuo and Chess"></a><a href="https://codeforces.com/problemset/problem/1173/B" target="_blank" rel="noopener">2B Nauuo and Chess</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>在一个 $m\times m$ 的棋盘上放 $n$ 颗棋子，第 $i$ 颗棋子的坐标为 $(r_i,c_i)$，需要满足 $|r_i-r_j|+|c_i-c_j|\ge|i-j|$，求 $m$ 的最小值以及任意一种摆放方案。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><ol><li><p>$m\ge\left\lfloor\frac n 2\right\rfloor+1$</p><p>$\because\begin{cases}|r_1-r_n|+|c_1-c_n|\ge n-1\|r_1-r_n|\le m-1\|c_1-c_n|\le m-1\end{cases}$</p><p>$\therefore m-1+m-1\ge n-1$</p><p>$\therefore m\ge\frac{n+1}2$</p><p>$\because m\text{是整数}$</p><p>$\therefore m\ge\left\lfloor\frac n 2\right\rfloor+1$</p></li><li><p>$m$ 可以取到 $\left\lfloor\frac n 2\right\rfloor+1$</p><p>在每一斜行放一颗棋子即可，即：$r_i+c_i=i+1$。因为 $|r_i-r_j|+|c_i-c_j|\ge|r_i+c_i-r_j-c_j|$。</p></li></ol></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, ans;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    ans = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= ans; ++i) <span class="built_in">printf</span>(<span class="string">"\n%d 1"</span>, i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n - ans + <span class="number">1</span>; ++i) <span class="built_in">printf</span>(<span class="string">"\n%d %d"</span>, ans, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1A-Nauuo-and-Cards"><a href="#1A-Nauuo-and-Cards" class="headerlink" title="1A Nauuo and Cards"></a><a href="https://codeforces.com/problemset/problem/1172/A" target="_blank" rel="noopener">1A Nauuo and Cards</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>$n$ 张带标号的牌和 $n$ 张空白牌，$n$ 张在手上剩下在牌堆里（牌堆有序），每次可以从手上选一张牌放牌堆底部并从牌堆顶部抽一张牌，需要使牌堆从上到下递增地放 $1$ ~ $n$，求最小操作数。</p><p>$1\le n\le2\times10^5$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>首先尝试不打空白牌能否直接完成。如果能就是最优解，否则最优解一定是先打若干空白牌然后再也不打空白牌。计 $p_i$ 为 $i$ 在牌堆的初始位置（初始在手上为 $0$），那么答案为 $\max\limits_{i = 1}^n(p_i - i + 1 + n)$（每张牌最早在第 $p_i + 1$ 张被打出，还要打 $n-i$ 张）。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], p[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        p[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">        p[b[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; p[i] == p[<span class="number">1</span>] + i - <span class="number">1</span>; ++i);</span><br><span class="line">        <span class="keyword">if</span> (p[i - <span class="number">1</span>] == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt;= n &amp;&amp; p[j] &lt;= j - i; ++j);</span><br><span class="line">            <span class="keyword">if</span> (j &gt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - i + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) ans = max(ans, p[i] - i + <span class="number">1</span> + n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1B-Nauuo-and-Circle"><a href="#1B-Nauuo-and-Circle" class="headerlink" title="1B Nauuo and Circle"></a><a href="https://codeforces.com/problemset/problem/1172/B" target="_blank" rel="noopener">1B Nauuo and Circle</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>圆上画一 $n$ 点树，树给定，边要求直而不交，画法与排列一一对应，求方案数。</p><p>$2\le n\le 2\times10^5$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>首先，如果选一个根使其变为有根树，可以发现每棵子树一定在一段连续的弧上。</p><p>考虑 DP，令 $f_u$ 为子树 $u$ 方案数，那么 $f_u=(|son(u)| + [u\ne root])!\prod\limits_{v\in son(u)}f_v$，$ans = nf_{root}​$。（先固定根的位置，每棵子树要为儿子排位置，如果非根自己也要参与排位置，然后再画子树。）</p><p>事实上不需要 DP，答案为每个点的度数阶乘之积乘上 $n​$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans, d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, u, v;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    ans = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        ans = (ll) ans * (++d[u]) % mod * (++d[v]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1C-Nauuo-and-Pictures"><a href="#1C-Nauuo-and-Pictures" class="headerlink" title="1C Nauuo and Pictures"></a><a href="https://codeforces.com/problemset/problem/1172/C2" target="_blank" rel="noopener">1C Nauuo and Pictures</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>给你一个长度为 $n$ 的数列 $w_{1..n}$，其中有一些位置是”被喜欢的”，其它位置是“不被喜欢的”，进行 $m$ 次操作，每次随机选一个数，选到第 $i$ 个数的概率是 $\frac{w_i}{\sum_{j=1}^nw_j}$，如果选到一个“被喜欢的”位置，就会把这个位置上的数加一，否则减一。问 $m$ 次操作过后每个数的期望值，对 $998244353$ 取模。</p><p>$1\le n\le2\times 10^5$，$1\le m\le3000$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p><strong>裸dp</strong></p><p>先只看一个“被喜欢的”位置，这个位置的初始值是 $w$。</p><p>计 $SA$ 为“被喜欢的”数之和，$SB$ 为“不被喜欢的”数之和。</p><p>令 $f_w[i][j][k]$ 表示：现在 $SA=j$，$SB=k$，一个值为 $w$ 、“被喜欢的”位置经过 $i$ 次操作后的期望值。</p><p>边界情况：$f_w[0][j][k]=w$。</p><p>转移：</p><ol><li>下一次操作选到了当前这个位置。概率：$\frac w{j+k}$。转移到：$f_{w+1}[i-1][j+1][k]$。</li><li>下一次操作选到了另一个“被喜欢的”位置。概率：$\frac{j-w}{j+k}$。转移到：$f_w[i-1][j+1][k]$。</li><li>下一次操作选到了一个“不被喜欢的”位置。概率：$\frac k{j+k}$。转移到：$f_w[i-1][j][k-1]$。</li></ol><p>所以，$f_w[i][j][k]=\frac w{j+k}f_{w+1}[i-1][j+1][k]+\frac{j-w}{j+k}f_w[i-1][j+1][k]+\frac k{j+k}f_w[i-1][j][k-1]​$。</p><p>令 $g_w[i][j][k]$ 表示“不被喜欢的”的对应状态，计算方式类似。</p><p>这样大约能过简单版。</p><p><strong>优化</strong></p><p>有两个优化：</p><ol><li><p>$f_w[i][j][k]=wf_1[i][j][k]$</p><p>证明：</p><p>$i=0$ 时显然成立。</p><p>假设已经证明了 $f_w[i-1][j][k]=wf_1[i-1][j][k]$，就可以归纳地证明 $f_w[i][j][k]=wf_1[i][j][k]$：</p><p>$\begin{aligned}f_1[i][j][k]&amp;=\frac 1{j+k}f_2[i-1][j+1][k]+\frac{j-1}{j+k}f_1[i-1][j+1][k]+\frac k{j+k}f_1[i-1][j][k-1]\\&amp;=\frac2{j+k}f_1[i-1][j+1][k]+\frac{j-1}{j+k}f_1[i-1][j+1][k]+\frac k{j+k}f_1[i-1][j][k-1]\\&amp;=\frac{j+1}{j+k}f_1[i-1][j+1][k]+\frac k{j+k}f_1[i-1][j][k-1]\end{aligned}$</p><p>$\begin{aligned}f_w[i][j][k]&amp;=\frac w{j+k}f_{w+1}[i-1][j+1][k]+\frac{j-w}{j+k}f_w[i-1][j+1][k]+\frac k{j+k}f_w[i-1][j][k-1]\\&amp;=\frac{w(w+1)}{j+k}f_1[i-1][j+1][k]+\frac{w(j-w)}{j+k}f_1[i-1][j+1][k]+\frac {wk}{j+k}f_1[i-1][j][k-1]\\&amp;=\frac{w(j+1)}{j+k}f_1[i-1][j+1][k]+\frac {wk}{j+k}f_1[i-1][j][k-1]\\&amp;=wf_1[i][j][k]\end{aligned}$</p><p>还有一个比较简单但不那么严谨的理解方式：每一步期望的增量都与期望成正比。（这里被 _rqy 喷了，出题人就是菜，这个证明写不严谨。）</p><p>这样的话就只用计算 $f_1[i][j][k]$ 了。</p></li><li><p>注意到 $i,\,j,\,k,\,m$ 有一些联系。实际上可以令 $f’_w[i][j]$ 表示 $f_w[m-i-j][SA+i][SB-j]$（这里的 $SA$ 和 $SB$ 都是未操作时的初始值）。</p></li></ol><p>令 $g’_1[i][j]$ 表示 $g_w[m-i-j][SA+i][SB-j]$，计算方式类似。</p><p><strong>总结</strong></p><p>$f’_1[i][j]=1 (i+j=m)$</p><p>$f’_1[i][j]=\frac{SA+i+1}{SA+SB+i-j}f’_1[i+1][j]+\frac{SB-j}{SA+SB+i-j}f’_1[i][j+1] (i+j&lt;m)$</p><p>$g’_1[i][j]=1 (i+j=m)$</p><p>$g’_1[i][j]=\frac{SA+i}{SA+SB+i-j}g’_1[i+1][j]+\frac{SB-j-1}{SA+SB+i-j}g’_1[i][j+1] (i+j&lt;m)$</p><p>“被喜欢的”位置答案是 $w_if’_1[0][0]$，“不被喜欢的”位置答案是 $w_ig’_1[0][0]$。</p><p>如果每次去算逆元就是 $\mathcal O(n+m^2\log p)$，预处理出来就是 $\mathcal O(n+m^2+m\log p)$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">3010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//calculate the modular multiplicative inverse</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], w[N], f[M][M], g[M][M], inv[M &lt;&lt; <span class="number">1</span>], sum[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</span><br><span class="line">        sum[a[i]] += w[i];</span><br><span class="line">        sum[<span class="number">2</span>] += w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = max(<span class="number">0</span>, m - sum[<span class="number">0</span>]); i &lt;= <span class="number">2</span> * m; ++i) inv[i] = qpow(sum[<span class="number">2</span>] + i - m, mod - <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = m; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i][m - i] = g[i][m - i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = min(m - i - <span class="number">1</span>, sum[<span class="number">0</span>]); j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = ((ll) (sum[<span class="number">1</span>] + i + <span class="number">1</span>) * f[i + <span class="number">1</span>][j] + (ll) (sum[<span class="number">0</span>] - j) * f[i][j + <span class="number">1</span>]) % mod * inv[i - j + m] % mod;</span><br><span class="line">            g[i][j] = ((ll) (sum[<span class="number">1</span>] + i) * g[i + <span class="number">1</span>][j] + (ll) (sum[<span class="number">0</span>] - j - <span class="number">1</span>) * g[i][j + <span class="number">1</span>]) % mod * inv[i - j + m] % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">int</span>((ll) w[i] * (a[i] ? f[<span class="number">0</span>][<span class="number">0</span>] : g[<span class="number">0</span>][<span class="number">0</span>]) % mod));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1D-Nauuo-and-Portals"><a href="#1D-Nauuo-and-Portals" class="headerlink" title="1D Nauuo and Portals"></a><a href="https://codeforces.com/problemset/problem/1172/D" target="_blank" rel="noopener">1D Nauuo and Portals</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>在一个 $n\times n$ 的网格里放传送门，指定从第 $i$ 行进从第 $r_i$ 行出，从第 $i$ 列进从第 $c_i$ 列出，$r_{1..n}$ 和 $c_{1..n}$ 都是排列，求方案。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>考虑一个 $n*n$ 的问题如何转化成 $(n-1)\times(n-1)$：满足第一行和第一列。</p><p>如果已经满足直接变成 $(n-1)\times(n-1)$。</p><p>否则找到第一行中应该放在第一列那个和第一列中应该放在第一行那个，这两个位置各放一个传送门即可。</p><p>这题可以 $\mathcal O(n)$ 做，但 checker 要 $\mathcal O(n^2)$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Portal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, p, q;</span><br><span class="line">    Portal(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _p, <span class="keyword">int</span> _q): x(_x), y(_y), p(_p), q(_q) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Portal&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n, a[N], b[N], c[N], d[N], ra[N], rb[N], rc[N], rd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line">        rb[b[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        ra[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) c[i] = d[i] = rc[i] = rd[i] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i] == ra[i] &amp;&amp; d[i] == rb[i]) <span class="keyword">continue</span>;</span><br><span class="line">        ans.push_back(Portal(i, rc[ra[i]], rd[rb[i]], i));</span><br><span class="line">        <span class="keyword">int</span> t1 = c[i];</span><br><span class="line">        <span class="keyword">int</span> t2 = d[i];</span><br><span class="line">        swap(c[i], c[rc[ra[i]]]);</span><br><span class="line">        swap(d[i], d[rd[rb[i]]]);</span><br><span class="line">        swap(rc[ra[i]], rc[t1]);</span><br><span class="line">        swap(rd[rb[i]], rd[t2]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> k : ans) <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>, k.x, k.y, k.p, k.q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1E-Nauuo-and-ODT"><a href="#1E-Nauuo-and-ODT" class="headerlink" title="1E Nauuo and ODT"></a><a href="https://codeforces.com/problemset/problem/1172/E" target="_blank" rel="noopener">1E Nauuo and ODT</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p>给你一棵 $n$ 个点，点有颜色的树。一条简单路径的权值是其上颜色数，求所有简单路径的权值之和（路径有序，即 $u\rightarrow v$ 和 $v\rightarrow u$ 算两条）。带修，$m$ 次单点颜色修改，每修改一次输出一次。</p><p>$n,m\le 4\times10^5$，$7.5s$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>对每种颜色分别考虑不含该颜色的简单路径条数。</p><p>令当前处理的颜色为 $c$，把颜色为 $c$ 的视为白色，不是 $c$ 的视为黑色，那么不含 $c$ 的路径条数就是每个黑联通块的大小的平方和，修改就是当颜色是 $c$ $\leftrightarrow$ 颜色不是 $c$ 时翻转一个点的颜色。所以，问题转化成了黑白两色的树，单点翻转颜色，维护黑联通块大小的平方和。这个转化后的问题可以用很多数据结构做，比如：<del>lxl：top tree 随便维护</del>。这篇题解里使用 Link/cut Tree.</p><p>对每个点维护子树大小，儿子大小平方和，在 link/cut 的时候更新答案即可。有一个<del>大家熟知的</del> trick，就是每个黑点向父亲连边，这样真正的联通块就是 Link/cut Tree 里的联通块删掉根。</p><p>具体看图吧，图讲的挺清楚的：</p><p><img src="/Codeforces-Round-564-中文题解/tutorial1.png"></p><p><img src="/Codeforces-Round-564-中文题解/tutorial2.png"></p><p><img src="/Codeforces-Round-564-中文题解/tutorial3.png"></p><p>LCT 的部分就是这样，计算答案的时候先初始化一个全是黑点的树，离线处理每个颜色，处理完一个颜色反着改回去。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa, ch[<span class="number">2</span>], siz, sizi;</span><br><span class="line">    ll siz2i;</span><br><span class="line">    <span class="function">ll <span class="title">siz2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (ll) siz * siz; &#125;</span><br><span class="line">&#125; t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"><span class="keyword">int</span> n, m, c[N], f[N];</span><br><span class="line">ll ans, delta[N];</span><br><span class="line"><span class="keyword">bool</span> bw[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mod[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, u, v;</span><br><span class="line">    ll last;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, c + i);</span><br><span class="line">        mod[c[i]][<span class="number">0</span>].push_back(i);</span><br><span class="line">        mod[c[i]][<span class="number">1</span>].push_back(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) t[i].siz = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v);</span><br><span class="line">        add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        mod[c[u]][<span class="number">0</span>].push_back(u);</span><br><span class="line">        mod[c[u]][<span class="number">1</span>].push_back(i);</span><br><span class="line">        c[u] = v;</span><br><span class="line">        mod[v][<span class="number">0</span>].push_back(u);</span><br><span class="line">        mod[v][<span class="number">1</span>].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) link(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mod[i][<span class="number">0</span>].size())</span><br><span class="line">        &#123;</span><br><span class="line">            delta[<span class="number">0</span>] += (ll)n * n;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mod[i][<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            delta[<span class="number">0</span>] += (ll)n * n;</span><br><span class="line">            last = (ll)n * n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; mod[i][<span class="number">0</span>].size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            u = mod[i][<span class="number">0</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (bw[u] ^= <span class="number">1</span>) cut(u);</span><br><span class="line">            <span class="keyword">else</span> link(u);</span><br><span class="line">            <span class="keyword">if</span> (j == mod[i][<span class="number">0</span>].size() - <span class="number">1</span> || mod[i][<span class="number">1</span>][j + <span class="number">1</span>] != mod[i][<span class="number">1</span>][j])</span><br><span class="line">            &#123;</span><br><span class="line">                delta[mod[i][<span class="number">1</span>][j]] += ans - last;</span><br><span class="line">                last = ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j = mod[i][<span class="number">0</span>].size() - <span class="number">1</span>; ~j; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            u = mod[i][<span class="number">0</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (bw[u] ^= <span class="number">1</span>) cut(u);</span><br><span class="line">            <span class="keyword">else</span> link(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = (ll) n * n * n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans -= delta[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d "</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == t[t[x].fa].ch[<span class="number">0</span>] || x == t[t[x].fa].ch[<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = t[x].fa;</span><br><span class="line">    <span class="keyword">int</span> z = t[y].fa;</span><br><span class="line">    <span class="keyword">int</span> k = x == t[y].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (nroot(y)) t[z].ch[y == t[z].ch[<span class="number">1</span>]] = x;</span><br><span class="line">    t[x].fa = z;</span><br><span class="line">    t[y].ch[k] = t[x].ch[k ^ <span class="number">1</span>];</span><br><span class="line">    t[t[x].ch[k ^ <span class="number">1</span>]].fa = y;</span><br><span class="line">    t[x].ch[k ^ <span class="number">1</span>] = y;</span><br><span class="line">    t[y].fa = x;</span><br><span class="line">    pushup(y);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (nroot(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = t[x].fa;</span><br><span class="line">        <span class="keyword">int</span> z = t[y].fa;</span><br><span class="line">        <span class="keyword">if</span> (nroot(y)) (x == t[y].ch[<span class="number">1</span>]) ^ (y == t[z].ch[<span class="number">1</span>]) ? rotate(x) : rotate(y);</span><br><span class="line">        rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; x; x = t[y = x].fa)</span><br><span class="line">    &#123;</span><br><span class="line">        Splay(x);</span><br><span class="line">        t[x].sizi += t[t[x].ch[<span class="number">1</span>]].siz;</span><br><span class="line">        t[x].sizi -= t[y].siz;</span><br><span class="line">        t[x].siz2i += t[t[x].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">        t[x].siz2i -= t[y].siz2();</span><br><span class="line">        t[x].ch[<span class="number">1</span>] = y;</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(x);</span><br><span class="line">    <span class="keyword">while</span> (t[x].ch[<span class="number">0</span>]) x = t[x].ch[<span class="number">0</span>];</span><br><span class="line">    Splay(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = f[x];</span><br><span class="line">    Splay(x);</span><br><span class="line">    ans -= t[x].siz2i + t[t[x].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">    <span class="keyword">int</span> z = findroot(y);</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans -= t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">    t[x].fa = y;</span><br><span class="line">    Splay(y);</span><br><span class="line">    t[y].sizi += t[x].siz;</span><br><span class="line">    t[y].siz2i += t[x].siz2();</span><br><span class="line">    pushup(y);</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans += t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = f[x];</span><br><span class="line">    access(x);</span><br><span class="line">    ans += t[x].siz2i;</span><br><span class="line">    <span class="keyword">int</span> z = findroot(y);</span><br><span class="line">    access(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans -= t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">    Splay(x);</span><br><span class="line">    t[x].ch[<span class="number">0</span>] = t[t[x].ch[<span class="number">0</span>]].fa = <span class="number">0</span>;</span><br><span class="line">    pushup(x);</span><br><span class="line">    Splay(z);</span><br><span class="line">    ans += t[t[z].ch[<span class="number">1</span>]].siz2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[x].siz = t[t[x].ch[<span class="number">0</span>]].siz + t[t[x].ch[<span class="number">1</span>]].siz + t[x].sizi + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, v;</span><br><span class="line">    <span class="keyword">for</span> (i = head[u]; i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (v != f[u])</span><br><span class="line">        &#123;</span><br><span class="line">            f[v] = u;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="1F-Nauuo-and-Bug"><a href="#1F-Nauuo-and-Bug" class="headerlink" title="1F Nauuo and Bug"></a><a href="https://codeforces.com/problemset/problem/1172/F" target="_blank" rel="noopener">1F Nauuo and Bug</a></h1><div><div class="fold_hider"><div class="close hider_title">题意</div></div><div class="fold"><p><img src="/Codeforces-Round-564-中文题解/pseudocode.png"></p><p>给 $a$ 和 $p$，多组询问 $sum(a,l,r,p)$。</p><p>数列长度 $10^6$，询问次数 $2\times10^5$，值域 $-10^9$ ~ $10^9$。</p></div></div><div><div class="fold_hider"><div class="close hider_title">题解</div></div><div class="fold"><p>区间询问一般采用分块、线段树等方法维护，这些方法都要求我们单独求出较少个区间的答案后进行合并。我们考虑将 Sum 函数改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int sum(int l, int r, int p, int x) &#123;</span><br><span class="line">  for (int i = l; i &lt;= r; ++i)</span><br><span class="line">    x = modadd(x, a[i], p);</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>固定 $p$ 和一个区间，sum 是一个关于 x 的分段函数，可以看出段数为 $O(r-l)$，因为 sum 的结果一定可以写成 $x+s_{l..r}-np$，其中 $s_{l..r}$ 是 $a_{l..r}$ 的区间和，随着 $x$ 的增大，$n$ 不会减小，而 $0 \le n \le r-l+1$，所以段数是线性的。</p><p>此时有一个简单的分块做法。将序列分为大小为 $B$ 的 $\frac n B$ 块，每块内预处理出这个块的 sum 函数后用一个存有每段端点的数组记录下来；计算这个函数的方法相当暴力，采用增量法，每次将已有的函数和单点合并后重构每段的起止端点，这将消耗 $O(\frac n B \times B^2=nB)$ 的时间。查询时用二分计算单点上函数的值即可，每次询问的时间是 $O(B+\frac n B \log B)$。认为 $n,q$ 同阶，取 $B=\Theta(\sqrt{n \log n})$ 时复杂度最优为 $O(n \sqrt{n \log n})$。</p><p>得到更好的时间复杂度需要一个观察：分段函数中每段的长度都至少是 $P$。证明考虑对区间长度 $n$ 归纳。当 $n=1$ 时由于只有两段，长度均为无穷大，显然；$n&gt;1$ 时考虑将前 $n-1$ 个形成的函数和最后一个合并。详细考虑合并的过程，对于 $f(x)=x+s_{1..n-1}-mP(a \le x \le b)$ 的段，$x + s_{1..n}-mP\ge P \to x \ge (m+1)P-s_{1..n}$ 的部分需要多减一次 $P$，从而会和下一段进行合并。考虑这段函数，减少了一个后缀 $[(m+1)P-s_{1..n},b]$，从上一段合并过来的增加了一段前缀 $[mP-s_{1..n},a]$，新的区间为 $[\min(a,mP-s_{1..n}),\min(b,(m+1)P-s_{1..n}-1]$，简单讨论可知长度仍然不小于 $P$。</p><p>我们改为采用线段树维护，查询区间被分解成 $O(\log n)$ 个线段树上区间，假如我们能求出所有线段树上区间的分段函数，即可每次查询 $O(\log^2 n)$ 时间解决。我们求解 $[l..r]$ 的函数时，考虑从 $[l..mid]$ 的函数 $f(x)$ 和 $[mid+1..r]$ 的函数 $g(x)$ 合并而来，合并后的函数即为 $g(f(x))$。我们在的分段函数 $f$ 上按 $x$ 升序扫描，维护 $f(x)$ 对应 $g$ 中的哪一段。当 $x$ 移向 $f$ 中的下一段时，我们从之前 $f(x)$ 的位置暴力移动向新的函数。注意每次移动到下一段 $f(x)$ 只是减 $P$，$f(x)$ 在 $g$ 中的位置会左移，但前面证明过所有段的长度都至少为 $P$，所以 $f(x)$ 的位置只会左移至多一段。当 $x$ 在 $f$ 的同一段中移动时，$f(x)$ 的位置只会右移，从而由均摊分析知道合并的时间是线性的。综上我们在 $O(n \log n+q \log ^2 n)$ 的时间内解决了本题，这是非常优秀的。</p></div></div><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = (ll)<span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, P, a[N];</span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; func[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; merge(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;ll&gt; &amp;f, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;ll&gt; &amp;g) &#123;</span><br><span class="line">    ll suml = sum[mid] - sum[l - <span class="number">1</span>], sumr = sum[r] - sum[mid];</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; ret(f.size() + g.size() - <span class="number">1</span>, inf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)f.size(); ++i) &#123;</span><br><span class="line">        ll xl = f[i], xr = (i + <span class="number">1</span> == (<span class="keyword">int</span>)f.size() ? inf : f[i + <span class="number">1</span>] - <span class="number">1</span>), yl = xl + suml - (ll)i * P, yr = xr + suml - (ll)i * P;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; g[j] &gt; yl) --j;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; (<span class="keyword">int</span>)g.size() &amp;&amp; (j == <span class="number">0</span> || g[j] &lt;= yl)) ++j;</span><br><span class="line">        --j;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; (<span class="keyword">int</span>)g.size() &amp;&amp; g[j] &lt;= yr; ++j)</span><br><span class="line">            ret[i + j] = min(ret[i + j], max(xl, g[j] - suml + (ll)i * P));</span><br><span class="line">    &#125;</span><br><span class="line">    ret[<span class="number">0</span>] = -inf;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        func[u].push_back(-inf);</span><br><span class="line">        func[u].push_back(P - a[l]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    func[u] = merge(l, r, mid, func[u &lt;&lt; <span class="number">1</span>], func[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, ll now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> now + sum[r] - sum[l - <span class="number">1</span>] - (ll)P * (upper_bound(func[u].begin(), func[u].end(), now) - func[u].begin() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, now);</span><br><span class="line">    <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, now);</span><br><span class="line">    <span class="keyword">return</span> query(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, query(u &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, now));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;P);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l, r; m--;) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, query(<span class="number">1</span>, <span class="number">1</span>, n, l, r, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/bad-round-与出题人的坚守&quot;&gt;台前幕后&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1172&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;contest on CF&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Codeforces" scheme="https://ouuan.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>使用 testlib.h 写 lemon SPJ</title>
    <link href="https://ouuan.github.io/%E4%BD%BF%E7%94%A8-testlib-h-%E5%86%99-lemon-SPJ/"/>
    <id>https://ouuan.github.io/使用-testlib-h-写-lemon-SPJ/</id>
    <published>2019-05-22T05:59:32.000Z</published>
    <updated>2019-05-22T06:04:25.992Z</updated>
    
    <content type="html"><![CDATA[<p>不用 testlib.h 是不可能写好 checker 的（逃</p><a id="more"></a><p>大约这样就可以了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ofstream fscore;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fscore.open(argv[<span class="number">5</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> score = atoi(argv[<span class="number">4</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sprintf</span>(cmd, <span class="string">"testlibchecker %s %s %s %s"</span>, argv[<span class="number">1</span>], argv[<span class="number">2</span>], argv[<span class="number">3</span>], argv[<span class="number">6</span>]);</span><br><span class="line">    <span class="keyword">if</span> (system(cmd)) fscore &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> fscore &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    fscore.close();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 testlibchecker 实际使用时要使用绝对路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不用 testlib.h 是不可能写好 checker 的（逃&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="评测" scheme="https://ouuan.github.io/tags/%E8%AF%84%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>300iq奔北坡</title>
    <link href="https://ouuan.github.io/300iq%E5%A5%94%E5%8C%97%E5%9D%A1/"/>
    <id>https://ouuan.github.io/300iq奔北坡/</id>
    <published>2019-05-12T13:45:13.000Z</published>
    <updated>2019-05-27T11:02:11.950Z</updated>
    
    <content type="html"><![CDATA[<p>由于实在想不到这次是什么记了，所以就叫 300iq 奔北坡好了。</p><p>实际上是一篇 CTS &amp; APIO &amp; THUSC 2019 游记。</p><a id="more"></a><h2 id="Arrival"><a href="#Arrival" class="headerlink" title="Arrival"></a>Arrival</h2><p>因为是去北京所以要二次安检，然后剪刀被收了..一开始还说我有两把剪刀，然后又过了一次安检就没有了..最后的结果是吃方便面的时候撕不开酱料包，用圆规戳开的。</p><p>车上先是在熟悉的文章、字符串和 Reverses 三道题上分别自闭，然后开始看题解，看 border 相关论文，然后就开始看 THUPC 的榜，然后不小心被 300iq 看到了 300iq_ben_bei_po。</p><p>到了之后，发现 Sooke 就比我们早到一点点——实际上比我们早一趟地铁左右。到酒店的时候办入住排队，Sooke 刚好就在我们几个人前面，然后就愉快地面基了。</p><p>下午去试机，现场写了一道我们那场 cf 的题，（<del>证明了如果会做还是可以在场上写出来的</del>）。</p><p>然后，从 Sooke 来试机起，简单教了一下 Sooke 用 noilinux，一起吃了晚饭，一起走回酒店，然后发现 Sooke 房间就在我隔壁，然后 Sooke 就待在我房间里了，准备看我打他验的那场 cf。</p><p>之前 THUWC 的时候试机坐 pr 右边的右边，这次又是来的时间差不多 + 住隔壁..比较神奇。</p><p>晚上智商比较掉线（可能和前一天没睡好略有关系），掉了波分。</p><h2 id="CTS-Day-1"><a href="#CTS-Day-1" class="headerlink" title="CTS Day 1"></a>CTS Day 1</h2><p>咕了 5min（<del>为什么 cf 每次都是 35 开始</del>）</p><p>开考前就注意到 T1 12s，原来是 10 组数据…（ctr：我本机 1.Xs，评测姬 6.Xs，怎么办啊）</p><p>第一眼就觉得 T1 的暴力好像不太会做，阶乘会挂。</p><p>然后去看 T2，3min 想到三方做法，然后又花了 3min 去掉一维，然后 10min 左右写 + 调完了 48 分。</p><p>T3 是个提答，（可能是雅礼集训那道五子棋的原因），我就直接搞了个估价函数，每次枚举所有可能的位置，选估价函数最大的那个。前三个点都是立刻出结果，第二个点只有 9 分，然后就把后面的点挂着跑。发现第四个点非常特殊，所以就数了一下每种块各有几个，然后直接在草稿纸上算出方案，然后若干个 for 循环输出。</p><p>然后，本来以为 T2 $m=0, 1, 2$ 的几个点要大力数据分治，然后发现如果 $n\ge d+2m-1$ 直接输出 $d^n$ 就好了..</p><p>然后，发现 T3 后面的一个点跑了 1h 还没跑出来，于是就开始乱搞。先是调循环步长，发现还是跑的特别慢。然后就加了个剪枝，每一行找到第一个可以放的位置就放，快了很多。最后把两个点分别跑出来了 3 分和 4 分。</p><p>回去看 T1，发现一个剪枝搜索的方法（实际上和那个七方 dp 思路差不多…），然后写到一半想起来可以打表..最后写了个可以在 1s 内跑完一组的搜索，还是打了个表交上去。</p><p>最后是 $10+60+46$，被所有人踩了。</p><p>为什么我没想到 T1 的七方 dp 呢..当时脑子里大概是 $12\rightarrow2^n$，然而有三维，要 $2^{nml}$，做不了，不做了…（题解：一看就是<del>指数级</del>多项式算法）</p><h2 id="CTS-Day-2"><a href="#CTS-Day-2" class="headerlink" title="CTS Day 2"></a>CTS Day 2</h2><p>又咕了 5min。</p><p>第一眼，T1 计几，考场不能开计几。</p><p>第二眼，T2 字符串！woc，还是个计数。</p><p>第三眼，T3 这是棵树！这边怎么还有反的..</p><p>看了一圈还是感觉 T1 最可做…然而我先去推了一会儿 T2，没有任何成果。T3 的暴力也不会写..</p><p>冷静了一下想到了 T1 $30​$ 分做法，就写了一个。考场上还算错复杂度了..只不过问题不大。</p><p>然后在三题之间轮流自闭，T1 猜到了凸包合并后更优肯定要合并，也写了个两两尝试合并，然而过不去样例三，就没管了。（95 分做法：随机合并，记录过程中最优解，直到快超时。）</p><p>快结束的时候写了个 T2 10 分爆搜，发现要跑 4s，然后就写了个字符离散化..实际上可以被类似 <code>bdfhjlnprt</code> 之类的串卡掉，只不过还是过了。</p><p>最后是 $10+30+0$，好像还挺大众（</p><h2 id="CTS-其它"><a href="#CTS-其它" class="headerlink" title="CTS 其它"></a>CTS 其它</h2><p>讲题比较自闭..就记得 _rqy 自己上台吐槽两天四道计数，组题人（同时是 D1T3 出题人）说“我要从五道题里面选六道题，我也很无奈啊”。</p><p>另外首师大附中里的有张摄影的标题戳到我了…（<del>不要说我中二</del>）（<del>也不要在意右边，那是手指挡住了</del>）</p><img src="/300iq奔北坡/yakusoku.jpg"><p>录了个<a href="https://www.bilibili.com/video/av52574050" target="_blank" rel="noopener">论文答辩</a>。</p><p>最后闭幕式的时候 wh 和 dzd 的讲话还是非常精彩。譬如：知识点涵盖了容斥原理，动态规划，概率论……<font style="opacity: 0">为什么要去掉这个 C 呢？没有钱是干不了这个活的，收的钱也不一定够</font></p><p>dzd 还抱着好像是某位博士的女儿上了台..</p><img src="/300iq奔北坡/girl1.jpg"><img src="/300iq奔北坡/girl2.jpg"><p>在 cf 上<a href="https://codeforc.es/blog/entry/66927#comment-511486" target="_blank" rel="noopener">抢了个评论</a>。上午答辩完就差不多猜到了名单，然而不敢提前发，就提前写好了评论，一公布立马发出去了。感觉的确可以从答辩判断名单，某个 twr 硬是觉得有黑幕还被 up 了我就很没有办法。</p><p><del>cf 出题组全员 Ag。</del></p><h2 id="APIO-讲课-Day-1"><a href="#APIO-讲课-Day-1" class="headerlink" title="APIO 讲课 Day 1"></a>APIO 讲课 Day 1</h2><p>上午缓存管理，下午 PJ dp ？？</p><h2 id="APIO-考试"><a href="#APIO-考试" class="headerlink" title="APIO 考试"></a>APIO 考试</h2><p>开场 5min 就交了一发 WA..把 A 的暴力交错题了，一看发现纸质题面和实际顺序不一样（好像是翻译的时候还没给题目顺序…）</p><p>评测系统果然是不需要数据分治的，每个子任务分别提交就可以了，会分别在所有提交中取 max。只不过如果出现特殊情况，要由 CCF 来收题，这样写可能会比较惨..</p><p>先把 T1 的暴力和无修改写了，然后把 T2 的 10 分写了，然后把 T3 暴力、询问长度一、零变一写了，然后把 T1 链写了。这些分好像都比较水..过程中想了会儿各种正解，写完的时候大约是 3h。</p><p>然后，感觉 T1 的树应该可做，然而不会做。T3 的修改在询问前好像也不太会。然后去看只有 10 分的 T2，怎么这么多 subtask，我一个都不会啊..然后，我发现好像有循环节，然后就是本场比赛最蠢的一个地方，我把循环节暴力跑出来，然后用 map 判下标..然后想了个特别麻烦的 5 分做法，一直调到考试结束…</p><p>最后分数就是前 3h 写的 $43+10+60$，一出考场发现所有人都是 243 / 203 … 说好的 100+ <font color="gold">Au</font> 呢？以后再也不能按往年分数线打比赛了…</p><h2 id="APIO-讲题"><a href="#APIO-讲题" class="headerlink" title="APIO 讲题"></a>APIO 讲题</h2><ul><li>考虑让大象写题解</li><li>大象写了一篇题解</li><li>讲完了</li></ul><h2 id="APIO-讲课-Day-2"><a href="#APIO-讲课-Day-2" class="headerlink" title="APIO 讲课 Day 2"></a>APIO 讲课 Day 2</h2><p>上午是 THUWC 时来过的 lzj，又是图像渲染。</p><p>下午是四场讲题里最正常的一场（树上线性问题），前半部分是 <del>希望的超详细题解</del> 自顶向下 dp + 长链剖分，后半部分，后半部分是什么啊..好像是各种神仙题，比如树上线性（不带反阿克曼）并查集……</p><h2 id="APIO-颁奖"><a href="#APIO-颁奖" class="headerlink" title="APIO 颁奖"></a>APIO 颁奖</h2><p>五页 113 艹，成功压线 Cu。</p><p>四页 203 <font color="gold">Au</font> 比 <font color="silver">Ag</font> 多艹。</p><p><font color="silver">Ag</font> 前几都是神仙艹。</p><h2 id="THUSC-Day-1"><a href="#THUSC-Day-1" class="headerlink" title="THUSC Day -1"></a>THUSC Day -1</h2><p>THUSC 电脑的用户名是 THUSC Day 0-Test、THUSC Day0、THUSC Day1-1 和 THUSC Day1-2。（为什么 Day -1 要提 THUSC 电脑用户名？因为今天是 Day -1。）</p><p>收到选手须知，划重点：WireShark，O3，python，Ubuntu 16.04，没写考试安排。</p><p>学一波 WireShark 好了。</p><p><del>结果颓了一整天</del></p><p>晚上 11 点睡了，好像很久没睡这么早了..</p><h2 id="THUSC-Day-0"><a href="#THUSC-Day-0" class="headerlink" title="THUSC Day 0"></a>THUSC Day 0</h2><p>为什么 tdoj waiting 显示满分啊..一开始我还以为 pt 是假的（</p><p>试机自闭了，sb 字符串二分想了无限假做法，开始怀疑自己的智商。</p><p><del>开营式全是硬广</del>，感觉还是 THUWC 的有意思些，哦不对，那好像是闭幕式…</p><p>一进考场就发生了一件很神奇的事，94 和 96 中间没有 95..于是我换了一台机子。</p><p>比赛咕了 $40min$（<del>传统艺能</del>）。</p><p>开场看 T1，很快发现了（<del>在没有操作 3 时</del>）取空的情况只会发生不超过 $n$ 次，20min 的时候已经完全构思好了正解，然而不知道为什么以为操作 3 会破坏复杂度，就写了个 60 分..第一次尝试在草稿纸上完整地写下要维护哪些量，每个操作各要具体怎么修改怎么询问，写了半张草稿纸，然后写代码极其顺畅，1h 的时候就把 60 分部分分 1A 了。然后发现 $l=r$ 也很水，就写了个 $80$ 分的数据分治，然后各种挂，又过了 $40min$ 才写完，共 $6.2KB$。</p><p>然后看了眼 T2，$k=20\rightarrow2^k$，$\min\rightarrow minmax$ 容斥 $\rightarrow$ 不会做（<del>鬼知道我怎么想的</del>），然后去看 T3，侧信道攻击是什么啊..OI 题名全是骗人的.jpg。往后一看，好像还真是题目背景里说的那回事..好像不太可做，回去看 T2。woc 这不是个 sb 题吗…在最短路上就是 $dis[u][k]+dis[k][v]=dis[u][v]$，然后随手写了个 $3^k$——对每个救援队记录哪些点可以。然后发现改成对每个点记录哪些救援队可以，就可以轻松 $n2^k$ 了..pt 1A，然后就没管了。</p><p>犹豫了一下，决定还是先别侧信道攻击了，回来看 T1。woc 我又 sb 了，操作三不破坏复杂度啊，每次单点加最多把一个空的变成不空，所以还是只会有不超过 $n+m$ 次取空..于是在 $60​$ 分代码的基础上只加一个函数，其它全都不用改，就 pp 了。</p><p>然后去看 T3，这个 $10$ 分，可以枚举 $w$，枚举 $y$，枚举 $q$……诶，询问数超了，那就 <code>get_w()</code>.. woc，直接 <code>for (i = 0; i &lt; 500; ++i) Qs[i] = i;</code> 不就可以了吗，我又 sb 了..把枚举删掉，写上 for 循环，一交，怎么爆零了？woc，没设置 $u$ 和 ​$v$…那后面的分怎么做啊..先 <code>get_w()</code> <code>get_y()</code> 吧..二分一下 $q$..怎么过不了啊..哦，是快速幂，所以 $time$ 并不关于 $q$ 单调..那就以二分结果为中心往两边爆搜吧..$subtask2$ 拿了 $16$，继续各种乱搞，拿不到分了，考试结束了。</p><p>感觉好像比较大众分啊..可能会被 T3（&amp; 可能比较弱的 pt &amp; 把 THUSC 当成 IOI 赛制打的选手）区分出来了。</p><p>大约在宾馆见识到了真正的“抽水马桶”…不是按，不是转，是抽..</p><p>晚上睡得比前一天还早（</p><h2 id="THUSC-Day-1-1"><a href="#THUSC-Day-1-1" class="headerlink" title="THUSC Day 1-1"></a>THUSC Day 1-1</h2><p>94 和 96 中间还是没有 95…</p><p>比赛又咕了 $30min$。</p><p>开场，T1 不是 sb 题吗 $\rightarrow$ 没过 pt $\rightarrow $ 读错题了？$\rightarrow​$ 草，只有灯塔可以点亮..（鬼知道我为什么在点亮数轴（大约是以为每个点都有灯塔，只是一部分有游客吧..</p><p>于是 20min 才把 T1 过掉（</p><p>然后去看 T2，前两个 subtask 好像挺好写的..继续看 T3，考场上好像不能开计算几何来着（</p><p>然而我还是开了..emm..这玩意不用取模诶..哦，好像每种本质不同的划分都可以用一条两圆公切线表示。但是，怎么求公切线啊..用各种方法算了一个小时，算出来的结果都很麻烦，感觉会算错，于是就没管了（然而降智的效果已经达到了</p><p>先写了前两个 subtask，然后发现好像可以处理出每个右端点向左种类数增加的地方，然后写了个假做法写自闭了，最后大致上想到了单调栈做法，然后好像是以为假掉了，也可能没太想清楚，最后写了个 $\mathcal O(nm^2)​$ 交上去…</p><p>成功被计几 &amp; 自己的假做法降智，被区分了，白给 $48$ 分。</p><h2 id="THUSC-Day-1-2"><a href="#THUSC-Day-1-2" class="headerlink" title="THUSC Day 1-2"></a>THUSC Day 1-2</h2><p>果然是网络题..</p><p>有了 WC 的经验，没仔细阅读学习手册直接开始做，还是写了 $1h$ T1..</p><p>T2 的 $8$ 分是 CRC32，WC 写过，然后..写了 $1h$，WA 了 $1h$。学习手册里的 CRC32 样例过了，输出中间结果 data 转 01 看起来也没什么问题..不知道怎么回事。</p><p>大众分好像是 $48$，㕛被区分了。</p><h2 id="THUSC-Day-2"><a href="#THUSC-Day-2" class="headerlink" title="THUSC Day 2"></a>THUSC Day 2</h2><p><del>听说线 428 ？emm..成功被白给区分了。</del></p><p><del>只不过也没什么白给不白给的，就是不熟练才会白给，会做也没用啊.</del></p><p>网传线假掉了…</p><p>我妈在八点半接到我爸的电话，说我爸接到了 THU 电话…</p><p>然后，赶去西郊宾馆，等了 2.5h，好像是分块后按字典序排？<del>中途还见到了在其它 SC 游记里听说过的搭矿泉水瓶</del>。</p><p>面试大约是自我介绍 + 提问 + 嘤语阅读。毕竟我也是受了其他人游记一定的帮助，简单说一下需要注意的问题..</p><ol><li>自我介绍不需要提 OI 成绩。我一开始说我的 OI 成绩被打断了，好像是考官有成绩..（其实是看别人游记说教官提问“你的 OI 最好成绩”我才说的 qaq</li><li>提问会和自我介绍相关。反正我是这样的..比如，我自我介绍的时候提了一下对人工智能略有了解，就被问了有哪些了解、有什么看法之类的。所以建议自我介绍可以提一提自己熟悉的计算机科学领域，然后在相关方面准备一下可能的问题回答。</li><li>嘤语阅读要尝试看懂。大约是计算机科学专业文章，一开始会给你 $30s$ 左右看一遍，然后我当时只是想了想应该怎么读，没有仔细看。读了一遍之后他问我看懂了什么，然后就 GG 了..个人感觉这个部分是我面试挂的最惨的地方（</li></ol><p>下午讲题 + 科研 / 科协 / <del>蒜</del>算协 介绍，感觉不如 WC 有意思..可能是时间比较短，而且也听过一遍类似的内容了..（<del>有个人工智能简笔画妹子挺有意思的</del>）</p><p>然后，荣获 3=，就去赶火车了..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于实在想不到这次是什么记了，所以就叫 300iq 奔北坡好了。&lt;/p&gt;
&lt;p&gt;实际上是一篇 CTS &amp;amp; APIO &amp;amp; THUSC 2019 游记。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>回文自动机（PAM）学习笔记</title>
    <link href="https://ouuan.github.io/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88PAM%EF%BC%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/回文自动机（PAM）学习笔记/</id>
    <published>2019-05-10T14:31:05.000Z</published>
    <updated>2019-07-15T09:05:33.303Z</updated>
    
    <content type="html"><![CDATA[<p>PAM 是一种处理回文串相关问题的有力工具。</p><p><del>又是一句废话。</del></p><a id="more"></a><h2 id="PAM-是什么？"><a href="#PAM-是什么？" class="headerlink" title="PAM 是什么？"></a>PAM 是什么？</h2><h3 id="首先它是个自动机…"><a href="#首先它是个自动机…" class="headerlink" title="首先它是个自动机…"></a>首先它是个自动机…</h3><p>PAM 是一个接受且仅接受某个字符串的所有回文子串的<strong>中心及右半部分</strong>的 <a href="/后缀自动机（SAM）学习笔记/#确定有限状态自动机（DFA）">DFA</a>。</p><p>“中心及右边部分”在奇回文串中就是字面意思，在偶回文串中定义为一个特殊字符加上右边部分。这个定义看起来很奇怪，但它能让 PAM 真正成为一个自动机，而不仅是两棵树。</p><h3 id="PAM-的状态及转移"><a href="#PAM-的状态及转移" class="headerlink" title="PAM 的状态及转移"></a>PAM 的状态及转移</h3><p>PAM 的每个状态都表示一个回文子串，其中包含两个特殊状态，$len​$ 分别为 $0​$ 和 $-1​$，它们分别作为偶回文子串和奇回文子串两棵树的根。</p><p>PAM 的转移表示在串的两侧各加上同一个字符，因此 $len​$ 也会加二。PAM 显然是分别以 $0​$ 和 $-1​$ 为根的两棵树，因为每个状态由唯一的状态转移而来（删掉两端的字符）。</p><p>和 SAM / AC 自动机一样，PAM 也有 $fail​$ 边，同样表示真后缀中在自动机里的最长状态（也就是最长回文真后缀）。</p><p>为了让 PAM 符合自动机的定义，可以在概念上从 $-1​$ 到 $0​$ 连一条特殊字符边，然后以 $-1​$ 作为起始状态。然而在代码实现里没有人会这么做。</p><h2 id="PAM-的构建"><a href="#PAM-的构建" class="headerlink" title="PAM 的构建"></a>PAM 的构建</h2><h3 id="一个性质"><a href="#一个性质" class="headerlink" title="一个性质"></a>一个性质</h3><p>在一个字符串后添加一个字符，至多增加一个之前没有出现过的回文子串，且该回文子串必定是原串的一个回文真后缀两侧加上新添加的这个字符。</p><p>简单证明：如果新添加的字符处在多个回文子串内，找到最长的一个，剩下的都可以沿其中心翻折过去，所以一定出现过。</p><p>这个性质既说明了 PAM 的状态数是 $\mathcal O(n)​$ 的，也为后文的构建方法提供了依据。</p><h3 id="基础构建法"><a href="#基础构建法" class="headerlink" title="基础构建法"></a>基础构建法</h3><p>这是一个增量算法，即每次以均摊 $\mathcal O(1)​$ 的复杂度向 PAM 基于的字符串的末尾添加一个字符。</p><p>记上次达到的状态为 $p​$，字符串为 $s​$，当前添加的字符是字符串中第 $pos​$ 位，我们在 $p​$ 的 $fail​$ 链上找到最长的一个状态满足 $s[pos-len(u)-1]=s[pos]​$，那么当前到达的状态就是 $\delta(u,s[pos])​$，如果这个转移不存在则新建节点并连 $fail​$：在 $fail(p)​$ 的 $fail​$ 链上找到最长的满足上述条件的状态，其 $s[pos]​$ 转移即为新建节点的 $fail​$。特别地，如果 $p​$ 是特殊状态 $-1​$，新建节点的 $fail​$ 要设为 $0​$。</p><p>因为 $p​$ 和 $fail(p)​$ 都是在 $fail​$ 树上爬上爬下，其中每添加一个字符最多向下爬一次，所以复杂度是均摊 $\mathcal O(1)​$ 的。</p><p>当然如果用 map 存边复杂度就会带 log。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, fail, ch[<span class="number">26</span>];</span><br><span class="line">&#125; pam[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, p = <span class="number">2</span>, tot = <span class="number">2</span>, pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    pam[<span class="number">1</span>].len = <span class="number">-1</span>;</span><br><span class="line">    pam[<span class="number">2</span>].fail = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (pos = <span class="number">1</span>; pos &lt;= n; ++pos) extend();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = s[pos] - <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[pos - pam[p].len - <span class="number">1</span>] != s[pos]) p = pam[p].fail;</span><br><span class="line">    <span class="keyword">if</span> (pam[p].ch[x]) p = pam[p].ch[x];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> np = ++tot;</span><br><span class="line">        pam[p].ch[x] = np;</span><br><span class="line">        pam[np].len = pam[p].len + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">1</span>) pam[np].fail = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (p = pam[p].fail; s[pos - pam[p].len - <span class="number">1</span>] != s[pos]; p = pam[p].fail);</span><br><span class="line">            pam[np].fail = pam[p].ch[x];</span><br><span class="line">        &#125;</span><br><span class="line">        p = np;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="其它构建法"><a href="#其它构建法" class="headerlink" title="其它构建法"></a>其它构建法</h3><p>PAM 还有支持前后端插入删除、复杂度不是均摊的构建方法，<del>但我先咕着</del>..感兴趣的话可以看 2017 国家候选队论文《回文树及其应用 翁文涛》。</p><h2 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h2><p><a href="https://www.luogu.org/problemnew/show/P3649" target="_blank" rel="noopener">[APIO2014]回文串</a><font color="white">，裸题。和其它自动机一样通过 fail 树子树和来统计出现次数。</font></p><p><a href="https://www.luogu.org/problemnew/show/CF835D" target="_blank" rel="noopener">CF835D Palindromic characteristics</a>（注意原题数据范围较小，这题可以线性做）<font color="white">，从 fail 链上 len / 2 处转移即可，我比较菜只会倍增所以多个 log。</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PAM 是一种处理回文串相关问题的有力工具。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;又是一句废话。&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="PAM" scheme="https://ouuan.github.io/tags/PAM/"/>
    
  </entry>
  
  <entry>
    <title>CF17E Palisection（manacher）</title>
    <link href="https://ouuan.github.io/CF17E-Palisection%EF%BC%88manacher%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF17E-Palisection（manacher）/</id>
    <published>2019-05-10T14:06:18.000Z</published>
    <updated>2019-05-10T14:13:26.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/CF17E" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://codeforces.com/contest/17/problem/E" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个字符串，求有多少对相交的回文子串。（包含算作相交，<del>自交不算</del>）</p><p>字符串长度小于等于 $2\times 10^6$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先 manacher 求出每个中心的最长回文串半径。</p><p>然后，通过差分可以求出每个位置作为左端点 / 右端点各有多少个回文串（知道每个中心的半径之后就相当于区间加），记为 $l_i$, $r_i$。</p><p>最后，我们把问题转化为求不相交的回文子串对数，这样的话就是 $\sum\limits_{i = 2}^n\sum\limits_{j=1}^{i-1}l_ir_j$，预处理一下 $r​$ 的前缀和就可以算了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">51123987</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n, p[N &lt;&lt; <span class="number">1</span>], mid, rt, l[N], r[N], pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = n * <span class="number">2</span> + <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) s[i] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">else</span> s[i] = s[i / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mid = rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n * <span class="number">2</span> + <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = min(rt - i, p[mid * <span class="number">2</span> - i]);</span><br><span class="line">        <span class="keyword">while</span> (s[i + p[i] + <span class="number">1</span>] == s[i - p[i] - <span class="number">1</span>]) ++p[i];</span><br><span class="line">        <span class="keyword">if</span> (i + p[i] &gt; rt)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = i;</span><br><span class="line">            rt = i + p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ++l[(i - p[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">        --l[(i &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">        ++r[(i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">        --r[(i + p[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">        ans = (ans + (p[i] + <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ans = (ll) ans * (ans - <span class="number">1</span>) % mod * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        l[i] += l[i - <span class="number">1</span>];</span><br><span class="line">        r[i] += r[i - <span class="number">1</span>];</span><br><span class="line">        pre[i] = (pre[i - <span class="number">1</span>] + r[i]) % mod;</span><br><span class="line">        ans = (ans - (ll) l[i] * pre[i - <span class="number">1</span>] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF17E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/17/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个字符串，求有多少对相交的回文子串。（包含算作相交，&lt;del&gt;自交不算&lt;/del&gt;）&lt;/p&gt;
&lt;p&gt;字符串长度小于等于 $2\times 10^6$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="manacher" scheme="https://ouuan.github.io/tags/manacher/"/>
    
  </entry>
  
  <entry>
    <title>CF432D Prefixes and Suffixes（KMP）</title>
    <link href="https://ouuan.github.io/CF432D-Prefixes-and-Suffixes%EF%BC%88KMP%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF432D-Prefixes-and-Suffixes（KMP）/</id>
    <published>2019-05-10T13:56:54.000Z</published>
    <updated>2019-05-10T14:05:31.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problemnew/show/CF432D" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://codeforces.com/contest/432/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个字符串，分别求出每个长度的既是其前缀又是其后缀的串出现的次数。</p><p>字符串长度小于等于 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>第一眼，SAM 裸题。</p><p>然后意识到只用管前缀，KMP 可以达到同样的效果。</p><p>做法和 SAM 完全一样：从末尾跳 next 来找到所有前后缀相同的位置（也就是 SAM 的接受状态），然后倒序枚举 $f_{next[i]}+=f_i$（也就是 SAM 的统计子树和）。</p><p>多说两句：fail、parent 和 next 其实是一样的东西，但 KMP / AC 自动机的状态是所有前缀，SAM 的状态是所有子串（并被压缩为了 right 集合等价类）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, nxt[N], stk[N], top, f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, k;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (k &amp;&amp; s[i] != s[k + <span class="number">1</span>]) k = nxt[k];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[k + <span class="number">1</span>]) ++k;</span><br><span class="line">        nxt[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        ++f[i];</span><br><span class="line">        f[nxt[i]] += f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = n; i; i = nxt[i]) stk[++top] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, top);</span><br><span class="line">    <span class="keyword">while</span> (top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, stk[top], f[stk[top]]);</span><br><span class="line">        --top;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/CF432D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/432/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个字符串，分别求出每个长度的既是其前缀又是其后缀的串出现的次数。&lt;/p&gt;
&lt;p&gt;字符串长度小于等于 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="KMP" scheme="https://ouuan.github.io/tags/KMP/"/>
    
  </entry>
  
</feed>
