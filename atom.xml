<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-11-02T13:51:15.066Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Capacity Scaling 的弱多项式复杂度最小费用流算法</title>
    <link href="https://ouuan.github.io/%E5%9F%BA%E4%BA%8E-Capacity-Scaling-%E7%9A%84%E5%BC%B1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81%E7%AE%97%E6%B3%95/"/>
    <id>https://ouuan.github.io/基于-Capacity-Scaling-的弱多项式复杂度最小费用流算法/</id>
    <published>2019-10-26T11:50:25.000Z</published>
    <updated>2019-11-02T13:51:15.066Z</updated>
    
    <content type="html"><![CDATA[<p>大多数人所使用的费用流算法 SSP（successive shortest path，即每次求出残量网络中 $s$ 到 $t$ 关于费用的最短路进行增广）是伪多项式复杂度的，最坏情况下复杂度为 $O(nmf)$，其中 $f$ 为最大流。已知有一种在点数为 $n$，边数为 $O(n^2)$，值域为 $O(2^{n/2})$ 时将其用时卡成 $O(2^{n/2}n^2\log n)$ 的构造方法。</p><p>本文将介绍一种复杂度为进行 $O(m\log U)$ 次（$U$ 表示边的最大容量）无负权边单源最短路（使用 <code>priority_queue</code> 实现 Dijkstra 算法即为 $O(m^2\log U\log m)$）的弱多项式复杂度算法。</p><p>其实这个算法并不是很复杂（只是相关资料比较少，会对学习造成一定困难，这也是我写这篇博客的原因），最小费用最大流的模板也只需要 $2.5KB$，并不比常见的伪多项式复杂度算法长很多。</p><a id="more"></a><h2 id="hack-常见的费用流算法"><a href="#hack-常见的费用流算法" class="headerlink" title="hack 常见的费用流算法"></a>hack 常见的费用流算法</h2><p>可以参考 <a href="https://min-25.hatenablog.com/entry/2018/03/19/235802" target="_blank" rel="noopener">这篇博客</a>，里面给出了一个用 Python 写的数据生成器，调用函数 <code>mcmf_worst_instance(k)</code> 可以得到 $2k+2$ 个点的数据，格式为第一行点数和边数，后面每行描述一条边（起点、终点、容量、费用），源点是 $1$ 汇点是 $2k+2$。</p><div><div class="fold_hider"><div class="close hider_title">k=20 生成的数据</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line">42 421</span><br><span class="line">1 2 1 0</span><br><span class="line">1 3 3 0</span><br><span class="line">1 4 5 0</span><br><span class="line">1 5 10 0</span><br><span class="line">1 6 20 0</span><br><span class="line">1 7 40 0</span><br><span class="line">1 8 80 0</span><br><span class="line">1 9 160 0</span><br><span class="line">1 10 320 0</span><br><span class="line">1 11 640 0</span><br><span class="line">1 12 1280 0</span><br><span class="line">1 13 2560 0</span><br><span class="line">1 14 5120 0</span><br><span class="line">1 15 10240 0</span><br><span class="line">1 16 20480 0</span><br><span class="line">1 17 40960 0</span><br><span class="line">1 18 81920 0</span><br><span class="line">1 19 163840 0</span><br><span class="line">1 20 327680 0</span><br><span class="line">1 21 655360 0</span><br><span class="line">2 22 5242880 0</span><br><span class="line">2 23 5242880 1</span><br><span class="line">2 24 5242880 3</span><br><span class="line">2 25 5242880 7</span><br><span class="line">2 26 5242880 15</span><br><span class="line">2 27 5242880 31</span><br><span class="line">2 28 5242880 63</span><br><span class="line">2 29 5242880 127</span><br><span class="line">2 30 5242880 255</span><br><span class="line">2 31 5242880 511</span><br><span class="line">2 32 5242880 1023</span><br><span class="line">2 33 5242880 2047</span><br><span class="line">2 34 5242880 4095</span><br><span class="line">2 35 5242880 8191</span><br><span class="line">2 36 5242880 16383</span><br><span class="line">2 37 5242880 32767</span><br><span class="line">2 38 5242880 65535</span><br><span class="line">2 39 5242880 131071</span><br><span class="line">2 40 5242880 262143</span><br><span class="line">2 41 5242880 524287</span><br><span class="line">3 22 5242880 1</span><br><span class="line">3 24 5242880 3</span><br><span class="line">3 25 5242880 7</span><br><span class="line">3 26 5242880 15</span><br><span class="line">3 27 5242880 31</span><br><span class="line">3 28 5242880 63</span><br><span class="line">3 29 5242880 127</span><br><span class="line">3 30 5242880 255</span><br><span class="line">3 31 5242880 511</span><br><span class="line">3 32 5242880 1023</span><br><span class="line">3 33 5242880 2047</span><br><span class="line">3 34 5242880 4095</span><br><span class="line">3 35 5242880 8191</span><br><span class="line">3 36 5242880 16383</span><br><span class="line">3 37 5242880 32767</span><br><span class="line">3 38 5242880 65535</span><br><span class="line">3 39 5242880 131071</span><br><span class="line">3 40 5242880 262143</span><br><span class="line">3 41 5242880 524287</span><br><span class="line">4 22 5242880 3</span><br><span class="line">4 23 5242880 3</span><br><span class="line">4 25 5242880 7</span><br><span class="line">4 26 5242880 15</span><br><span class="line">4 27 5242880 31</span><br><span class="line">4 28 5242880 63</span><br><span class="line">4 29 5242880 127</span><br><span class="line">4 30 5242880 255</span><br><span class="line">4 31 5242880 511</span><br><span class="line">4 32 5242880 1023</span><br><span class="line">4 33 5242880 2047</span><br><span class="line">4 34 5242880 4095</span><br><span class="line">4 35 5242880 8191</span><br><span class="line">4 36 5242880 16383</span><br><span class="line">4 37 5242880 32767</span><br><span class="line">4 38 5242880 65535</span><br><span class="line">4 39 5242880 131071</span><br><span class="line">4 40 5242880 262143</span><br><span class="line">4 41 5242880 524287</span><br><span class="line">5 22 5242880 7</span><br><span class="line">5 23 5242880 7</span><br><span class="line">5 24 5242880 7</span><br><span class="line">5 26 5242880 15</span><br><span class="line">5 27 5242880 31</span><br><span class="line">5 28 5242880 63</span><br><span class="line">5 29 5242880 127</span><br><span class="line">5 30 5242880 255</span><br><span class="line">5 31 5242880 511</span><br><span class="line">5 32 5242880 1023</span><br><span class="line">5 33 5242880 2047</span><br><span class="line">5 34 5242880 4095</span><br><span class="line">5 35 5242880 8191</span><br><span class="line">5 36 5242880 16383</span><br><span class="line">5 37 5242880 32767</span><br><span class="line">5 38 5242880 65535</span><br><span class="line">5 39 5242880 131071</span><br><span class="line">5 40 5242880 262143</span><br><span class="line">5 41 5242880 524287</span><br><span class="line">6 22 5242880 15</span><br><span class="line">6 23 5242880 15</span><br><span class="line">6 24 5242880 15</span><br><span class="line">6 25 5242880 15</span><br><span class="line">6 27 5242880 31</span><br><span class="line">6 28 5242880 63</span><br><span class="line">6 29 5242880 127</span><br><span class="line">6 30 5242880 255</span><br><span class="line">6 31 5242880 511</span><br><span class="line">6 32 5242880 1023</span><br><span class="line">6 33 5242880 2047</span><br><span class="line">6 34 5242880 4095</span><br><span class="line">6 35 5242880 8191</span><br><span class="line">6 36 5242880 16383</span><br><span class="line">6 37 5242880 32767</span><br><span class="line">6 38 5242880 65535</span><br><span class="line">6 39 5242880 131071</span><br><span class="line">6 40 5242880 262143</span><br><span class="line">6 41 5242880 524287</span><br><span class="line">7 22 5242880 31</span><br><span class="line">7 23 5242880 31</span><br><span class="line">7 24 5242880 31</span><br><span class="line">7 25 5242880 31</span><br><span class="line">7 26 5242880 31</span><br><span class="line">7 28 5242880 63</span><br><span class="line">7 29 5242880 127</span><br><span class="line">7 30 5242880 255</span><br><span class="line">7 31 5242880 511</span><br><span class="line">7 32 5242880 1023</span><br><span class="line">7 33 5242880 2047</span><br><span class="line">7 34 5242880 4095</span><br><span class="line">7 35 5242880 8191</span><br><span class="line">7 36 5242880 16383</span><br><span class="line">7 37 5242880 32767</span><br><span class="line">7 38 5242880 65535</span><br><span class="line">7 39 5242880 131071</span><br><span class="line">7 40 5242880 262143</span><br><span class="line">7 41 5242880 524287</span><br><span class="line">8 22 5242880 63</span><br><span class="line">8 23 5242880 63</span><br><span class="line">8 24 5242880 63</span><br><span class="line">8 25 5242880 63</span><br><span class="line">8 26 5242880 63</span><br><span class="line">8 27 5242880 63</span><br><span class="line">8 29 5242880 127</span><br><span class="line">8 30 5242880 255</span><br><span class="line">8 31 5242880 511</span><br><span class="line">8 32 5242880 1023</span><br><span class="line">8 33 5242880 2047</span><br><span class="line">8 34 5242880 4095</span><br><span class="line">8 35 5242880 8191</span><br><span class="line">8 36 5242880 16383</span><br><span class="line">8 37 5242880 32767</span><br><span class="line">8 38 5242880 65535</span><br><span class="line">8 39 5242880 131071</span><br><span class="line">8 40 5242880 262143</span><br><span class="line">8 41 5242880 524287</span><br><span class="line">9 22 5242880 127</span><br><span class="line">9 23 5242880 127</span><br><span class="line">9 24 5242880 127</span><br><span class="line">9 25 5242880 127</span><br><span class="line">9 26 5242880 127</span><br><span class="line">9 27 5242880 127</span><br><span class="line">9 28 5242880 127</span><br><span class="line">9 30 5242880 255</span><br><span class="line">9 31 5242880 511</span><br><span class="line">9 32 5242880 1023</span><br><span class="line">9 33 5242880 2047</span><br><span class="line">9 34 5242880 4095</span><br><span class="line">9 35 5242880 8191</span><br><span class="line">9 36 5242880 16383</span><br><span class="line">9 37 5242880 32767</span><br><span class="line">9 38 5242880 65535</span><br><span class="line">9 39 5242880 131071</span><br><span class="line">9 40 5242880 262143</span><br><span class="line">9 41 5242880 524287</span><br><span class="line">10 22 5242880 255</span><br><span class="line">10 23 5242880 255</span><br><span class="line">10 24 5242880 255</span><br><span class="line">10 25 5242880 255</span><br><span class="line">10 26 5242880 255</span><br><span class="line">10 27 5242880 255</span><br><span class="line">10 28 5242880 255</span><br><span class="line">10 29 5242880 255</span><br><span class="line">10 31 5242880 511</span><br><span class="line">10 32 5242880 1023</span><br><span class="line">10 33 5242880 2047</span><br><span class="line">10 34 5242880 4095</span><br><span class="line">10 35 5242880 8191</span><br><span class="line">10 36 5242880 16383</span><br><span class="line">10 37 5242880 32767</span><br><span class="line">10 38 5242880 65535</span><br><span class="line">10 39 5242880 131071</span><br><span class="line">10 40 5242880 262143</span><br><span class="line">10 41 5242880 524287</span><br><span class="line">11 22 5242880 511</span><br><span class="line">11 23 5242880 511</span><br><span class="line">11 24 5242880 511</span><br><span class="line">11 25 5242880 511</span><br><span class="line">11 26 5242880 511</span><br><span class="line">11 27 5242880 511</span><br><span class="line">11 28 5242880 511</span><br><span class="line">11 29 5242880 511</span><br><span class="line">11 30 5242880 511</span><br><span class="line">11 32 5242880 1023</span><br><span class="line">11 33 5242880 2047</span><br><span class="line">11 34 5242880 4095</span><br><span class="line">11 35 5242880 8191</span><br><span class="line">11 36 5242880 16383</span><br><span class="line">11 37 5242880 32767</span><br><span class="line">11 38 5242880 65535</span><br><span class="line">11 39 5242880 131071</span><br><span class="line">11 40 5242880 262143</span><br><span class="line">11 41 5242880 524287</span><br><span class="line">12 22 5242880 1023</span><br><span class="line">12 23 5242880 1023</span><br><span class="line">12 24 5242880 1023</span><br><span class="line">12 25 5242880 1023</span><br><span class="line">12 26 5242880 1023</span><br><span class="line">12 27 5242880 1023</span><br><span class="line">12 28 5242880 1023</span><br><span class="line">12 29 5242880 1023</span><br><span class="line">12 30 5242880 1023</span><br><span class="line">12 31 5242880 1023</span><br><span class="line">12 33 5242880 2047</span><br><span class="line">12 34 5242880 4095</span><br><span class="line">12 35 5242880 8191</span><br><span class="line">12 36 5242880 16383</span><br><span class="line">12 37 5242880 32767</span><br><span class="line">12 38 5242880 65535</span><br><span class="line">12 39 5242880 131071</span><br><span class="line">12 40 5242880 262143</span><br><span class="line">12 41 5242880 524287</span><br><span class="line">13 22 5242880 2047</span><br><span class="line">13 23 5242880 2047</span><br><span class="line">13 24 5242880 2047</span><br><span class="line">13 25 5242880 2047</span><br><span class="line">13 26 5242880 2047</span><br><span class="line">13 27 5242880 2047</span><br><span class="line">13 28 5242880 2047</span><br><span class="line">13 29 5242880 2047</span><br><span class="line">13 30 5242880 2047</span><br><span class="line">13 31 5242880 2047</span><br><span class="line">13 32 5242880 2047</span><br><span class="line">13 34 5242880 4095</span><br><span class="line">13 35 5242880 8191</span><br><span class="line">13 36 5242880 16383</span><br><span class="line">13 37 5242880 32767</span><br><span class="line">13 38 5242880 65535</span><br><span class="line">13 39 5242880 131071</span><br><span class="line">13 40 5242880 262143</span><br><span class="line">13 41 5242880 524287</span><br><span class="line">14 22 5242880 4095</span><br><span class="line">14 23 5242880 4095</span><br><span class="line">14 24 5242880 4095</span><br><span class="line">14 25 5242880 4095</span><br><span class="line">14 26 5242880 4095</span><br><span class="line">14 27 5242880 4095</span><br><span class="line">14 28 5242880 4095</span><br><span class="line">14 29 5242880 4095</span><br><span class="line">14 30 5242880 4095</span><br><span class="line">14 31 5242880 4095</span><br><span class="line">14 32 5242880 4095</span><br><span class="line">14 33 5242880 4095</span><br><span class="line">14 35 5242880 8191</span><br><span class="line">14 36 5242880 16383</span><br><span class="line">14 37 5242880 32767</span><br><span class="line">14 38 5242880 65535</span><br><span class="line">14 39 5242880 131071</span><br><span class="line">14 40 5242880 262143</span><br><span class="line">14 41 5242880 524287</span><br><span class="line">15 22 5242880 8191</span><br><span class="line">15 23 5242880 8191</span><br><span class="line">15 24 5242880 8191</span><br><span class="line">15 25 5242880 8191</span><br><span class="line">15 26 5242880 8191</span><br><span class="line">15 27 5242880 8191</span><br><span class="line">15 28 5242880 8191</span><br><span class="line">15 29 5242880 8191</span><br><span class="line">15 30 5242880 8191</span><br><span class="line">15 31 5242880 8191</span><br><span class="line">15 32 5242880 8191</span><br><span class="line">15 33 5242880 8191</span><br><span class="line">15 34 5242880 8191</span><br><span class="line">15 36 5242880 16383</span><br><span class="line">15 37 5242880 32767</span><br><span class="line">15 38 5242880 65535</span><br><span class="line">15 39 5242880 131071</span><br><span class="line">15 40 5242880 262143</span><br><span class="line">15 41 5242880 524287</span><br><span class="line">16 22 5242880 16383</span><br><span class="line">16 23 5242880 16383</span><br><span class="line">16 24 5242880 16383</span><br><span class="line">16 25 5242880 16383</span><br><span class="line">16 26 5242880 16383</span><br><span class="line">16 27 5242880 16383</span><br><span class="line">16 28 5242880 16383</span><br><span class="line">16 29 5242880 16383</span><br><span class="line">16 30 5242880 16383</span><br><span class="line">16 31 5242880 16383</span><br><span class="line">16 32 5242880 16383</span><br><span class="line">16 33 5242880 16383</span><br><span class="line">16 34 5242880 16383</span><br><span class="line">16 35 5242880 16383</span><br><span class="line">16 37 5242880 32767</span><br><span class="line">16 38 5242880 65535</span><br><span class="line">16 39 5242880 131071</span><br><span class="line">16 40 5242880 262143</span><br><span class="line">16 41 5242880 524287</span><br><span class="line">17 22 5242880 32767</span><br><span class="line">17 23 5242880 32767</span><br><span class="line">17 24 5242880 32767</span><br><span class="line">17 25 5242880 32767</span><br><span class="line">17 26 5242880 32767</span><br><span class="line">17 27 5242880 32767</span><br><span class="line">17 28 5242880 32767</span><br><span class="line">17 29 5242880 32767</span><br><span class="line">17 30 5242880 32767</span><br><span class="line">17 31 5242880 32767</span><br><span class="line">17 32 5242880 32767</span><br><span class="line">17 33 5242880 32767</span><br><span class="line">17 34 5242880 32767</span><br><span class="line">17 35 5242880 32767</span><br><span class="line">17 36 5242880 32767</span><br><span class="line">17 38 5242880 65535</span><br><span class="line">17 39 5242880 131071</span><br><span class="line">17 40 5242880 262143</span><br><span class="line">17 41 5242880 524287</span><br><span class="line">18 22 5242880 65535</span><br><span class="line">18 23 5242880 65535</span><br><span class="line">18 24 5242880 65535</span><br><span class="line">18 25 5242880 65535</span><br><span class="line">18 26 5242880 65535</span><br><span class="line">18 27 5242880 65535</span><br><span class="line">18 28 5242880 65535</span><br><span class="line">18 29 5242880 65535</span><br><span class="line">18 30 5242880 65535</span><br><span class="line">18 31 5242880 65535</span><br><span class="line">18 32 5242880 65535</span><br><span class="line">18 33 5242880 65535</span><br><span class="line">18 34 5242880 65535</span><br><span class="line">18 35 5242880 65535</span><br><span class="line">18 36 5242880 65535</span><br><span class="line">18 37 5242880 65535</span><br><span class="line">18 39 5242880 131071</span><br><span class="line">18 40 5242880 262143</span><br><span class="line">18 41 5242880 524287</span><br><span class="line">19 22 5242880 131071</span><br><span class="line">19 23 5242880 131071</span><br><span class="line">19 24 5242880 131071</span><br><span class="line">19 25 5242880 131071</span><br><span class="line">19 26 5242880 131071</span><br><span class="line">19 27 5242880 131071</span><br><span class="line">19 28 5242880 131071</span><br><span class="line">19 29 5242880 131071</span><br><span class="line">19 30 5242880 131071</span><br><span class="line">19 31 5242880 131071</span><br><span class="line">19 32 5242880 131071</span><br><span class="line">19 33 5242880 131071</span><br><span class="line">19 34 5242880 131071</span><br><span class="line">19 35 5242880 131071</span><br><span class="line">19 36 5242880 131071</span><br><span class="line">19 37 5242880 131071</span><br><span class="line">19 38 5242880 131071</span><br><span class="line">19 40 5242880 262143</span><br><span class="line">19 41 5242880 524287</span><br><span class="line">20 22 5242880 262143</span><br><span class="line">20 23 5242880 262143</span><br><span class="line">20 24 5242880 262143</span><br><span class="line">20 25 5242880 262143</span><br><span class="line">20 26 5242880 262143</span><br><span class="line">20 27 5242880 262143</span><br><span class="line">20 28 5242880 262143</span><br><span class="line">20 29 5242880 262143</span><br><span class="line">20 30 5242880 262143</span><br><span class="line">20 31 5242880 262143</span><br><span class="line">20 32 5242880 262143</span><br><span class="line">20 33 5242880 262143</span><br><span class="line">20 34 5242880 262143</span><br><span class="line">20 35 5242880 262143</span><br><span class="line">20 36 5242880 262143</span><br><span class="line">20 37 5242880 262143</span><br><span class="line">20 38 5242880 262143</span><br><span class="line">20 39 5242880 262143</span><br><span class="line">20 41 5242880 524287</span><br><span class="line">21 22 5242880 524287</span><br><span class="line">21 23 5242880 524287</span><br><span class="line">21 24 5242880 524287</span><br><span class="line">21 25 5242880 524287</span><br><span class="line">21 26 5242880 524287</span><br><span class="line">21 27 5242880 524287</span><br><span class="line">21 28 5242880 524287</span><br><span class="line">21 29 5242880 524287</span><br><span class="line">21 30 5242880 524287</span><br><span class="line">21 31 5242880 524287</span><br><span class="line">21 32 5242880 524287</span><br><span class="line">21 33 5242880 524287</span><br><span class="line">21 34 5242880 524287</span><br><span class="line">21 35 5242880 524287</span><br><span class="line">21 36 5242880 524287</span><br><span class="line">21 37 5242880 524287</span><br><span class="line">21 38 5242880 524287</span><br><span class="line">21 39 5242880 524287</span><br><span class="line">21 40 5242880 524287</span><br><span class="line">22 42 2 0</span><br><span class="line">23 42 2 0</span><br><span class="line">24 42 5 0</span><br><span class="line">25 42 10 0</span><br><span class="line">26 42 20 0</span><br><span class="line">27 42 40 0</span><br><span class="line">28 42 80 0</span><br><span class="line">29 42 160 0</span><br><span class="line">30 42 320 0</span><br><span class="line">31 42 640 0</span><br><span class="line">32 42 1280 0</span><br><span class="line">33 42 2560 0</span><br><span class="line">34 42 5120 0</span><br><span class="line">35 42 10240 0</span><br><span class="line">36 42 20480 0</span><br><span class="line">37 42 40960 0</span><br><span class="line">38 42 81920 0</span><br><span class="line">39 42 163840 0</span><br><span class="line">40 42 327680 0</span><br><span class="line">41 42 655360 0</span><br></pre></td></tr></table></figure></div></div><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>本文假定读者对网络流有基本的了解（掌握并大致理解了最大流的增广路解法（EK / Dinic）即可）。</p><p>还要会解决无负权边的单源最短路问题（会 Dijkstra 算法即可）。</p><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><p>无源汇的流，每个点需要满足流入量等于流出量（流量平衡），并且每条边的流量不超过上限。</p><p>有源汇的流，存在源点 $s$ 和汇点 $t$，$s$ 只流出不流入，$t$ 只流入不流出，其它点满足流量平衡，并且每条边的流量不超过上限。</p><p>最大流问题，只在有源汇的流中有意义，即最大化 $s$ 的流出量（也就是 $t$ 的流入量）。</p><p>流的费用，是每条边的流量与费用之积的和。</p><p>最小费用最大流问题，在最大流的前提下，最小化流的费用。</p><p>（无源汇）最小费用流问题，只用最小化流的费用。</p><p>残量网络，是原图中每条没满流的边以及每条有流的边的反边（反边指方向相反，费用为相反数）构成的图。</p><p>增广路，在有源汇的流中指残量网络上一条 $s$ 到 $t$ 的路径，在无源汇的流中指残量网络上的一个环。</p><p>增广，指的是将一条增广路流量加一（增广路上的边容量减一，对应的反边容量加一）。</p><p>不加说明时，边的长度 / 路径的长度 / 环的长度（当然还有“最长路径”、“负环”之类的表述）中的“长度”都指费用。</p><p>$(u, v)$ 表示从 $u$ 到 $v$ 的有向边（本文只讨论原图为简单图的情况，非简单图是类似的），$cap(u, v)$ 表示 $(u, v)$ 这条边的容量，$cost(u, v)$ 表示 $(u, v)$ 这条边的费用。</p><h2 id="将最小费用最大流问题转化为无源汇最小费用流问题"><a href="#将最小费用最大流问题转化为无源汇最小费用流问题" class="headerlink" title="将最小费用最大流问题转化为无源汇最小费用流问题"></a>将最小费用最大流问题转化为无源汇最小费用流问题</h2><p>最小费用最大流问题可以转化为无源汇最小费用流问题，方法是连一条 $s$ 到 $t$，容量足够大，费用足够小（为一个负数）的边。这里的“容量足够大”指的是不小于最大流，“费用足够小”指的是小于 $s$ 到 $t$ 的最长简单路径费用的相反数。</p><p>由于“费用足够小”，若没有达成最大流，即存在 $s$ 到 $t$ 的增广路，任何一条不经过正环（若存在经过正环的增广路，一定也存在不经过正环的增广路）的 $s$ 到 $t$ 的增广路加上 $(t, s)$ 这条边的费用一定为负，所以通过这条增广路增广总费用一定更小，这说明，无源汇流中满足最小费用时，原问题同时满足了最小费用与最大流。</p><p>下文中讨论的都是无源汇最小费用流问题，也不会再次强调“无源汇”。</p><h2 id="负环"><a href="#负环" class="headerlink" title="负环"></a>负环</h2><p>一个流是最小费用流，当且仅当其残量网络中没有负环。</p><div><div class="fold_hider"><div class="close hider_title">证明：</div></div><div class="fold"><p>仅当（必要条件）：若存在负环可以在负环上增广，从而得到费用更小的流。</p><p>当（充分条件）：令所考虑的这个流为 $f$，取任意一个最小费用流 $f^{\ast}$，计算它们之间的差 $f^{\ast}-f$（对应边流量相减）。假设 $f$ 不是最小费用流，那么 $f^{\ast}-f$ 的总费用一定为负。由于 $f$ 和 $f^{\ast}$ 都流量平衡，$f^{\ast}-f$ 一定也流量平衡，所以它也是个合法的流，而一个流一定可以拆成若干个环（由于流量平衡，每个联通部分都有欧拉回路），若总费用为负就一定包含负环。又因为 $f^{\ast}-f$ 是在 $f$ 的基础上增广的，$f^{\ast}-f$ 一定是 $f$ 残量网络的一个子图，而其包含负环与 $f$ 的残量网络中没有负环矛盾，所以假设不成立。</p></div></div><h2 id="节点势能-amp-边的-reduced-cost"><a href="#节点势能-amp-边的-reduced-cost" class="headerlink" title="节点势能 &amp; 边的 reduced cost"></a>节点势能 &amp; 边的 reduced cost</h2><p>这两个概念的提出与最小费用流的线性规划形式的对偶问题相关，但了解这个对偶问题并不是必要的，所以本篇博客中不会提及。</p><p>给每个节点 $u$ 指定一个任意的势能 $p(u)$。（这个概念看起来很突兀，总之就是给每个节点新增了一个属性，它的值是任意的。）（本质上是线性规划对偶问题中的一个无限制变量。）</p><p>定义一条边 $(u, v)$ 关于某一组势能 $p$ 的 reduced cost（并不知道怎么翻译..）$C_p(u, v)$ 为 $p(u)+cost(u, v)-p(v)$。</p><p>reduced cost 有两个很好的性质：</p><ol><li><p>将原费用替换为 reduced cost 不影响最短路。（不是不影响最短路长度，而是不影响最短路是哪一条。）</p></li><li><p>将原费用替换为 reduced cost 不影响环的总费用。</p></li></ol><p>这两个性质都可以由 $C_p(u, v)+C_p(v, w)=p(u)+cost(u, v)+cost(v, w)-p(w)$（中间经过的点的势能相加后抵消）说明。</p><p>如果大家有了解过 Johnson 全源最短路径算法，里面也有类似的操作，用于保证边权非负，使得 Dijkstra 算法可以得到应用。在本文所介绍的最小费用流算法中也是一样，为了能够使用 Dijkstra 算法计算最短路，在过程中需要保证 reduced cost 非负。</p><h2 id="capacity-scaling"><a href="#capacity-scaling" class="headerlink" title="capacity scaling"></a>capacity scaling</h2><p>（这个也不知道怎么翻译..）</p><p>capacity scaling 从高到低考虑容量的最高若干位（比如容量为 $5$ ($101_2$)，第一次迭代时考虑最高一位，即 $1$ ($1_2$)，第二次迭代时考虑最高两位，即 $2$ ($10_2$)，第三次迭代时考虑最高三位，即 $5$ ($101_2$)），每次加入更低的位后更新答案。（这个过程和求快速幂有点像。）</p><p>它基于一个性质：将原图中每条边的容量乘二后，最小费用流每条边的流量分别乘二。</p><p>那么，若计算出了以 $\left\lfloor\frac{cap(u, v)}{2^k}\right\rfloor$ 为边 $(u, v)$ 的容量的最小费用流，现在要得到以 $\left\lfloor\frac{cap(u, v)}{2^{k-1}}\right\rfloor$ 为边 $(u, v)$ 的容量的最小费用流，只需要先将流乘二，然后对每条二进制中该位为 $1$ 的边进行容量加一的操作即可。</p><p>所以，问题转化为了给一条边的容量加一，更新最小费用流。</p><h2 id="给一条边的容量加一"><a href="#给一条边的容量加一" class="headerlink" title="给一条边的容量加一"></a>给一条边的容量加一</h2><p>在上文中已经证明，最小费用流等价于残量网络中没有负环。</p><p>所以，若容量加一后若产生负环，进行增广即可。</p><p>为了优化常数，可以特判掉容量加一前该边已存在于残量网络的情况，直接跳过。</p><p>令容量加一的这条边为 $(u, v)$，找负环可以先求出从 $v$ 出发以 reduced cost 为长度到每个点 $i$ 的最短路 $d(i)$（这个最短路不包括 $(u, v)$ 这条边， 由于当前维护的残量网络是容量加一之前的最小费用流，不存在负环，所以最短路是可以求的），判断 $d(u)+C_p(u, v)$ 是否小于 $0$ 即可。</p><p>为了使用 Dijkstra 算法，还需要保证 reduced cost 非负，所以需要调整节点的势能。</p><p>这里直接给出一种做法：求出上文所述的最短路 $d(i)$（若 $x$ 不可达就将 $d(x)$ 设为 $\max_{\text{节点 }i\text{ 可达}}\{d(i)\}+max(0, -C_p(u, v))$），然后将每个点 $i$ 的势能加上 $d(i)$（用 $p’(i)$ 表示节点 $i$ 更新后的势能）。</p><div><div class="fold_hider"><div class="close hider_title">这样调整后残量网络中的每一条边的 reduced cost 依然非负的证明：</div></div><div class="fold"><p>对于 $(u, v)$ 这条边，若 $u$ 不可达，那么：</p><p>$$<br>\begin{aligned}<br>C_{p’}(u, v)<br>&amp;=p’(u)+cost(u, v)-p’(v)\\<br>&amp;=p(u)+max(0, -C_p(u, v))+cost(u, v)-p(v)\\<br>&amp;\ge p(u)-(p(u)+cost(u, v)-p(v))+cost(u, v)-p(v)\\<br>&amp;=0<br>\end{aligned}<br>$$</p><p>若 $u$ 可达且 $(u, v)$ 这条边加入后产生了负环，负环会被增广，$(u, v)$ 这条边就不存在了。</p><p>若 $u$ 可达且 $(u, v)$ 这条边加入后没有产生负环，即 $d(u)+C_p(u, v)\ge 0$，那么 $C_{p’}(u, v)=d(u)+C_p(u, v)-d(v)=d(u)+C_p(u, v)\ge 0$。</p><p>capacity scaling 算法在初始时所有边容量均为 $0$（也就是说残量网络为空），所以可以在除 $(u, v)$ 外每条边的 reduced cost 均非负的基础上归纳证明。</p><p>对于其它从 $u$ 可达的边 $(x, y)$，由于 $d(y)\le d(x)+C_p(x, y)$（最短路的性质），即 $d(y)\le d(x)+p(x)+cost(x, y)-p(y)$，所以 $p(x)+d(x)+cost(x, y)-(p(y)+d(y))\ge 0$，即 $p’(x)+cost(x, y)-p’(y)\ge 0$，也就是说 $u$ 可达的边 reduced cost 调整后非负。</p><p>对于其它从 $u$ 可达与从 $u$ 不可达交界处的边 $(x, y)$（由于这条边不可达，一定是 $x$ 不可达 $y$ 可达），由于 $C_p(x, y)\ge 0$ 且 $d(x)=\max_{\text{节点 }i\text{ 可达}}\{d(i)\}+max(0, -C_p(u, v))\ge d(y)$，这样的边调整后 reduced cost 也非负。</p><p>对于连接从 $u$ 不可达的两个点 $x$，$y$ 的边，$d(x)=d(y)$，调整后 reduced cost 也非负。</p><p>综上所述，调整后残量网络中的每一条边的 reduced cost 依然非负。</p></div></div><p>进而我们还可以得出，上述流程结束后，残量网络中不存在负环，即上述流程可以计算出当前的最小费用流。</p><h2 id="防止溢出"><a href="#防止溢出" class="headerlink" title="防止溢出"></a>防止溢出</h2><p>上一部分中给出的势能调整方式能够保证 reduced cost 非负，但在实际实现时会有势能太大从而溢出的风险。</p><p>防止溢出的方法也很简单，新建一个点 $k$，从 $k$ 向所有点连长度为 $0$ 的边，求从 $k$ 出发以原费用（而非 reduced cost）为长度的最短路（由于更新后的残量网络是当前的最小费用流，不存在负环，新增的 $k$ 以及 $k$ 连向其它节点的边也不会带来新的负环，所以最短路是可以求的），以 $k$ 到 $i$ 的最短路作为调整后节点 $i$ 的势能。这样调整后，$C_p(x, y)=d(x)+cost(x, y)-d(y)\ge 0$（由最短路性质得到），并且每个节点的势能的值域不会超过 $[\min(0, (n-1)\min\{cost(u, v)\}), 0]$。</p><p>虽然是以原费用为长度，计算最短路时还是可以利用 reduced cost 来计算。由于只有从 $k$ 连出的边可能 reduced cost 为负，而 $k$ 又是第一个松弛的，所以这不会影响 Dijkstra 算法的正确性（当然，也可以为 $k$ 设置一个足够大的势能来保证从 $k$ 连出的边 reduced cost 也非负）。</p><h2 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h2><p>若求的是最小费用最大流，首先通过加一条 $s$ 到 $t$ 的边转化为无源汇最小费用流。</p><p>使用 capacity scaling，枚举考虑容量的最高 $k$ 位，每次迭代开始时将残量网络中每条边的容量以及答案乘二，然后枚举每条二进制中该位为 $1$ 的边，使其容量加一。</p><p>给一条边容量加一时，先特判掉这条边本来就在残量网络中的情况（优化常数），然后判是否产生了负环，若产生了负环就增广这个负环，然后调整节点势能使得所有 reduced cost 非负，最后通过计算新增节点到每个节点的最短路来更新节点势能防止溢出。</p><p>复杂度瓶颈在求无负权边单源最短路上，总共需要计算 $O(m\log U)$ 次（$U$ 为边的最大容量）最短路，如果使用 <code>priority_queue</code> 来实现 Dijkstra 算法，总复杂度为 $O(m^2\log U\log m)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="http://uoj.ac/problem/487" target="_blank" rel="noopener">模板题</a>。</p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ll LARGE = <span class="number">1e12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, from, to, pre;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; raw_cap, cap, cost, p, dis;</span><br><span class="line">priority_queue&lt;pli, <span class="built_in">vector</span>&lt;pli&gt;, greater&lt;pli&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt.push_back(head[u]);</span><br><span class="line">    head[u] = to.size();</span><br><span class="line">    from.push_back(u);</span><br><span class="line">    to.push_back(v);</span><br><span class="line">    raw_cap.push_back(f);</span><br><span class="line">    cap.push_back(<span class="number">0</span>);</span><br><span class="line">    cost.push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u, v, f, w);</span><br><span class="line">    add(v, u, <span class="number">0</span>, -w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">c</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[from[id]] + cost[id] - p[to[id]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis.assign(n + <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">    dis.assign(n + <span class="number">2</span>, INF);</span><br><span class="line">    pre.assign(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(pli(<span class="number">0</span>, s));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().second;</span><br><span class="line">        ll w = q.top().first;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = to[i];</span><br><span class="line">            <span class="keyword">if</span> (cap[i] &amp;&amp; dis[v] &gt; w + c(i))</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = w + c(i);</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                q.push(pli(dis[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_one_cap</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = from[id];</span><br><span class="line">    <span class="keyword">int</span> v = to[id];</span><br><span class="line">    <span class="keyword">if</span> (cap[id])</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(v);</span><br><span class="line">    <span class="keyword">if</span> (dis[u] &lt; INF &amp;&amp; dis[u] + c(id) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (u != v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = pre[u];</span><br><span class="line">            --cap[x];</span><br><span class="line">            ++cap[x ^ <span class="number">1</span>];</span><br><span class="line">            u = from[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ++cap[id];</span><br><span class="line">    ll max_dis = <span class="number">0</span>;</span><br><span class="line">    ll cur_len = c(id);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (dis[i] &lt; INF) max_dis = max(max_dis, dis[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] += dis[i] &lt; INF ? dis[i] : max_dis + max(<span class="number">0l</span>l, -cur_len);</span><br><span class="line">    </span><br><span class="line">    dijkstra(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] += dis[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, t;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    head.resize(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    p.resize(n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u, v, f, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; f &gt;&gt; w;</span><br><span class="line">        add_edge(u, v, f, w);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    add_edge(t, s, LARGE, -LARGE);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        add_edge(n + <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cap[to.size() - <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span> + <span class="number">1</span>; ++j) cap[j] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((raw_cap[j] &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add_one_cap(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll min_cost = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) min_cost += cap[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * cost[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cap[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; min_cost;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="关于-SPFA"><a href="#关于-SPFA" class="headerlink" title="关于 SPFA"></a>关于 SPFA</h2><p>如果把算法中的 Dijkstra 换成 SPFA，reduced cost 就不需要了，调整势能和防止溢出两部分都可以去掉，加上 SPFA 本身就略微比 Dijkstra 好写，总体会好写不少，复杂度是 $O(nm^2\log U)$，但很难卡满，而且由于不用防止溢出，少跑很多遍最短路，总体跑的非常快。</p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ll LARGE = <span class="number">1e12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; inq;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; raw_cap, cap, cost, dis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, from, to, pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt.push_back(head[u]);</span><br><span class="line">    head[u] = to.size();</span><br><span class="line">    from.push_back(u);</span><br><span class="line">    to.push_back(v);</span><br><span class="line">    raw_cap.push_back(f);</span><br><span class="line">    cap.push_back(<span class="number">0</span>);</span><br><span class="line">    cost.push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u, v, f, w);</span><br><span class="line">    add(v, u, <span class="number">0</span>, -w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inq.assign(n + <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">    dis.assign(n + <span class="number">2</span>, INF);</span><br><span class="line">    pre.assign(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> u = q.front();</span><br><span class="line">    inq[u] = <span class="literal">false</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> v = to[i];</span><br><span class="line">    ll w = cost[i];</span><br><span class="line">    <span class="keyword">if</span> (cap[i] &amp;&amp; dis[v] &gt; dis[u] + w)</span><br><span class="line">    &#123;</span><br><span class="line">    dis[v] = dis[u] + w;</span><br><span class="line">    pre[v] = i;</span><br><span class="line">    <span class="keyword">if</span> (!inq[v])</span><br><span class="line">    &#123;</span><br><span class="line">    inq[v] = <span class="literal">true</span>;</span><br><span class="line">    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_one_cap</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = from[id];</span><br><span class="line">    <span class="keyword">int</span> v = to[id];</span><br><span class="line">    <span class="keyword">if</span> (cap[id])</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(v);</span><br><span class="line">    <span class="keyword">if</span> (dis[u] &lt; INF &amp;&amp; dis[u] + cost[id] &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (u != v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = pre[u];</span><br><span class="line">            --cap[x];</span><br><span class="line">            ++cap[x ^ <span class="number">1</span>];</span><br><span class="line">            u = from[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ++cap[id];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, t; </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    head.resize(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u, v, f, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; f &gt;&gt; w;</span><br><span class="line">        add_edge(u, v, f, w);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    add_edge(t, s, LARGE, -LARGE);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        add_edge(n + <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cap[to.size() - <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span> + <span class="number">1</span>; ++j) cap[j] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((raw_cap[j] &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add_one_cap(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll min_cost = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) min_cost += cap[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * cost[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cap[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; min_cost;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="关于出题"><a href="#关于出题" class="headerlink" title="关于出题"></a>关于出题</h2><p>尽管多数人使用的 SSP 算法是伪多项式复杂度的，我并不建议在题目中卡掉它。</p><p>但需要注意的是，“不卡掉”是指设置合适的数据范围，使得 SSP 可以确保通过。如果设置了不合理的数据范围而测试数据中没有卡掉 SSP，那么不仅卡了 SSP，数据也不合格。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://min-25.hatenablog.com/entry/2018/03/19/235802" target="_blank" rel="noopener">Min_25 最小費用最大流の悪例題</a></p></li><li><p><a href="https://web.stanford.edu/class/cs361b/files/cs361b-notes.pdf" target="_blank" rel="noopener">Stanford CS 361B: Advanced Algorithms, Spring 2014 Lecture Notes</a></p></li><li><p><a href="https://www.math.ubc.ca/~anstee/math523/StronglyPolynomialNetworkFlow.pdf" target="_blank" rel="noopener">A Faster Strongly Polynomial Minimum Cost Flow Algorithm</a></p></li><li><p><a href="https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf" target="_blank" rel="noopener">Theoretical Improvements in Algorithmic Efficiency for Network Flow Problems</a></p></li><li><p><a href="https://github.com/Laakeri/tiralabra" target="_blank" rel="noopener">Github repo Laakeri/tiralabra</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数人所使用的费用流算法 SSP（successive shortest path，即每次求出残量网络中 $s$ 到 $t$ 关于费用的最短路进行增广）是伪多项式复杂度的，最坏情况下复杂度为 $O(nmf)$，其中 $f$ 为最大流。已知有一种在点数为 $n$，边数为 $O(n^2)$，值域为 $O(2^{n/2})$ 时将其用时卡成 $O(2^{n/2}n^2\log n)$ 的构造方法。&lt;/p&gt;
&lt;p&gt;本文将介绍一种复杂度为进行 $O(m\log U)$ 次（$U$ 表示边的最大容量）无负权边单源最短路（使用 &lt;code&gt;priority_queue&lt;/code&gt; 实现 Dijkstra 算法即为 $O(m^2\log U\log m)$）的弱多项式复杂度算法。&lt;/p&gt;
&lt;p&gt;其实这个算法并不是很复杂（只是相关资料比较少，会对学习造成一定困难，这也是我写这篇博客的原因），最小费用最大流的模板也只需要 $2.5KB$，并不比常见的伪多项式复杂度算法长很多。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://ouuan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="https://ouuan.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>CF3D Least Cost Bracket Sequence（贪心）</title>
    <link href="https://ouuan.github.io/CF3D-Least-Cost-Bracket-Sequence%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF3D-Least-Cost-Bracket-Sequence（贪心）/</id>
    <published>2019-10-16T13:50:44.000Z</published>
    <updated>2019-10-16T14:09:55.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/3/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有一个长为 $n$ 的括号序列，其中一些位置是问号，每个问号替换成左括号或替换成右括号各有给定的代价，判断是否能够构造出一个合法的括号序列，如果可以，求出最小代价。</p><p>$n\le 5\cdot 10^4$（实际上可以大很多）。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>考虑使用带反悔的贪心。</p><p>如果用 $cnt[i]$ 表示 $\sum_{j=1}^i(-1)^{[a_i=’)’]}$（左括号比右括号多的个数），括号序列合法当且仅当 $\forall i,cnt[i]\ge 0$ 且 $cnt[n]=0$。</p><p>如果把右括号反悔成左括号，一定可以保证 $cnt[i]\ge 0$ 这个条件依然满足。</p><p>但是，如果把左括号反悔成右括号，有可能造成本来 $cnt[i]\ge 0$ 的位置小于 $0$。</p><p>并且，如果选择了多余的左括号，还会导致 $cnt[n]&gt;0$。</p><p>如何解决这些问题呢？</p><p>可以发现，如果初始时优先选择右括号，上述问题就都得到解决了。</p><p>即，每次碰到问号都选右括号，并且将其标记为可以反悔为左括号。如果 $cnt[i]&lt;0$，就从可反悔的右括号里选反悔代价最小的改成左括号。这样的话，$cnt[i]\ge 0$ 不会因反悔而被破坏，$cnt[n]&gt;0$ 也不会在有解时发生。</p><p>具体实现可以用堆（<code>priority_queue</code>）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">priority_queue&lt;pii, <span class="built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) ++cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">')'</span>) --cnt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            --cnt;</span><br><span class="line">            s[i] = <span class="string">')'</span>;</span><br><span class="line">            ans += b;</span><br><span class="line">            q.push(pii(a - b, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.empty()) <span class="keyword">break</span>;</span><br><span class="line">            cnt += <span class="number">2</span>;</span><br><span class="line">            ans += q.top().first;</span><br><span class="line">            s[q.top().second] = <span class="string">'('</span>;</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%I64d\n%s"</span>, ans, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/3/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有一个长为 $n$ 的括号序列，其中一些位置是问号，每个问号替换成左括号或替换成右括号各有给定的代价，判断是否能够构造出一个合法的括号序列，如果可以，求出最小代价。&lt;/p&gt;
&lt;p&gt;$n\le 5\cdot 10^4$（实际上可以大很多）。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF512C Fox And Dinner（二分图，最大流）</title>
    <link href="https://ouuan.github.io/CF512C-Fox-And-Dinner%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF512C-Fox-And-Dinner（二分图，最大流）/</id>
    <published>2019-10-15T11:50:54.000Z</published>
    <updated>2019-10-16T04:32:31.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/512/problem/C" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你 $n$ 个整数，需要将它们分成任意个至少包含 $3$ 个数的环，使得每相邻两个数加起来是一个质数。</p><p>判断是否有解，若有解输出任意一组解。</p><p>$3\le n\le 200$, 数的范围是 $[2,10^4]$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，由于每个数都大于等于 $2$，加起来是质数的必要条件是一奇一偶。</p><p>所以，如果把数看成点，相加得到质数看成边，就得到了一张二分图。</p><p>而题目的要求可以看作是每个点都匹配两个点。因为所有点度数都为 $2$ 的简单无向图一定是一个至少包含 $3$ 个点的环。</p><p>所以可以这样建图：源点到奇数，容量为 $2$；奇数到与其之和为质数的偶数，容量为 $1$；偶数到汇点，容量为 $2$。</p><p>如果最大流为 $n$ 就有解。输出方案就和普通的网络流输出方案差不多（可以参考代码）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], p[W], tot;</span><br><span class="line"><span class="keyword">bool</span> np[W];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flow</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> s = N - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> t = N - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> head[N], nxt[N * N], to[N * N], edge[N * N], cnt;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">int</span> dep[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        nxt[++cnt] = head[u];</span><br><span class="line">        head[u] = cnt;</span><br><span class="line">        to[cnt] = v;</span><br><span class="line">        edge[cnt] = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s] = <span class="number">0</span>;</span><br><span class="line">        q.push(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = to[i];</span><br><span class="line">                <span class="keyword">int</span> w = edge[i];</span><br><span class="line">                <span class="keyword">if</span> (w &gt; <span class="number">0</span> &amp;&amp; dep[v] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ~dep[t];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u] == dep[t]) <span class="keyword">return</span> u == t ? flow : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i &amp;&amp; flow - out; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = to[i];</span><br><span class="line">            <span class="keyword">int</span> w = edge[i];</span><br><span class="line">            <span class="keyword">if</span> (dep[v] == dep[u] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> f = dfs(v, min(flow - out, w));</span><br><span class="line">                edge[i] -= f;</span><br><span class="line">                edge[i ^ <span class="number">1</span>] += f;</span><br><span class="line">                out += f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs()) out += dfs(s, N);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>) Add(s, i, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> Add(i, t, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(a[i] &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (np[a[i] + a[j]]) <span class="keyword">continue</span>;</span><br><span class="line">                Add(i, j, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cycle(<span class="keyword">int</span> u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out(<span class="number">1</span>, u);</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = to[i];</span><br><span class="line">                <span class="keyword">int</span> w = edge[i];</span><br><span class="line">                <span class="keyword">if</span> (((a[u] &amp; <span class="number">1</span>) ^ (w &gt; <span class="number">0</span>)) &amp;&amp; v &lt;= n &amp;&amp; !vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = flag = <span class="literal">true</span>;</span><br><span class="line">                    out.push_back(v);</span><br><span class="line">                    u = v;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) ans.push_back(cycle(i));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i].size());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans[i].size(); ++j) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; flow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; W; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i]) p[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt; W; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            np[i * p[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line"></span><br><span class="line">    flow.init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flow.maxFlow() != n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flow.output();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/512/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你 $n$ 个整数，需要将它们分成任意个至少包含 $3$ 个数的环，使得每相邻两个数加起来是一个质数。&lt;/p&gt;
&lt;p&gt;判断是否有解，若有解输出任意一组解。&lt;/p&gt;
&lt;p&gt;$3\le n\le 200$, 数的范围是 $[2,10^4]$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="网络流" scheme="https://ouuan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://ouuan.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>CF508D Tanya and Password（欧拉路径）</title>
    <link href="https://ouuan.github.io/CF508D-Tanya-and-Password%EF%BC%88%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF508D-Tanya-and-Password（欧拉路径）/</id>
    <published>2019-10-15T07:01:00.000Z</published>
    <updated>2019-10-15T13:36:02.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/508/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有一个字符串 $S[1..n+2]$，告诉你 $\forall 1\le i\le n, S[i..i+2]$（所有长为 $3$ 的子串），求任意一个满足条件的 $S$。</p><p>$1\le n\le 2\cdot 10^5$，字符集为大小写字母 + 数字。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>容易想到需要建图。</p><p>但是，如果把每个长为 $3$ 的子串看成点，前后缀匹配看成边，就做不下去了。</p><p>正确做法是把每个长为 $2$ 的子串看成点，长为 $3$ 的子串看成边。这样原问题就转化成了求有向图的欧拉路径。（不会这个的话建议自行搜索一下。）</p><p>如果每次 dfs 同一个点时都遍历所有出边，度数比较大就会挂。使用 vector 存边的话可以 <code>pop_back()</code> 或者记录一下已经遍历到了哪一条边，使用前向星的话可以像当前弧优化那样修改 <code>head</code>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">62</span> * <span class="number">62</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N], to[N], cnt;</span><br><span class="line"><span class="keyword">int</span> n, ind[N], outd[N], tot;</span><br><span class="line"><span class="keyword">char</span> s[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charToInt</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isdigit</span>(x)) <span class="keyword">return</span> x - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">islower</span>(x)) <span class="keyword">return</span> x - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> x - <span class="string">'A'</span> + <span class="number">36</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">intToChar</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">10</span>) <span class="keyword">return</span> x + <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">36</span>) <span class="keyword">return</span> x - <span class="number">10</span> + <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">return</span> x - <span class="number">36</span> + <span class="string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wordToInt</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> charToInt(x) * <span class="number">62</span> + charToInt(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = head[u]; i; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        i = nxt[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[--tot] = intToChar(u % <span class="number">62</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">int</span> u = wordToInt(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> v = wordToInt(s[<span class="number">1</span>], s[<span class="number">2</span>]);</span><br><span class="line">        ++outd[u];</span><br><span class="line">        ++ind[v];</span><br><span class="line">        add(u, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oneMoreIn = <span class="number">0</span>, oneMoreOut = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ind[i] == outd[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (ind[i] == outd[i] + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (oneMoreIn) fail();</span><br><span class="line">            oneMoreIn = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ind[i] + <span class="number">1</span> == outd[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (oneMoreOut) fail();</span><br><span class="line">            oneMoreOut = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> fail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oneMoreOut)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (outd[i])</span><br><span class="line">            &#123;</span><br><span class="line">                oneMoreOut = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tot = n + <span class="number">2</span>;</span><br><span class="line">    dfs(oneMoreOut);</span><br><span class="line">    ans[--tot] = intToChar(oneMoreOut / <span class="number">62</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!tot) <span class="built_in">printf</span>(<span class="string">"YES\n%s"</span>, ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/508/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有一个字符串 $S[1..n+2]$，告诉你 $\forall 1\le i\le n, S[i..i+2]$（所有长为 $3$ 的子串），求任意一个满足条件的 $S$。&lt;/p&gt;
&lt;p&gt;$1\le n\le 2\cdot 10^5$，字符集为大小写字母 + 数字。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="建图" scheme="https://ouuan.github.io/tags/%E5%BB%BA%E5%9B%BE/"/>
    
      <category term="欧拉路径" scheme="https://ouuan.github.io/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>gym102268D Dates（贪心，二分图匹配，线段树）</title>
    <link href="https://ouuan.github.io/gym102268D-Dates%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%8C%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/gym102268D-Dates（贪心，二分图匹配，线段树）/</id>
    <published>2019-10-11T03:30:32.000Z</published>
    <updated>2019-10-15T13:36:02.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/gym/102268/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张二分图：左边 $t$ 个位置，第 $i$ 个位置上有 $a_i$ 个点；右边 $n$ 个带权的点，第 $i$ 个点与位置在 $[l_i, r_i]$ 之间的所有左边的点有连边；匹配权值为匹配中右边点的权值之和；求最大权匹配。</p><p>$1\le n,t\le 3\cdot 10^5$，保证 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，将右边的点按权值从大到小排序，依次加入，看有没有完全匹配，有就选这个点。这样一定是最优的，好像可以用拟阵相关的理论证明，但我不太会..</p><p>于是，问题转化成了如何判定是否存在完全匹配，而霍尔定理恰恰是用来做这件事的——考虑右边的点中被选择的那些，选择其一个子集，判断是否所有子集的邻域（即与其相邻的点构成的集合）大小都比子集本身大。</p><p>如果选择的子集中元素对应的区间的并集不是连续的，霍尔定理的条件成立等价于对于断点两边分别成立，所以只需要考虑子集对应的区间连续的情况。</p><p>又由于 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$，只用考虑子集中的元素本身编号连续的情况。那么，霍尔定理的条件就可以表示为：</p><p>$$<br>\forall 1\le i&lt; j\le n,[i,j]\text{中被选择的右侧点个数}\le [l_i,r_j]\text{中左侧点数量}<br>$$</p><p>如果处理出 $a_{1..t}$ 的前缀和 $pre[i]=\sum_{j=1}^ia_j$，用 $p[i]$ 表示 $[1,i]$ 中被选择的右侧点个数，那么式子就变成了：</p><p>$$<br>\forall1\le i&lt; j\le n, p[j]-p[i-1]\le pre[r_j]-pre[l_i-1]<br>$$</p><p>也就是：</p><p>$$<br>\forall1\le i&lt; j\le n, pre[l_i-1]-p[i-1]\le pre[r_j]-p[j]<br>$$</p><p>所以，可以对每个元素 $i$ 维护 $pre[l_{i+1}-1]-p[i]$ 以及 $pre[r_j]-p[j]$。</p><p>$pre$ 是定值，考虑如何更新 $p$。事实上，往已选择的点中加入一个点，就是把一段后缀的 $p$ 加一。所以可以考虑用线段树维护。</p><p>并且，一段后缀加一（令这段后缀为 $[x..n]$）后，只有 $i&lt; x,j\ge x$ 的数对 $(i,j)$ 对应的大小关系发生改变，事实上只用判断 $i&lt;x$ 的 $pre[l_i-1]-p[i-1]$ 的最大值与 $j\ge x$ 的 $pre[r_j]-p[j]$ 的最小值的大小关系即可，同样可以使用线段树维护。</p><p>另一种判断方法，是在线段树上的每个节点处判断左儿子与右儿子有没有出现不满足霍尔定理条件的情况。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>代码中使用了 <a href="https://github.com/ouuan/segmentTree" target="_blank" rel="noopener">segmenttree.h</a>。</p><h3 id="每次判断前缀与后缀的大小关系"><a href="#每次判断前缀与后缀的大小关系" class="headerlink" title="每次判断前缀与后缀的大小关系"></a>每次判断前缀与后缀的大小关系</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"segmenttree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Girl&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p &gt; y.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mn, mx;</span><br><span class="line">    Value(ll _mn = INF, ll _mx = -INF)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = _mn;</span><br><span class="line">        mx = _mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Value&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Value <span class="title">merge</span><span class="params">(Value x, Value y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value(min(x.mn, y.mn), max(x.mx, y.mx));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;Value, <span class="keyword">int</span>&gt;&amp; u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.val.mx += x;</span><br><span class="line">    u.val.mn += x;</span><br><span class="line">    u.tag += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pre[i] = pre[i - <span class="number">1</span>] + read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].l = read();</span><br><span class="line">        g[i].r = read();</span><br><span class="line">        g[i].p = read();</span><br><span class="line">        g[i].id = i;</span><br><span class="line">        a[i].mn = pre[g[i].r];</span><br><span class="line">        a[i - <span class="number">1</span>].mx = pre[g[i].l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(g + <span class="number">1</span>, g + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    segmentTree&lt;Value, <span class="keyword">int</span>, merge, update&gt; t(<span class="number">0</span>, n + <span class="number">1</span>, a, Value());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.query(<span class="number">0</span>, g[i].id).mx &gt;= t.query(g[i].id, n + <span class="number">1</span>).mn) <span class="keyword">continue</span>;</span><br><span class="line">        t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        ans += g[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在线段树的每个节点处判断"><a href="#在线段树的每个节点处判断" class="headerlink" title="在线段树的每个节点处判断"></a>在线段树的每个节点处判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"segmenttree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Girl&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p &gt; y.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mn, mx;</span><br><span class="line">    <span class="keyword">bool</span> inv;</span><br><span class="line">    Value(ll _mn = INF, ll _mx = -INF, <span class="keyword">int</span> _inv = <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = _mn;</span><br><span class="line">        mx = _mx;</span><br><span class="line">        inv = _inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Value&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Value <span class="title">merge</span><span class="params">(Value x, Value y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value(min(x.mn, y.mn), max(x.mx, y.mx), x.inv || y.inv || x.mx &gt; y.mn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;Value, <span class="keyword">int</span>&gt;&amp; u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.val.mx += x;</span><br><span class="line">    u.val.mn += x;</span><br><span class="line">    u.tag += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pre[i] = pre[i - <span class="number">1</span>] + read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].l = read();</span><br><span class="line">        g[i].r = read();</span><br><span class="line">        g[i].p = read();</span><br><span class="line">        g[i].id = i;</span><br><span class="line">        a[i].mn = pre[g[i].r];</span><br><span class="line">        a[i - <span class="number">1</span>].mx = pre[g[i].l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(g + <span class="number">1</span>, g + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    segmentTree&lt;Value, <span class="keyword">int</span>, merge, update&gt; t(<span class="number">0</span>, n + <span class="number">1</span>, a, Value());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.query(<span class="number">0</span>, n + <span class="number">1</span>).inv) t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> ans += g[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102268/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张二分图：左边 $t$ 个位置，第 $i$ 个位置上有 $a_i$ 个点；右边 $n$ 个带权的点，第 $i$ 个点与位置在 $[l_i, r_i]$ 之间的所有左边的点有连边；匹配权值为匹配中右边点的权值之和；求最大权匹配。&lt;/p&gt;
&lt;p&gt;$1\le n,t\le 3\cdot 10^5$，保证 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="二分图匹配" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>CF878E Numbers on the blackboard（贪心，并查集）</title>
    <link href="https://ouuan.github.io/CF878E-Numbers-on-the-blackboard%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF878E-Numbers-on-the-blackboard（贪心，并查集）/</id>
    <published>2019-10-08T12:49:18.000Z</published>
    <updated>2019-10-08T16:24:38.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/878/problem/E" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>对于一个数列，每次操作可以将相邻的两个数 $x$ 和 $y$ 合并成一个数 $x+2y$，定义一个数列的权值为进行操作直至只剩一个数能得到的最大值。</p><p>多组询问，每次给定一个区间，求这个区间的权值。</p><p>数列值域 $-10^9\sim10^9$，数列长度和询问个数不超过 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>先不考虑多组询问。</p><p>经过（并不）简单的推理，可以发现，设数列 $a_{1..n}$ 的权值为 $\sum_{i=1}^na_i2^{k_i}$，那么 $k_1=0$, $1\le k_i\le k_{i-1}+1(i\ge 2)$。</p><p>那么，最优方案中，$k_{2..n}$ 一定是一块一块从 $1$ 开始严格递增的。</p><p>如果我们已经知道了一个数列 $k_i$ 的构成，这时要在其末端加入一个数，那么可以得到贪心策略：</p><ol><li>若加入的数是正数，与前一块合并。若合并后整块构成的等比数列之和仍为正数，继续合并。</li><li>否则结束合并过程。</li></ol><p>这个合并的过程可以用并查集维护。</p><p>问题在于，如何判断一块的正负。可以对每块维护它的大小（块中的第 $i$ 个数与 $2^i$ 的乘积之和），合并时更新。但这样做可能会溢出，但可以发现，一旦一块的大小达到 $10^9$，一定会一直合并到最前面，所以大于 $10^9$ 的都可以视作 $10^9$；一旦前一块的长度超过 $30$ 且当前块大小为正，也一定会一直合并到最前面，也可以视作 $10^9$。</p><p>接下来考虑如何回答询问。</p><p>把询问离线下来，右端点相同的询问一起处理。处理一个询问之前先计算出 $a_{1..r}$ 的块，若 $l=1$ 答案就是所有块大小的和，否则的话答案会是若干块的答案之和加上一个块的后缀。因为取一个块的后缀，断点所在块一定不会分开（一块的真后缀一定为正），后面的块也不会合并到前面去。处理出模意义下块答案的前缀和，以及 $presum_i=\sum_{j=1}^i2^{i-1}a_i$，就可以快速回答询问了。</p><p>还有一个小问题：只有第一块的系数是从 $2^0=1$ 开始的。由于计算时第一块一定是那个后缀，计算后缀答案时从 $1$ 开始，计算整块答案时从 $2$ 开始即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], presum[N], inv2[N], f[N], len[N], sum[N], preans[N], out[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll) (presum[r] - presum[l - <span class="number">1</span>] + mod) * inv2[l - <span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    inv2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, two = <span class="number">1</span>; i &lt;= n; ++i, two = two * <span class="number">2</span> % mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        inv2[i] = (ll) inv2[i - <span class="number">1</span>] * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">        presum[i] = (presum[i - <span class="number">1</span>] + (ll) two * a[i] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        q[r].push_back(pii(l, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        len[i] = <span class="number">1</span>;</span><br><span class="line">        sum[i] = a[i];</span><br><span class="line">        <span class="keyword">while</span> (find(i) &gt; <span class="number">1</span> &amp;&amp; sum[find(i)] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = find(i);</span><br><span class="line">            <span class="keyword">int</span> y = find(x - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (len[y] &gt;= <span class="number">30</span> || (((ll) sum[x]) &lt;&lt; len[y]) + sum[y] &gt;= <span class="number">1e9</span>) sum[y] = <span class="number">1e9</span>;</span><br><span class="line">            <span class="keyword">else</span> sum[y] += sum[x] &lt;&lt; len[y];</span><br><span class="line">            len[y] += len[x];</span><br><span class="line">            f[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        preans[find(i)] = (preans[find(find(i) - <span class="number">1</span>)] + <span class="number">2l</span>l * calc(find(i), i)) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q[i].size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = q[i][j].first;</span><br><span class="line">            <span class="keyword">int</span> id = q[i][j].second;</span><br><span class="line">            out[id] = (<span class="number">0l</span>l + preans[find(i)] - preans[find(l)] + mod + calc(l, find(l) + len[find(l)] - <span class="number">1</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, out[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/878/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;对于一个数列，每次操作可以将相邻的两个数 $x$ 和 $y$ 合并成一个数 $x+2y$，定义一个数列的权值为进行操作直至只剩一个数能得到的最大值。&lt;/p&gt;
&lt;p&gt;多组询问，每次给定一个区间，求这个区间的权值。&lt;/p&gt;
&lt;p&gt;数列值域 $-10^9\sim10^9$，数列长度和询问个数不超过 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="并查集" scheme="https://ouuan.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="离线算法" scheme="https://ouuan.github.io/tags/%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>UOJ 自动备份</title>
    <link href="https://ouuan.github.io/UOJ-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <id>https://ouuan.github.io/UOJ-自动备份/</id>
    <published>2019-09-27T04:01:05.000Z</published>
    <updated>2019-10-08T16:24:39.390Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个刚刚上线两周就回滚了无数次数据的 OJ，备份自然是很重要的~</p><a id="more"></a><h2 id="一些脚本"><a href="#一些脚本" class="headerlink" title="一些脚本"></a>一些脚本</h2><h3 id="commit-sh"><a href="#commit-sh" class="headerlink" title="commit.sh"></a>commit.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker images --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.CreatedSince&#125;&#125;"</span> | grep <span class="string">'day'</span> | cut -d : -f 1 | xargs docker image rm</span><br></pre></td></tr></table></figure><p>commit，然后删掉比较久远（在 CREATED 中显示为 XX days ago）的镜像节约空间（不然在自动备份下过不了几天硬盘就爆了）。</p><h3 id="save-sh"><a href="#save-sh" class="headerlink" title="save.sh"></a>save.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker save -o /home/ouuan/uoj/uoj_backup_<span class="variable">$&#123;time&#125;</span>.tar uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker images --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.CreatedSince&#125;&#125;"</span> | grep <span class="string">'day'</span> | cut -d : -f 1 | xargs docker image rm</span><br></pre></td></tr></table></figure><p>先 commit，然后存为 tar。即使系统挂了，也能从文件恢复。</p><h3 id="new-sh"><a href="#new-sh" class="headerlink" title="new.sh"></a>new.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker stop uoj</span><br><span class="line">docker rm uoj</span><br><span class="line">docker image ls</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please enter the version (after uoj_backup_): "</span></span><br><span class="line"><span class="built_in">read</span> version</span><br><span class="line">docker run --name uoj -dit -p 23333:80 -p 3690:3690 --<span class="built_in">cap</span>-add SYS_PTRACE <span class="string">"uoj_backup_<span class="variable">$version</span>"</span></span><br></pre></td></tr></table></figure><p>便捷地从镜像创建新容器，在删除当前容器之前 commit。</p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>输入命令 <code>sudo crontab -e</code>。</p><p>（可能会先让你选择一个文本编辑器）然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30 * * * * bash path/commit.sh</span><br><span class="line">0 22 * * * bash path/save.sh</span><br></pre></td></tr></table></figure><p><code>path</code> 就是放脚本文件的路径。</p><p>前面五项分别是 分钟 / 小时 / 日期 / 月份 / 星期，在符合条件时就会执行后面的命令。</p><p>上面的例子会在 <code>xx:30</code> 时 commit 一次，在每天晚上 10 点 save 一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个刚刚上线两周就回滚了无数次数据的 OJ，备份自然是很重要的~&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Hinata Online Judge 的搭建</title>
    <link href="https://ouuan.github.io/Hinata-Online-Judge-%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://ouuan.github.io/Hinata-Online-Judge-的搭建/</id>
    <published>2019-09-21T13:58:04.000Z</published>
    <updated>2019-09-21T14:13:13.518Z</updated>
    
    <content type="html"><![CDATA[<p>程序员就是代码重用的艺术家（</p><a id="more"></a><p>这周回到学校，基于 <a href="https://github.com/UniversalOJ/UOJ-System" target="_blank" rel="noopener">社区版 UOJ</a> 搭了一个校内 OJ。</p><p>过程中现在还记得的遇到的问题，是重启后显示 “wrong database”，解决方案是 docker 里运行命令 <code>service mysql restart</code>。</p><p>一周里大部分时间都是在魔改，并且是 <a href="https://github.com/ouuan/Hinata-Online-Judge" target="_blank" rel="noopener">开源</a> 的。</p><p>这几天算是稍微体验了一下程序员的生活。会为精妙的代码重用而惊叹，也会为一个 bug 而苦苦求索。commit 中的两行代码，可能是若干小时搜索的结果，经过了数十次错误的尝试。</p><p>以前我对程序员的印象是「苦力活」，现在稍微有点改变了。诗人给同一个事物起不同的名字，数学家给不同的事物起相同的名字，程序员给不同的需求使用同一个函数。</p><p>回想起来，不到一年前，也就是我开始使用 hexo 博客之前，我还对 web 开发一无所知。只不过现在所会的那些东西都是通过阅读源码 + 需要什么就搜什么学到的，导致有很多不清楚的地方，这也是导致效率低下的重要原因。</p><p>总之，欢迎大家自由选取 Hinata Online Judge 的 <a href="https://github.com/ouuan/Hinata-Online-Judge/issues/1" target="_blank" rel="noopener">feature</a> copy 到自己的 UOJ 里！</p><p>然而代码太不规范了，所以暂时不太准备发 pr…也欢迎大家来帮我规范一下发 pr。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员就是代码重用的艺术家（&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
      <category term="工程" scheme="https://ouuan.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BJOI2019 删数（贪心，线段树）</title>
    <link href="https://ouuan.github.io/BJOI2019-%E5%88%A0%E6%95%B0%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/BJOI2019-删数（贪心，线段树）/</id>
    <published>2019-09-16T03:11:10.000Z</published>
    <updated>2019-09-21T13:56:26.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/P5324" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://loj.ac/problem/3094" target="_blank" rel="noopener">LOJ</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5528" target="_blank" rel="noopener">BZOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>一个数列是“可删除的”，当且仅当可以通过这种操作将其清空：将数列中等于这个数列长度的数删去。</p><p>如，$[1, 2, 4, 4]$ 是“可删除的”，第一次操作删成 $[1, 2]$，第二次操作删成 $[1]$，第三次操作清空。</p><p>定义一个数列的权值为至少需要进行的单点修改数目，使得这个数列变成“可删除的”。</p><p>现在给你一个数列 $a_{1..n}$，以及 $m$ 次修改操作，你需要在每次修改后回答这个数列的权值。</p><p>修改操作有三种：</p><ol><li>单点修改。</li><li>全局加一。</li><li>全局减一。</li></ol><p>$1\le n,m\le 150000$，数列初始值以及单点修改成的值在 $[1,n]$ 内，但全局修改可能使数列中的元素超过这个范围。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><h3 id="计算数列的权值"><a href="#计算数列的权值" class="headerlink" title="计算数列的权值"></a>计算数列的权值</h3><p>如果将数 $i$ 出现的次数 $cnt[i]$ 看做一个高度为 $cnt[i]$、放在位置 $i$ 的柱子，让所有柱子向左倒，每个位置就会被若干个柱子覆盖。也就是说，$i$ 这个柱子覆盖了 $[i-cnt[i]+1,i]$。</p><p>一个数列是“可删除的”当且仅当 $[1,n]$ 都被恰好覆盖了一次。</p><p>并且，一个数列的权值就是它没被覆盖的位置数量，证明如下：</p><ol><li>这是答案的下界，因为每次单点修改最多覆盖一个新位置。</li><li>这是答案的上界，因为你可以把重复覆盖的换到未覆盖处。</li></ol><h3 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h3><p>全局修改会导致 $cnt$ 以及覆盖数量发生位移，所以可以考虑使用一个标记 $delta$ 来表示现在全局加了多少，那么 $cnt[i]$ 表示 $cnt[i+delta]$，位置 $i$ 被覆盖的次数被记录在 $i-delta$ 处，$a[i]$ 表示 $a_i-delta$。</p><p>需要特别注意的是，全局加时需要减去原来位置 $n$ 的贡献，因为它们来到 $n+1$ 后必定会是累赘，全局减时要再加回来。但不需要特殊处理位置 $1$ 的贡献，因为覆盖是向左的，查询时只会查询 $[1,n]$ 的覆盖次数，小于 $1$ 的位置对答案没有影响。</p><p>可以用线段树维护覆盖次数。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>使用一个线段树来维护覆盖次数，它支持区间加减、区间查询最小值及其出现次数。</p><p>下面是实现的细节。（代码中所有 $cnt$ 的下标都要加上 $m$ 避免负数下标。）</p><h3 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h3><p>首先处理原来的 $a_p$。</p><p>先判断 $a_p$ 是否小于等于 $n$，只有 $a_p\le n$ 时才会有贡献，也就是说，当 $a[p]+delta\le n$ 时需要在线段树上 $a[p]-cnt[a[p]]+1$ 处单点减一。</p><p>然后将 $cnt[a[p]]$ 减一。</p><p>接着处理新增的 $x$。</p><p>$x$ 必定在 $[1,n]$ 内，所以一定需要在线段树上 $x-cnt[x-delta]-delta$ 处单点加一。</p><p>然后将 $cnt[x-delta]$ 加一。</p><p>最后将 $a[p]$ 修改为 $x-delta$。</p><h3 id="全局加"><a href="#全局加" class="headerlink" title="全局加"></a>全局加</h3><p>需要减去位置 $n$ 的贡献：$[n-cnt[n-delta]+1-delta,n-delta]$ 区间减一。</p><p>然后将 $delta$ 加一。</p><h3 id="全局减"><a href="#全局减" class="headerlink" title="全局减"></a>全局减</h3><p>先将 $delta$ 减一。</p><p>然后加上位置 $n$ 的贡献：$[n-cnt[n-delta]+1-delta,n-delta]$ 区间加一。</p><h3 id="查询答案"><a href="#查询答案" class="headerlink" title="查询答案"></a>查询答案</h3><p>查询 $[1-delta,n-delta]$ 的最小值及出现次数。</p><p>若最小值不为 $0$ 则答案为 $0$。</p><p>否则答案为最小值的出现次数。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150010</span>;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Min</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, cnt;</span><br><span class="line">    Min(<span class="keyword">int</span> _val = <span class="number">0</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>): val(_val), cnt(_cnt) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Min <span class="title">merge</span><span class="params">(Min a, Min b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.val &lt; b.val) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (b.val &lt; a.val) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">return</span> Min(a.val, a.cnt + b.cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (cur &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (cur &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line">    </span><br><span class="line">    Min mn[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mn[cur] = merge(mn[ls], mn[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mn[cur].val += x;</span><br><span class="line">        tag[cur] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        add(ls, tag[cur]);</span><br><span class="line">        add(rs, tag[cur]);</span><br><span class="line">        tag[cur] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) mn[cur] = Min(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            build(ls, l, mid);</span><br><span class="line">            build(rs, mid, r);</span><br><span class="line">            pushup(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) add(cur, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pushdown(cur);</span><br><span class="line">            add(ls, l, mid, L, R, x);</span><br><span class="line">            add(rs, mid, r, L, R, x);</span><br><span class="line">            pushup(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Min <span class="title">min</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span> Min(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> mn[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">return</span> merge(min(ls, l, mid, L, R), min(rs, mid, r, L, R));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, delta, a[N], cnt[N * <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        ++cnt[a[i] + m];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ll = <span class="number">1</span> - m - n, rr = m + n + <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    t.build(<span class="number">1</span>, ll, rr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t.add(<span class="number">1</span>, ll, rr, i - cnt[i + m] + <span class="number">1</span>, i + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                --delta;</span><br><span class="line">                t.add(<span class="number">1</span>, ll, rr, n + <span class="number">1</span> - cnt[n - delta + m] - delta, n - delta + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                t.add(<span class="number">1</span>, ll, rr, n + <span class="number">1</span> - cnt[n - delta + m] - delta, n - delta + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">                ++delta;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[p] + delta &lt;= n) t.add(<span class="number">1</span>, ll, rr, a[p] - cnt[a[p] + m] + <span class="number">1</span>, a[p] - cnt[a[p] + m] + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">            --cnt[a[p] + m];</span><br><span class="line">            t.add(<span class="number">1</span>, ll, rr, x - cnt[x - delta + m] - delta, x - cnt[x - delta + m] - delta + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            ++cnt[x - delta + m];</span><br><span class="line">            a[p] = x - delta;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Min res = t.min(<span class="number">1</span>, ll, rr, <span class="number">1</span> - delta, n - delta + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (res.val &gt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res.cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P5324&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=5528&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;一个数列是“可删除的”，当且仅当可以通过这种操作将其清空：将数列中等于这个数列长度的数删去。&lt;/p&gt;
&lt;p&gt;如，$[1, 2, 4, 4]$ 是“可删除的”，第一次操作删成 $[1, 2]$，第二次操作删成 $[1]$，第三次操作清空。&lt;/p&gt;
&lt;p&gt;定义一个数列的权值为至少需要进行的单点修改数目，使得这个数列变成“可删除的”。&lt;/p&gt;
&lt;p&gt;现在给你一个数列 $a_{1..n}$，以及 $m$ 次修改操作，你需要在每次修改后回答这个数列的权值。&lt;/p&gt;
&lt;p&gt;修改操作有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单点修改。&lt;/li&gt;
&lt;li&gt;全局加一。&lt;/li&gt;
&lt;li&gt;全局减一。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$1\le n,m\le 150000$，数列初始值以及单点修改成的值在 $[1,n]$ 内，但全局修改可能使数列中的元素超过这个范围。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1209F Koala and Notebook（BFS，最短路）</title>
    <link href="https://ouuan.github.io/CF1209F-Koala-and-Notebook%EF%BC%88BFS%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1209F-Koala-and-Notebook（BFS，最短路）/</id>
    <published>2019-09-16T00:58:32.000Z</published>
    <updated>2019-09-21T13:56:26.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/1209/problem/F" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张 $n$ 个点 $m$ 条边的无向连通图，一条路径的权值是路径上的边的编号（十进制）顺次连接而成的数字。求 $1$ 到每个点的最短路，<strong>输出</strong> 对 $10^9+7$ 取模。</p><p>$2\le n\le10^5$, $n-1\le m\le10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>数字越长就越大，所以转化成优先长度短，其次字典序小。</p><p>把每条边拆成位数条边（如 $(u, v, 718)$ 拆成 $(u, x, 7)$, $(x, y, 1)$, $(y, v, 8)$, $(v, x, 7)$, $(y, u, 8)$），这样的话长度的边权就全是一，可以用 BFS 解决。</p><p>如何使字典序最小呢？容易想到优先遍历边权（拆边后全是一位数）小的边，但是，如果两个点的最短路相同，这样做就会导致错误。（如：$dis[u]=dis[v]=233$，$u$ 在队列里在 $v$ 的前面，$(u, x, 3)$ 和 $(v, x, 2)$ 这两条边都存在，$dis[x]$ 就会被错误地设为 $2333$，而它应当是 $2332$。）</p><p>正确的做法是将最短路相同的点绑在一起放入队列，实现可以使用 <code>vector</code>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot, dis[N * <span class="number">5</span>], digit[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N * <span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    tot = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ww = <span class="number">1</span>; ww &lt;= m; ++ww)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w = ww;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (w &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g[u][w].push_back(v);</span><br><span class="line">            g[v][w].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 拆边</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = ++tot;</span><br><span class="line">            <span class="keyword">int</span> r = l;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (w)</span><br><span class="line">            &#123;</span><br><span class="line">                digit[++d] = w % <span class="number">10</span>;</span><br><span class="line">                w /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = d - <span class="number">1</span>; i &gt; <span class="number">1</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                g[tot][digit[i]].push_back(tot + <span class="number">1</span>);</span><br><span class="line">                r = ++tot;</span><br><span class="line">            &#125;</span><br><span class="line">            g[u][digit[d]].push_back(l);</span><br><span class="line">            g[r][digit[<span class="number">1</span>]].push_back(u);</span><br><span class="line">            g[v][digit[d]].push_back(l);</span><br><span class="line">            g[r][digit[<span class="number">1</span>]].push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    q.push(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt; <span class="comment">// nxt 里存的是最短路相同的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> u : vec)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dis[v] == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dis[v] = (dis[u] * <span class="number">10l</span>l + i) % mod;</span><br><span class="line">                        nxt.push_back(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!nxt.empty()) q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1209/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张 $n$ 个点 $m$ 条边的无向连通图，一条路径的权值是路径上的边的编号（十进制）顺次连接而成的数字。求 $1$ 到每个点的最短路，&lt;strong&gt;输出&lt;/strong&gt; 对 $10^9+7$ 取模。&lt;/p&gt;
&lt;p&gt;$2\le n\le10^5$, $n-1\le m\le10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://ouuan.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="BFS" scheme="https://ouuan.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LG4707 重返现世（扩展 min-max 容斥）</title>
    <link href="https://ouuan.github.io/LG4707-%E9%87%8D%E8%BF%94%E7%8E%B0%E4%B8%96%EF%BC%88%E6%89%A9%E5%B1%95-min-max-%E5%AE%B9%E6%96%A5%EF%BC%89/"/>
    <id>https://ouuan.github.io/LG4707-重返现世（扩展-min-max-容斥）/</id>
    <published>2019-09-11T11:28:03.000Z</published>
    <updated>2019-09-28T11:51:43.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/P4707" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有 $n$ 种颜色，每秒会出现一种颜色，第 $i$ 种颜色出现概率为 $\frac{p_i}m$，其中 $m=\sum_{i=1}^np_i$，求共出现 $k$ 种颜色的期望用时，对 $998244353$ 取模。</p><p>$1\le k\le n\le 1000$，$m\le10000$，$k\ge n-10$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><h3 id="扩展-min-max-容斥"><a href="#扩展-min-max-容斥" class="headerlink" title="扩展 min-max 容斥"></a>扩展 min-max 容斥</h3><p>$$<br>k\operatorname{-thmax}(S)=\sum\limits_{T\subseteq S}[T\ne\varnothing] (-1)^{|T|-k}\binom{|T|-1}{k-1}\min(T)<br>$$</p><p>其中 $k\operatorname{-thmax}(S)$ 表示 $S$ 这个集合的第 $k$ 大元素，$\min(T)$ 表示 $T$ 这个集合中最小的元素。</p><p>证明可以使用二项式反演，不会二项式反演也记不住式子的话，考场现推可以设  $k\operatorname{-thmax}(S)=\sum_{T\subseteq S}[T\ne\varnothing]f(|T|)\min(T)$ 然后算。</p><p>这个式子还可以推广到期望，“第 $k$ 大的期望”意思是 $\sum_xx\cdot p(x=k\operatorname{-thmax}(S))$。（$p(event)$ 表示事件 $event$ 发生的概率。）</p><h3 id="重返现世"><a href="#重返现世" class="headerlink" title="重返现世"></a>重返现世</h3><p>下文中用 $K$ 代表 $n-k+1$。</p><p>答案就是颜色出现时间的第 $K$ 大的期望。<br>$$<br>ans = \sum\limits_{T\subseteq S}[T\ne\varnothing] (-1)^{|T|-K}\binom{|T|-1}{K-1}\frac m{sum(T)}<br>$$<br>其中 $sum(T)$ 表示 $\sum_{i\in T}p_i$，$\min(T)=\frac{m}{sum(T)}$ 可以这样理解：计算 $T$ 中元素最早出现时间的期望，可以将 $T$ 中所有颜色绑在一起，出现概率就是 $\frac{sum(T)}m$，期望出现时间就是其逆元。</p><p>接下来是一个神奇的 dp。</p><p>令 $f_{i,j,k}$ 表示 $\sum_{T\subseteq[1,i]}[sum(T)=j\ne0] (-1)^{|T|-k}\binom{|T|-1}{k-1}$。（这里的 $k$ 与题目输入中的 $k$ 不同。）</p><p>考虑转移，分两种情况：</p><ol><li>$T$ 不包含 $i$；</li><li>$T$ 包含 $i$。</li></ol><p>第一种情况显然是 $f_{i-1,j,k}$。</p><p>在 $j&gt;p_i$ 时，将 $i$ 这个元素从 $T$ 中拿出来，剩下的部分依然不是空集，所以第二种情况的式子是 $\sum_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|+1-k}\binom{|T|}{k-1}$。</p><p>尝试从之前的状态转移，写出两个式子：<br>$$<br>f_{i-1,j-p_i,k-1}=\sum\limits_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|+1-k}\binom{|T|-1}{k-2}<br>$$</p><p>$$<br>f_{i-1,j-p_i,k}=\sum\limits_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|-k}\binom{|T|-1}{k-1}<br>$$</p><p>发现最后的组合数部分就是杨辉三角中计算组合数的方法（$\binom{x}{y}=\binom{x-1}{y-1}+\binom{x-1}{y}$），而前面只是正负号的变化。</p><p>也就是说，$j&gt;p_i$ 时，第二部分的值为 $f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}$。</p><p>为什么要强调 $j&gt;p_i$ 呢？因为枚举 $T\subseteq S$ 时是 <strong>不包含空集</strong> 的。所以，当 $j=p_i$ 时，第二种情况需要特殊计算，直接将 $T=\{i\}$ 代入定义式，得到第二部分的值为 $(-1)^{1-k}\binom{0}{k-1}$，也就是 $k=1$ 时为 $1$，否则为 $0$。</p><p>总结一下：$f_{i,j,k}=\begin{cases}f_{i-1,j,k}&amp;(j&lt;p_i)\\f_{i-1,j,k}+[k=1]&amp;(j=p_i)\\f_{i-1,j,k}+f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}&amp;(j&gt;p_i)\end{cases}$</p><p>dp 的边界情况是什么？其实除了 $i\ge 1,1\le j\le m,1\le k\le i$（当然这些情况里也有很多 $0$），其它情况都可以由定义计算得到是 $0$。</p><p>最后的答案就是 $\sum_{i=1}^mf_{n,i,K}\frac{m}{i}$。</p><p>需要用滚动数组优化空间。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], f[M][K], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = m; s &gt; p[i]; --s)</span><br><span class="line">            &#123;</span><br><span class="line">                f[s][j] = (<span class="number">0l</span>l + f[s][j] + f[s - p[i]][j - <span class="number">1</span>] - f[s - p[i]][j] + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[p[i]][<span class="number">1</span>] = (f[p[i]][<span class="number">1</span>] + <span class="number">1</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = (ans + (ll) f[i][k] * m % mod * qpow(i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果枚举包含空集"><a href="#如果枚举包含空集" class="headerlink" title="如果枚举包含空集"></a>如果枚举包含空集</h2><p>如果我们将 dp 状态定义成枚举包含空集，也是可以算的。</p><p>令 $f_{i,j,k}$ 表示 $\sum_{T\subseteq[1,i]}[sum(T)=j] (-1)^{|T|-k}\binom{|T|-1}{k-1}$。</p><p>还是分成不包含 $i$ 和包含 $i$ 两部分。</p><p>第一部分依然是 $f_{i-1,j,k}$。</p><p>第二部分不需要分 $j$ 与 $p_i$ 的关系讨论，直接 $f_{i-1,j,k}+f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}$。</p><p>但是边界情况需要注意：</p><p>$$<br>f_{i,0,k}<br>=(-1)^{-k}\binom{-1}{k-1}=<br>\begin{cases}<br>0&amp;k=0\\<br>-1&amp;otherwise<br>\end{cases}<br>$$</p><p>（注：$\binom{-1}{k-1}$ 可以由广义组合数 $\binom{x}{y}=\frac{x(x-1)\cdots(x-y+1)}{y!}$得到。）</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], f[M][K], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) f[<span class="number">0</span>][i] = mod - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = m; s &gt;= p[i]; --s)</span><br><span class="line">            &#123;</span><br><span class="line">                f[s][j] = (<span class="number">0l</span>l + f[s][j] + f[s - p[i]][j - <span class="number">1</span>] - f[s - p[i]][j] + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = (ans + (ll) f[i][k] * m % mod * qpow(i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4707&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有 $n$ 种颜色，每秒会出现一种颜色，第 $i$ 种颜色出现概率为 $\frac{p_i}m$，其中 $m=\sum_{i=1}^np_i$，求共出现 $k$ 种颜色的期望用时，对 $998244353$ 取模。&lt;/p&gt;
&lt;p&gt;$1\le k\le n\le 1000$，$m\le10000$，$k\ge n-10$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="容斥原理" scheme="https://ouuan.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="概率期望" scheme="https://ouuan.github.io/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="扩展 min-max 容斥" scheme="https://ouuan.github.io/tags/%E6%89%A9%E5%B1%95-min-max-%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>CF516D Drazil and Morning Exercise（up and down，并查集）</title>
    <link href="https://ouuan.github.io/CF516D-Drazil-and-Morning-Exercise%EF%BC%88up-and-down%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF516D-Drazil-and-Morning-Exercise（up-and-down，并查集）/</id>
    <published>2019-09-10T05:37:12.000Z</published>
    <updated>2019-09-28T11:51:43.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/516/problem/D" target="_blank" rel="noopener">CF</a></p><p><a href="https://www.luogu.org/problem/CF516D" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给定一棵 $n$ 个点带边权的树，定义 $d(u)$ 为树上离它最远的点到它的距离，$q$ 次询问，每次询问给定 $l$，求一个最大的树上连通块 $V’$ 的大小，满足 $\forall u, v\in V’$，$|d(u)-d(v)|\le l$。</p><p>$1\le n\le 10^5$, $1\le q\le 50$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先使用 up and down（两遍 dfs，第一遍求往下走的最远距离，第二遍求往上走的最远距离）求出 $d(u)$。</p><p>有一个性质：如果以 $d(u)$ 最小的 $u$ 为根，$\forall v, d(v)\ge d(parent(v))$。（下文中的“子树”都是以 $d$ 最小的点为根的。）</p><div><div class="fold_hider"><div class="close hider_title">简单证明</div></div><div class="fold"><p>不难发现，我们只要证明 $u$ 的每个儿子 $v$ 都是子树 $v$ 中 $d$ 最小的，即可归纳地证明原命题。</p><p>假设子树 $v$ 中存在一个点 $w$，$d(w)&lt;d(v)$，那么从 $v$ 出发的最长路的第一步一定是 $v$ 到 $w$ 的路径上的第一条边（否则的话，从 $w$ 出发可以走到 $v$ 再走从 $v$ 出发的最长路，就会导致 $d(w)&gt;d(v)$），这样的话，从 $u$ 出发也可以先走到 $v$ 再走 $v$ 出发的最长路，这样的话 $d(u)&gt;d(v)$，与题设矛盾。</p></div></div><p>题目所求的连通块一定是 $d$ 的大小连续的一段，令所求连通块中 $d$ 最小且离根最近的点为 $u$，由上面的性质不难发现，所求连通块一定在子树 $u$ 中。</p><p>如果按 $d$ 从大到小枚举每个点，用并查集维护符合条件的点的连通性以及每块的大小，可以发现，删去一个点（一个 $d&gt;d(u)+l$ 的点）并不影响连通性，只需要将其所在块的大小减一即可。（加入一个点就是合并子树，删去一个点是删去叶子。）</p><p>这样的话答案就是过程中最大的一块的大小。</p><p>总时间复杂度就是 $O(qn\alpha(n)+n\log n)$ <del>或 O(qn+nlogn)</del> 或 $O(qn\log n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>（非常抱歉，使用了 CF 模板 qaq）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 why_is_there_a_function_called_y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().</span></span></span><br><span class="line"><span class="function"><span class="params">count())</span></span>;<span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">int</span> out=rng()%(r-l+<span class="number">1</span>)+l;<span class="keyword">return</span> out&gt;=l?out:out+</span><br><span class="line">r-l+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T</span></span></span><br><span class="line"><span class="function"><span class="params">&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span></span><br><span class="line">(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);</span><br><span class="line">x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;</span><br><span class="line"><span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::type</span><br><span class="line">write(<span class="keyword">const</span> T&amp;x)&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);<span class="built_in">putchar</span></span><br><span class="line">(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span></span><br><span class="line">(<span class="string">"%.10lf"</span>,x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args</span><br><span class="line">...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag</span><br><span class="line">,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value||(</span><br><span class="line">is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value</span><br><span class="line">&amp;&amp;!is_const&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first</span><br><span class="line">!=__last;++__first)read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if</span><br><span class="line">&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category</span><br><span class="line">&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;<span class="keyword">bool</span> isFirst=<span class="literal">true</span>;<span class="keyword">for</span>(;</span><br><span class="line">__first!=__last;++__first)&#123;<span class="keyword">if</span>(isFirst)isFirst=<span class="literal">false</span>;<span class="keyword">else</span> sp;write(*__first);&#125;br;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag</span><br><span class="line">,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wtb(InputIt</span><br><span class="line">__first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span></span></span></span><br><span class="line"><span class="function"><span class="params">T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args</span><br><span class="line">...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);</span><br><span class="line">wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span></span><br><span class="line">:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], edge[N &lt;&lt; <span class="number">1</span>], cnt;</span><br><span class="line"><span class="keyword">int</span> n, f[N], siz[N], id[N], rid[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fi, se;</span><br><span class="line">    Element() &#123; fi = <span class="number">0</span>; se = -INF; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; fi)</span><br><span class="line">        &#123;</span><br><span class="line">            se = fi;</span><br><span class="line">            fi = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; se) se = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == fi) <span class="keyword">return</span> se;</span><br><span class="line">        <span class="keyword">return</span> fi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsdn</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SON (i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">int</span> w = edge[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfsdn(v, u);</span><br><span class="line">        dis[u].insert(dis[v].fi + w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsup</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SON (i, u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">int</span> w = edge[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v].insert(dis[u].get(dis[v].fi + w) + w);</span><br><span class="line">        dfsup(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">    edge[cnt] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (find(x) == find(y)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (siz[find(x)] &lt; siz[find(y)]) swap(x, y);</span><br><span class="line">    siz[find(x)] += siz[find(y)];</span><br><span class="line">    f[find(y)] = find(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n);</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        read(u, v, w);</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfsdn(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfsup(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, n) id[i] = i;</span><br><span class="line">    sort(id + <span class="number">1</span>, id + n + <span class="number">1</span>, [](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;<span class="keyword">return</span> dis[x].fi &gt; dis[y].fi;&#125;);</span><br><span class="line">    For (i, <span class="number">1</span>, n) rid[id[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = read();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        For (i, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">            siz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        For (u, <span class="number">1</span>, n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (dis[id[l]].fi &gt; dis[id[u]].fi + len) --siz[find(id[l++])];</span><br><span class="line">            SON (i, id[u])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = to[i];</span><br><span class="line">                <span class="keyword">if</span> (rid[v] &lt; u) merge(id[u], v);</span><br><span class="line">            &#125;</span><br><span class="line">            up(ans, siz[find(id[u])]);</span><br><span class="line">        &#125;</span><br><span class="line">        wtb(ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/516/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/CF516D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给定一棵 $n$ 个点带边权的树，定义 $d(u)$ 为树上离它最远的点到它的距离，$q$ 次询问，每次询问给定 $l$，求一个最大的树上连通块 $V’$ 的大小，满足 $\forall u, v\in V’$，$|d(u)-d(v)|\le l$。&lt;/p&gt;
&lt;p&gt;$1\le n\le 10^5$, $1\le q\le 50$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="up and down" scheme="https://ouuan.github.io/tags/up-and-down/"/>
    
      <category term="并查集" scheme="https://ouuan.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6519 魔力环（Burnside引理，容斥原理）</title>
    <link href="https://ouuan.github.io/LOJ6519-%E9%AD%94%E5%8A%9B%E7%8E%AF%EF%BC%88Burnside%E5%BC%95%E7%90%86%EF%BC%8C%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/LOJ6519-魔力环（Burnside引理，容斥原理）/</id>
    <published>2019-09-05T02:45:59.000Z</published>
    <updated>2019-09-05T13:30:36.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://loj.ac/problem/6519" target="_blank" rel="noopener">LOJ</a></p><p><a href="https://www.luogu.org/problem/P4916" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>你需要给 $n$ 颗珠子的项链染 $m$ 颗黑色，$n-m$ 颗白色，不能有连续的一串黑色珠子长度超过 $k$，求旋转同构下本质不同的染色方案数。</p><p>$1\le m,k\le n\le10^5$</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先套用 Burnside 引理，以及位移为 $r$ 的旋转周期为 $\gcd(r, n)$ 的结论，得到答案的式子：<br>$$<br>\begin{aligned}<br>answer&amp;=\frac 1 n\sum\limits_{i=1}^nf\left(\frac n{\gcd(i,n)}\right)\\<br>&amp;=\frac 1 n\sum\limits_{d|n}\varphi(d)f(d)<br>\end{aligned}<br>$$<br>其中 $f(x)$ 表示在一个长为 $\frac n x$ 的项链上，染 $\frac{m}{x}$ 个黑珠子，$\frac{n-m}x$ 个白珠子，不能有连续的一串黑色珠子长度超过 $k$ 的方案数（在不旋转的意义下计数）。</p><p>可以看出只有 $d|m$ 时 $f(d)$ 可能不为零，如果用 $f(x, y)$ 表示在一个长为 $x+y$ 的项链上，染 $x$ 个黑珠子，$y$ 个白珠子，不能有连续的一串黑色珠子长度超过 $k$ 的方案数（在不旋转的意义下计数），答案的式子可以写成：</p><p>$$<br>answer=\frac 1 n\sum\limits_{d|\gcd(n, m)}\varphi(d)f\left(\frac m d, \frac{n-m}d\right)<br>$$</p><p>现在的问题转化成了快速求 $f(x, y)$。</p><p>首先，特判掉两种情况：</p><ol><li>$k=n$</li><li>$y\ne 0$ 且 $x\le k$</li></ol><p>这两种情况下 $f(x, y)=\binom{x+y}x$</p><p>由于是在环上不好处理，枚举两侧的黑珠子个数，就可以转化为序列上的问题。</p><p>而序列上的问题，就相当于求方程 $x_1+x_2+\cdots+x_{y+1}=x (0\le x_i\le k)$ 的解的个数。</p><p>考虑容斥，枚举至少有 $i$ 个变量的值大于 $k$（实际上是枚举大小为 $i$ 的子集都大于 $k$），解的个数为 $\binom{x+y-i(k+1)}y$。</p><p>这样的话，枚举两侧黑珠子个数最多枚举到 $k$，容斥复杂度为 $O(\frac{x+y}k)$，计算 $f(x,y)$ 的复杂度为 $O(x+y)$，整道题的复杂度就是 $O(\text{预处理组合数}+\sigma(n))$，其中 $\sigma(n)$ 表示 $n$ 的所有约数之和，在数据范围内最大为 $403200$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], ptot, phi[N], fact[N], invf[N];</span><br><span class="line"><span class="keyword">bool</span> np[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; x || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (ll) fact[x] * invf[y] % mod * invf[x - y] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * (k + <span class="number">1</span>) &lt;= x + y; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        out = (out + (i &amp; <span class="number">1</span> ? <span class="number">-1l</span>l : <span class="number">1l</span>l) * c(x + y - (k + <span class="number">1</span>) * i, y) * c(y + <span class="number">1</span>, i) % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == n || y != <span class="number">0</span> &amp;&amp; x &lt;= k) <span class="keyword">return</span> c(x + y, x);</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x &amp;&amp; i &lt;= k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        out = (out + (ll) (i + <span class="number">1</span>) * calc(x - i, y - <span class="number">2</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? gcd(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fact[i] = (ll) fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    invf[n] = qpow(fact[n], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) invf[i] = (ll) invf[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">    </span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[++ptot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ptot &amp;&amp; i * p[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) phi[x] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[x] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> g = gcd(m, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= g; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * i == g) ans = (ans + (ll) f(m / i, (n - m) / i) * phi[i]) % mod;</span><br><span class="line">            <span class="keyword">else</span> ans = (ans + (ll) f(m / i, (n - m) / i) * phi[i] + (ll) f(m / (g / i), (n - m) / (g / i)) * phi[g / i]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; (ll) ans * qpow(n, mod - 2) % mod;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6519&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4916&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;你需要给 $n$ 颗珠子的项链染 $m$ 颗黑色，$n-m$ 颗白色，不能有连续的一串黑色珠子长度超过 $k$，求旋转同构下本质不同的染色方案数。&lt;/p&gt;
&lt;p&gt;$1\le m,k\le n\le10^5$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥原理" scheme="https://ouuan.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="群论" scheme="https://ouuan.github.io/tags/%E7%BE%A4%E8%AE%BA/"/>
    
      <category term="Burnside引理" scheme="https://ouuan.github.io/tags/Burnside%E5%BC%95%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6077 逆序对（生成函数，计数dp）</title>
    <link href="https://ouuan.github.io/LOJ6077-%E9%80%86%E5%BA%8F%E5%AF%B9%EF%BC%88%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%EF%BC%8C%E8%AE%A1%E6%95%B0dp%EF%BC%89/"/>
    <id>https://ouuan.github.io/LOJ6077-逆序对（生成函数，计数dp）/</id>
    <published>2019-09-04T01:22:32.000Z</published>
    <updated>2019-09-04T01:51:38.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://loj.ac/problem/6089" target="_blank" rel="noopener">LOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>求长度为 $n$ 逆序对数为 $k$ 的排列个数。</p><p>$1\le n, k\le 10^5$，$k\le \binom n 2$</p><a id="more"></a><h2 id="简要作法"><a href="#简要作法" class="headerlink" title="简要作法"></a>简要作法</h2><p>从小到大依次考虑将每个数插入排列，那么每个数 $i$ 都可以贡献 $0\dots i-1$ 个逆序对，所以答案的生成函数为 $(1 + x)(1 + x + x^2)\cdots(1+x+\cdots+x^{n-1})$。</p><p>上下同时乘上 $(1-x)^n$，即求：<br>$$<br>\frac{(1-x)(1-x^2)\cdots(1-x^n)}{(1-x)^n}<br>$$<br>（不约分是为了方便求。）</p><p>分母 $\frac{1}{(1-x)^n}=\sum\limits_{i\ge 0}\binom{n-1+i}{n-1}x^i$，<del>是一个大家熟知的结论</del>，可以利用 $(1+x+x^2+\cdots)^n$ 的组合意义说明。</p><p>分子的 $x^i$ 项系数的组合意义为：考虑从 $1,2,\ldots,n$ 中选若干个和为 $i$ 的数（每个数只能选一遍）的所有方案，若选了奇数个数贡献为 $-1$，若选了偶数个数贡献为 $1$。</p><p>这个东西可以用类似 <a href="/LOJ6089-小Y的背包计数问题（根号分治，计数dp）">LOJ6089</a> 的方法求：</p><p>令 $f_{i,j}$ 表示选 $i$ 个数和为 $j$ 的方案数。</p><p>由于选择的数两两不同，第一维的大小是 $O(\sqrt k)$ 的。</p><p>转移有两种方式：</p><ol><li>背包里的所有数加一。</li><li>背包里的所有数加一，并向背包中放入一个体积为 $1$ 的物品。</li></ol><p>$$<br>f_{i,j}=f_{i-1,j-i}+f_{i,j-i}<br>$$</p><p>但这样算可能会出现体积大于 $n$ 的物品。</p><p>具体来说，当 $j\ge n+1$ 时，会有 $f_{i-1,j-n-1}$ 种不合法的方案，需要减去。</p><p>计算完 dp 之后，分子的 $x^i$ 项系数即为 $\sum\limits_{j\ge0}(-1)^jf_{j,i}$</p><p>最后把分子和分母卷积起来即可，总时间复杂度为 $O(n+k\sqrt k)$ 或 $O(n\log p+k\sqrt k)$（取决于计算组合数与逆元的方式）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, f[<span class="number">2</span>][N], cur, ans, fact[N &lt;&lt; <span class="number">1</span>], invf[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll) fact[x] * invf[y] % mod * invf[x - y] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">    fact[<span class="number">0</span>] = invf[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i] = (ll) fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        invf[i] = qpow(fact[i], mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = c(n - <span class="number">1</span> + k, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    f[cur][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, sum = <span class="number">1</span>; sum &lt;= k; sum += (++i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f[cur ^= <span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= k; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[cur][j] = (f[cur ^ <span class="number">1</span>][j - i] + f[cur][j - i]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= n + <span class="number">1</span>) f[cur][j] = (f[cur][j] - f[cur ^ <span class="number">1</span>][j - n - <span class="number">1</span>] + mod) % mod;</span><br><span class="line">            ans = (ans + (i &amp; <span class="number">1</span> ? <span class="number">-1l</span>l : <span class="number">1l</span>l) * f[cur][j] * c(n - <span class="number">1</span> + k - j, n - <span class="number">1</span>) % mod + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;求长度为 $n$ 逆序对数为 $k$ 的排列个数。&lt;/p&gt;
&lt;p&gt;$1\le n, k\le 10^5$，$k\le \binom n 2$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="生成函数" scheme="https://ouuan.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6089 小Y的背包计数问题（根号分治，计数dp）</title>
    <link href="https://ouuan.github.io/LOJ6089-%E5%B0%8FY%E7%9A%84%E8%83%8C%E5%8C%85%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%EF%BC%88%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB%EF%BC%8C%E8%AE%A1%E6%95%B0dp%EF%BC%89/"/>
    <id>https://ouuan.github.io/LOJ6089-小Y的背包计数问题（根号分治，计数dp）/</id>
    <published>2019-09-04T01:21:35.000Z</published>
    <updated>2019-09-04T01:24:35.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://loj.ac/problem/6089" target="_blank" rel="noopener">LOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>你有体积为 $i$ ($1\le i\le n$) 的物品 $i$ 个，同体积物品在计数时没有区别，求装满大小为 $n$ 的背包的方案数。</p><p>$1\le n\le 10^5$。</p><a id="more"></a><h2 id="简要作法"><a href="#简要作法" class="headerlink" title="简要作法"></a>简要作法</h2><p>体积大于等于 $\sqrt n$ 的物品可以无限选，所以考虑分开处理小于根号的和大于等于根号的。</p><h3 id="小于根号的"><a href="#小于根号的" class="headerlink" title="小于根号的"></a>小于根号的</h3><p>令  $f_{i, j}$ 表示从前 $i$ 种物品中选体积为 $j$ 的方案数。<br>$$<br>f_{i, j} = \sum\limits_{k = 0}^{\min(i, \left\lfloor\frac j i\right\rfloor)}f_{i-1, j - ik}<br>$$<br>可以使用模 $i$ 同余的前缀和优化。</p><p>这部分的时间复杂度为 $O(n\sqrt n)$，空间复杂度可以优化至 $O(n)$。</p><h3 id="大于等于根号的"><a href="#大于等于根号的" class="headerlink" title="大于等于根号的"></a>大于等于根号的</h3><p>令 $g_{i, j}$ 表示选择 $i$ 个物品体积为 $j$ 的方案数。</p><p>转移有两种方式：</p><ol><li>向背包中放入一个体积为 $\left\lceil\sqrt n\right\rceil$ 的物品。</li><li>将背包中所有物品体积加一。</li></ol><p>$$<br>g_{i, j} = g_{i - 1, j - \left\lceil\sqrt n\right\rceil} + g_{i, j - i}<br>$$</p><p>由于最多选 $\left\lfloor\sqrt n\right\rfloor$ 个物品，第一维大小为 $O(\sqrt n)$，这部分复杂度也是 $O(n\sqrt n)$。</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p><del>相当于求卷积的一位。</del></p><p>两部分加起来体积为 $n$ 就计入答案。</p><p>需要注意的是，第二部分中体积为 $k$ 的方案数是 $\sum\limits_{i=0}^{\left\lfloor\sqrt n\right\rfloor}g_{i, k}$，而不是某个单独的 dp 值。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">23333333</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, b, f[N], pre[N], g[<span class="number">2</span>][N], cur, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    b = <span class="keyword">int</span>(<span class="built_in">sqrt</span>(n) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; b; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) pre[j] = (f[j] + (j &gt;= i ? pre[j - i] : <span class="number">0</span>)) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; i * (i + <span class="number">1</span>)) f[j] = pre[j];</span><br><span class="line">            <span class="keyword">else</span> f[j] = (pre[j] - pre[j - i * (i + <span class="number">1</span>)] + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = f[n];</span><br><span class="line"></span><br><span class="line">    g[cur][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; b; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g[cur ^= <span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (i * b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * b; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            g[cur][j] = (g[cur ^ <span class="number">1</span>][j - b] + g[cur][j - i]) % mod;</span><br><span class="line">            ans = (ans + <span class="number">1l</span>l * f[n - j] * g[cur][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/6089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;你有体积为 $i$ ($1\le i\le n$) 的物品 $i$ 个，同体积物品在计数时没有区别，求装满大小为 $n$ 的背包的方案数。&lt;/p&gt;
&lt;p&gt;$1\le n\le 10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="根号分治" scheme="https://ouuan.github.io/tags/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>LGV 引理学习笔记</title>
    <link href="https://ouuan.github.io/LGV-%E5%BC%95%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/LGV-引理学习笔记/</id>
    <published>2019-09-03T13:54:43.000Z</published>
    <updated>2019-09-04T01:01:04.265Z</updated>
    
    <content type="html"><![CDATA[<p>Lindström–Gessel–Viennot lemma，即 LGV 引理，可以用来处理有向无环图上不相交路径计数等问题。</p><a id="more"></a><p>前置知识： <a href="https://oi-wiki.org/graph" target="_blank" rel="noopener">图论简介</a> 、 <a href="https://oi-wiki.org/graph/basic" target="_blank" rel="noopener">图论基础</a> 、 <a href="https://oi-wiki.org/math/matrix" target="_blank" rel="noopener">矩阵</a> 、 <a href="https://oi-wiki.org/math/gauss" target="_blank" rel="noopener">高斯消元求行列式</a> 。</p><p>LGV 引理仅适用于 <strong>有向无环图</strong> 。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p> $\omega(P)$ 表示 $P$ 这条路径上所有边的边权之积。（路径计数时，可以将边权都设为 $1$ ）（事实上，边权可以为生成函数）</p><p> $e(u, v)$ 表示 $u$ 到 $v$ 的 <strong>每一条</strong> 路径 $P$ 的 $\omega(P)$ 之和，即 $e(u, v)=\sum\limits_{P:u\rightarrow v}\omega(P)$ 。</p><p>起点集合 $A$ ，是有向无环图点集的一个子集，大小为 $n$ 。</p><p>终点集合 $B$ ，也是有向无环图点集的一个子集，大小也为 $n$ 。</p><p>一组 $A\rightarrow B$ 的不相交路径 $S$ ： $S_i$ 是一条从 $A_i$ 到 $B_{\sigma(S)_i}$ 的路径（ $\sigma(S)$ 是一个排列），对于任何 $i\ne j$ ， $S_i$ 和 $S_j$ 没有公共顶点。</p><p> $N(\sigma)$ 表示排列 $\sigma$ 的逆序对个数。</p><h2 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h2><p>$$<br>M = \begin{bmatrix}e(A_1,B_1)&amp;e(A_1,B_2)&amp;\cdots&amp;e(A_1,B_n)\\<br>e(A_2,B_1)&amp;e(A_2,B_2)&amp;\cdots&amp;e(A_2,B_n)\\<br>\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\<br>e(A_n,B_1)&amp;e(A_n,B_2)&amp;\cdots&amp;e(A_n,B_n)\end{bmatrix}<br>$$</p><p>$$<br>\det(M)=\sum\limits_{S:A\rightarrow B}(-1)^{N(\sigma(S))}\prod\limits_{i=1}^n \omega(S_i)<br>$$</p><p>其中 $\sum\limits_{S:A\rightarrow B}$ 表示满足上文要求的 $A\rightarrow B$ 的每一组不相交路径 $S$ ，$\det$ 表示行列式。</p><p>证明请参考 <a href="https://en.wikipedia.org/wiki/Lindström–Gessel–Viennot_lemma" target="_blank" rel="noopener">维基百科</a> 。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5852" target="_blank" rel="noopener">hdu5852 Intersection is not allowed!</a> </p><p>题意：有一个 $n\times n$ 的棋盘，一个棋子从 $(x, y)$ 只能走到 $(x, y+1)$ 或 $(x + 1, y)$ ，有 $k$ 个棋子，一开始第 $i$ 个棋子放在 $(1, a_i)$ ，最终要到 $(n, b_i)$ ，路径要两两不相交，求方案数对 $10^9+7$ 取模。 $1\le n\le 10^5$ , $1\le k\le 100$ ，保证 $1\le a_1&lt;a_2&lt;\dots&lt;a_n\le n$ , $1\le b_1&lt;b_2&lt;\dots&lt;b_n\le n$ 。</p><p>观察到如果路径不相交就一定是 $a_i$ 到 $b_i$ ，因此 LGV 引理中一定有 $\sigma(S)_i=i$ ，不需要考虑符号问题。边权设为 $1$ ，直接套用引理即可。</p><p>从 $(1, a_i)$ 到 $(n, b_j)$ 的路径条数相当于从 $n-1+b_j-a_i$ 步中选 $n-1$ 步向下走，所以 $e(A_i, B_j)=\binom{n-1+b_j-a_i}{n-1}$ 。</p><p>行列式可以使用高斯消元求。</p><p>复杂度为 $O(n+k^2(k + \log p))$ ，其中 $\log p$ 是求逆元复杂度。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, k, a[K], b[K], fact[N &lt;&lt; <span class="number">1</span>], m[K][K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll)out * x % mod;</span><br><span class="line">        x = (ll)x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll)fact[x] * qpow(fact[y], mod - <span class="number">2</span>) % mod * qpow(fact[x - y], mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N * <span class="number">2</span>; ++i) fact[i] = (ll)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, b + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt;= b[j]) m[i][j] = c(b[j] - a[i] + n - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> m[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m[i][i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m[j][i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">std</span>::swap(m[i], m[j]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!m[i][i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!m[j][i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> mul = (ll)m[j][i] * qpow(m[i][i], mod - <span class="number">2</span>) % mod;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = i; p &lt;= k; ++p)</span><br><span class="line">                &#123;</span><br><span class="line">                    m[j][p] = (m[j][p] - (ll)m[i][p] * mul % mod + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) ans = (ll)ans * m[i][i] % mod;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lindström–Gessel–Viennot lemma，即 LGV 引理，可以用来处理有向无环图上不相交路径计数等问题。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="线性代数" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF1208G Polygons（数论）</title>
    <link href="https://ouuan.github.io/CF1208G-Polygons%EF%BC%88%E6%95%B0%E8%AE%BA%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1208G-Polygons（数论）/</id>
    <published>2019-08-27T12:08:56.000Z</published>
    <updated>2019-08-28T02:49:18.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/1208/problem/G" target="_blank" rel="noopener">CF</a></p><p><a href="https://www.luogu.org/problem/CF1208G" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给定 $n$ 和 $k$，你需要在圆上画 $k$ 个不超过 $n$ 条边的正多边形，求顶点去重后至少有多少个。</p><p>$3\le n\le10^6$，$1\le k\le n-2$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><ol><li><p>所有正多边形至少有一个公共顶点。可以感性理解，也可以看 <a href="https://codeforces.com/blog/entry/69357?#comment-538545" target="_blank" rel="noopener">imp 的评论</a>。</p></li><li><p>选了 $x$ 边形就选了 $x$ 的所有约数（除了 $1$ 和 $2$）边形一定最优，因为选约数相当于是免费的。</p></li></ol><p>那么，我们可以把 $x$ 边形的第 $y$ 个顶点看成分数 $\dfrac y x$，这样的话，在已经选了 $x$ 的所有约数的前提下，选 $x$ 边形的代价就是 $\varphi(x)$，问题就变成了求最小的 $k$ 个 $\varphi$ 之和。</p><p>但是，一边形和二边形是不存在的，需要特殊考虑。</p><p>“一边形”其实就是那个所有正多边形的公共顶点，只需要在计算答案时加一即可。</p><p>“二边形”会且仅会影响偶数边形，相当于“一旦选了某个偶数边形，答案加一”。因为 $\varphi(x)=1$ 的 $x$ 只有 $1$ 和 $2$， 而 $\varphi(x)=2$ 的 $x$ 只有 $3$, $4$, $6$，所以只有仅选择正三角形这种情况会受到影响。特判 $k=1$ 输出 $3$ 即可。</p><p>用线性筛 + nth_element（值域不大，其实也可以线性排序）即可做到 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k, p[N], tot, phi[N];</span><br><span class="line"><span class="keyword">bool</span> np[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) phi[x] = phi[i] * (p[j] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                phi[x] = phi[i] * p[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nth_element(phi + <span class="number">1</span>, phi + k + <span class="number">3</span>, phi + n + <span class="number">1</span>); <span class="comment">// 选了最小的 k+2 个，其中前两个是“一边形”和“二边形”的代价</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">2</span>; ++i) ans += phi[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1208/problem/G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/CF1208G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给定 $n$ 和 $k$，你需要在圆上画 $k$ 个不超过 $n$ 条边的正多边形，求顶点去重后至少有多少个。&lt;/p&gt;
&lt;p&gt;$3\le n\le10^6$，$1\le k\le n-2$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数论" scheme="https://ouuan.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>一些注意事项</title>
    <link href="https://ouuan.github.io/%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://ouuan.github.io/一些注意事项/</id>
    <published>2019-08-18T16:22:36.000Z</published>
    <updated>2019-10-16T13:46:46.843Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>—— 简单题不 sb 是什么水平？</p><p>—— 国家队水平。</p></blockquote><a id="more"></a><h2 id="sb-错误"><a href="#sb-错误" class="headerlink" title="sb 错误"></a>sb 错误</h2><p>开 long long 时记得快读也要开 long long。</p><p>记得删调试信息，尤其是 cerr。</p><p>多测时要小心使用 memset。</p><p>operator 前面记得加返回值类型名。（dev c++ 不报错不警告）</p><p>跑的很快可能是因为被优化了，因此不要用空循环测运行用时。</p><p>（用于在线比赛）RE 可能是爆栈了。</p><p>不要假根号分治（可能大于 / 小于根号的同样可以处理小于 / 大于根号的）。</p><h2 id="sb-想不到"><a href="#sb-想不到" class="headerlink" title="sb 想不到"></a>sb 想不到</h2><p>多次二分时想一想能不能用双指针。</p><p>计数 → 什么是重复的，什么是相同的。要做到不重不漏</p><p>最优化 → 什么是不优的，什么是不劣的。</p><p>要是怎么样就好了 → 能不能转化成这样。</p><p>存在反例 → 反例能否特殊处理。</p><p>只用管大小而不关心具体值 → 从小到大、从大到小考虑 / 二分答案转成 01。</p><p>构造最小值 → 找到一个较紧的下界，构造出下界（或者构造出一个方案，证明它是下界）。</p><p>成双成对的元素，在一起怎么样，不在一起怎么样，经常可以用随机数异或来处理。</p><p>把整个序列分成若干段，每段求一个值再加起来求最值，暴力是 DP，经常可以用决策单调性优化。</p><p>图论相关问题（包括树上问题）可以考虑点和边互相转化。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;—— 简单题不 sb 是什么水平？&lt;/p&gt;
&lt;p&gt;—— 国家队水平。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="注意事项" scheme="https://ouuan.github.io/tags/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>AGC007F Shik and Copying String（贪心，实现）</title>
    <link href="https://ouuan.github.io/AGC007F-Shik-and-Copying-String%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>https://ouuan.github.io/AGC007F-Shik-and-Copying-String（贪心，实现）/</id>
    <published>2019-08-16T15:34:10.000Z</published>
    <updated>2019-08-18T09:37:44.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/AT2173" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://atcoder.jp/contests/agc007/tasks/agc007_f" target="_blank" rel="noopener">AtCoder</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你初始串 $S_0$ 和目标串 $T$，每一步操作可以将当前串 $S_i$ 变成 $S_{i+1}$，其中：</p><p>$$S_{i+1}[j]=\begin{cases}S_i[1]&amp;j=1\\S_i[j]\text{ 或 }S_{i+1}[j-1]&amp;j&gt;1\end{cases}$$</p><p>求最少需要几次操作可以将当前串变为 $T$。</p><p>串长 $10^6​$。</p><a id="more"></a><p>这题题解真的难写..之前觉得别人的题解写的不清楚，然而自己也写的不是很清楚…</p><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，这个过程可以用折线表示：</p><img src="/AGC007F-Shik-and-Copying-String（贪心，实现）/zx.png"><p>（如果您在色觉方面存在障碍，还请见谅。）</p><p>可以发现，每条折线都尽量靠右是最优的，一旦画不下了，就加一行。</p><p>现在问题变成了如何高效地维护这一贪心。</p><p>当 $S_0=T$ 时，先特判掉，输出 $0​$。</p><p>由于每次拐点都会往左下移动一格，我们可以用队列来维护当前折线的每个拐点（折线往右拐的点，也就是 $S_i[j]=S_i[j-1]$ 的 $j-1$ 这个点）（不包括最后一行的拐点），其中靠近队首表示靠下（离 $T$ 较近）的拐点，靠近队尾表示靠上（靠近 $S_0$）的拐点。</p><p>详见代码（因为这题文字写出来不如代码好理解）：</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == t) <span class="comment">// 特判两串相等</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> up = n - <span class="number">1</span>, down = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (down &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (down &amp;&amp; t[down - <span class="number">1</span>] == t[down]) --down; <span class="comment">// 找到当前折线在最后一行最左的位置</span></span><br><span class="line">        <span class="keyword">while</span> (up &gt;= <span class="number">0</span> &amp;&amp; (up &gt; down || s[up] != t[down])) --up; <span class="comment">// 找到当前折线在第一行最左的位置</span></span><br><span class="line">        <span class="keyword">if</span> (up &lt; <span class="number">0</span>) <span class="comment">// 如果第一行没有对应的字符，输出无解</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; q.front() - q.size() &gt;= down) q.pop(); <span class="comment">// 把当前折线不会碰到的部分弹出</span></span><br><span class="line">        <span class="keyword">if</span> (up != down) q.push(up); <span class="comment">// 如果当前折线真的是“折线”而不是竖直下来不拐弯，就把 S1 的拐点压入队列</span></span><br><span class="line">        ans = max(ans, (<span class="keyword">int</span>)q.size() + <span class="number">1</span>); <span class="comment">// 后文会解释为什么这样更新答案</span></span><br><span class="line">        --down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>这个维护拐点的方式应该画画图就能明白。</p><p>最后剩下一个问题：为什么是这样更新答案？</p><p>换句话说：为什么答案是拐点个数的历史最大值？（加一是因为没有维护最后一行的拐点）</p><p>如果没有这个 pop 操作，应该是很显然的。但 pop 操作破坏了“队列中每个元素对应除最后一行外每一行最左位置”这个性质。</p><p>这里需要一个引理：</p><blockquote><p>除了最后一行的拐点，其它拐点一定位于连续的前几行。</p></blockquote><p>我们可以归纳地证明：</p><ul><li>对于最右的那条折线，显然成立。</li><li>对于之后的每条折线，一定是先贴着上一条折线，再直接往下到最后一行。由于上一条折线满足引理，如果中途有一段没有拐点而后又出现拐点，中途的那一段就没有紧贴上一条折线。</li></ul><p>有了这个引理，就可以<del>感性理解</del>说明为什么有 pop 操作的情况下答案依然是拐点个数的历史最大值了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/AT2173&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/agc007/tasks/agc007_f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AtCoder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你初始串 $S_0$ 和目标串 $T$，每一步操作可以将当前串 $S_i$ 变成 $S_{i+1}$，其中：&lt;/p&gt;
&lt;p&gt;$$S_{i+1}[j]=\begin{cases}S_i[1]&amp;amp;j=1\\S_i[j]\text{ 或 }S_{i+1}[j-1]&amp;amp;j&amp;gt;1\end{cases}$$&lt;/p&gt;
&lt;p&gt;求最少需要几次操作可以将当前串变为 $T$。&lt;/p&gt;
&lt;p&gt;串长 $10^6​$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="实现" scheme="https://ouuan.github.io/tags/%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>一些有趣的小工程</title>
    <link href="https://ouuan.github.io/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E5%B0%8F%E5%B7%A5%E7%A8%8B/"/>
    <id>https://ouuan.github.io/一些有趣的小工程/</id>
    <published>2019-08-10T11:22:23.000Z</published>
    <updated>2019-10-12T11:13:09.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说实话我觉得竞赛题目挺坑爹的……木有啥意思。人类为何要出题刁难人类。</p><p>我更喜欢做的事情是写点工程啥的 &gt;_&lt;… 做做小游戏挺好玩的。</p><p>—— vfk 《四色的 NOI》</p></blockquote><p>（<del>这算哪门子引用啊</del>）</p><a id="more"></a><h3 id="BZOJ-Local-Judge"><a href="#BZOJ-Local-Judge" class="headerlink" title="BZOJ-Local-Judge"></a><a href="https://github.com/ouuan/BZOJ-Local-Judge" target="_blank" rel="noopener">BZOJ-Local-Judge</a></h3><p>我自己现在做 BZOJ 上有的题（5000 之前）全都用这个了。真的非常方便。</p><h3 id="Hinata-Online-Judge"><a href="#Hinata-Online-Judge" class="headerlink" title="Hinata Online Judge"></a><a href="https://github.com/ouuan/Hinata-Online-Judge" target="_blank" rel="noopener">Hinata Online Judge</a></h3><p>是 UOJ 的魔改，有 <a href="https://github.com/ouuan/Hinata-Online-Judge/issues/1" target="_blank" rel="noopener">挺多 feature</a> 的。</p><h3 id="Despised"><a href="#Despised" class="headerlink" title="Despised"></a><a href="https://github.com/ouuan/Despised" target="_blank" rel="noopener">Despised</a></h3><p>除了选项单一，<del>我觉得这是我用过体验最好的被鄙视小程序了</del>。感觉加一些错误选项比较好，不然背着背着就变成背错误选项了。<del>希望明年不要咕。</del></p><h3 id="Tree-Generator"><a href="#Tree-Generator" class="headerlink" title="Tree-Generator"></a><a href="https://github.com/ouuan/Tree-Generator" target="_blank" rel="noopener">Tree-Generator</a></h3><p>造树挺方便的。（<del>顺便 <a href="http://codeforces.com/blog/entry/68835" target="_blank" rel="noopener">求 up</a></del>）。</p><h3 id="segmentTree"><a href="#segmentTree" class="headerlink" title="segmentTree"></a><a href="https://github.com/ouuan/segmentTree" target="_blank" rel="noopener">segmentTree</a></h3><p>基础线段树万能板子，只用写两个函数（merge 和 update）就拥有了一棵线段树。（<del>继续 <a href="https://codeforces.com/blog/entry/70467" target="_blank" rel="noopener">求 up</a></del>）</p><h3 id="Anti-YiGeDingLia"><a href="#Anti-YiGeDingLia" class="headerlink" title="Anti-YiGeDingLia"></a><a href="https://github.com/ouuan/Anti-YiGeDingLia" target="_blank" rel="noopener">Anti-YiGeDingLia</a></h3><p><a href="/antiyigedinglia">Demo</a></p><p>大家知道 QQ 的接龙红包吗？我写这个东西的时候接龙红包特别火，然而大家都很喜欢“一个顶俩” qaq。有了这个项目，当你看到 yi 结尾时就能及时意气高昂啦！</p><h3 id="LuoguPaintBoard"><a href="#LuoguPaintBoard" class="headerlink" title="LuoguPaintBoard"></a><a href="https://github.com/ouuan/LuoguPaintBoard" target="_blank" rel="noopener">LuoguPaintBoard</a></h3><p>顾名思义，是画洛谷冬日绘板用的。<del>我明年一定画个ひなた！</del></p><h3 id="Code-Disturber"><a href="#Code-Disturber" class="headerlink" title="Code-Disturber"></a><a href="https://github.com/ouuan/Code-Disturber" target="_blank" rel="noopener">Code-Disturber</a></h3><p>并没有什么用，<del>实际作用是用 emoji 美化代码。</del></p><h3 id="SwapArrayDimension"><a href="#SwapArrayDimension" class="headerlink" title="SwapArrayDimension"></a><a href="https://github.com/ouuan/SwapArrayDimension" target="_blank" rel="noopener">SwapArrayDimension</a></h3><p>或许是个实用的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说实话我觉得竞赛题目挺坑爹的……木有啥意思。人类为何要出题刁难人类。&lt;/p&gt;
&lt;p&gt;我更喜欢做的事情是写点工程啥的 &amp;gt;_&amp;lt;… 做做小游戏挺好玩的。&lt;/p&gt;
&lt;p&gt;—— vfk 《四色的 NOI》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（&lt;del&gt;这算哪门子引用啊&lt;/del&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工程" scheme="https://ouuan.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
