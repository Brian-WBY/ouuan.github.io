<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-12-06T13:56:53.137Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF786C Till I Collapse（根号分治，二分答案 / 主席树，调和级数）</title>
    <link href="https://ouuan.github.io/CF786C-Till-I-Collapse%EF%BC%88%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB%EF%BC%8C%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88-%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%8C%E8%B0%83%E5%92%8C%E7%BA%A7%E6%95%B0%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF786C-Till-I-Collapse（根号分治，二分答案-主席树，调和级数）/</id>
    <published>2019-12-06T11:24:14.000Z</published>
    <updated>2019-12-06T13:56:53.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/786/problem/C" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个长为 $n$ 的数列，对于 $1\le k\le n$ 的所有整数 $k$，求出这个问题的答案：将数列划分成若干连续段，每段内最多有 $k$ 个 <strong>不同</strong> 的数，至少要划分成几段？</p><p>$n\le 10^5$ 。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先是一个显而易见的贪心：分段时在一段内放更多的数一定不劣。这个结论在下面两个做法都会用到。</p><h3 id="根号分治"><a href="#根号分治" class="headerlink" title="根号分治"></a>根号分治</h3><p>根据上面的那个结论，可以得到一个 $k$ 固定时复杂度为 $O(n)$ 的做法。需要使用时间戳清空访问数组。</p><p>然后就可以进行根号分治：</p><p>取一个合适的值 $B$ 。</p><p>对于 $1\le k\le B$ ，直接做，时间复杂度为 $O(nB)$ 。</p><p>对于 $B+1\le k\le n$ ，答案不超过 $n/B$ ，可以对于每个答案二分求出 $k$ 的最小值和最大值，时间复杂度为 $O(n^2\log n/B)$ 。</p><p>取 $B=\sqrt{n\log n}$，总时间复杂度为 $O(n\sqrt{n\log n})$，可以通过本题。</p><h3 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h3><p>每个 $k$ 的答案不超过 $n/k$，根据调和级数，可以得到总答案的级别为 $O(n\log n)$ ，所以只要能够快速求出一次分段的右端点，就能够快速求出总答案了。</p><p>这题依然可以沿用 <a href="https://www.luogu.com.cn/problem/P1972" target="_blank" rel="noopener">「SDOI2009」HH 的项链</a> 的树状数组做法，但由于要不断地求分段的右端点，需要使用主席树，再加上线段树二分，就可以 $O(\log n)$ 求出一段的右端点，总时间复杂度即为 $O(n\log^2n)$ 。</p><p>具体来说，$f_{l, i}\in\{0, 1\}$ ，$f_{l, i}=1$ 当且仅当 $i$ 是 $l$ 及其右侧第一个为 $a_i$ 的数，即 $i\ge l$ 且不存在 $j$ 使得 $l\le j\le i-1, a_j=a_i$ 。那么，$[l, r]$ 的颜色数就是 $f_{l, r}$ 。使用 $n$ 棵主席树分别维护 $f_{1..n, i}$ 即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><div><div class="fold_hider"><div class="close hider_title">根号分治</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//#define int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"> </span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> y1 why_is_there_a_function_called_y1</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;<span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">1e121</span>;<span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-10</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">int</span> out=rng()%(r-l+<span class="number">1</span>)+l;<span class="keyword">return</span> out&gt;=l?out:out+r-l+<span class="number">1</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(pair&lt;A,B&gt;p)</span></span>;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C&gt;p)</span></span>;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C,D&gt;p)</span></span>;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;s)</span></span>&#123;<span class="keyword">return</span> <span class="string">'"'</span>+s+<span class="string">'"'</span>;&#125;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span>&#123;<span class="keyword">return</span> to_string((<span class="built_in">string</span>)s);&#125;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">bool</span> b)</span></span>&#123;<span class="keyword">return</span>(b?<span class="string">"true"</span>:<span class="string">"false"</span>);&#125;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;v)</span></span>&#123;<span class="keyword">bool</span> first=<span class="literal">true</span>;<span class="built_in">string</span> res=<span class="string">"&#123;"</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(v.size());i++)&#123;<span class="keyword">if</span>(!first)&#123;res+=<span class="string">","</span>;&#125;first=<span class="literal">false</span>;res+=to_string(v[i]);&#125;res+=<span class="string">"&#125;"</span>;<span class="keyword">return</span> res;&#125;<span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">bitset</span>&lt;N&gt;v)</span></span>&#123;<span class="built_in">string</span> res=<span class="string">""</span>;<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;res+=<span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(<span class="string">'0'</span>+v[i]);&#125;<span class="keyword">return</span> res;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(A v)</span></span>&#123;<span class="keyword">bool</span> first=<span class="literal">true</span>;<span class="built_in">string</span> res=<span class="string">"&#123;"</span>;<span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp;x:v)&#123;<span class="keyword">if</span>(!first)&#123;res+=<span class="string">","</span>;&#125;first=<span class="literal">false</span>;res+=to_string(x);&#125;res+=<span class="string">"&#125;"</span>;<span class="keyword">return</span> res;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(pair&lt;A,B&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(p.first)+<span class="string">","</span>+to_string(p.second)+<span class="string">")"</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(get&lt;<span class="number">0</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">1</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">2</span>&gt;(p))+<span class="string">")"</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C,D&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(get&lt;<span class="number">0</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">1</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">2</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">3</span>&gt;(p))+<span class="string">")"</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C,<span class="keyword">typename</span> D,<span class="keyword">typename</span> E&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C,D,E&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(get&lt;<span class="number">0</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">1</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">2</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">3</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">4</span>&gt;(p))+<span class="string">")"</span>;&#125;<span class="function"><span class="keyword">void</span> <span class="title">debug_out</span><span class="params">()</span></span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head,<span class="keyword">typename</span>...Tail&gt;<span class="function"><span class="keyword">void</span> <span class="title">debug_out</span><span class="params">(Head H,Tail...T)</span></span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;to_string(H);debug_out(T...);&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> OUUAN</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> debug(...)cerr&lt;&lt;<span class="meta-string">"["</span>&lt;&lt;#__VA_ARGS__&lt;&lt;<span class="meta-string">"]:"</span>,debug_out(__VA_ARGS__)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> debug(...)42</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function">ld <span class="title">read</span><span class="params">(ld&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%Lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span>,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> ld&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10Lf"</span>,x);&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value||(is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;<span class="keyword">bool</span> isFirst=<span class="literal">true</span>;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;<span class="keyword">if</span>(isFirst)isFirst=<span class="literal">false</span>;<span class="keyword">else</span> sp;write(*__first);&#125;br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inRange</span><span class="params">(<span class="keyword">const</span> T&amp;x,<span class="keyword">const</span> T&amp;l,<span class="keyword">const</span> T&amp;r)</span></span>&#123;<span class="keyword">return</span>!(x&lt;l)&amp;&amp;!(r&lt;x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> valueType,<span class="keyword">typename</span> tagType&gt;<span class="class"><span class="keyword">class</span> <span class="title">segmentTreeNode</span>&#123;</span><span class="keyword">public</span>:<span class="keyword">int</span> id,left,right;valueType val;tagType tag;&#125;;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> valueType, <span class="keyword">typename</span> tagType, valueType(*merge)(valueType,valueType), <span class="keyword">void</span>(*update)(segmentTreeNode&lt;valueType,tagType&gt;&amp;,tagType)&gt;<span class="class"><span class="keyword">class</span> <span class="title">segmentTree</span>&#123;</span><span class="keyword">private</span>:<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segmentTreeNode&lt;valueType,tagType&gt;&gt;nodes;<span class="keyword">int</span> leftRange,rightRange;valueType valueZero;tagType tagZero;<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;nodes[cur].val=merge(nodes[cur&lt;&lt;<span class="number">1</span>].val,nodes[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val);&#125;<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;update(nodes[cur&lt;&lt;<span class="number">1</span>],nodes[cur].tag);update(nodes[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],nodes[cur].tag);nodes[cur].tag=tagZero;&#125;<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;initValue)</span></span>&#123;nodes[cur].id=cur;nodes[cur].left=l;nodes[cur].right=r;nodes[cur].tag=tagZero;<span class="keyword">if</span>(l==r<span class="number">-1</span>)nodes[cur].val=initValue[l-leftRange];<span class="keyword">else</span>&#123;build(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,initValue);build(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,initValue);pushup(cur);&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)</span></span>&#123;valueZero=_valueZero;tagZero=_tagZero;nodes.resize((rightRange-leftRange)&lt;&lt;<span class="number">2</span>);build(<span class="number">1</span>,leftRange,rightRange,_initValue);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;<span class="keyword">if</span>(l&gt;=R||r&lt;=L)<span class="keyword">return</span>;<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)update(nodes[cur],tag);<span class="keyword">else</span>&#123;pushdown(cur);modify(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,L,R,tag);modify(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,L,R,tag);pushup(cur);&#125;&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;<span class="keyword">if</span>(l&gt;=R||r&lt;=L)<span class="keyword">return</span> valueZero;<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> nodes[cur].val;pushdown(cur);<span class="keyword">return</span> merge(query(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,L,R), query(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,L,R));&#125;<span class="keyword">public</span>:segmentTree()&#123;&#125;segmentTree(<span class="keyword">int</span> _leftRange,<span class="keyword">int</span> _rightRange,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)&#123;leftRange=_leftRange;rightRange=_rightRange;init(_initValue,_valueZero,_tagZero);&#125;segmentTree(<span class="keyword">int</span> size,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)&#123;leftRange=<span class="number">1</span>;rightRange=size+<span class="number">1</span>;init(_initValue,_valueZero,_tagZero);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;modify(<span class="number">1</span>,leftRange,rightRange,l,r,tag);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;modify(p,p+<span class="number">1</span>,tag);&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> query(<span class="number">1</span>,leftRange,rightRange,l,r);&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> query(p,p+<span class="number">1</span>);&#125;&#125;;<span class="class"><span class="keyword">class</span> <span class="title">maxFlow</span>&#123;</span><span class="keyword">private</span>:<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;head,cur,nxt,to,dep;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt;cap;<span class="keyword">public</span>:maxFlow(<span class="keyword">int</span> _n=<span class="number">0</span>)&#123;init(_n);&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;head.clear();head.resize(_n+<span class="number">1</span>,<span class="number">0</span>);nxt.resize(<span class="number">2</span>);to.resize(<span class="number">2</span>);cap.resize(<span class="number">2</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;init(head.size()<span class="number">-1</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;nxt.push_back(head[u]);head[u]=to.size();to.push_back(v);cap.push_back(w);&#125;<span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;add(u,v,w);add(v,u,<span class="number">0</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;cap[x&lt;&lt;<span class="number">1</span>]=cap[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;&#125;<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;dep.clear();dep.resize(head.size(),<span class="number">-1</span>);dep[s]=<span class="number">0</span>;q.push(s);<span class="keyword">while</span>(!q.empty())&#123;<span class="keyword">int</span> u=q.front();q.pop();<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;<span class="keyword">int</span> v=to[i];ll w=cap[i];<span class="keyword">if</span>(w&gt;<span class="number">0</span>&amp;&amp;dep[v]==<span class="number">-1</span>)&#123;dep[v]=dep[u]+<span class="number">1</span>;q.push(v);&#125;&#125;&#125;<span class="keyword">return</span> ~dep[t];&#125;<span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,ll flow,<span class="keyword">int</span> t)</span></span>&#123;<span class="keyword">if</span>(dep[u]==dep[t])<span class="keyword">return</span> u==t?flow:<span class="number">0</span>;ll out=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span>&amp;i=cur[u];i;i=nxt[i])&#123;<span class="keyword">int</span> v=to[i];ll w=cap[i];<span class="keyword">if</span>(w&gt;<span class="number">0</span>&amp;&amp;dep[v]==dep[u]+<span class="number">1</span>)&#123;ll f=dfs(v,<span class="built_in">std</span>::min(w,flow-out),t);cap[i]-=f;cap[i ^ <span class="number">1</span>]+=f;out+=f;<span class="keyword">if</span>(out==flow)<span class="keyword">return</span> out;&#125;&#125;<span class="keyword">return</span> out;&#125;<span class="function">ll <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;ll out=<span class="number">0</span>;<span class="keyword">while</span>(bfs(s,t))&#123;cur=head;out+=dfs(s,<span class="number">0x7fffffffffffffff</span>ll,t);&#125;<span class="keyword">return</span> out;&#125;<span class="function">ll <span class="title">getflow</span><span class="params">(<span class="keyword">int</span> x)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> cap[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">customHash</span>&#123;</span><span class="function"><span class="keyword">static</span> uint64_t <span class="title">splitmix64</span><span class="params">(<span class="keyword">uint64_t</span> x)</span></span>&#123;x+=<span class="number">0x9e3779b97f4a7c15</span>;x=(x ^(x&gt;&gt;<span class="number">30</span>))*<span class="number">0xbf58476d1ce4e5b9</span>;x=(x ^(x&gt;&gt;<span class="number">27</span>))*<span class="number">0x94d049bb133111eb</span>;<span class="keyword">return</span> x ^(x&gt;&gt;<span class="number">31</span>);&#125;<span class="keyword">size_t</span> <span class="keyword">operator</span>()(<span class="keyword">uint64_t</span> x)<span class="keyword">const</span>&#123;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> FIXED_RANDOM=rng();<span class="keyword">return</span> splitmix64(x+FIXED_RANDOM);&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">1400</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, tim;</span><br><span class="line">vi a, vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        ++tim;</span><br><span class="line">        ++out;</span><br><span class="line">        <span class="keyword">while</span> (p &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[a[p]] != tim)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (++cnt &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                vis[a[p]] = tim;</span><br><span class="line">            &#125;</span><br><span class="line">            ++p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p &lt; n);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n);</span><br><span class="line"></span><br><span class="line">    a.resize(n);</span><br><span class="line">    vis.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    read(a.begin(), a.end());</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, min(B, n)) wts(solve(i));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p = min(B, n) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    FOR (i, n / B + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (solve(mid) &lt; i) r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; p &lt;= l; ++p) wts(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div><div class="fold_hider"><div class="close hider_title">主席树</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//#define int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"> </span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> y1 why_is_there_a_function_called_y1</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;<span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">1e121</span>;<span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-10</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">int</span> out=rng()%(r-l+<span class="number">1</span>)+l;<span class="keyword">return</span> out&gt;=l?out:out+r-l+<span class="number">1</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(pair&lt;A,B&gt;p)</span></span>;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C&gt;p)</span></span>;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C,D&gt;p)</span></span>;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;s)</span></span>&#123;<span class="keyword">return</span> <span class="string">'"'</span>+s+<span class="string">'"'</span>;&#125;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span>&#123;<span class="keyword">return</span> to_string((<span class="built_in">string</span>)s);&#125;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="keyword">bool</span> b)</span></span>&#123;<span class="keyword">return</span>(b?<span class="string">"true"</span>:<span class="string">"false"</span>);&#125;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;v)</span></span>&#123;<span class="keyword">bool</span> first=<span class="literal">true</span>;<span class="built_in">string</span> res=<span class="string">"&#123;"</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(v.size());i++)&#123;<span class="keyword">if</span>(!first)&#123;res+=<span class="string">","</span>;&#125;first=<span class="literal">false</span>;res+=to_string(v[i]);&#125;res+=<span class="string">"&#125;"</span>;<span class="keyword">return</span> res;&#125;<span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(<span class="built_in">bitset</span>&lt;N&gt;v)</span></span>&#123;<span class="built_in">string</span> res=<span class="string">""</span>;<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;res+=<span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(<span class="string">'0'</span>+v[i]);&#125;<span class="keyword">return</span> res;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(A v)</span></span>&#123;<span class="keyword">bool</span> first=<span class="literal">true</span>;<span class="built_in">string</span> res=<span class="string">"&#123;"</span>;<span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp;x:v)&#123;<span class="keyword">if</span>(!first)&#123;res+=<span class="string">","</span>;&#125;first=<span class="literal">false</span>;res+=to_string(x);&#125;res+=<span class="string">"&#125;"</span>;<span class="keyword">return</span> res;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(pair&lt;A,B&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(p.first)+<span class="string">","</span>+to_string(p.second)+<span class="string">")"</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(get&lt;<span class="number">0</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">1</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">2</span>&gt;(p))+<span class="string">")"</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C,<span class="keyword">typename</span> D&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C,D&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(get&lt;<span class="number">0</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">1</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">2</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">3</span>&gt;(p))+<span class="string">")"</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B,<span class="keyword">typename</span> C,<span class="keyword">typename</span> D,<span class="keyword">typename</span> E&gt;<span class="function"><span class="built_in">string</span> <span class="title">to_string</span><span class="params">(tuple&lt;A,B,C,D,E&gt;p)</span></span>&#123;<span class="keyword">return</span> <span class="string">"("</span>+to_string(get&lt;<span class="number">0</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">1</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">2</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">3</span>&gt;(p))+<span class="string">","</span>+to_string(get&lt;<span class="number">4</span>&gt;(p))+<span class="string">")"</span>;&#125;<span class="function"><span class="keyword">void</span> <span class="title">debug_out</span><span class="params">()</span></span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head,<span class="keyword">typename</span>...Tail&gt;<span class="function"><span class="keyword">void</span> <span class="title">debug_out</span><span class="params">(Head H,Tail...T)</span></span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;to_string(H);debug_out(T...);&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> OUUAN</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> debug(...)cerr&lt;&lt;<span class="meta-string">"["</span>&lt;&lt;#__VA_ARGS__&lt;&lt;<span class="meta-string">"]:"</span>,debug_out(__VA_ARGS__)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> debug(...)42</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function">ld <span class="title">read</span><span class="params">(ld&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%Lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span>,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> ld&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10Lf"</span>,x);&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value||(is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;<span class="keyword">bool</span> isFirst=<span class="literal">true</span>;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;<span class="keyword">if</span>(isFirst)isFirst=<span class="literal">false</span>;<span class="keyword">else</span> sp;write(*__first);&#125;br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inRange</span><span class="params">(<span class="keyword">const</span> T&amp;x,<span class="keyword">const</span> T&amp;l,<span class="keyword">const</span> T&amp;r)</span></span>&#123;<span class="keyword">return</span>!(x&lt;l)&amp;&amp;!(r&lt;x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> valueType,<span class="keyword">typename</span> tagType&gt;<span class="class"><span class="keyword">class</span> <span class="title">segmentTreeNode</span>&#123;</span><span class="keyword">public</span>:<span class="keyword">int</span> id,left,right;valueType val;tagType tag;&#125;;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> valueType, <span class="keyword">typename</span> tagType, valueType(*merge)(valueType,valueType), <span class="keyword">void</span>(*update)(segmentTreeNode&lt;valueType,tagType&gt;&amp;,tagType)&gt;<span class="class"><span class="keyword">class</span> <span class="title">segmentTree</span>&#123;</span><span class="keyword">private</span>:<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segmentTreeNode&lt;valueType,tagType&gt;&gt;nodes;<span class="keyword">int</span> leftRange,rightRange;valueType valueZero;tagType tagZero;<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;nodes[cur].val=merge(nodes[cur&lt;&lt;<span class="number">1</span>].val,nodes[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val);&#125;<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;update(nodes[cur&lt;&lt;<span class="number">1</span>],nodes[cur].tag);update(nodes[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],nodes[cur].tag);nodes[cur].tag=tagZero;&#125;<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;initValue)</span></span>&#123;nodes[cur].id=cur;nodes[cur].left=l;nodes[cur].right=r;nodes[cur].tag=tagZero;<span class="keyword">if</span>(l==r<span class="number">-1</span>)nodes[cur].val=initValue[l-leftRange];<span class="keyword">else</span>&#123;build(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,initValue);build(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,initValue);pushup(cur);&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)</span></span>&#123;valueZero=_valueZero;tagZero=_tagZero;nodes.resize((rightRange-leftRange)&lt;&lt;<span class="number">2</span>);build(<span class="number">1</span>,leftRange,rightRange,_initValue);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;<span class="keyword">if</span>(l&gt;=R||r&lt;=L)<span class="keyword">return</span>;<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)update(nodes[cur],tag);<span class="keyword">else</span>&#123;pushdown(cur);modify(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,L,R,tag);modify(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,L,R,tag);pushup(cur);&#125;&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;<span class="keyword">if</span>(l&gt;=R||r&lt;=L)<span class="keyword">return</span> valueZero;<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> nodes[cur].val;pushdown(cur);<span class="keyword">return</span> merge(query(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,L,R), query(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,L,R));&#125;<span class="keyword">public</span>:segmentTree()&#123;&#125;segmentTree(<span class="keyword">int</span> _leftRange,<span class="keyword">int</span> _rightRange,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)&#123;leftRange=_leftRange;rightRange=_rightRange;init(_initValue,_valueZero,_tagZero);&#125;segmentTree(<span class="keyword">int</span> size,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)&#123;leftRange=<span class="number">1</span>;rightRange=size+<span class="number">1</span>;init(_initValue,_valueZero,_tagZero);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;modify(<span class="number">1</span>,leftRange,rightRange,l,r,tag);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;modify(p,p+<span class="number">1</span>,tag);&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> query(<span class="number">1</span>,leftRange,rightRange,l,r);&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> query(p,p+<span class="number">1</span>);&#125;&#125;;<span class="class"><span class="keyword">class</span> <span class="title">maxFlow</span>&#123;</span><span class="keyword">private</span>:<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;head,cur,nxt,to,dep;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt;cap;<span class="keyword">public</span>:maxFlow(<span class="keyword">int</span> _n=<span class="number">0</span>)&#123;init(_n);&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;head.clear();head.resize(_n+<span class="number">1</span>,<span class="number">0</span>);nxt.resize(<span class="number">2</span>);to.resize(<span class="number">2</span>);cap.resize(<span class="number">2</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;init(head.size()<span class="number">-1</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;nxt.push_back(head[u]);head[u]=to.size();to.push_back(v);cap.push_back(w);&#125;<span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;add(u,v,w);add(v,u,<span class="number">0</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;cap[x&lt;&lt;<span class="number">1</span>]=cap[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;&#125;<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;dep.clear();dep.resize(head.size(),<span class="number">-1</span>);dep[s]=<span class="number">0</span>;q.push(s);<span class="keyword">while</span>(!q.empty())&#123;<span class="keyword">int</span> u=q.front();q.pop();<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;<span class="keyword">int</span> v=to[i];ll w=cap[i];<span class="keyword">if</span>(w&gt;<span class="number">0</span>&amp;&amp;dep[v]==<span class="number">-1</span>)&#123;dep[v]=dep[u]+<span class="number">1</span>;q.push(v);&#125;&#125;&#125;<span class="keyword">return</span> ~dep[t];&#125;<span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,ll flow,<span class="keyword">int</span> t)</span></span>&#123;<span class="keyword">if</span>(dep[u]==dep[t])<span class="keyword">return</span> u==t?flow:<span class="number">0</span>;ll out=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span>&amp;i=cur[u];i;i=nxt[i])&#123;<span class="keyword">int</span> v=to[i];ll w=cap[i];<span class="keyword">if</span>(w&gt;<span class="number">0</span>&amp;&amp;dep[v]==dep[u]+<span class="number">1</span>)&#123;ll f=dfs(v,<span class="built_in">std</span>::min(w,flow-out),t);cap[i]-=f;cap[i ^ <span class="number">1</span>]+=f;out+=f;<span class="keyword">if</span>(out==flow)<span class="keyword">return</span> out;&#125;&#125;<span class="keyword">return</span> out;&#125;<span class="function">ll <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;ll out=<span class="number">0</span>;<span class="keyword">while</span>(bfs(s,t))&#123;cur=head;out+=dfs(s,<span class="number">0x7fffffffffffffff</span>ll,t);&#125;<span class="keyword">return</span> out;&#125;<span class="function">ll <span class="title">getflow</span><span class="params">(<span class="keyword">int</span> x)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> cap[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">customHash</span>&#123;</span><span class="function"><span class="keyword">static</span> uint64_t <span class="title">splitmix64</span><span class="params">(<span class="keyword">uint64_t</span> x)</span></span>&#123;x+=<span class="number">0x9e3779b97f4a7c15</span>;x=(x ^(x&gt;&gt;<span class="number">30</span>))*<span class="number">0xbf58476d1ce4e5b9</span>;x=(x ^(x&gt;&gt;<span class="number">27</span>))*<span class="number">0x94d049bb133111eb</span>;<span class="keyword">return</span> x ^(x&gt;&gt;<span class="number">31</span>);&#125;<span class="keyword">size_t</span> <span class="keyword">operator</span>()(<span class="keyword">uint64_t</span> x)<span class="keyword">const</span>&#123;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> FIXED_RANDOM=rng();<span class="keyword">return</span> splitmix64(x+FIXED_RANDOM);&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, ls, rs;</span><br><span class="line">    <span class="keyword">bool</span> l1;</span><br><span class="line">    Node()</span><br><span class="line">    &#123;</span><br><span class="line">        val = ls = rs = <span class="number">0</span>;</span><br><span class="line">        l1 = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = t.size();</span><br><span class="line">    t.push_back(t[u]);</span><br><span class="line">    t[cur].val += x;</span><br><span class="line">    <span class="keyword">if</span> (p == l) t[cur].l1 = x == <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r - <span class="number">1</span>) <span class="keyword">return</span> cur;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ls = modify(t[u].ls, l, mid, p, x);</span><br><span class="line">        t[cur].ls = ls;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> rs = modify(t[u].rs, mid, r, p, x);</span><br><span class="line">        t[cur].rs = rs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r - <span class="number">1</span>) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">if</span> (t[t[u].ls].val &lt; k || (t[t[u].ls].val == k &amp;&amp; !t[t[u].rs].l1))</span><br><span class="line">        <span class="keyword">return</span> query(t[u].rs, mid, r, k - t[t[u].ls].val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(t[u].ls, l, mid, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vi a, rt, pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>, out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        ++out;</span><br><span class="line">        p = query(rt[p], <span class="number">0</span>, n, k) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n);</span><br><span class="line"></span><br><span class="line">    a.resize(n);</span><br><span class="line">    rt.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pre.resize(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    read(a.begin(), a.end());</span><br><span class="line"></span><br><span class="line">    t.resize(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    FOR (i, n - <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt[i] = modify(rt[i + <span class="number">1</span>], <span class="number">0</span>, n, i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (~pre[a[i]]) rt[i] = modify(rt[i], <span class="number">0</span>, n, pre[a[i]], <span class="number">-1</span>);</span><br><span class="line">        pre[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, n) wts(solve(i));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/786/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个长为 $n$ 的数列，对于 $1\le k\le n$ 的所有整数 $k$，求出这个问题的答案：将数列划分成若干连续段，每段内最多有 $k$ 个 &lt;strong&gt;不同&lt;/strong&gt; 的数，至少要划分成几段？&lt;/p&gt;
&lt;p&gt;$n\le 10^5$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="二分答案" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数颜色" scheme="https://ouuan.github.io/tags/%E6%95%B0%E9%A2%9C%E8%89%B2/"/>
    
      <category term="根号分治" scheme="https://ouuan.github.io/tags/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
    
      <category term="主席树" scheme="https://ouuan.github.io/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="调和级数" scheme="https://ouuan.github.io/tags/%E8%B0%83%E5%92%8C%E7%BA%A7%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF594D REQ（数颜色，莫队，树状数组，数论）</title>
    <link href="https://ouuan.github.io/CF594D-REQ%EF%BC%88%E6%95%B0%E9%A2%9C%E8%89%B2%EF%BC%8C%E8%8E%AB%E9%98%9F%EF%BC%8C%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%EF%BC%8C%E6%95%B0%E8%AE%BA%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF594D-REQ（数颜色，莫队，树状数组，数论）/</id>
    <published>2019-12-05T08:41:23.000Z</published>
    <updated>2019-12-05T13:26:25.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/594/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个正整数序列，多次询问给定区间内每个数之积的欧拉函数 ($\varphi$)，对 $10^9+7$ 取模。</p><p>数列长度、询问个数不超过 $2\cdot 10^5$，数的大小不超过 $10^6$ 。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>其实这题和 <a href="https://www.luogu.com.cn/problem/P1972" target="_blank" rel="noopener">「SDOI2009」HH 的项链</a> 本质是一样的。</p><p>由计算欧拉函数的公式得：</p><p>$$<br>\varphi\left(\prod\limits_{i=l}^ra_i\right)=\left(\prod\limits_{i=l}^ra_i\right)\cdot\left(\prod\limits_{p\text{ is a prime factor of }a_{l..r}}\frac{p-1}p\right)<br>$$</p><p>即，区间积乘上每个在这个区间中出现了的质因数减一除以本身。</p><p>区间积可以通过计算前缀积线性解决，关键在于求出分母。</p><p>如果每个质因数的贡献不是 $(p-1)/p$ 而是 $1$，并且贡献不是相乘而是相加，这就是一个区间数颜色问题了。事实上，区间数颜色问题的解法的确可以套用过来。</p><p>（下文中复杂度里的 $w$ 均指值域，$\omega(w)$ 指值域内一个数不可重质因子个数的最大值，即 <a href="http://oeis.org/A111972" target="_blank" rel="noopener">A111972</a> ，$m$ 指模数，即 $10^9+7$ 。）</p><h3 id="莫队做法"><a href="#莫队做法" class="headerlink" title="莫队做法"></a>莫队做法</h3><p>感觉 $O(w+w\log m/\log w+n\sqrt q\log w+q\log q)$ 做法没啥好讲的，会莫队就会了吧..但这个复杂度我写的过不了。</p><p>数论相关的莫队题经常可以根号分治去掉一个 log 。</p><p>具体来说，大小超过 $\sqrt w$ 的质因数在一个数中最多出现一次，所以可以把这些“大质数”用莫队处理，其它“小质数”用前缀和预处理，然后时间复杂度就是 $O(w+w\log m/\log w+n\sqrt q+q\log q)$ 了（$O(w\log m/\log w)$ 是计算 $(p-1)/p$ 以及 $p/(p-1)$ 的复杂度，当然，可以通过线性求逆元去掉这个 $\log m$）（空间复杂度为 $O(w+n\sqrt w + m)$）。</p><p>这样优化之后可以通过本题。</p><p>还有另外一种方式：不枚举重复的质因数，可以优化到 $O(w+w\log p/\log w+n\sqrt q\omega(w)+q\log q)$，也可以通过本题。</p><h3 id="树状数组做法"><a href="#树状数组做法" class="headerlink" title="树状数组做法"></a>树状数组做法</h3><p>这也是区间数颜色的经典做法。</p><p>记 $pre(p, r)$ 表示质因数 $p$ 在 $[1, r]$ 中最后一次出现的位置，即：</p><p>$$<br>pre(p, r)=\max\left(\{x|x\in\mathbb{N}, x\in[1, r], p|a_x\}\bigcup\{0\}\right)<br>$$</p><p>那么，$ans(l, r)=\left(\prod_{pre(p, r)\ge l}(p-1)/p\right)\cdot\left(\prod_{i=l}^ra_i\right)$ 。</p><p>将询问离线下来，按右端点排序，从左往右遍历每个点作为 $r$，使用数据结构（如树状数组）维护 $pre(1..r, r)$ 并查询答案，就好了。</p><p>如果不枚举重复的质因数，复杂度为 $O(w+w\log p/\log w+n\omega(w)\log n+q(\log n+\log m))$ 。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><div><div class="fold_hider"><div class="close hider_title">瓶颈不带 log 的莫队做法</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">168</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BLOCK = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; np;</span><br><span class="line"><span class="keyword">int</span> n, m, ans = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; tot;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, p, k, invk, maxp, mul, cnt, out;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    Query(<span class="keyword">int</span> _l, <span class="keyword">int</span> _r, <span class="keyword">int</span> _id)</span><br><span class="line">    &#123;</span><br><span class="line">        l = _l;</span><br><span class="line">        r = _r;</span><br><span class="line">        id = _id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l / BLOCK == y.l / BLOCK ? ((l / BLOCK) &amp; <span class="number">1</span> ? r &gt; y.r : r &lt; y.r) : l &lt; y.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Query&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxp[x] &gt;= B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (++cnt[maxp[x]] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ll) ans * k[maxp[x]] % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxp[x] &gt;= B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[maxp[x]] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ll) ans * invk[maxp[x]] % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line"></span><br><span class="line">    np.resize(W + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    maxp.resize(W + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= W; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            maxp[i] = p.size();</span><br><span class="line">            p.push_back(i);</span><br><span class="line">            k.push_back((ll) (i - <span class="number">1</span>) * qpow(i, mod - <span class="number">2</span>) % mod);</span><br><span class="line">            invk.push_back(qpow(k.back(), mod - <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.size() &amp;&amp; i * p[j] &lt;= W; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            maxp[x] = max(j, maxp[i]);</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line">    mul.resize(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cnt.resize(p.size(), <span class="number">0</span>);</span><br><span class="line">    tot.resize(B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = read();</span><br><span class="line">        mul[i] = (ll) mul[i - <span class="number">1</span>] * a[i] % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B; ++j) tot[j][i] = tot[j][i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = a[i]; x &gt; <span class="number">1</span>; x /= p[maxp[x]]) <span class="keyword">if</span> (maxp[x] &lt; B) ++tot[maxp[x]][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    out.resize(m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        l = read();</span><br><span class="line">        r = read();</span><br><span class="line">        q.push_back(Query(l, r, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(q.begin(), q.end());</span><br><span class="line"></span><br><span class="line">    l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l) add(a[--l]);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) add(a[++r]);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l) del(a[l++]);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r) del(a[r--]);</span><br><span class="line">        <span class="keyword">int</span> tmp = (ll) ans * mul[q[i].r] % mod * qpow(mul[q[i].l - <span class="number">1</span>], mod - <span class="number">2</span>) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B; ++j) <span class="keyword">if</span> (tot[j][q[i].r] - tot[j][q[i].l - <span class="number">1</span>]) tmp = (ll) tmp * k[j] % mod;</span><br><span class="line">        out[q[i].id] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, out[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div><div class="fold_hider"><div class="close hider_title">树状数组做法</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        A.resize(size + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; p &lt; A.size(); p += (p &amp; -p))</span><br><span class="line">        &#123;</span><br><span class="line">            A[p] = (ll) A[p] * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; p; p -= (p &amp; -p)) out = (ll) out * A[p] % mod;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; bit;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pii&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; np;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, mul, p, minp, nxt, k, invk, pre, out;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    np.resize(W + <span class="number">1</span>);</span><br><span class="line">    nxt.resize(W + <span class="number">1</span>);</span><br><span class="line">    minp.resize(W + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= W; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i])</span><br><span class="line">        &#123;</span><br><span class="line">            nxt[i] = <span class="number">1</span>;</span><br><span class="line">            minp[i] = p.size();</span><br><span class="line">            p.push_back(i);</span><br><span class="line">            k.push_back((ll) (i - <span class="number">1</span>) * qpow(i, mod - <span class="number">2</span>) % mod);</span><br><span class="line">            invk.push_back(qpow(k.back(), mod - <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.size() &amp;&amp; i * p[j] &lt;= W; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i * p[j];</span><br><span class="line">            np[x] = <span class="literal">true</span>;</span><br><span class="line">            minp[x] = j;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) nxt[x] = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nxt[x] = nxt[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line">    mul.resize(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = read();</span><br><span class="line">        mul[i] = (ll) mul[i - <span class="number">1</span>] * a[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    q.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = read();</span><br><span class="line">        <span class="keyword">int</span> r = read();</span><br><span class="line">        q[r].push_back(pii(l, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre.resize(p.size(), <span class="number">0</span>);</span><br><span class="line">    out.resize(m);</span><br><span class="line">    bit.resize(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = a[i]; x &gt; <span class="number">1</span>; x = nxt[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[minp[x]]) bit.add(pre[minp[x]], invk[minp[x]]);</span><br><span class="line">            bit.add(pre[minp[x]] = i, k[minp[x]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tmp = (ll) bit.query(i) * mul[i] % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : q[i]) out[x.second] = (ll) tmp * qpow((ll) bit.query(x.first - <span class="number">1</span>) * mul[x.first - <span class="number">1</span>] % mod, mod - <span class="number">2</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, out[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/594/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个正整数序列，多次询问给定区间内每个数之积的欧拉函数 ($\varphi$)，对 $10^9+7$ 取模。&lt;/p&gt;
&lt;p&gt;数列长度、询问个数不超过 $2\cdot 10^5$，数的大小不超过 $10^6$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树状数组" scheme="https://ouuan.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="数论" scheme="https://ouuan.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数颜色" scheme="https://ouuan.github.io/tags/%E6%95%B0%E9%A2%9C%E8%89%B2/"/>
    
      <category term="莫队" scheme="https://ouuan.github.io/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>CF455D Serega and Fun（分块 / 平衡树）</title>
    <link href="https://ouuan.github.io/CF455D-Serega-and-Fun%EF%BC%88%E5%88%86%E5%9D%97-%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF455D-Serega-and-Fun（分块-平衡树）/</id>
    <published>2019-12-04T07:20:52.000Z</published>
    <updated>2019-12-04T14:11:57.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/455/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个序列，在线地支持两个操作：</p><ol><li><p>将一个区间循环移位。</p></li><li><p>查询一个区间中某个数出现的次数。</p></li></ol><p>序列长度、查询个数都不超过 $10^5$，时限 $\texttt{4s}$ 。</p><a id="more"></a><h2 id="O-n-m-sqrtn-做法"><a href="#O-n-m-sqrtn-做法" class="headerlink" title="O((n+m)sqrtn) 做法"></a>O((n+m)sqrtn) 做法</h2><p>大致思路：分成若干块，每块维护块内每个数的出现次数（这导致空间复杂度是 $O(n\sqrt n)$），以及这一块对应的序列（相当于块状链表）。</p><p>具体来说，有至少四种大同小异的做法：</p><ol><li><p>算法：</p><ul><li><p>每次循环移位时只将给定区间的末尾移至给定区间的开头，这样的话每块的大小会经常改变，每根号次循环移位需要重构一次。</p></li><li><p>每次循环移位时除了将给定区间的末尾移至给定区间的开头，还将区间内每一块的末尾移至下一块的开头，这样的话每块的大小总是不变的。</p></li></ul></li><li><p>数据结构：</p><ul><li><p>使用链表维护每一块，找到需要插入、删除的位置可以做到 $O(\sqrt n)$，插入、删除可以做到 $O(1)$ ，换块（末尾删除、头部插入）可以做到 $O(1)$ 。</p></li><li><p>使用双端队列维护每一块，找到需要插入、删除的位置可以做到 $O(1)$，插入、删除可以做到 $O(\sqrt n)$ ，换块（末尾删除、头部插入）可以做到 $O(1)$ 。</p></li></ul></li></ol><h2 id="O-n-mlog-2n-做法"><a href="#O-n-mlog-2n-做法" class="headerlink" title="O(n+mlog^2n) 做法"></a>O(n+mlog^2n) 做法</h2><p>使用一棵平衡树维护整个序列，再使用 $n$ 棵平衡树分别维护值为 $i$ 的数之间的相对位置。</p><p>即，$t_0$ 中的元素是序列中的每个数，$t_i$ ($1\le i\le n$) 中的元素是所有大小为 $i$ 的数，用于比较的键值是这个数在序列中的位置。</p><p>$t_0$ 的维护是经典问题，而维护 $t_i$ 时需要查找位置不超过/不小于给定值的最靠右/最靠左元素，找这个的时候需要利用 $t_0$ 来查询一个数在序列中的位置，具体实现时需要记录 $t_i$ 的每个节点在 $t_0$ 中对应的节点。</p><p>由于在 $t_i$ 中调用了 $t_0$，复杂度就是 $O(n+m\log^2 n)$ 。</p><p>有点难写，我写了 5KB，调了一年..CF 上有 <a href="https://codeforces.com/contest/455/submission/7410439" target="_blank" rel="noopener">2.3KB 的提交</a>（没仔细看，但应该是一样的做法..）。</p><p>然后这题还成功劝退结构体数组选手，让我改用指针了..最后内存占用比分块还大。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><div><div class="fold_hider"><div class="close hider_title">nsqrtn 做法（链表，每次换块）</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], bl[N], bll[N], blr[N], cnt[N / B + <span class="number">5</span>][N];</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst[N / B + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>, ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        r = min(n, l + B - <span class="number">1</span>);</span><br><span class="line">        bll[i] = l;</span><br><span class="line">        blr[i] = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt;= r; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            bl[j] = i;</span><br><span class="line">            ++cnt[i][a[j]];</span><br><span class="line">            lst[i].push_back(a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> type, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;type, &amp;l, &amp;r);</span><br><span class="line">        l = (l + ans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        r = (r + ans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) swap(l, r);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = lst[bl[r]].begin();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = bll[bl[r]]; i &lt; r; ++i) ++it;</span><br><span class="line">            <span class="keyword">int</span> tmp = *it;</span><br><span class="line">            --cnt[bl[r]][tmp];</span><br><span class="line">            ++cnt[bl[l]][tmp];</span><br><span class="line">            lst[bl[r]].erase(it);</span><br><span class="line">            it = lst[bl[l]].begin();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = bll[bl[l]]; i &lt; l; ++i) ++it;</span><br><span class="line">            lst[bl[l]].insert(it, tmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = bl[l]; i &lt; bl[r]; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t = lst[i].back();</span><br><span class="line">                lst[i].pop_back();</span><br><span class="line">                lst[i + <span class="number">1</span>].push_front(t);</span><br><span class="line">                --cnt[i][t];</span><br><span class="line">                ++cnt[i + <span class="number">1</span>][t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">            k = (k + ans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (bl[l] == bl[r])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = lst[bl[l]].begin();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = bll[bl[l]]; i &lt;= r; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= l) ans += *it == k;</span><br><span class="line">                    ++it;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = lst[bl[l]].begin();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = bll[bl[l]]; i &lt;= blr[bl[l]]; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= l) ans += *it == k;</span><br><span class="line">                    ++it;</span><br><span class="line">                &#125;</span><br><span class="line">                it = lst[bl[r]].begin();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = bll[bl[r]]; i &lt;= r; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans += *it == k;</span><br><span class="line">                    ++it;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = bl[l] + <span class="number">1</span>; i &lt; bl[r]; ++i) ans += cnt[i][k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div><div class="fold_hider"><div class="close hider_title">nlog^2n 做法（Splay）</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node *&gt; rt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">queue</span>&lt;Node *&gt; &gt; q; <span class="comment">// q[i] 存的是值为 i 的数在 t_0 中对应的节点</span></span><br><span class="line">Node *empty, *lsen, *rsen;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, siz;</span><br><span class="line">    Node *pa, *mir; <span class="comment">// mir 是在 t_0 中对应的节点</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Node *&gt; ch;</span><br><span class="line">    Node(Node *_pa = empty, <span class="keyword">int</span> _val = <span class="number">0</span>, Node *_mir = empty)</span><br><span class="line">    &#123;</span><br><span class="line">        siz = <span class="number">1</span>;</span><br><span class="line">        pa = _pa;</span><br><span class="line">        mir = _mir;</span><br><span class="line">        val = _val;</span><br><span class="line">        ch.resize(<span class="number">2</span>, empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x-&gt;siz = x-&gt;ch[<span class="number">0</span>]-&gt;siz + x-&gt;ch[<span class="number">1</span>]-&gt;siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = x-&gt;pa;</span><br><span class="line">    Node *z = y-&gt;pa;</span><br><span class="line">    <span class="keyword">int</span> k = x == y-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    z-&gt;ch[y == z-&gt;ch[<span class="number">1</span>]] = x;</span><br><span class="line">    x-&gt;pa = z;</span><br><span class="line">    y-&gt;ch[k] = x-&gt;ch[k ^ <span class="number">1</span>];</span><br><span class="line">    x-&gt;ch[k ^ <span class="number">1</span>]-&gt;pa = y;</span><br><span class="line">    x-&gt;ch[k ^ <span class="number">1</span>] = y;</span><br><span class="line">    y-&gt;pa = x;</span><br><span class="line">    pushup(y);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(Node *x, Node *goal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;pa != goal)</span><br><span class="line">    &#123;</span><br><span class="line">        Node *y = x-&gt;pa;</span><br><span class="line">        Node *z = y-&gt;pa;</span><br><span class="line">        <span class="keyword">if</span> (z != goal) rotate((x == y-&gt;ch[<span class="number">1</span>]) ^ (y == z-&gt;ch[<span class="number">1</span>]) ? x : y);</span><br><span class="line">        rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(Node *&amp; root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Splay(x, empty);</span><br><span class="line">    root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">kth</span><span class="params">(Node *root, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *u = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u-&gt;ch[<span class="number">0</span>]-&gt;siz &gt;= x) u = u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (u-&gt;ch[<span class="number">0</span>]-&gt;siz + <span class="number">1</span> == x) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x -= u-&gt;ch[<span class="number">0</span>]-&gt;siz + <span class="number">1</span>;</span><br><span class="line">            u = u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(Node *&amp; root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(root, x);</span><br><span class="line">    <span class="keyword">return</span> x-&gt;ch[<span class="number">0</span>]-&gt;siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(Node *&amp; root, Node *x, Node *y, <span class="keyword">int</span> type = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(root, y);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;ch[type] != empty)</span><br><span class="line">    &#123;</span><br><span class="line">        Node *u = kth(y-&gt;ch[<span class="number">0</span>], y-&gt;ch[<span class="number">0</span>]-&gt;siz);</span><br><span class="line">        makeroot(root, u);</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;ch[type] = x;</span><br><span class="line">    x-&gt;pa = y;</span><br><span class="line">    pushup(y);</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;pa != empty) pushup(y-&gt;pa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(Node *&amp; root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(root, x);</span><br><span class="line">    Node *u = kth(x-&gt;ch[<span class="number">0</span>], x-&gt;ch[<span class="number">0</span>]-&gt;siz);</span><br><span class="line">    makeroot(root, u);</span><br><span class="line">    u-&gt;ch[<span class="number">1</span>] = x-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    x-&gt;ch[<span class="number">1</span>]-&gt;pa = u;</span><br><span class="line">    x-&gt;ch[<span class="number">0</span>] = x-&gt;ch[<span class="number">1</span>] = x-&gt;pa = empty;</span><br><span class="line">    x-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">rkle</span><span class="params">(Node *root, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *u = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u-&gt;ch[<span class="number">1</span>] != empty &amp;&amp; rk(rt[<span class="number">0</span>], kth(u-&gt;ch[<span class="number">1</span>], <span class="number">1</span>)-&gt;mir) &lt;= x) u = u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rk(rt[<span class="number">0</span>], u-&gt;mir) &lt;= x) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> u = u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">rkge</span><span class="params">(Node *root, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *u = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u-&gt;ch[<span class="number">0</span>] != empty &amp;&amp; rk(rt[<span class="number">0</span>], kth(u-&gt;ch[<span class="number">0</span>], u-&gt;ch[<span class="number">0</span>]-&gt;siz)-&gt;mir) &gt;= x) u = u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rk(rt[<span class="number">0</span>], u-&gt;mir) &gt;= x) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> u = u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">split</span><span class="params">(Node *&amp; root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *x = kth(root, l);</span><br><span class="line">    Node *y = kth(root, r + <span class="number">2</span>);</span><br><span class="line">    makeroot(root, x);</span><br><span class="line">    Splay(y, x);</span><br><span class="line">    <span class="keyword">return</span> y-&gt;ch[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">get</span><span class="params">(Node *&amp; root, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *x = rkle(root, p);</span><br><span class="line">    Node *y = rkge(root, p + <span class="number">2</span>);</span><br><span class="line">    makeroot(root, x);</span><br><span class="line">    Splay(y, x);</span><br><span class="line">    <span class="keyword">return</span> y-&gt;ch[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">build1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator l, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator r, Node *pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> empty;</span><br><span class="line">    <span class="keyword">auto</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    Node *cur = <span class="keyword">new</span> Node(pa, *mid);</span><br><span class="line">    cur-&gt;ch[<span class="number">0</span>] = build1(l, mid, cur);</span><br><span class="line">    q[*mid].push(cur);</span><br><span class="line">    cur-&gt;ch[<span class="number">1</span>] = build1(mid + <span class="number">1</span>, r, cur);</span><br><span class="line">    pushup(cur);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build1</span><span class="params">(Node *&amp; root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root = build1(a.begin(), a.end(), empty);</span><br><span class="line">    lsen = <span class="keyword">new</span> Node();</span><br><span class="line">    link(root, lsen, kth(root, <span class="number">1</span>));</span><br><span class="line">    rsen = <span class="keyword">new</span> Node();</span><br><span class="line">    link(root, rsen, kth(root, root-&gt;siz), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">build2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val, Node *pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> empty;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    Node *cur = <span class="keyword">new</span> Node(pa, val);</span><br><span class="line">    cur-&gt;ch[<span class="number">0</span>] = build2(l, mid, val, cur);</span><br><span class="line">    cur-&gt;mir = q[val].front();</span><br><span class="line">    q[val].pop();</span><br><span class="line">    cur-&gt;ch[<span class="number">1</span>] = build2(mid + <span class="number">1</span>, r, val, cur);</span><br><span class="line">    pushup(cur);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build2</span><span class="params">(Node *&amp; root, <span class="keyword">int</span> size, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    root = build2(<span class="number">0</span>, size, val, empty);</span><br><span class="line">    Node *lsentry = <span class="keyword">new</span> Node(empty, <span class="number">0</span>, lsen);</span><br><span class="line">    link(root, lsentry, kth(root, <span class="number">1</span>));</span><br><span class="line">    Node *rsentry = <span class="keyword">new</span> Node(empty, <span class="number">0</span>, rsen);</span><br><span class="line">    link(root, rsentry, kth(root, root-&gt;siz), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    empty = <span class="keyword">new</span> Node();</span><br><span class="line">    empty-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    empty-&gt;ch[<span class="number">0</span>] = empty-&gt;ch[<span class="number">1</span>] = empty-&gt;pa = empty-&gt;mir = empty;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    a.resize(n, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    rt.resize(n + <span class="number">1</span>);</span><br><span class="line">    q.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    build1(rt[<span class="number">0</span>], a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) build2(rt[i], q[i].size(), i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> type, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;type, &amp;l, &amp;r);</span><br><span class="line">        l = (l + ans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        r = (r + ans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) swap(l, r);</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r) <span class="keyword">continue</span>;</span><br><span class="line">            Node *x = split(rt[<span class="number">0</span>], l, r);</span><br><span class="line">            Node *y = kth(x, <span class="number">1</span>);</span><br><span class="line">            Node *z = kth(x, x-&gt;siz);</span><br><span class="line">            <span class="keyword">int</span> k = z-&gt;val;</span><br><span class="line">            x = get(rt[k], r);</span><br><span class="line">            cut(rt[k], x);</span><br><span class="line">            Node *qaq = rkle(rt[k], l);</span><br><span class="line">            Node *qwq = rkge(rt[k], l + <span class="number">1</span>);</span><br><span class="line">            makeroot(rt[k], qaq);</span><br><span class="line">            Splay(qwq, qaq);</span><br><span class="line">            link(rt[k], x, qwq);</span><br><span class="line">            cut(rt[<span class="number">0</span>], z);</span><br><span class="line">            link(rt[<span class="number">0</span>], z, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">            k = (k + ans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (rt[k] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node *x = rkle(rt[k], l);</span><br><span class="line">            Node *y = rkge(rt[k], r + <span class="number">2</span>);</span><br><span class="line">            makeroot(rt[k], x);</span><br><span class="line">            Splay(y, x);</span><br><span class="line">            ans = y-&gt;ch[<span class="number">0</span>]-&gt;siz;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/455/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个序列，在线地支持两个操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将一个区间循环移位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询一个区间中某个数出现的次数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;序列长度、查询个数都不超过 $10^5$，时限 $\texttt{4s}$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="分块" scheme="https://ouuan.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="平衡树" scheme="https://ouuan.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF901C Bipartite Segments（二分图）</title>
    <link href="https://ouuan.github.io/CF901C-Bipartite-Segments%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF901C-Bipartite-Segments（二分图）/</id>
    <published>2019-11-29T12:54:11.000Z</published>
    <updated>2019-12-04T18:41:16.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/901/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>定义一个“偶环”为边数为偶数的回路（回路又被称作“边简单环”，即不经过重复边且首尾点相同的途径）。</p><p>给你一张不含“偶环”的无向图。称一个区间是“好的”，当且仅当编号在这个区间中的点的导出子图是一张二分图。</p><p>多组询问，每次询问一个给定区间有多少个子区间是“好的”。</p><p>点数、边数、询问数均不超过 $3\cdot 10^5$ 。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>由于图中没有偶环，容易想到一个子图是二分图等价于没有环（因为二分图等价于没有奇环）。</p><p>但“没有偶环”的用处远不止此：没有偶环还意味着每个点最多处于一个环内（否则取两个包含同一个点的奇环，把重复的边去掉，就可以得到一个偶环）。</p><p>那么，找出图中的每个环的最小节点编号和最大节点编号，以最小值和最大值作为左右端点，就可以得到若干条线段。而一个区间合法就等价于其不包含这些线段中的任意一条。</p><p>现在问题已经转化成了：给你 $k$ 条线段 $\{[c_i, d_i]\}_{i=1}^k$，$q$ 次询问，第 $i$ 次询问给你一个区间 $[l_i, r_i]$，求 $[l_i, r_i]$ 有多少个子区间不包含这 $k$ 条线段中的任意一条。</p><p>首先，可以观察到，若有一条线段被另一条线段完全包含，包含它的这条线段就可以被无视了。</p><p>去除掉上述无用线段后，剩下的线段两两互不包含，那么将它们按左端点排序，会满足：$\forall 1\le i&lt; k, c_i&lt; c_{i+1}, d_i&lt; d_{i+1}$ （不取等号是因为 $1\sim n$ 中的每个数在 $c_{1..n}$ 和 $d_{1..n}$ 中最多只出现一次，而这是因为在原题意中每个点最多处于一个环内）。 </p><p>如果不管 $r_i$ 的限制，对于每个左端点求答案，画个图手玩一下可以发现，以 $p$ 为左端点时，合法区间的右端点最多到 $\min\left(\{d_j-1|c_j\ge p\}\bigcup\{n\}\right)$ ，即 $p$ “右边”的第一条线段的右端点减一（不存在则为 $n$）。每个左端点无视右端点限制的合法区间数可以求个前缀和，而 $p$ “右边”的第一条线段可以二分求得，也可以线性预处理后 $O(1)$ 求得。那么，我们就会做 $r_i=n$ 的情况了。</p><p>然后考虑如何处理 $r_i$ 的限制。对称地（指这个式子和上面那个式子几乎是对称的），令 $t=\max\left(\{c_j|d_j\le r_i\}\bigcup\{0\}\right)$，即 $r_i$ “左边”的第一条线段的左端点（不存在则为 $0$），那么对于不小于 $t$ 的左端点，$r_i$ 这个限制是无用的，而对于大于 $t$ 的左端点，右端点最多可以取到 $r_i$ 。 $t$ 同样可以二分求得或者线性预处理后 $O(1)$ 求得，将左端点分成 $[l_i, t]$ 和 $[t+1, r_i]$ 两部分，前半部分用前缀和计算，后半部分即为 $[t+1, r_i]$ 的子区间数，然后就做完了。实现时注意特判 $t&lt; l_i$ 的情况。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pa, dfn, rt, uncut;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g;</span><br><span class="line"><span class="keyword">int</span> n, m, q, dfntot;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; pre;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; s;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++dfntot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            pa[v] = u;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dfn[v] &lt; dfn[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mn = u, mx = u, x = u;</span><br><span class="line">            <span class="keyword">while</span> (x != v)</span><br><span class="line">            &#123;</span><br><span class="line">                x = pa[x];</span><br><span class="line">                mn = min(mn, x);</span><br><span class="line">                mx = max(mx, x);</span><br><span class="line">            &#125;</span><br><span class="line">            rt[mn] = mx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    g.resize(n + <span class="number">1</span>);</span><br><span class="line">    pa.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pre.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dfn.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    uncut.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    rt.resize(n + <span class="number">1</span>, n + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        g[u].push_back(v);</span><br><span class="line">        g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!dfn[i]) dfs(i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mn = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = min(mn, rt[i]);</span><br><span class="line">        <span class="keyword">if</span> (rt[i] &lt;= mn) s.push_back(pii(i, rt[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    reverse(s.begin(), s.end());</span><br><span class="line">    s.push_back(pii(n + <span class="number">1</span>, n + <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>, ban = s[<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; s[p].first) ban = s[++p].second;</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + ban - i;</span><br><span class="line">        uncut[i] = uncut[i - <span class="number">1</span>] + (i == s[uncut[i - <span class="number">1</span>]].second);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">int</span> k = uncut[r];</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> || s[k - <span class="number">1</span>].first &lt; l) <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, (ll) (r - l + <span class="number">1</span>) * (r - l + <span class="number">2</span>) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, pre[s[k - <span class="number">1</span>].first] - pre[l - <span class="number">1</span>] + (ll) (r - s[k - <span class="number">1</span>].first) * (r - s[k - <span class="number">1</span>].first + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/901/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;定义一个“偶环”为边数为偶数的回路（回路又被称作“边简单环”，即不经过重复边且首尾点相同的途径）。&lt;/p&gt;
&lt;p&gt;给你一张不含“偶环”的无向图。称一个区间是“好的”，当且仅当编号在这个区间中的点的导出子图是一张二分图。&lt;/p&gt;
&lt;p&gt;多组询问，每次询问一个给定区间有多少个子区间是“好的”。&lt;/p&gt;
&lt;p&gt;点数、边数、询问数均不超过 $3\cdot 10^5$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="二分图" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>CF1260F Colored Tree（点分治，差分，基数排序）</title>
    <link href="https://ouuan.github.io/CF1260F-Colored-Tree%EF%BC%88%E7%82%B9%E5%88%86%E6%B2%BB%EF%BC%8C%E5%B7%AE%E5%88%86%EF%BC%8C%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1260F-Colored-Tree（点分治，差分，基数排序）/</id>
    <published>2019-11-29T06:00:53.000Z</published>
    <updated>2019-12-01T10:12:19.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/1260/problem/F" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一棵树，每个点的颜色为一个区间内的整数，一种染色方案的权值是所有同色无序点对的距离之和，求所有不同染色方案的权值之和。</p><p>点数、颜色数均不超过 $10^5$ 。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先是 $O(n^2)$ 做法：把计算总和转化为计算期望，然后就可以枚举点对，计算同色概率，乘上距离，最后把期望乘上方案数就是答案。进行 $n$ 次 DFS 而不是每次求 LCA 就可以做到 $O(n^2)$ 。</p><p>然后是 $O(n\log n\log c)$（$c$ 为颜色数）做法：点分治，令 $f(u, v)=\max(0, \min(r_u, r_v)-\max(l_u, l_v)+1)$, 点 $u$ 的贡献是 $\sum_{v}f(u, v)(dep_u+dep_v)(r_u-l_u+1)^{-1}(r_v-l_v+1)^{-1}$，即 $\left(dep_u\cdot(r_u-l_u+1)^{-1}\right)\cdot\left(\sum_{v}f(u, v)(r_v-l_v+1)^{-1}\right)+(r_u-l_u+1)^{-1}\cdot\left(\sum_{v}f(u, v)dep_v(r_v-l_v+1)^{-1}\right)$ ，用以颜色为下标、支持区间加/查询区间和的线段树维护 $\sum_{v}(r_v-l_v+1)^{-1}$ 以及 $\sum_{v}dep_v(r_v-l_v+1)^{-1}$ 即可。</p><p>如果你写的是其它 $O(n\log n\log c)$ 做法，如链分治（dsu on tree），或者你的常数比较小（比如使用树状数组而不是线段树），你可能就过了。</p><p>否则，你可能 <a href="https://codeforces.com/contest/1260/submission/65895673" target="_blank" rel="noopener">TLE on 6</a> 或者 <a href="https://codeforces.com/contest/1260/submission/65896002" target="_blank" rel="noopener">TLE on 14</a> 之类的。</p><p>但是，大常数选手并不是没有活路的，因为这题有 $O(n\log n)$ 做法。</p><p>其中一种，是使用差分代替上述做法中的线段树。但如果在点分治内进行比较排序，复杂度是 $O(n\log^2 n)$（尽管瓶颈部分的常数很小），解决方法是在点分治的外部进行一次排序，然后在内部就可以线性地将每棵子树的修改与询问划分开来。</p><p>“划分”本质上是一个双关键字排序，第一关键字为所在子树的编号，第二关键字为修改/询问原本的排序方式，利用基数排序的思想，由于第二关键字已经有序，对第一关键字进行稳定排序即可。使用计数排序可以做到线性复杂度，总复杂度就是 $O(n\log n)$ 。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><div><div class="fold_hider"><div class="close hider_title">nlognlogc</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifndef</span> OUUAN</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//#define int LoveLive</span></span><br><span class="line"><span class="comment">//#define FAST_IOSTREAM 1</span></span><br><span class="line"> </span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> For(i,l,r)for(int i=(l),i##end=(r);i&lt;=i##end;++i)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> FOR(i,r,l)for(int i=(r),i##end=(l);i&gt;=i##end;--i)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> SON(i,u)for(int i=head[u];i;i=nxt[i])</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> ms(a,x)memset(a,x,sizeof(a))</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> pq priority_queue</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> isinf(x)(x&gt;=INF?-1:x)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> y1 why_is_there_a_function_called_y1</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)cerr&lt;&lt;(#x)&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LoveLive;<span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;pii;<span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vi;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;<span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">1e121</span>;<span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-10</span>;<span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;<span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">int</span> out=rng()%(r-l+<span class="number">1</span>)+l;<span class="keyword">return</span> out&gt;=l?out:out+r-l+<span class="number">1</span>;&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> int</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> br cout&lt;&lt;<span class="meta-string">'\n'</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> sp cout&lt;&lt;<span class="meta-string">' '</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">long</span> <span class="keyword">long</span> x;<span class="built_in">cin</span>&gt;&gt;x;<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> br putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">define</span> sp putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="built_in">cin</span>&gt;&gt;x;&#125;<span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c;<span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())out=(out&lt;&lt;<span class="number">3</span>)+(out&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> out*f;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,T&gt;::<span class="function">type <span class="title">read</span><span class="params">(T&amp;x)</span></span>&#123;<span class="keyword">char</span> c;T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c)&amp;&amp;c!=<span class="string">'-'</span>;c=getchar());<span class="keyword">if</span>(c==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;<span class="keyword">return</span> x*=f;&#125;<span class="function"><span class="keyword">char</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="keyword">for</span>(x=getchar();<span class="built_in">isspace</span>(x);x=getchar());<span class="keyword">return</span> x;&#125;<span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="function">ld <span class="title">read</span><span class="params">(ld&amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%Lf"</span>,&amp;x);<span class="keyword">return</span> x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;!is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;x;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="keyword">typename</span> enable_if&lt;is_integral&lt;T&gt;::value,<span class="keyword">void</span>&gt;::<span class="function">type <span class="title">write</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp;x)</span></span>&#123;<span class="built_in">putchar</span>(x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10lf"</span>,x);&#125;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> ld&amp;x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.10Lf"</span>,x);&#125;</span><br><span class="line">                                                                                                                                                                                                    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                                                                                                                                                                                                    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp;x,Args&amp;...args)</span></span>&#123;read(x);read(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> OutputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_same&lt;output_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value||(is_base_of&lt;forward_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;OutputIt&gt;::iterator_category&gt;::value&amp;&amp;!is_const&lt;OutputIt&gt;::value)&gt;::type&gt;<span class="keyword">void</span> read(OutputIt __first,OutputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)read(*__first);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wts(InputIt __first,InputIt __last)&#123;<span class="keyword">bool</span> isFirst=<span class="literal">true</span>;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;<span class="keyword">if</span>(isFirst)isFirst=<span class="literal">false</span>;<span class="keyword">else</span> sp;write(*__first);&#125;br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIt,<span class="keyword">typename</span>=<span class="keyword">typename</span> enable_if&lt;is_base_of&lt;input_iterator_tag,<span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::iterator_category&gt;::value&gt;::type&gt;<span class="keyword">void</span> wtb(InputIt __first,InputIt __last)&#123;<span class="keyword">for</span>(;__first!=__last;++__first)&#123;write(*__first);br;&#125;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);sp;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);br;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span></span>&#123;write(x);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wts</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wts(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wtb</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wtb(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;<span class="function"><span class="keyword">void</span> <span class="title">wte</span><span class="params">(<span class="keyword">const</span> T&amp;x,Args...args)</span></span>&#123;wts(x);wte(args...);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">up</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> x&lt;y?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dn</span><span class="params">(T&amp;x,<span class="keyword">const</span> T&amp;y)</span></span>&#123;<span class="keyword">return</span> y&lt;x?x=y,<span class="number">1</span>:<span class="number">0</span>;&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inRange</span><span class="params">(<span class="keyword">const</span> T&amp;x,<span class="keyword">const</span> T&amp;l,<span class="keyword">const</span> T&amp;r)</span></span>&#123;<span class="keyword">return</span>!(x&lt;l)&amp;&amp;!(r&lt;x);&#125;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> valueType,<span class="keyword">typename</span> tagType&gt;<span class="class"><span class="keyword">class</span> <span class="title">segmentTreeNode</span>&#123;</span><span class="keyword">public</span>:<span class="keyword">int</span> id,left,right;valueType val;tagType tag;&#125;;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> valueType, <span class="keyword">typename</span> tagType, valueType(*merge)(valueType,valueType), <span class="keyword">void</span>(*update)(segmentTreeNode&lt;valueType,tagType&gt;&amp;,tagType)&gt;<span class="class"><span class="keyword">class</span> <span class="title">segmentTree</span>&#123;</span><span class="keyword">private</span>:<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segmentTreeNode&lt;valueType,tagType&gt;&gt;nodes;<span class="keyword">int</span> leftRange,rightRange;valueType valueZero;tagType tagZero;<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;nodes[cur].val=merge(nodes[cur&lt;&lt;<span class="number">1</span>].val,nodes[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val);&#125;<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;update(nodes[cur&lt;&lt;<span class="number">1</span>],nodes[cur].tag);update(nodes[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],nodes[cur].tag);nodes[cur].tag=tagZero;&#125;<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;initValue)</span></span>&#123;nodes[cur].id=cur;nodes[cur].left=l;nodes[cur].right=r;nodes[cur].tag=tagZero;<span class="keyword">if</span>(l==r<span class="number">-1</span>)nodes[cur].val=initValue[l-leftRange];<span class="keyword">else</span>&#123;build(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,initValue);build(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,initValue);pushup(cur);&#125;&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)</span></span>&#123;valueZero=_valueZero;tagZero=_tagZero;nodes.resize((rightRange-leftRange)&lt;&lt;<span class="number">2</span>);build(<span class="number">1</span>,leftRange,rightRange,_initValue);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;<span class="keyword">if</span>(l&gt;=R||r&lt;=L)<span class="keyword">return</span>;<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)update(nodes[cur],tag);<span class="keyword">else</span>&#123;pushdown(cur);modify(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,L,R,tag);modify(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,L,R,tag);pushup(cur);&#125;&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;<span class="keyword">if</span>(l&gt;=R||r&lt;=L)<span class="keyword">return</span> valueZero;<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)<span class="keyword">return</span> nodes[cur].val;pushdown(cur);<span class="keyword">return</span> merge(query(cur&lt;&lt;<span class="number">1</span>,l,(l+r)&gt;&gt;<span class="number">1</span>,L,R), query(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,(l+r)&gt;&gt;<span class="number">1</span>,r,L,R));&#125;<span class="keyword">public</span>:segmentTree()&#123;&#125;segmentTree(<span class="keyword">int</span> _leftRange,<span class="keyword">int</span> _rightRange,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)&#123;leftRange=_leftRange;rightRange=_rightRange;init(_initValue,_valueZero,_tagZero);&#125;segmentTree(<span class="keyword">int</span> size,<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;valueType&gt;&amp;_initValue,<span class="keyword">const</span> valueType&amp;_valueZero,<span class="keyword">const</span> tagType&amp;_tagZero)&#123;leftRange=<span class="number">1</span>;rightRange=size+<span class="number">1</span>;init(_initValue,_valueZero,_tagZero);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;modify(<span class="number">1</span>,leftRange,rightRange,l,r,tag);&#125;<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">const</span> tagType&amp;tag)</span></span>&#123;modify(p,p+<span class="number">1</span>,tag);&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> query(<span class="number">1</span>,leftRange,rightRange,l,r);&#125;<span class="function">valueType <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">return</span> query(p,p+<span class="number">1</span>);&#125;&#125;;<span class="class"><span class="keyword">class</span> <span class="title">maxFlow</span>&#123;</span><span class="keyword">private</span>:<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;head,cur,nxt,to,dep;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt;cap;<span class="keyword">public</span>:maxFlow(<span class="keyword">int</span> _n=<span class="number">0</span>)&#123;init(_n);&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;head.clear();head.resize(_n+<span class="number">1</span>,<span class="number">0</span>);nxt.resize(<span class="number">2</span>);to.resize(<span class="number">2</span>);cap.resize(<span class="number">2</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;init(head.size()<span class="number">-1</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;nxt.push_back(head[u]);head[u]=to.size();to.push_back(v);cap.push_back(w);&#125;<span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span>&#123;add(u,v,w);add(v,u,<span class="number">0</span>);&#125;<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;cap[x&lt;&lt;<span class="number">1</span>]=cap[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;&#125;<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;dep.clear();dep.resize(head.size(),<span class="number">-1</span>);dep[s]=<span class="number">0</span>;q.push(s);<span class="keyword">while</span>(!q.empty())&#123;<span class="keyword">int</span> u=q.front();q.pop();<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;<span class="keyword">int</span> v=to[i];ll w=cap[i];<span class="keyword">if</span>(w&gt;<span class="number">0</span>&amp;&amp;dep[v]==<span class="number">-1</span>)&#123;dep[v]=dep[u]+<span class="number">1</span>;q.push(v);&#125;&#125;&#125;<span class="keyword">return</span> ~dep[t];&#125;<span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,ll flow,<span class="keyword">int</span> t)</span></span>&#123;<span class="keyword">if</span>(dep[u]==dep[t])<span class="keyword">return</span> u==t?flow:<span class="number">0</span>;ll out=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span>&amp;i=cur[u];i;i=nxt[i])&#123;<span class="keyword">int</span> v=to[i];ll w=cap[i];<span class="keyword">if</span>(w&gt;<span class="number">0</span>&amp;&amp;dep[v]==dep[u]+<span class="number">1</span>)&#123;ll f=dfs(v,<span class="built_in">std</span>::min(w,flow-out),t);cap[i]-=f;cap[i ^ <span class="number">1</span>]+=f;out+=f;<span class="keyword">if</span>(out==flow)<span class="keyword">return</span> out;&#125;&#125;<span class="keyword">return</span> out;&#125;<span class="function">ll <span class="title">maxflow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;ll out=<span class="number">0</span>;<span class="keyword">while</span>(bfs(s,t))&#123;cur=head;out+=dfs(s,<span class="number">0x7fffffffffffffff</span>ll,t);&#125;<span class="keyword">return</span> out;&#125;<span class="function">ll <span class="title">getflow</span><span class="params">(<span class="keyword">int</span> x)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> cap[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;&#125;;<span class="class"><span class="keyword">struct</span> <span class="title">customHash</span>&#123;</span><span class="function"><span class="keyword">static</span> uint64_t <span class="title">splitmix64</span><span class="params">(<span class="keyword">uint64_t</span> x)</span></span>&#123;x+=<span class="number">0x9e3779b97f4a7c15</span>;x=(x ^(x&gt;&gt;<span class="number">30</span>))*<span class="number">0xbf58476d1ce4e5b9</span>;x=(x ^(x&gt;&gt;<span class="number">27</span>))*<span class="number">0x94d049bb133111eb</span>;<span class="keyword">return</span> x ^(x&gt;&gt;<span class="number">31</span>);&#125;<span class="keyword">size_t</span> <span class="keyword">operator</span>()(<span class="keyword">uint64_t</span> x)<span class="keyword">const</span>&#123;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> FIXED_RANDOM=rng();<span class="keyword">return</span> splitmix64(x+FIXED_RANDOM);&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">bool</span>, pii&gt; pbii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = (<span class="number">1e9</span> + <span class="number">7</span><span class="comment">//, 998244353</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;vi&gt; g;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n, tsiz, rt, ans;</span><br><span class="line">vi l, r, siz, wt, inv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modadd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x += y) &gt;= mod ? x - mod : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">merge</span><span class="params">(pii x, pii y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pii(modadd(x.fi, y.fi), modadd(x.se, y.se));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;pii, pbii&gt;&amp; u, pbii x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.first)</span><br><span class="line">    &#123;</span><br><span class="line">        u.tag = pbii(<span class="literal">true</span>, pii(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        u.val = pii(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x.se == pii(<span class="number">0</span>, <span class="number">0</span>)) <span class="keyword">return</span>;</span><br><span class="line">    u.tag.se = merge(u.tag.se, x.se);</span><br><span class="line">    u.val.fi = (u.val.fi + (ll) x.se.fi * (u.right - u.left)) % mod;</span><br><span class="line">    u.val.se = (u.val.se + (ll) x.se.se * (u.right - u.left)) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">segmentTree&lt;pii, pbii, merge, update&gt; t(W, <span class="built_in">vector</span>&lt;pii&gt;(W, pii(<span class="number">0</span>, <span class="number">0</span>)), pii(<span class="number">0</span>, <span class="number">0</span>), pbii(<span class="literal">false</span>, pii(<span class="number">0</span>, <span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u] = wt[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        up(wt[u], siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    up(wt[u], tsiz - siz[u]);</span><br><span class="line">    <span class="keyword">if</span> (!rt || wt[u] &lt; wt[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa, <span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> res = t.query(l[u], r[u] + <span class="number">1</span>);</span><br><span class="line">    ans = (ans + (ll) inv[u] * dep % mod * res.fi + (ll) inv[u] * res.se) % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        calc(v, u, dep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa, <span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t.modify(l[u], r[u] + <span class="number">1</span>, pbii(<span class="literal">false</span>, pii(inv[u], (ll) inv[u] * dep % mod)));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        insert(v, u, dep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    t.modify(<span class="number">1</span>, W + <span class="number">1</span>, pbii(<span class="literal">true</span>, pii(<span class="number">0</span>, <span class="number">0</span>)));</span><br><span class="line">    t.modify(l[u], r[u] + <span class="number">1</span>, pbii(<span class="literal">false</span>, pii(inv[u], <span class="number">0</span>)));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        calc(v, u, <span class="number">1</span>);</span><br><span class="line">        insert(v, u, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        tsiz = siz[v];</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FAST_IOSTREAM</span></span><br><span class="line">    <span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    read(n);</span><br><span class="line"></span><br><span class="line">    l.resize(n + <span class="number">1</span>);</span><br><span class="line">    g.resize(n + <span class="number">1</span>);</span><br><span class="line">    vis.resize(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    r = wt = siz = inv = l;</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        read(l[i], r[i]);</span><br><span class="line">        inv[i] = qpow(r[i] - l[i] + <span class="number">1</span>, mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    For (i, <span class="number">2</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        read(u, v);</span><br><span class="line">        g[u].pb(v);</span><br><span class="line">        g[v].pb(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tsiz = n;</span><br><span class="line">    getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans = (ll) ans * (r[i] - l[i] + <span class="number">1</span>) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div><div class="fold_hider"><div class="close hider_title">nlogn#1</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n, tsiz, rt, ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; siz, wt, bel, dep, inv;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Modification</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, p, inv, l;</span><br><span class="line">    Modification(<span class="keyword">int</span> _id, <span class="keyword">int</span> _p, <span class="keyword">int</span> _inv, <span class="keyword">int</span> _l): id(_id), p(_p), inv(_inv), l(_l) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Modification&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> p &lt; b.p; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">k1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> inv; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">b1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> p == l ? (ll) (<span class="number">1</span> - l + mod) * k1() % mod : (ll) (mod - p + <span class="number">1</span>) * k1() % mod; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">k2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (ll) inv * dep[id] % mod; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">b2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> p == l ? (ll) (<span class="number">1</span> - l + mod) * k2() % mod : (ll) (mod - p + <span class="number">1</span>) * k2() % mod; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, p, inv;</span><br><span class="line">    Query(<span class="keyword">int</span> _id, <span class="keyword">int</span> _p, <span class="keyword">int</span> _inv): id(_id), p(_p), inv(_inv) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> p &lt; b.p; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> type)</span> <span class="keyword">const</span> </span>&#123; ans = (ans + (ll) type * inv * ((ll) dep[id] * x1 % mod + x2) % mod + mod) % mod; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u] = wt[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        wt[u] = max(wt[u], siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    wt[u] = max(wt[u], tsiz - siz[u]);</span><br><span class="line">    <span class="keyword">if</span> (!rt || wt[u] &lt; wt[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Modification&gt;&amp; ms, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Query&gt;&amp; qs, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="number">0</span>, b1 = <span class="number">0</span>, k2 = <span class="number">0</span>, b2 = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> q : qs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; ms.size() &amp;&amp; ms[i].p &lt;= q.p)</span><br><span class="line">        &#123;</span><br><span class="line">            k1 = (k1 + ms[i].k1()) % mod;</span><br><span class="line">            b1 = (b1 + ms[i].b1()) % mod;</span><br><span class="line">            k2 = (k2 + ms[i].k2()) % mod;</span><br><span class="line">            b2 = (b2 + ms[i].b2()) % mod;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        q.calc(((ll) k1 * q.p + b1) % mod, ((ll) k2 * q.p + b2) % mod, type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        bel[v] = bel[u];</span><br><span class="line">        dfs(v, u); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">vector</span>&lt;Modification&gt;&amp; ms, <span class="built_in">vector</span>&lt;Query&gt;&amp; qs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Query&gt; &gt; qson(<span class="number">1</span>, <span class="built_in">vector</span>&lt;Query&gt;());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Modification&gt; &gt; mson(<span class="number">1</span>, <span class="built_in">vector</span>&lt;Modification&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        mson.push_back(<span class="built_in">vector</span>&lt;Modification&gt;());</span><br><span class="line">        qson.push_back(<span class="built_in">vector</span>&lt;Query&gt;());</span><br><span class="line">        bel[v] = mson.size() - <span class="number">1</span>;</span><br><span class="line">        dep[v] = <span class="number">1</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    bel[u] = dep[u] = <span class="number">0</span>;</span><br><span class="line">    calc(ms, qs, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> m : ms) mson[bel[m.id]].push_back(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> q : qs) qson[bel[q.id]].push_back(q);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Modification&gt;().swap(ms); <span class="comment">// free memory, the memory complexity is O(n) instead of O(nlogn) because of these two lines</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Query&gt;().swap(qs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        calc(mson[bel[v]], qson[bel[v]], <span class="number">-1</span>);</span><br><span class="line">        tsiz = siz[v];</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        solve(rt, mson[bel[v]], qson[bel[v]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    g.resize(n + <span class="number">1</span>);</span><br><span class="line">    siz.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    vis.resize(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    wt = bel = dep = inv = siz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;Modification&gt; ms;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Query&gt; qs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mul = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        mul = (ll) mul * (r - l + <span class="number">1</span>) % mod;</span><br><span class="line">        inv[i] = qpow(r - l + <span class="number">1</span>, mod - <span class="number">2</span>);</span><br><span class="line">        ms.push_back(Modification(i, l, inv[i], l));</span><br><span class="line">        ms.push_back(Modification(i, r + <span class="number">1</span>, mod - inv[i], l));</span><br><span class="line">        qs.push_back(Query(i, l - <span class="number">1</span>, mod - inv[i]));</span><br><span class="line">        qs.push_back(Query(i, r, inv[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        g[u].push_back(v);</span><br><span class="line">        g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(ms.begin(), ms.end());</span><br><span class="line">    sort(qs.begin(), qs.end());</span><br><span class="line"></span><br><span class="line">    tsiz = n;</span><br><span class="line">    getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    solve(rt, ms, qs);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ll) ans * mul % mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div><div class="fold_hider"><div class="close hider_title">nlogn#2</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="title">fast_mod</span><span class="params">(<span class="keyword">uint64_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(_WIN32) || defined(_WIN64)</span></span><br><span class="line">    <span class="keyword">return</span> x % mod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// Optimized mod for Codeforces 32-bit machines.</span></span><br><span class="line">    <span class="comment">// x must be less than 2^32 * m for this to work, so that x / m fits in a 32-bit integer.</span></span><br><span class="line">    <span class="keyword">unsigned</span> x_high = x &gt;&gt; <span class="number">32</span>, x_low = (<span class="keyword">unsigned</span>) x;</span><br><span class="line">    <span class="keyword">unsigned</span> quot, rem;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"divl %4\n"</span></span><br><span class="line">        : <span class="string">"=a"</span> (quot), <span class="string">"=d"</span> (rem)</span><br><span class="line">        : <span class="string">"d"</span> (x_high), <span class="string">"a"</span> (x_low), <span class="string">"r"</span> (mod));</span><br><span class="line">    <span class="keyword">return</span> rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modadd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x += y) &gt;= mod ? x - mod : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = fast_mod((ll) out * x);</span><br><span class="line">        x = fast_mod((ll) x * x);</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n, tsiz, rt, ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; siz, wt, bel, dep, inv, cnt, ma, mb, qa, qb;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Modification</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, p, inv, l;</span><br><span class="line">    Modification(<span class="keyword">int</span> _id, <span class="keyword">int</span> _p, <span class="keyword">int</span> _inv, <span class="keyword">int</span> _l): id(_id), p(_p), inv(_inv), l(_l) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Modification&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> p &lt; b.p; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">k1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> inv; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">b1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> p == l ? fast_mod((ll) (<span class="number">1</span> - l + mod) * k1()) : fast_mod((ll) (mod - p + <span class="number">1</span>) * k1()); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">k2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (ll) inv * dep[id] % mod; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">b2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> p == l ? fast_mod((ll) (<span class="number">1</span> - l + mod) * k2()) : fast_mod((ll) (mod - p + <span class="number">1</span>) * k2()); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Modification&gt; ms;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, p, inv;</span><br><span class="line">    Query(<span class="keyword">int</span> _id, <span class="keyword">int</span> _p, <span class="keyword">int</span> _inv): id(_id), p(_p), inv(_inv) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> p &lt; b.p; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> type)</span> <span class="keyword">const</span> </span>&#123; ans = fast_mod(ans + type * fast_mod((ll) inv * (fast_mod((ll) dep[id] * x1 + x2))) + mod); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Query&gt; qs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u] = wt[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        wt[u] = max(wt[u], siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    wt[u] = max(wt[u], tsiz - siz[u]);</span><br><span class="line">    <span class="keyword">if</span> (!rt || wt[u] &lt; wt[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="number">0</span>, b1 = <span class="number">0</span>, k2 = <span class="number">0</span>, b2 = <span class="number">0</span>, i = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt;= r; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        Query&amp; q = qs[qa[j]];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            Modification&amp; m = ms[ma[i]];</span><br><span class="line">            <span class="keyword">if</span> (m.p &gt; q.p) <span class="keyword">break</span>;</span><br><span class="line">            k1 = modadd(k1, m.k1());</span><br><span class="line">            b1 = modadd(b1, m.b1());</span><br><span class="line">            k2 = modadd(k2, m.k2());</span><br><span class="line">            b2 = modadd(b2, m.b2());</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        q.calc(fast_mod((ll) k1 * q.p + b1), fast_mod((ll) k2 * q.p + b2), type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[bel[u]] += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == pa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        bel[v] = bel[u];</span><br><span class="line">        dfs(v, u); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> soncnt = bel[u] = dep[u] = <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">0</span>] = l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        bel[v] = ++soncnt;</span><br><span class="line">        cnt[bel[v]] = cnt[bel[v] - <span class="number">1</span>];</span><br><span class="line">        dep[v] = <span class="number">1</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    calc(l, r, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt2(cnt.begin(), cnt.begin() + soncnt + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt;= l; --i) mb[cnt2[bel[ms[ma[i]].id]]--] = ma[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) ma[i] = mb[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= soncnt; ++i) cnt2[i] = cnt[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt;= l; --i) qb[cnt2[bel[qs[qa[i]].id]]--] = qa[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) qa[i] = qb[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= soncnt; ++i) cnt2[i] = cnt[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        calc(cnt2[bel[v] - <span class="number">1</span>] + <span class="number">1</span>, cnt2[bel[v]], <span class="number">-1</span>);</span><br><span class="line">        tsiz = siz[v];</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        solve(rt, cnt2[bel[v] - <span class="number">1</span>] + <span class="number">1</span>, cnt2[bel[v]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    g.resize(n + <span class="number">1</span>);</span><br><span class="line">    siz.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    vis.resize(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    wt = bel = dep = inv = cnt = siz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mul = (mod + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        mul = fast_mod((ll) mul * (r - l + <span class="number">1</span>));</span><br><span class="line">        inv[i] = qpow(r - l + <span class="number">1</span>, mod - <span class="number">2</span>);</span><br><span class="line">        ms.push_back(Modification(i, l, inv[i], l));</span><br><span class="line">        ms.push_back(Modification(i, r + <span class="number">1</span>, mod - inv[i], l));</span><br><span class="line">        qs.push_back(Query(i, l - <span class="number">1</span>, mod - inv[i]));</span><br><span class="line">        qs.push_back(Query(i, r, inv[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        g[u].push_back(v);</span><br><span class="line">        g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ma.resize(n * <span class="number">2</span>);</span><br><span class="line">    mb = qa = qb = ma;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; ++i) ma[i] = qa[i] = i;</span><br><span class="line"></span><br><span class="line">    sort(ma.begin(), ma.end(), [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> ms[x] &lt; ms[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    sort(qa.begin(), qa.end(), [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> qs[x] &lt; qs[y];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    tsiz = n;</span><br><span class="line">    getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    solve(rt, <span class="number">0</span>, <span class="number">2</span> * n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fast_mod((ll) ans * mul);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1260/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一棵树，每个点的颜色为一个区间内的整数，一种染色方案的权值是所有同色无序点对的距离之和，求所有不同染色方案的权值之和。&lt;/p&gt;
&lt;p&gt;点数、颜色数均不超过 $10^5$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="点分治" scheme="https://ouuan.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="差分" scheme="https://ouuan.github.io/tags/%E5%B7%AE%E5%88%86/"/>
    
      <category term="基数排序" scheme="https://ouuan.github.io/tags/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
      <category term="概率期望" scheme="https://ouuan.github.io/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>UOJ 无限 waiting 的解决方法</title>
    <link href="https://ouuan.github.io/UOJ-%E6%97%A0%E9%99%90-waiting-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://ouuan.github.io/UOJ-无限-waiting-的解决方法/</id>
    <published>2019-11-28T12:10:41.000Z</published>
    <updated>2019-12-01T10:12:20.032Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲的是自己搭建的 UOJ 如何解决无限 waiting，而不是 <a href="http://uoj.ac" target="_blank" rel="noopener">http://uoj.ac</a> 如何解决无限 waiting（后者大概要联系 vfk..反正我是没遇到过）。</p><p>这个问题困扰了我很久..</p><p>然后在若干次数据回滚后，我发现每次都是使用 git 后出现无限 waiting。进而发现是在 <code>git reset --hard</code> 后发生这种情况。</p><p>最后，我发现了问题的真正原因：git 把某些文件的权限改了，导致 docker 启动时无法运行 judger。</p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it uoj chmod +x /opt/uoj/judger/judge_client</span><br><span class="line">docker <span class="built_in">exec</span> -it uoj chown local_main_judger: /opt/uoj/judger/<span class="built_in">log</span>/judger.log</span><br><span class="line">docker restart uoj</span><br></pre></td></tr></table></figure><p>（当然，如果你改了 docker 容器名 / judger 用户名，甚至网页和 judger 不是同一个 docker，就不能照搬上面的命令了。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文讲的是自己搭建的 UOJ 如何解决无限 waiting，而不是 &lt;a href=&quot;http://uoj.ac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://uoj.ac&lt;/a&gt; 如何解决无限 waiting（后者大概要联系 vfk..反正
      
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>「NOI2014」购票（斜率优化，点分治）</title>
    <link href="https://ouuan.github.io/%E3%80%8CNOI2014%E3%80%8D%E8%B4%AD%E7%A5%A8%EF%BC%88%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%EF%BC%8C%E7%82%B9%E5%88%86%E6%B2%BB%EF%BC%89/"/>
    <id>https://ouuan.github.io/「NOI2014」购票（斜率优化，点分治）/</id>
    <published>2019-11-25T08:07:04.000Z</published>
    <updated>2019-12-04T18:41:40.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://uoj.ac/problem/7" target="_blank" rel="noopener">UOJ</a></p><p><a href="https://www.luogu.com.cn/problem/P2305" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一棵树，$i$ 号点有 $p_i$、$q_i$ 和 $l_i$ 三个属性，每条边有给定的长度。</p><p>从一个点出发可以到达其祖先中与其距离不超过 $l_i$ 的点，费用为 $p_i\cdot dis+q_i$，求每个点到根的最小费用。</p><p>点数不超过 $2\cdot 10^5$ 。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>用 $dis[i]$ 表示$i$ 到根的距离，$f_i$ 表示点 $i$ 的答案，那么：<br>$$<br>f_i=\min\limits_{\begin{array}{cc}j\text{ is an ancestor of }i\dis[j]\ge dis[i]-l_i\end{array}}\{f_j-p_i dis[j]+p_i dis[i]+q[i]\}<br>$$<br>这个东西可以用斜率优化，然而有三个不太友好的地方：</p><ol><li>这是棵树；</li><li>有 $dis[j]\ge dis[i]-l_i$ 这个限制；</li><li>$p_i$ 不是单调的。</li></ol><p>类似于 <a href="https://www.luogu.com.cn/problem/P4027" target="_blank" rel="noopener">「NOI2007」货币兑换</a> ，可以用类似于 CDQ 分治的点分治来解决上述三个问题。（然而我不仅没做过货币兑换，而且想到这个做法的时候都没意识到它是 CDQ 分治，只是在 <a href="https://blog.csdn.net/VFleaKing/article/details/90384225" target="_blank" rel="noopener">四色的 NOI</a> 中听说了这题可以点分治然后就 yy 出来了..）</p><p>具体来说，每个转移都可以看成一条路径，但只有竖直向上的路径是合法的，所以“向上”的那个子树需要特殊处理。类似于 CDQ 分治先处理左半部分再计算左半部分对右半部分的贡献，这题每次分治时先处理“向上”的那个子树，然后用分治中心到根的链除了分治中心本身外在当前分治树上的部分来更新分治中心的 DP 值，再用分治中心到根的链在当前分治树上的部分来更新除了“向上”的那个外的其它子树的 DP 值，最后再分治下去处理除了“向上”的那个外的其它子树。</p><p>更新除了“向上”的那个外的其它子树的 DP 值时，需要把这些子树里的点按 $dis[i]-l_i$ 排序，然后从下往上把分治中心到根的链在当前分治树上的部分在可行时加入凸包。</p><p>由于 $p_i$ 不是单调的，并不是用单调队列/单调栈维护凸包，而是保留整个凸包，查询的时候二分。</p><p>用叉积判斜率会爆 <code>long long</code>，可以用 <code>__int128</code> / <code>double</code> 解决。</p><p>总复杂度 $O(n\log^2 n)$ 。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="keyword">int</span> n, type, tsiz, rt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; dis, p, q, k, f;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; siz, wt, dep, pa;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getroot</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u] = wt[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        wt[u] = max(wt[u], siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    wt[u] = max(wt[u], tsiz - siz[u]);</span><br><span class="line">    <span class="keyword">if</span> (!rt || wt[u] &lt; wt[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getchildren</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; children)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == pa[u] || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        children.push_back(v);</span><br><span class="line">        getchildren(v, children);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[x] - k[x] &gt; dis[y] - k[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * (f[x] - f[y]) / (dis[x] - dis[y]) &lt; <span class="number">1.0</span> * (f[y] - f[z]) / (dis[y] - dis[z]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[j] + p[i] * (dis[i] - dis[j]) + q[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; anc(<span class="number">1</span>, u);</span><br><span class="line">    <span class="keyword">while</span> (pa[anc.back()] &amp;&amp; !vis[pa[anc.back()]]) anc.push_back(pa[anc.back()]);</span><br><span class="line">    <span class="keyword">if</span> (anc.size() &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        tsiz = siz[pa[u]];</span><br><span class="line">        getroot(pa[u], u);</span><br><span class="line">        solve(rt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; anc.size() &amp;&amp; dis[anc[i]] &gt;= dis[u] - k[u]; ++i) f[u] = min(f[u], calc(u, anc[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; children;</span><br><span class="line">    getchildren(u, children);</span><br><span class="line">    sort(children.begin(), children.end(), cmp);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; convex;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = children[i];</span><br><span class="line">        <span class="keyword">while</span> (t &lt; anc.size() &amp;&amp; dis[anc[t]] &gt;= dis[v] - k[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (convex.size() &gt;= <span class="number">2</span> &amp;&amp; check(convex[convex.size() - <span class="number">2</span>], convex.back(), anc[t])) convex.pop_back();</span><br><span class="line">            convex.push_back(anc[t++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (convex.empty()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = convex.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid &amp;&amp; calc(v, convex[mid - <span class="number">1</span>]) &lt; calc(v, convex[mid])) r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        f[v] = min(f[v], calc(v, convex[l]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = children[i];</span><br><span class="line">        <span class="keyword">if</span> (v == pa[u] || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        tsiz = siz[v];</span><br><span class="line">        getroot(v, u);</span><br><span class="line">        solve(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;type);</span><br><span class="line"></span><br><span class="line">    vis.resize(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    f.resize(n + <span class="number">1</span>, INF);</span><br><span class="line">    dis.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dep.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    siz.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    wt.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pa.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    g.resize(n + <span class="number">1</span>);</span><br><span class="line">    p.resize(n + <span class="number">1</span>);</span><br><span class="line">    q.resize(n + <span class="number">1</span>);</span><br><span class="line">    k.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld%lld%lld%lld"</span>, &amp;pa[i], &amp;dis[i], &amp;p[i], &amp;q[i], &amp;k[i]);</span><br><span class="line">        g[pa[i]].push_back(i);</span><br><span class="line">        g[i].push_back(pa[i]);</span><br><span class="line">        dis[i] += dis[pa[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    tsiz = n;</span><br><span class="line">    getroot(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://uoj.ac/problem/7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2305&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一棵树，$i$ 号点有 $p_i$、$q_i$ 和 $l_i$ 三个属性，每条边有给定的长度。&lt;/p&gt;
&lt;p&gt;从一个点出发可以到达其祖先中与其距离不超过 $l_i$ 的点，费用为 $p_i\cdot dis+q_i$，求每个点到根的最小费用。&lt;/p&gt;
&lt;p&gt;点数不超过 $2\cdot 10^5$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="点分治" scheme="https://ouuan.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="cdq分治" scheme="https://ouuan.github.io/tags/cdq%E5%88%86%E6%B2%BB/"/>
    
      <category term="斜率优化" scheme="https://ouuan.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2019，以及毕业之前</title>
    <link href="https://ouuan.github.io/2019%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%95%E4%B8%9A%E4%B9%8B%E5%89%8D/"/>
    <id>https://ouuan.github.io/2019，以及毕业之前/</id>
    <published>2019-11-23T11:28:56.000Z</published>
    <updated>2019-12-01T10:12:19.059Z</updated>
    
    <content type="html"><![CDATA[<p>怀着伤感的心情写下这段文字，然后开始一段新的征程。</p><a id="more"></a><h2 id="Starting-point"><a href="#Starting-point" class="headerlink" title="Starting point"></a>Starting point</h2><img src="/2019，以及毕业之前/start.png"><p>看到左边那几排灰色的方格了吗。</p><p>第一个绿色的方格是 2018 年 12 月 4 日。</p><p>那是什么日子呢？</p><p>要说的话，那是我开始使用 hexo 博客的日子。</p><p>那还是我得知自己在 NOIP2018 中夺得 HB rk1 后不久。</p><p>在那之后没过几天，我坐上高铁，第一次长期（大于一周）在外参加集训。</p><p>也就是那时，我谋生了办一场 CF 的想法。</p><p>使用 hexo 博客，也让我从一个 Github 的旁观者，变成了使用者。</p><p>究竟是其中的哪一个，改变了故事的主人公，我们不得而知。</p><p>但那天，就这样成了故事的起点。</p><h2 id="Problem-Setting"><a href="#Problem-Setting" class="headerlink" title="Problem Setting"></a>Problem Setting</h2><p>故事的第一站，叫做 Problem Setting 。</p><p>这一站很长，可以说从故事开始前——2018 年 8 月——就开始了。那是两场洛谷公开赛，<a href="https://www.luogu.org/contest/9600" target="_blank" rel="noopener">非酋yyf的sif之旅</a> 与 <a href="https://www.luogu.org/contest/12010" target="_blank" rel="noopener">蒟蒻们的补番之旅</a> 。它们并不完善，所以这两场旅途并没有被纳入本文所讲的这个故事之中。</p><p>这一站的故事我也曾经讲述过，题目叫做 <a href="/bad-round-与出题人的坚守/">「bad round 与出题人的坚守」</a> 。</p><p>这其中的过程其实并不重要，但就像 <a href="/bad-round-与出题人的坚守/#后记">后记</a> 中所说的，这一站改变了故事的主人公。</p><p>他会对有漏洞的题面感到愤怒——无论是自己过去出的题，还是在哪看到的题目。</p><p>Codeforces Round #564，在 CF 上留下的只是八道题目与若干 rating 的变化，但它让故事的主人公对事物的看法有了变化：</p><blockquote><p>我讨厌不用心的出题人，讨厌不严谨甚至误导人的博客，因为，我认为出题给别人做、写博客给别人看是应当对别人负责的。如果没有精力、不想负责的话，出题给自己做，博客保存在本地就好了，发出来干什么？即使是能力不够，也得有认真负责的态度才行。如果没有，别人骂你，只当骂醒好了。如果骂不醒，那着实该骂。</p><p>当我指出其他人题目里的种种不足，当我抛开他人博客中不严谨的话语而豁然开朗大叫原文之漏洞满篇时，有没有想过他人付出的心血呢？当然有，只是我认为尊重不是基于付出，而是基于负责的态度，基于真正做了什么的。就好比你追一个女孩子，辛辛苦苦付出了那么多，如果不提升自己，如果不付出真心，别人凭什么喜欢你？</p><p>说到底，对写给别人的东西负责，是我自己的一种坚守，我自己并不是总能做到，也不是生来就能做到。但我会努力去做，无论在怎样的大环境下，我想尽我所能创造一片小小的净土。</p></blockquote><p>很快，他将发现，他不止学会了出题。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>Github 是什么？</p><p>它不只是一个 “代码托管平台”，更是一个 “开源社区”。</p><p>在这里，你可以参与他人的项目，也可以让自己的项目被更多人发现，让他人也能够参与其中。</p><p>在这个故事中，我们的主人公也写过一些小东西，虽然都不是什么大工程，但也列在这了，有兴趣的读者不妨翻一翻，看看有没有什么能够用得上的：<a href="/一些有趣的小工程/">一些有趣的小工程</a> 。</p><p>这一站只是故事的一个小插曲，让我们接着往下。</p><h2 id="OI-Wiki"><a href="#OI-Wiki" class="headerlink" title="OI Wiki"></a>OI Wiki</h2><p>OI Wiki 又是什么呢？</p><p>它也是托管在 Github 上的一个开源项目，可它和上面刚刚说过的那些小东西不同，OI Wiki 是一个有着 3.5k stars 和 700+ forks (截至 2019.11.23) 的大项目。</p><p>那是一个崇尚知识自由的 OI 学习资源整合站点，可它，很不完善。</p><p>信步在 OI Wiki 中的主人公，发现了满眼的空白与漏洞。</p><p>他意识到这是怎样的一个平台——它不像出题，只是昙花一现，若题目不够优美，还不知是否有人从中有所收获；它不像写博客，在这个平台上，会有人和你一起协作，也有更多的目光，聚焦在你敲打出的文字之上。</p><p>这一站究竟发生了什么？时至今日，我也说不清楚，留下的只有数字：59 pull requests，182 commits，7966 additions ，4675 delections ，100 pull requests reviewed。</p><p>伴随着这些数字的，还有一个谜一样的 OIer，他从不在机房打游戏，但他的提交记录却总是寥寥无几。</p><h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><p>这个故事，好像不是很长，那我们来讲一讲故事之外的一些内容，有关一个看似失败的 OIer 背后的故事。</p><p>一切得追溯到一本叫做 <em>从零开始学理财</em> 的书，书中的内容我都不太记得了，故事的主人公现在也对经济不是很感兴趣，那是他小学一二年级时看的，现在只记得其中的一个片段：</p><blockquote><p>有次李嘉诚结束酒会，出酒店刚要上车，一枚一元硬币掉落，滚向下水道，李嘉诚便紧走几步要赶上去捡取。</p><p>旁边酒店门童眼疾手快，从地上捡起硬币，交给李嘉诚。李嘉诚很高兴，当即给了门童 100 元小费。</p><p>据说李嘉诚是这样说的：“如果我不捡，这一元就从市面消失，毫无价值，而门童捡起来给了我，我的一元没有丢失；门童为我保住一元，值得奖励，100 元他花出去可以吃好的，可以给家人买东西，很有意义，谁都没有损失。”</p></blockquote><p>这个故事的真假暂且不论，丢失一元硬币在经济学意义上究竟带来了什么也不重要，但这个故事给他展示了一个新的视角，一个从全局看问题的视角。</p><p>在小学四年级的奥数课上，他又学习了“统筹与规划”，知道了人们排队打水时应当如何安排顺序。</p><p>在听说了囚徒困境，并在生活中找到了无数个实例后，他发现，合作博弈的平衡点与非合作博弈截然不同。</p><p>vfk 所写的 <a href="http://vfleaking.blog.163.com/blog/static/17480763420111114111737542/" target="_blank" rel="noopener"><em>美在这里</em></a> 点醒了他，让他看到了 「美就在人与人的相互帮助，相互信任中」，明白了 UOJ 精神之源流究竟在何处。</p><p>在 OI 的学习中，一个又一个的最优化问题，让他明白了，看问题不能片面。</p><p>在 CF contribution 机制的激励下，他登上了中国 contribution 榜的顶峰。</p><p>经过上面那个故事，contribute 已经成了他生活的一部分。</p><p><a href="https://www.bilibili.com/bangumi/media/md5523/" target="_blank" rel="noopener"><em>三月のライオン</em></a> 中 ひなた 喊出的 「後悔なんてしないっっ しちゃダメだっ だって 私のした事は ぜったい まちがってなんか ない！」，让他坚定了自己的决心。</p><p>他给自己的价值观下了定义：以最大化社会全体成员的利益总和为目标。</p><p>这不是利他主义：自己是社会全体的一部分，他人的利益不比自己的利益重要，但多数人的利益往往更加重要。</p><p>这一价值观也不会让他帮助恶人，因为这会间接地使他人利益受损。这也使他明白，惩治恶人的目的不是报复，而是使其改过自新，不再作恶。</p><p>这一价值观还让他相信，竞争是以共同进步为目的的，正如他在博客的「关于」一栏中所写，「我不想和他人争抢保送的名额，但我现阶段的梦想，是提高国家集训队第 50 名的水平」，他相信竞争的受益者不会是少数人，而是全体。</p><p>他不能做到像雷锋一样总是帮助身边的人，他不懂如何安慰他人，如何鼓励他人，如何在恰当的时候给身边的人以帮助，他也不愿花费比受益人所受之益更大的代价来帮助他人。所以，他选择了 contribute ，选择了在排队时等在最后，选择了在车厢上有空位时若没有其他人站着便坐下。</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>但他在 contribute 这条路上渐行渐远，回头望去时，他发现，自己无法像 ひなた 一样，坚信自己所做是没有错的。</p><blockquote><p>感觉 NOIP 时期自己还是有点智商的，从去广二集训起智商严重下滑。</p><p>自从搭了 hexo 博客经常沉迷开发、写工程。然而到现在 Python、JS 什么的还严重依赖搜索引擎。</p><p>自从在 CF 出了题，经常沉迷喷出题人、帮出题人改题面、写出题规范，甚至不切实际地希望洛谷公开赛能有所改善。</p><p>CF contribution 还挺高的，但 rating 已经大半年停滞不前了。</p><p>总之最近一年学了别人一个月就能学完的知识点，但智商下滑，导致水平没有提高。倒是学习了各种各样 contribute 的姿势。感觉要退役。</p></blockquote><p>他意识到，自己的视角虽然够广，但还不够长远。</p><p>他想起了自己的梦想，想起了曾经立下的誓言。</p><p>是时候把手头的事情放下了，变得更像一名 OIer。</p><p>直到 2021 年的夏日，无论是一路在 OI 之路上前行，还是走上高考这条道路。</p><p>他在心里暗暗发誓，到那时，他还要回归 contribute 这条不归路，继续走下去。</p><h2 id="一句话题意"><a href="#一句话题意" class="headerlink" title="一句话题意"></a>一句话题意</h2><p>我直到高中毕业大概都不会再参与出题 / 写 OI Wiki 等 contribute 性质的活动了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怀着伤感的心情写下这段文字，然后开始一段新的征程。&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://ouuan.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="contribute" scheme="https://ouuan.github.io/tags/contribute/"/>
    
  </entry>
  
  <entry>
    <title>悬崖边的踟蹰 —— CSP-S 2019</title>
    <link href="https://ouuan.github.io/%E6%82%AC%E5%B4%96%E8%BE%B9%E7%9A%84%E8%B8%9F%E8%B9%B0-%E2%80%94%E2%80%94-CSP-S-2019/"/>
    <id>https://ouuan.github.io/悬崖边的踟蹰-——-CSP-S-2019/</id>
    <published>2019-11-18T10:15:31.000Z</published>
    <updated>2019-12-04T18:37:54.011Z</updated>
    
    <content type="html"><![CDATA[<p>标题来自 <em>三月のライオン Chapter.64 銀の羽根</em> ：</p><blockquote><p>答案只在漆黑的水底。</p><p>越是前进，下一个答案就只能在更深的地方找到。</p><p>以前越是潜入，就能获得答案。</p><p>比起恐怖，欲望更胜一筹。</p><p>但是成为职业棋手 6 年后，如今变得完全不能前进。</p><p>即便带着要撕碎全身的想法去潜入，但是却空手而回，已经是很常见的事了。</p><p>比起 「也许能找到」，「反正又不一定能找到」这个念头胜利的时候，就只能进行有限的努力了。</p><p>但是，桐山和二海堂无视了那样的我。</p><p>理所当然一样无论多少次都跳入其中。根本就不正常。</p><p>他们即便屡次空手而归，也会制定对策继续挑战。</p><p>丝毫不介意痛苦，无论多少次都投身其中。</p><p>只留下，被恐惧压倒的我。</p></blockquote><a id="more"></a><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>像往常一样，听了 YUKI 的两首三狮 OP 和 IOI2018 主题曲，抽签进考场。</p><p>由于自己还算小有名气，这次也不是 NOI 或是什么比赛，只是 CSP，于是避开了人群，也并没有人过来搭话。大概不露出准考证上的名字的话，其他人要么不认识我，要么已经退役了，要么知道我实际上有多菜吧。</p><p>T1 当然是看完题就会做了。$n\le 64$ 真毒瘤，只不过给个 $95\%$ 的 $k\le 2^{63}-1$ 提示太明显了（然而后 $50\%$ 的数据 $n$ 还是可以到 $64$…不知道有没有这样的数据）。</p><p>T2 一开始想了个神秘的树套树做法，感觉非常蠢，于是去看 T3，发现并不会做，就把 T2 的 $O(n^3)$ 和 T3 的暴力写了。</p><p>写完之后想到了若干 T2 的假做法，然后想到了一个略麻烦的线性做法，只不过写起来也没花太多时间。拍上的时候已经 10:30 了，好像比大众 AC 时间 9:00 晚了不少。</p><p>之后开始自闭。大概 11:20 的时候去上了个厕所，想到了个感觉挺对的做法：把删边视作给边编号，每个点出发先走编号最小的出边，然后走来到当前点的边在当前点出边中编号的后继。于是可以关于每个点用链表维护一个出边的顺序，再枚举每个数字，DFS 求出它的终点可以在哪些位置，选择其中最小的一个。感觉挺难写的，11:54 的时候算是写完了，但由于赶时间几乎是乱写的，测样例 RE 了，于是就注释掉了，换成了暴力。</p><p>我是从学 OI 一个月起就 <code>using namespace std;</code> 的选手，但这次就突然想不 using 来防止 CE，而且每题都在 NOI Linux 虚拟机下编译了，但 11:58 的时候突然发现自己 T3 暴力的 <code>next_permutation</code> 没有加 std，不是很清楚为什么不会 CE，当时的代码也没有了，可能是我哪看错了，总之我最后是把 <code>using namespace std;</code> 加上了..</p><p>所以说不要试图在考场上改代码习惯。</p><p>考场须知的签名是在监考说考试结束之后写的，写的时候手都在抖..所以说最后 10min 都别写代码了，5min 根本不够。</p><p>考完立刻出了考场，无视掉身边所有人，假装世界上只有自己一个人考了 CSP（</p><p>然后由于最后搞得有点紧张，还有神秘的 <code>std::next_permutation</code> 事件，一直担心文件错误 / CE 。<del>于是</del>就下了一下午（酒馆战）棋，试图忘掉 Day 1。</p><p>可是屏蔽 QQ 并不能妨碍我妈晚餐时告诉我人均 210，myh AK 之类的。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>今天是一次崭新的比赛（自我洗脑成功）。</p><p>依然是 YUKI 的两首三狮 OP 和 IOI2018 主题曲，然而因为估错时间，为了避免听车载广播，多听了一遍 Euphoria 。</p><p>今天不用校内集合，然而考场在 8 楼，于是要坐电梯。只不过还是没人过来搭话。</p><p>T1，怎么是计数啊（</p><p>看了几分钟感觉不太会做，人要懵了，这是 D2T1 吗（</p><p>冷静了一下，想到一个假的 $O(n^2m)$ 做法。</p><p>然后去看 T2，怎么办我只会 $O(n^3)$..但 $O(n^2)$ 好像很可做的样子。</p><p>然后去看 T3，怎么办我只会 $O(n^2)$..但链和菊花好像很可做的样子。</p><p>写 T1 写到一半，发现自己假了。冷静了一下，想到一个 $O(n^3m)$ 做法。8700k 应该啥都能过吧.png</p><p>写完一测，4.8s，人没了。</p><p>卡了卡常，3.6s，人没了。</p><p>开 O2，1.2s。但要是手开 O2 我就真没了。怎么手写取模优化啊.png</p><p>然后去写 T2，还没开始写就发现可以 $O(n^2\log n)$。写完一测，5s，我又没了。发现多次二分可以用双指针（在 <a href="/一些注意事项/">一些注意事项</a> 中有），于是就 $O(n^2)$ 了，跑的挺快。</p><p>然后去写 T3。$O(n^2)$ 挺好写的。链好像很简单。完美二叉树是啥..手画一下，发现剩下来较大的那部分的重心只能是根或根的儿子或根和根的儿子，于是也很好写。</p><p>此时 11:00 了。</p><p>为什么我不会做 D2T1 啊..于是选择去看 T1。这个背包可以 NTT 优化吗..在脑内思考了 5s NTT 是否应当出现在 CSP 中后，我成功算错了复杂度，以为它是 $O(n^2m\log)$ 的，然后写了个极限数据跑 80s 的 $O(n^2m\log^2)$…</p><p>最后也没有获得更多分数了。只不过这天提前 10min 就开始检查文件相关问题了。而且全部都 <code>using namespace std;</code> 了，也在 NOI Linux 下编译了。感觉挺放心的。</p><p>这次出来没有直接跑掉，然后就听说闫老师 A 了 T1，T2 88。还听说华一前几天校内讲了 T2..</p><p>在回家的路上被告知下午要去学校上 whk..然后书包都没拿（实际上书包里也没有任何 whk 相关的东西），吃完饭就去了，还迟到了 5min。</p><p>听说是与前段时间内容无关的物理课，然后还真是与前面的电学无关的动量，给人的感觉几乎是接着我停课前往后讲，于是还算顺畅。</p><p>选修 3-5 后面的几章还稍微有一点点涉及电学内容，量子力学什么的也没有完全看懂，计算什么的都跳过了，然而我晚自习就顺着把书看完了（感觉看完后啥都没学会）。</p><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><p>上午是快乐的 whk 生活。语文课讲期中考试卷子，我就拿别人的卷子看了下上面的几篇阅读。数学课讲求导，于是就写了下物理作业（没毛病）。化学课完全自闭了，于是就写完了物理作业（另一种意义上的没毛病）。</p><p>下午好像啥都没干，看着闫老师和肖老师拿民间数据测全省，然后发现 jxl 可能 535…</p><p>晚上写游记。</p><p>然后发现 D1T3 wqy 的题解好像和我的思路差不多，就试图拿我的考场代码调，发现调不出来，就重写了一遍，调过小样例之后获得了链的 25 分..</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>今天上了一整天 whk，上午还是化学自闭，其它课还好，下午是体检 &amp; 地理 &amp; 政治（马上学考了）。</p><p>晚上过来给 <a href="http://uoj.ac/problem/487" target="_blank" rel="noopener">UOJ #487</a> 加了个负自环的样例，稍微修了下题面。第一次用 svn。（并不知道 UOJ 社区版把 svn 阉割掉之后怎么远程下载数据，只不过 <a href="https://github.com/ouuan/Hinata-Online-Judge" target="_blank" rel="noopener">Hinata Online Judge</a> 是资瓷的。）</p><p>然后继续调 D1T3，一开始用 $n=10$ 的数据调自闭了，对拍出 $n=4$ 的数据之后 5min 就调出来了..</p><p>感觉要是头脑清醒而且像兔那样 30min AC T1T2，还是能在考场上写出来的..</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="D1T1"><a href="#D1T1" class="headerlink" title="D1T1"></a>D1T1</h3><p><del>依题意模拟</del>，记得开 <code>unsigned long long</code> 。</p><div><div class="fold_hider"><div class="close hider_title">考场代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, ull k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; (<span class="number">1u</span>ll &lt;&lt; (n - <span class="number">1</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        solve(n - <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        solve(n - <span class="number">1</span>, (<span class="number">1u</span>ll &lt;&lt; (n - <span class="number">1</span>)) - <span class="number">1</span> - (k &amp; ((<span class="number">1u</span>ll &lt;&lt; (n - <span class="number">1</span>)) - <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    ull k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    solve(n, k);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D1T2"><a href="#D1T2" class="headerlink" title="D1T2"></a>D1T2</h3><p>我的考场做法好像比较麻烦..</p><p>大致思路是定义一个点的权值是它到根的路径上左括号个数减去右括号个数，并且维护每个点向上多少个点满足右括号个数之和不少于左括号个数之和，后面这个东西维护的时候要分几种情况讨论。</p><p>维护了这两个信息，每个点新增的合法括号串就是一段区间里权值为某个数的点的个数，离线下来就可以 $O(n)$ 且无需高级数据结构地解决了。</p><div><div class="fold_hider"><div class="close hider_title">考场代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pii&gt; &gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; jump, tot, pa;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt += s[u - <span class="number">1</span>] == <span class="string">'('</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (s[u - <span class="number">1</span>] == <span class="string">')'</span>) ans[u] = tot[cnt + n];</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">1</span>) jump[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[u - <span class="number">1</span>] == <span class="string">')'</span>) jump[u] = jump[pa[jump[pa[u]]]];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s[pa[u] - <span class="number">1</span>] == <span class="string">')'</span>) jump[u] = jump[pa[pa[u]]];</span><br><span class="line">    <span class="keyword">else</span> jump[u] = u;</span><br><span class="line">    <span class="keyword">if</span> (s[u - <span class="number">1</span>] == <span class="string">')'</span>) q[pa[pa[jump[pa[u]]]]].push_back(pii(u, cnt));</span><br><span class="line">    ++tot[cnt + n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i) dfs(g[u][i], cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q[u].size(); ++i) ans[q[u][i].first] -= tot[q[u][i].second + n];</span><br><span class="line">    --tot[cnt + n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    g.resize(n + <span class="number">1</span>);</span><br><span class="line">    q.resize(n + <span class="number">1</span>);</span><br><span class="line">    ans.resize(n + <span class="number">1</span>);</span><br><span class="line">    pa.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    jump.resize(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    tot.resize(<span class="number">2</span> * n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pa[i];</span><br><span class="line">        g[pa[i]].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jump[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    tot[n] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ll out = ans[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] += ans[pa[i]];</span><br><span class="line">        out ^= ans[i] * i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; out &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D1T3"><a href="#D1T3" class="headerlink" title="D1T3"></a>D1T3</h3><p>（我在游记里说过大致思路了。）</p><p>把删边视作给边编号，每个点出发先走编号最小的出边，然后走来到当前点的边在当前点出边中编号的后继。于是可以关于每个点用链表维护一个出边的顺序，再枚举每个数字，DFS 求出它的终点可以在哪些位置，选择其中最小的一个。</p><p>然后会发现有很多细节，使用并查集会比链表好写一些（虽然复杂度会略微大一点点）。</p><p>代码是调试了一万遍写出来的，可能有地方会有些冗余..</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; able; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; haspre;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, pa, ans, head, tail;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; f, g, nxt, siz;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[u][x] ? x : f[u][x] = find(u, f[u][x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pa[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (head[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = head[u];</span><br><span class="line">            pa[v] = u;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">                <span class="keyword">if</span> (!haspre[u][v] &amp;&amp; !(tail[u] &amp;&amp; find(u, v) == find(u, tail[u]) &amp;&amp; siz[u][find(u, v)] &lt; g[u].size()))</span><br><span class="line">                &#123;</span><br><span class="line">                    pa[v] = u;</span><br><span class="line">                    dfs(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nxt[u][pa[u]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = nxt[u][pa[u]];</span><br><span class="line">            pa[v] = u;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tail[u] &amp;&amp; !(find(u, pa[u]) == find(u, head[u]) &amp;&amp; siz[u][find(u, head[u])] &lt; g[u].size())) able[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (find(u, pa[u]) != find(u, tail[u]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">                    <span class="keyword">if</span> (find(u, v) != find(u, head[u]) &amp;&amp; find(u, pa[u]) != find(u, v) &amp;&amp; !haspre[u][v] &amp;&amp;</span><br><span class="line">                        !(find(u, pa[u]) == find(u, head[u]) &amp;&amp; find(u, v) == find(u, tail[u]) &amp;&amp; siz[u][find(u, pa[u])] + siz[u][find(u, v)] &lt; g[u].size()))</span><br><span class="line">                    &#123;</span><br><span class="line">                        pa[v] = u;</span><br><span class="line">                        dfs(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!from) tail[u] = pa[u];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!pa[u])</span><br><span class="line">    &#123;</span><br><span class="line">        head[u] = from;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        nxt[u][pa[u]] = from;</span><br><span class="line">        haspre[u][from] = <span class="literal">true</span>;</span><br><span class="line">        siz[u][find(u, from)] += siz[u][find(u, pa[u])];</span><br><span class="line">        f[u][find(u, pa[u])] = find(u, from);</span><br><span class="line">    &#125;</span><br><span class="line">    apply(pa[u], u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">        a.resize(n + <span class="number">1</span>);</span><br><span class="line">        ans.resize(n + <span class="number">1</span>);</span><br><span class="line">        head.assign(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        tail.assign(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        g.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        f.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        siz.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        nxt.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        haspre.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            g[u].push_back(v);</span><br><span class="line">            g[v].push_back(u); </span><br><span class="line">            f[u][v] = v;</span><br><span class="line">            f[v][u] = u;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            able.assign(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">            pa.assign(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            dfs(a[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (able[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">                    apply(j, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D2T1"><a href="#D2T1" class="headerlink" title="D2T1"></a>D2T1</h3><p>首先可以通过 $O(n^2)$ 的 DP 求出没有 Yazid 的限制（每种主要食材不超过一半）的答案。</p><p>然后枚举每种主要食材，算出超过一半的方案数。</p><p>两部分答案相减即为最终答案。</p><p>第一部分比较简单，<del>我猜大家都会，毕竟这是个基本的背包问题..</del></p><p>第二部分的话，枚举主要食材后有一个比较容易想到的 $O(n^3)$ DP，但应该是无法通过本题的。</p><p>这个 $O(n^3)$ DP 计算了使用多少种当前枚举的食材以及多少种非当前枚举的食材的方案数，但实际上我们并不关心这两种情况具体有多少种食材，而只关心它们的差，所以可以得到下面这种 $O(n^2)$ 的 DP 方法：</p><p>令 $f_{i, j}$ 表示使用 $1\sim i$ 这些烹饪方法，做了 $x$ 道当前枚举的食材，$x-j$ 道非当前枚举的食材，的方案数。令当前枚举的食材为 $t$ 。</p><p>转移有三种情况，不做/做枚举的/做非枚举的，所以，$f_{i,j}=f_{i-1,j}+a_{i,t}f_{i-1,j-1}+\left(\left(\sum_{p=1}^m a_{i, p}\right)-a_{i,t}\right)f_{i-1,j+1}$ 。</p><p>对第二部分答案的贡献是 $\sum_{i=1}^nf_{n,i}$ 。</p><p>总复杂度 $O(n^2m)$ 。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; a, f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    sum.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    a.resize(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">            sum[i] = (sum[i] + a[i][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f.resize(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j] + (ll) f[i - <span class="number">1</span>][j - <span class="number">1</span>] * sum[i]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans = (ans + f[n][i]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span> * n + <span class="number">3</span>, <span class="number">0</span>));</span><br><span class="line">        f[<span class="number">0</span>][n + <span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 下标加上 n+1 避免负数下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = n + <span class="number">1</span> - j; k &lt;= n + <span class="number">1</span> + j; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                f[j][k] = ((ll) a[j][i] * f[j - <span class="number">1</span>][k - <span class="number">1</span>] + (ll) (sum[j] - a[j][i] + mod) * f[j - <span class="number">1</span>][k + <span class="number">1</span>] + f[j - <span class="number">1</span>][k]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n + <span class="number">2</span>; j &lt;= n * <span class="number">2</span> + <span class="number">1</span>; ++j) ans = (ans - f[n][j] + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D2T2"><a href="#D2T2" class="headerlink" title="D2T2"></a>D2T2</h3><p>首先是一个结论：最后一个断点最大的解是最优解。证明请参考 <a href="http://matthew99.blog.uoj.ac/blog/5299" target="_blank" rel="noopener">myy 的题解</a>。（因为自己并没有想到什么更加简洁的证法..）（<del>当然还可以打表发现。</del>）</p><p>有了这个结论之后，令 $f_i$ 表示 $[1,i]$ 这段的最后一个断点的最大值，那么，$f_i=\max\{j|j\in\mathbb{N},(\sum_{t=f_j+1}^ja_t)\le(\sum_{t=j+1}^ia_t)\}$ 。</p><p>预处理前缀和 $pre[i]=\sum_{j=1}^ia_i$，那么 $f_{i}=\max\{j|j\in\mathbb{N},2pre[j]-pre[f_j]\le pre[i]\}$ ，然后就可以用单调队列优化了。</p><p>需要高精的只有最后的答案计算，<del>这可以用 <code>__int128</code> 实现</del>。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IO</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE (1 &lt;&lt; 20)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isdigit(x) (x &gt;= <span class="meta-string">'0'</span> &amp;&amp; x &lt;= <span class="meta-string">'9'</span>)</span></span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line">    <span class="keyword">char</span> pbuf[MAXSIZE], *pp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    IO() : p1(buf), p2(buf), pp(pbuf) &#123;&#125;</span><br><span class="line">    ~IO() &#123; fwrite(pbuf, <span class="number">1</span>, pp - pbuf, <span class="built_in">stdout</span>); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        <span class="keyword">return</span> getchar();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">if</span> (p1 == p2) p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 ? <span class="string">' '</span> : *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">double</span> tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">bool</span> sign = <span class="number">0</span>;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">char</span> ch = gc();</span><br><span class="line">        <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = gc())</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'-'</span>) sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(ch); ch = gc()) x = x * <span class="number">10</span> + (ch - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">for</span> (ch = gc(); <span class="built_in">isdigit</span>(ch); ch = gc())</span><br><span class="line">                tmp /= <span class="number">10.0</span>, x += tmp * (ch - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span> (sign) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">char</span> ch = gc();</span><br><span class="line">        <span class="keyword">for</span> (; blank(ch); ch = gc())</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">for</span> (; !blank(ch); ch = gc()) *s++ = ch;</span><br><span class="line">        *s = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (c = gc(); blank(c); c = gc())</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="keyword">if</span> (pp - pbuf == MAXSIZE) fwrite(pbuf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdout</span>), pp = pbuf;</span><br><span class="line">        *pp++ = c;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, push(<span class="string">'-'</span>);</span><br><span class="line">        <span class="keyword">static</span> T sta[<span class="number">35</span>];</span><br><span class="line">        T top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sta[top++] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x);</span><br><span class="line">        <span class="keyword">while</span> (top) push(sta[--top] + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">char</span> <span class="title">lastChar</span>) &#123;</span></span><br><span class="line">        write(x), push(lastChar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e7</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"><span class="keyword">int</span> n, type, f[N], q[N], ql = <span class="number">1</span>, qr;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[x] * <span class="number">2</span> - a[f[x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    io.read(n);</span><br><span class="line">    io.read(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) io.read(a[i]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, z, b, c, m;</span><br><span class="line">        io.read(x);</span><br><span class="line">        io.read(y);</span><br><span class="line">        io.read(z);</span><br><span class="line">        io.read(b);</span><br><span class="line">        io.read(c);</span><br><span class="line">        io.read(m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p, l, r;</span><br><span class="line">            io.read(p);</span><br><span class="line">            io.read(l);</span><br><span class="line">            io.read(r);</span><br><span class="line">            <span class="keyword">while</span> (k &lt;= p)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">1</span>) t = b;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>) t = c;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    t = ((ll) x * c + (ll) y * b + z) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">30</span>) - <span class="number">1</span>);</span><br><span class="line">                    b = c;</span><br><span class="line">                    c = t;</span><br><span class="line">                &#125;</span><br><span class="line">                a[k++] = t % (r - l + <span class="number">1</span>) + l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) a[i] += a[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (ql &lt; qr &amp;&amp; calc(q[ql + <span class="number">1</span>]) &lt;= a[i]) ++ql;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr || calc(q[ql]) &gt; a[i]) f[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> f[i] = q[ql];</span><br><span class="line">        ll tmp = calc(i);</span><br><span class="line">        <span class="keyword">while</span> (ql &lt;= qr &amp;&amp; tmp &lt;= calc(q[qr])) --qr;</span><br><span class="line">        q[++qr] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __int128 ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i = f[i]) ans += (__int128) (a[i] - a[f[i]]) * (a[i] - a[f[i]]);</span><br><span class="line"></span><br><span class="line">    write(ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="D2T3"><a href="#D2T3" class="headerlink" title="D2T3"></a>D2T3</h3><p>怎么今年 D2T3 又是 NOI 选手们纷纷用神仙做法秒掉，然后题解区窜出一个神奇的倍增做法（</p><p>瞟了眼主席树题解，感觉自己大约能想出来，于是去学习了一下神奇的倍增做法：</p><p>进行树链剖分（实际上只用求出重儿子而不用进行剖分），有一个性质：如果重心在一个子树内，且这个子树的根不是重心，那么重心一定在根的重儿子那棵子树里。</p><p>（如果有多个儿子大小一样，重心只能是根。）</p><p>然后就可以向下倍增找到重心（如果跳过去之后“向上”的子树大小不超过总点数一半就跳过去）。找到之后还要判其父亲是否也是重心。</p><p>然而这样只能处理有根树的子树，另一半的子树（“向上”的子树）需要类似换根 DP 进行处理，需要分几种情况讨论，具体细节可以自行脑补 + 对拍发现自己漏了哪种情况。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dfntot;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; g, bz;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dep, siz, pa, dfn, exi;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Val</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    pii fi, se;</span><br><span class="line">    Val()</span><br><span class="line">    &#123;</span><br><span class="line">        fi = se = pii(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(pii x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; fi)</span><br><span class="line">        &#123;</span><br><span class="line">            se = fi;</span><br><span class="line">            fi = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; se) se = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pii <span class="title">get</span><span class="params">(pii x = pii(<span class="number">-1</span>, <span class="number">-1</span>))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == fi) <span class="keyword">return</span> se;</span><br><span class="line">        <span class="keyword">return</span> fi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Val&gt; son;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    dfn[u] = ++dfntot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == pa[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        pa[v] = u;</span><br><span class="line">        dfs1(v);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        son[u].insert(pii(siz[v], v));</span><br><span class="line">    &#125;</span><br><span class="line">    exi[u] = dfntot;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">1</span>) <span class="keyword">return</span>; </span><br><span class="line">    bz[u][<span class="number">0</span>] = son[u].get().second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">17</span>; ++i) bz[u][i] = bz[bz[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> x = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = bz[x][i];</span><br><span class="line">        <span class="keyword">if</span> (v &amp;&amp; siz[u] - siz[v] &lt;= siz[u] / <span class="number">2</span>) x = v;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += x;</span><br><span class="line">    <span class="keyword">if</span> (siz[x] &lt;= siz[u] / <span class="number">2</span>) ans += pa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!v) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> f = pa[u];</span><br><span class="line">    <span class="keyword">if</span> (v == f) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (dfn[f] &gt;= dfn[v] &amp;&amp; dfn[f] &lt;= exi[v]) <span class="keyword">return</span> siz[pa[v]] - siz[u] &lt;= (n - siz[u]) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> n - siz[u] - siz[v] &lt;= (n - siz[u]) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == u || !v) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> f = pa[u];</span><br><span class="line">    <span class="keyword">if</span> (dfn[f] &gt;= dfn[v] &amp;&amp; dfn[f] &lt;= exi[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> n - siz[v] &lt;= (n - siz[u]) / <span class="number">2</span> &amp;&amp; son[v].get(pii(siz[pa[v]], pa[v])).first &lt;= (n - siz[u]) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> son[v].get().first &lt;= (n - siz[u]) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp = bz[u];</span><br><span class="line">    Val rson = son[u];</span><br><span class="line">    <span class="keyword">int</span> f = pa[u];</span><br><span class="line">    <span class="keyword">int</span> paf = pa[f];</span><br><span class="line">    <span class="keyword">if</span> (u != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pa[f] = u;</span><br><span class="line">        son[u].insert(pii(n - siz[u], f));</span><br><span class="line">        bz[f][<span class="number">0</span>] = son[f].get(pii(siz[u], u)).second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">17</span>; ++i) bz[f][i] = bz[bz[f][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> x = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = bz[x][i];</span><br><span class="line">            <span class="keyword">if</span> (judge(u, v)) x = v;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += x;</span><br><span class="line">        <span class="keyword">if</span> (judge2(u, pa[x])) ans += pa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v);</span><br><span class="line">    &#125;</span><br><span class="line">    bz[u] = tmp;</span><br><span class="line">    pa[f] = paf;</span><br><span class="line">    son[u] = rson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line">    T = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n = read();</span><br><span class="line"></span><br><span class="line">        bz.resize(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">18</span>, <span class="number">0</span>));</span><br><span class="line">        g.assign(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        son.assign(n + <span class="number">1</span>, Val());</span><br><span class="line">        dep.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        dfn.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        exi.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        siz.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        pa.resize(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        ans = dfntot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = read();</span><br><span class="line">            <span class="keyword">int</span> v = read();</span><br><span class="line">            g[u].push_back(v);</span><br><span class="line">            g[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs1(<span class="number">1</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标题来自 &lt;em&gt;三月のライオン Chapter.64 銀の羽根&lt;/em&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答案只在漆黑的水底。&lt;/p&gt;
&lt;p&gt;越是前进，下一个答案就只能在更深的地方找到。&lt;/p&gt;
&lt;p&gt;以前越是潜入，就能获得答案。&lt;/p&gt;
&lt;p&gt;比起恐怖，欲望更胜一筹。&lt;/p&gt;
&lt;p&gt;但是成为职业棋手 6 年后，如今变得完全不能前进。&lt;/p&gt;
&lt;p&gt;即便带着要撕碎全身的想法去潜入，但是却空手而回，已经是很常见的事了。&lt;/p&gt;
&lt;p&gt;比起 「也许能找到」，「反正又不一定能找到」这个念头胜利的时候，就只能进行有限的努力了。&lt;/p&gt;
&lt;p&gt;但是，桐山和二海堂无视了那样的我。&lt;/p&gt;
&lt;p&gt;理所当然一样无论多少次都跳入其中。根本就不正常。&lt;/p&gt;
&lt;p&gt;他们即便屡次空手而归，也会制定对策继续挑战。&lt;/p&gt;
&lt;p&gt;丝毫不介意痛苦，无论多少次都投身其中。&lt;/p&gt;
&lt;p&gt;只留下，被恐惧压倒的我。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于 Capacity Scaling 的弱多项式复杂度最小费用流算法</title>
    <link href="https://ouuan.github.io/%E5%9F%BA%E4%BA%8E-Capacity-Scaling-%E7%9A%84%E5%BC%B1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81%E7%AE%97%E6%B3%95/"/>
    <id>https://ouuan.github.io/基于-Capacity-Scaling-的弱多项式复杂度最小费用流算法/</id>
    <published>2019-10-26T11:50:25.000Z</published>
    <updated>2019-12-05T13:26:25.080Z</updated>
    
    <content type="html"><![CDATA[<p>大多数人所使用的费用流算法，即每次求出残量网络中 $s$ 到 $t$ 关于费用的最短路进行增广（将 Dinic 最大流算法中的 BFS 改为 SPFA），是伪多项式复杂度的，最坏情况下复杂度为 $O(nmf)$，其中 $f$ 为最大流。已知有一种在点数为 $n$，边数为 $O(n^2)$，值域为 $O(2^{n/2})$ 时将其用时卡成关于 $n$ 的指数级复杂度的构造方法。</p><p>本文将介绍一种复杂度为进行 $O(m\log U)$ 次（$U$ 表示边的最大容量）无负权边单源最短路（使用 <code>priority_queue</code> 实现 Dijkstra 算法，总复杂度即为 $O(m^2\log U\log m)$）的弱多项式复杂度算法。</p><p>其实这个算法并不是很复杂（只是相关资料比较少，会对学习造成一定困难，这也是我写这篇博客的原因），最小费用最大流的模板也只需要 $2.5KB$，并不比常见的伪多项式复杂度算法长很多。</p><a id="more"></a><h2 id="hack-常见的费用流算法"><a href="#hack-常见的费用流算法" class="headerlink" title="hack 常见的费用流算法"></a>hack 常见的费用流算法</h2><p>可以参考 <a href="https://min-25.hatenablog.com/entry/2018/03/19/235802" target="_blank" rel="noopener">这篇博客</a>，里面给出了一个用 Python 写的数据生成器，调用函数 <code>mcmf_worst_instance(k)</code> 可以得到 $2k+2$ 个点的数据，格式为第一行点数和边数，后面每行描述一条边（起点、终点、容量、费用），源点是 $1$ 汇点是 $2k+2$。</p><div><div class="fold_hider"><div class="close hider_title">k=20 生成的数据</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line">42 421</span><br><span class="line">1 2 1 0</span><br><span class="line">1 3 3 0</span><br><span class="line">1 4 5 0</span><br><span class="line">1 5 10 0</span><br><span class="line">1 6 20 0</span><br><span class="line">1 7 40 0</span><br><span class="line">1 8 80 0</span><br><span class="line">1 9 160 0</span><br><span class="line">1 10 320 0</span><br><span class="line">1 11 640 0</span><br><span class="line">1 12 1280 0</span><br><span class="line">1 13 2560 0</span><br><span class="line">1 14 5120 0</span><br><span class="line">1 15 10240 0</span><br><span class="line">1 16 20480 0</span><br><span class="line">1 17 40960 0</span><br><span class="line">1 18 81920 0</span><br><span class="line">1 19 163840 0</span><br><span class="line">1 20 327680 0</span><br><span class="line">1 21 655360 0</span><br><span class="line">2 22 5242880 0</span><br><span class="line">2 23 5242880 1</span><br><span class="line">2 24 5242880 3</span><br><span class="line">2 25 5242880 7</span><br><span class="line">2 26 5242880 15</span><br><span class="line">2 27 5242880 31</span><br><span class="line">2 28 5242880 63</span><br><span class="line">2 29 5242880 127</span><br><span class="line">2 30 5242880 255</span><br><span class="line">2 31 5242880 511</span><br><span class="line">2 32 5242880 1023</span><br><span class="line">2 33 5242880 2047</span><br><span class="line">2 34 5242880 4095</span><br><span class="line">2 35 5242880 8191</span><br><span class="line">2 36 5242880 16383</span><br><span class="line">2 37 5242880 32767</span><br><span class="line">2 38 5242880 65535</span><br><span class="line">2 39 5242880 131071</span><br><span class="line">2 40 5242880 262143</span><br><span class="line">2 41 5242880 524287</span><br><span class="line">3 22 5242880 1</span><br><span class="line">3 24 5242880 3</span><br><span class="line">3 25 5242880 7</span><br><span class="line">3 26 5242880 15</span><br><span class="line">3 27 5242880 31</span><br><span class="line">3 28 5242880 63</span><br><span class="line">3 29 5242880 127</span><br><span class="line">3 30 5242880 255</span><br><span class="line">3 31 5242880 511</span><br><span class="line">3 32 5242880 1023</span><br><span class="line">3 33 5242880 2047</span><br><span class="line">3 34 5242880 4095</span><br><span class="line">3 35 5242880 8191</span><br><span class="line">3 36 5242880 16383</span><br><span class="line">3 37 5242880 32767</span><br><span class="line">3 38 5242880 65535</span><br><span class="line">3 39 5242880 131071</span><br><span class="line">3 40 5242880 262143</span><br><span class="line">3 41 5242880 524287</span><br><span class="line">4 22 5242880 3</span><br><span class="line">4 23 5242880 3</span><br><span class="line">4 25 5242880 7</span><br><span class="line">4 26 5242880 15</span><br><span class="line">4 27 5242880 31</span><br><span class="line">4 28 5242880 63</span><br><span class="line">4 29 5242880 127</span><br><span class="line">4 30 5242880 255</span><br><span class="line">4 31 5242880 511</span><br><span class="line">4 32 5242880 1023</span><br><span class="line">4 33 5242880 2047</span><br><span class="line">4 34 5242880 4095</span><br><span class="line">4 35 5242880 8191</span><br><span class="line">4 36 5242880 16383</span><br><span class="line">4 37 5242880 32767</span><br><span class="line">4 38 5242880 65535</span><br><span class="line">4 39 5242880 131071</span><br><span class="line">4 40 5242880 262143</span><br><span class="line">4 41 5242880 524287</span><br><span class="line">5 22 5242880 7</span><br><span class="line">5 23 5242880 7</span><br><span class="line">5 24 5242880 7</span><br><span class="line">5 26 5242880 15</span><br><span class="line">5 27 5242880 31</span><br><span class="line">5 28 5242880 63</span><br><span class="line">5 29 5242880 127</span><br><span class="line">5 30 5242880 255</span><br><span class="line">5 31 5242880 511</span><br><span class="line">5 32 5242880 1023</span><br><span class="line">5 33 5242880 2047</span><br><span class="line">5 34 5242880 4095</span><br><span class="line">5 35 5242880 8191</span><br><span class="line">5 36 5242880 16383</span><br><span class="line">5 37 5242880 32767</span><br><span class="line">5 38 5242880 65535</span><br><span class="line">5 39 5242880 131071</span><br><span class="line">5 40 5242880 262143</span><br><span class="line">5 41 5242880 524287</span><br><span class="line">6 22 5242880 15</span><br><span class="line">6 23 5242880 15</span><br><span class="line">6 24 5242880 15</span><br><span class="line">6 25 5242880 15</span><br><span class="line">6 27 5242880 31</span><br><span class="line">6 28 5242880 63</span><br><span class="line">6 29 5242880 127</span><br><span class="line">6 30 5242880 255</span><br><span class="line">6 31 5242880 511</span><br><span class="line">6 32 5242880 1023</span><br><span class="line">6 33 5242880 2047</span><br><span class="line">6 34 5242880 4095</span><br><span class="line">6 35 5242880 8191</span><br><span class="line">6 36 5242880 16383</span><br><span class="line">6 37 5242880 32767</span><br><span class="line">6 38 5242880 65535</span><br><span class="line">6 39 5242880 131071</span><br><span class="line">6 40 5242880 262143</span><br><span class="line">6 41 5242880 524287</span><br><span class="line">7 22 5242880 31</span><br><span class="line">7 23 5242880 31</span><br><span class="line">7 24 5242880 31</span><br><span class="line">7 25 5242880 31</span><br><span class="line">7 26 5242880 31</span><br><span class="line">7 28 5242880 63</span><br><span class="line">7 29 5242880 127</span><br><span class="line">7 30 5242880 255</span><br><span class="line">7 31 5242880 511</span><br><span class="line">7 32 5242880 1023</span><br><span class="line">7 33 5242880 2047</span><br><span class="line">7 34 5242880 4095</span><br><span class="line">7 35 5242880 8191</span><br><span class="line">7 36 5242880 16383</span><br><span class="line">7 37 5242880 32767</span><br><span class="line">7 38 5242880 65535</span><br><span class="line">7 39 5242880 131071</span><br><span class="line">7 40 5242880 262143</span><br><span class="line">7 41 5242880 524287</span><br><span class="line">8 22 5242880 63</span><br><span class="line">8 23 5242880 63</span><br><span class="line">8 24 5242880 63</span><br><span class="line">8 25 5242880 63</span><br><span class="line">8 26 5242880 63</span><br><span class="line">8 27 5242880 63</span><br><span class="line">8 29 5242880 127</span><br><span class="line">8 30 5242880 255</span><br><span class="line">8 31 5242880 511</span><br><span class="line">8 32 5242880 1023</span><br><span class="line">8 33 5242880 2047</span><br><span class="line">8 34 5242880 4095</span><br><span class="line">8 35 5242880 8191</span><br><span class="line">8 36 5242880 16383</span><br><span class="line">8 37 5242880 32767</span><br><span class="line">8 38 5242880 65535</span><br><span class="line">8 39 5242880 131071</span><br><span class="line">8 40 5242880 262143</span><br><span class="line">8 41 5242880 524287</span><br><span class="line">9 22 5242880 127</span><br><span class="line">9 23 5242880 127</span><br><span class="line">9 24 5242880 127</span><br><span class="line">9 25 5242880 127</span><br><span class="line">9 26 5242880 127</span><br><span class="line">9 27 5242880 127</span><br><span class="line">9 28 5242880 127</span><br><span class="line">9 30 5242880 255</span><br><span class="line">9 31 5242880 511</span><br><span class="line">9 32 5242880 1023</span><br><span class="line">9 33 5242880 2047</span><br><span class="line">9 34 5242880 4095</span><br><span class="line">9 35 5242880 8191</span><br><span class="line">9 36 5242880 16383</span><br><span class="line">9 37 5242880 32767</span><br><span class="line">9 38 5242880 65535</span><br><span class="line">9 39 5242880 131071</span><br><span class="line">9 40 5242880 262143</span><br><span class="line">9 41 5242880 524287</span><br><span class="line">10 22 5242880 255</span><br><span class="line">10 23 5242880 255</span><br><span class="line">10 24 5242880 255</span><br><span class="line">10 25 5242880 255</span><br><span class="line">10 26 5242880 255</span><br><span class="line">10 27 5242880 255</span><br><span class="line">10 28 5242880 255</span><br><span class="line">10 29 5242880 255</span><br><span class="line">10 31 5242880 511</span><br><span class="line">10 32 5242880 1023</span><br><span class="line">10 33 5242880 2047</span><br><span class="line">10 34 5242880 4095</span><br><span class="line">10 35 5242880 8191</span><br><span class="line">10 36 5242880 16383</span><br><span class="line">10 37 5242880 32767</span><br><span class="line">10 38 5242880 65535</span><br><span class="line">10 39 5242880 131071</span><br><span class="line">10 40 5242880 262143</span><br><span class="line">10 41 5242880 524287</span><br><span class="line">11 22 5242880 511</span><br><span class="line">11 23 5242880 511</span><br><span class="line">11 24 5242880 511</span><br><span class="line">11 25 5242880 511</span><br><span class="line">11 26 5242880 511</span><br><span class="line">11 27 5242880 511</span><br><span class="line">11 28 5242880 511</span><br><span class="line">11 29 5242880 511</span><br><span class="line">11 30 5242880 511</span><br><span class="line">11 32 5242880 1023</span><br><span class="line">11 33 5242880 2047</span><br><span class="line">11 34 5242880 4095</span><br><span class="line">11 35 5242880 8191</span><br><span class="line">11 36 5242880 16383</span><br><span class="line">11 37 5242880 32767</span><br><span class="line">11 38 5242880 65535</span><br><span class="line">11 39 5242880 131071</span><br><span class="line">11 40 5242880 262143</span><br><span class="line">11 41 5242880 524287</span><br><span class="line">12 22 5242880 1023</span><br><span class="line">12 23 5242880 1023</span><br><span class="line">12 24 5242880 1023</span><br><span class="line">12 25 5242880 1023</span><br><span class="line">12 26 5242880 1023</span><br><span class="line">12 27 5242880 1023</span><br><span class="line">12 28 5242880 1023</span><br><span class="line">12 29 5242880 1023</span><br><span class="line">12 30 5242880 1023</span><br><span class="line">12 31 5242880 1023</span><br><span class="line">12 33 5242880 2047</span><br><span class="line">12 34 5242880 4095</span><br><span class="line">12 35 5242880 8191</span><br><span class="line">12 36 5242880 16383</span><br><span class="line">12 37 5242880 32767</span><br><span class="line">12 38 5242880 65535</span><br><span class="line">12 39 5242880 131071</span><br><span class="line">12 40 5242880 262143</span><br><span class="line">12 41 5242880 524287</span><br><span class="line">13 22 5242880 2047</span><br><span class="line">13 23 5242880 2047</span><br><span class="line">13 24 5242880 2047</span><br><span class="line">13 25 5242880 2047</span><br><span class="line">13 26 5242880 2047</span><br><span class="line">13 27 5242880 2047</span><br><span class="line">13 28 5242880 2047</span><br><span class="line">13 29 5242880 2047</span><br><span class="line">13 30 5242880 2047</span><br><span class="line">13 31 5242880 2047</span><br><span class="line">13 32 5242880 2047</span><br><span class="line">13 34 5242880 4095</span><br><span class="line">13 35 5242880 8191</span><br><span class="line">13 36 5242880 16383</span><br><span class="line">13 37 5242880 32767</span><br><span class="line">13 38 5242880 65535</span><br><span class="line">13 39 5242880 131071</span><br><span class="line">13 40 5242880 262143</span><br><span class="line">13 41 5242880 524287</span><br><span class="line">14 22 5242880 4095</span><br><span class="line">14 23 5242880 4095</span><br><span class="line">14 24 5242880 4095</span><br><span class="line">14 25 5242880 4095</span><br><span class="line">14 26 5242880 4095</span><br><span class="line">14 27 5242880 4095</span><br><span class="line">14 28 5242880 4095</span><br><span class="line">14 29 5242880 4095</span><br><span class="line">14 30 5242880 4095</span><br><span class="line">14 31 5242880 4095</span><br><span class="line">14 32 5242880 4095</span><br><span class="line">14 33 5242880 4095</span><br><span class="line">14 35 5242880 8191</span><br><span class="line">14 36 5242880 16383</span><br><span class="line">14 37 5242880 32767</span><br><span class="line">14 38 5242880 65535</span><br><span class="line">14 39 5242880 131071</span><br><span class="line">14 40 5242880 262143</span><br><span class="line">14 41 5242880 524287</span><br><span class="line">15 22 5242880 8191</span><br><span class="line">15 23 5242880 8191</span><br><span class="line">15 24 5242880 8191</span><br><span class="line">15 25 5242880 8191</span><br><span class="line">15 26 5242880 8191</span><br><span class="line">15 27 5242880 8191</span><br><span class="line">15 28 5242880 8191</span><br><span class="line">15 29 5242880 8191</span><br><span class="line">15 30 5242880 8191</span><br><span class="line">15 31 5242880 8191</span><br><span class="line">15 32 5242880 8191</span><br><span class="line">15 33 5242880 8191</span><br><span class="line">15 34 5242880 8191</span><br><span class="line">15 36 5242880 16383</span><br><span class="line">15 37 5242880 32767</span><br><span class="line">15 38 5242880 65535</span><br><span class="line">15 39 5242880 131071</span><br><span class="line">15 40 5242880 262143</span><br><span class="line">15 41 5242880 524287</span><br><span class="line">16 22 5242880 16383</span><br><span class="line">16 23 5242880 16383</span><br><span class="line">16 24 5242880 16383</span><br><span class="line">16 25 5242880 16383</span><br><span class="line">16 26 5242880 16383</span><br><span class="line">16 27 5242880 16383</span><br><span class="line">16 28 5242880 16383</span><br><span class="line">16 29 5242880 16383</span><br><span class="line">16 30 5242880 16383</span><br><span class="line">16 31 5242880 16383</span><br><span class="line">16 32 5242880 16383</span><br><span class="line">16 33 5242880 16383</span><br><span class="line">16 34 5242880 16383</span><br><span class="line">16 35 5242880 16383</span><br><span class="line">16 37 5242880 32767</span><br><span class="line">16 38 5242880 65535</span><br><span class="line">16 39 5242880 131071</span><br><span class="line">16 40 5242880 262143</span><br><span class="line">16 41 5242880 524287</span><br><span class="line">17 22 5242880 32767</span><br><span class="line">17 23 5242880 32767</span><br><span class="line">17 24 5242880 32767</span><br><span class="line">17 25 5242880 32767</span><br><span class="line">17 26 5242880 32767</span><br><span class="line">17 27 5242880 32767</span><br><span class="line">17 28 5242880 32767</span><br><span class="line">17 29 5242880 32767</span><br><span class="line">17 30 5242880 32767</span><br><span class="line">17 31 5242880 32767</span><br><span class="line">17 32 5242880 32767</span><br><span class="line">17 33 5242880 32767</span><br><span class="line">17 34 5242880 32767</span><br><span class="line">17 35 5242880 32767</span><br><span class="line">17 36 5242880 32767</span><br><span class="line">17 38 5242880 65535</span><br><span class="line">17 39 5242880 131071</span><br><span class="line">17 40 5242880 262143</span><br><span class="line">17 41 5242880 524287</span><br><span class="line">18 22 5242880 65535</span><br><span class="line">18 23 5242880 65535</span><br><span class="line">18 24 5242880 65535</span><br><span class="line">18 25 5242880 65535</span><br><span class="line">18 26 5242880 65535</span><br><span class="line">18 27 5242880 65535</span><br><span class="line">18 28 5242880 65535</span><br><span class="line">18 29 5242880 65535</span><br><span class="line">18 30 5242880 65535</span><br><span class="line">18 31 5242880 65535</span><br><span class="line">18 32 5242880 65535</span><br><span class="line">18 33 5242880 65535</span><br><span class="line">18 34 5242880 65535</span><br><span class="line">18 35 5242880 65535</span><br><span class="line">18 36 5242880 65535</span><br><span class="line">18 37 5242880 65535</span><br><span class="line">18 39 5242880 131071</span><br><span class="line">18 40 5242880 262143</span><br><span class="line">18 41 5242880 524287</span><br><span class="line">19 22 5242880 131071</span><br><span class="line">19 23 5242880 131071</span><br><span class="line">19 24 5242880 131071</span><br><span class="line">19 25 5242880 131071</span><br><span class="line">19 26 5242880 131071</span><br><span class="line">19 27 5242880 131071</span><br><span class="line">19 28 5242880 131071</span><br><span class="line">19 29 5242880 131071</span><br><span class="line">19 30 5242880 131071</span><br><span class="line">19 31 5242880 131071</span><br><span class="line">19 32 5242880 131071</span><br><span class="line">19 33 5242880 131071</span><br><span class="line">19 34 5242880 131071</span><br><span class="line">19 35 5242880 131071</span><br><span class="line">19 36 5242880 131071</span><br><span class="line">19 37 5242880 131071</span><br><span class="line">19 38 5242880 131071</span><br><span class="line">19 40 5242880 262143</span><br><span class="line">19 41 5242880 524287</span><br><span class="line">20 22 5242880 262143</span><br><span class="line">20 23 5242880 262143</span><br><span class="line">20 24 5242880 262143</span><br><span class="line">20 25 5242880 262143</span><br><span class="line">20 26 5242880 262143</span><br><span class="line">20 27 5242880 262143</span><br><span class="line">20 28 5242880 262143</span><br><span class="line">20 29 5242880 262143</span><br><span class="line">20 30 5242880 262143</span><br><span class="line">20 31 5242880 262143</span><br><span class="line">20 32 5242880 262143</span><br><span class="line">20 33 5242880 262143</span><br><span class="line">20 34 5242880 262143</span><br><span class="line">20 35 5242880 262143</span><br><span class="line">20 36 5242880 262143</span><br><span class="line">20 37 5242880 262143</span><br><span class="line">20 38 5242880 262143</span><br><span class="line">20 39 5242880 262143</span><br><span class="line">20 41 5242880 524287</span><br><span class="line">21 22 5242880 524287</span><br><span class="line">21 23 5242880 524287</span><br><span class="line">21 24 5242880 524287</span><br><span class="line">21 25 5242880 524287</span><br><span class="line">21 26 5242880 524287</span><br><span class="line">21 27 5242880 524287</span><br><span class="line">21 28 5242880 524287</span><br><span class="line">21 29 5242880 524287</span><br><span class="line">21 30 5242880 524287</span><br><span class="line">21 31 5242880 524287</span><br><span class="line">21 32 5242880 524287</span><br><span class="line">21 33 5242880 524287</span><br><span class="line">21 34 5242880 524287</span><br><span class="line">21 35 5242880 524287</span><br><span class="line">21 36 5242880 524287</span><br><span class="line">21 37 5242880 524287</span><br><span class="line">21 38 5242880 524287</span><br><span class="line">21 39 5242880 524287</span><br><span class="line">21 40 5242880 524287</span><br><span class="line">22 42 2 0</span><br><span class="line">23 42 2 0</span><br><span class="line">24 42 5 0</span><br><span class="line">25 42 10 0</span><br><span class="line">26 42 20 0</span><br><span class="line">27 42 40 0</span><br><span class="line">28 42 80 0</span><br><span class="line">29 42 160 0</span><br><span class="line">30 42 320 0</span><br><span class="line">31 42 640 0</span><br><span class="line">32 42 1280 0</span><br><span class="line">33 42 2560 0</span><br><span class="line">34 42 5120 0</span><br><span class="line">35 42 10240 0</span><br><span class="line">36 42 20480 0</span><br><span class="line">37 42 40960 0</span><br><span class="line">38 42 81920 0</span><br><span class="line">39 42 163840 0</span><br><span class="line">40 42 327680 0</span><br><span class="line">41 42 655360 0</span><br></pre></td></tr></table></figure></div></div><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>本文假定读者对网络流有基本的了解（掌握并大致理解了最大流的增广路解法（EK / Dinic）即可）。</p><p>还要会解决无负权边的单源最短路问题（会 Dijkstra 算法即可）。</p><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><p>无源汇的流，每个点需要满足流入量等于流出量（流量平衡），并且每条边的流量不超过上限。</p><p>有源汇的流，存在源点 $s$ 和汇点 $t$，$s$ 只流出不流入，$t$ 只流入不流出，其它点满足流量平衡，并且每条边的流量不超过上限。</p><p>最大流问题，只在有源汇的流中有意义，即最大化 $s$ 的流出量（也就是 $t$ 的流入量）。</p><p>流的费用，是每条边的流量与费用之积的和。</p><p>最小费用最大流问题，在最大流的前提下，最小化流的费用。</p><p>（无源汇）最小费用流问题，只用最小化流的费用。</p><p>残量网络，是原图中每条没满流的边以及每条有流的边的反边（反边指方向相反，费用为相反数）构成的图。</p><p>增广路，在有源汇的流中指残量网络上一条 $s$ 到 $t$ 的路径，在无源汇的流中指残量网络上的一个环。</p><p>增广，指的是将一条增广路流量加一（增广路上的边容量减一，对应的反边容量加一）。</p><p>不加说明时，边的长度 / 路径的长度 / 环的长度（当然还有“最长路径”、“负环”之类的表述）中的“长度”都指费用。</p><p>$(u, v)$ 表示从 $u$ 到 $v$ 的有向边（本文只讨论原图为简单图的情况，非简单图是类似的），$cap(u, v)$ 表示 $(u, v)$ 这条边的容量，$cost(u, v)$ 表示 $(u, v)$ 这条边的费用。</p><h2 id="将最小费用最大流问题转化为无源汇最小费用流问题"><a href="#将最小费用最大流问题转化为无源汇最小费用流问题" class="headerlink" title="将最小费用最大流问题转化为无源汇最小费用流问题"></a>将最小费用最大流问题转化为无源汇最小费用流问题</h2><p>最小费用最大流问题可以转化为无源汇最小费用流问题，方法是连一条 $t$ 到 $s$，容量足够大，费用足够小（为一个负数）的边。这里的“容量足够大”指的是不小于最大流，“费用足够小”指的是小于 $s$ 到 $t$ 的最长简单路径费用的相反数。</p><p>由于“费用足够小”，若没有达成最大流，即存在 $s$ 到 $t$ 的增广路，任何一条不经过正环（若存在经过正环的增广路，一定也存在不经过正环的增广路）的 $s$ 到 $t$ 的增广路加上 $(t, s)$ 这条边的费用一定为负，所以通过这条增广路增广总费用一定更小，这说明，无源汇流中满足最小费用时，原问题同时满足了最小费用与最大流。</p><p>下文中讨论的都是无源汇最小费用流问题，也不会再次强调“无源汇”。</p><h2 id="负环"><a href="#负环" class="headerlink" title="负环"></a>负环</h2><p>一个流是最小费用流，当且仅当其残量网络中没有负环。</p><div><div class="fold_hider"><div class="close hider_title">证明：</div></div><div class="fold"><p>仅当（必要条件）：若存在负环可以在负环上增广，从而得到费用更小的流。</p><p>当（充分条件）：令所考虑的这个流为 $f$，取任意一个最小费用流 $f^{\ast}$，计算它们之间的差 $f^{\ast}-f$（对应边流量相减）。假设 $f$ 不是最小费用流，那么 $f^{\ast}-f$ 的总费用一定为负。由于 $f$ 和 $f^{\ast}$ 都流量平衡，$f^{\ast}-f$ 一定也流量平衡，所以它也是个合法的流，而一个流一定可以拆成若干个环（由于流量平衡，每个联通部分都有欧拉回路），若总费用为负就一定包含负环。又因为 $f^{\ast}-f$ 是在 $f$ 的基础上增广的，$f^{\ast}-f$ 一定是 $f$ 残量网络的一个子图，而其包含负环与 $f$ 的残量网络中没有负环矛盾，所以假设不成立。</p></div></div><h2 id="节点势能-amp-边的-reduced-cost"><a href="#节点势能-amp-边的-reduced-cost" class="headerlink" title="节点势能 &amp; 边的 reduced cost"></a>节点势能 &amp; 边的 reduced cost</h2><p>这两个概念的提出与最小费用流的线性规划形式的对偶问题相关，但了解这个对偶问题并不是必要的，所以本篇博客中不会提及。</p><p>给每个节点 $u$ 指定一个任意的势能 $p(u)$。（这个概念看起来很突兀，总之就是给每个节点新增了一个属性，它的值是任意的。）（本质上是线性规划对偶问题中的一个无限制变量。）</p><p>定义一条边 $(u, v)$ 关于某一组势能 $p$ 的 reduced cost（并不知道怎么翻译..）$C_p(u, v)$ 为 $p(u)+cost(u, v)-p(v)$。</p><p>reduced cost 有两个很好的性质：</p><ol><li><p>将原费用替换为 reduced cost 不影响最短路。（不是不影响最短路长度，而是不影响最短路是哪一条。）</p></li><li><p>将原费用替换为 reduced cost 不影响环的总费用。</p></li></ol><p>这两个性质都可以由 $C_p(u, v)+C_p(v, w)=p(u)+cost(u, v)+cost(v, w)-p(w)$（中间经过的点的势能相加后抵消）说明。</p><p>如果大家有了解过 Johnson 全源最短路径算法，里面也有类似的操作，用于保证边权非负，使得 Dijkstra 算法可以得到应用。在本文所介绍的最小费用流算法中也是一样，为了能够使用 Dijkstra 算法计算最短路，在过程中需要保证 reduced cost 非负。</p><h2 id="capacity-scaling"><a href="#capacity-scaling" class="headerlink" title="capacity scaling"></a>capacity scaling</h2><p>（这个也不知道怎么翻译..）</p><p>capacity scaling 从高到低考虑容量的最高若干位（比如容量为 $5$ ($101_2$)，第一次迭代时考虑最高一位，即 $1$ ($1_2$)，第二次迭代时考虑最高两位，即 $2$ ($10_2$)，第三次迭代时考虑最高三位，即 $5$ ($101_2$)），每次加入更低的位后更新答案。（这个过程和求快速幂有点像。）</p><p>它基于一个性质：将原图中每条边的容量乘二后，最小费用流每条边的流量分别乘二。</p><p>那么，若计算出了以 $\left\lfloor\frac{cap(u, v)}{2^k}\right\rfloor$ 为边 $(u, v)$ 的容量的最小费用流，现在要得到以 $\left\lfloor\frac{cap(u, v)}{2^{k-1}}\right\rfloor$ 为边 $(u, v)$ 的容量的最小费用流，只需要先将流乘二，然后对每条二进制中该位为 $1$ 的边进行容量加一的操作即可。</p><p>所以，问题转化为了给一条边的容量加一，更新最小费用流。</p><h2 id="给一条边的容量加一"><a href="#给一条边的容量加一" class="headerlink" title="给一条边的容量加一"></a>给一条边的容量加一</h2><p>在上文中已经证明，最小费用流等价于残量网络中没有负环。</p><p>所以，若容量加一后若产生负环，进行增广即可。</p><p>为了优化常数，可以特判掉容量加一前该边已存在于残量网络的情况，直接跳过。</p><p>令容量加一的这条边为 $(u, v)$，找负环可以先求出从 $v$ 出发以 reduced cost 为长度到每个点 $i$ 的最短路 $d(i)$（这个最短路不包括 $(u, v)$ 这条边， 由于当前维护的残量网络是容量加一之前的最小费用流，不存在负环，所以最短路是可以求的），判断 $d(u)+C_p(u, v)$ 是否小于 $0$ 即可。</p><p>为了使用 Dijkstra 算法，还需要保证 reduced cost 非负，所以需要调整节点的势能。</p><p>这里直接给出一种做法：求出上文所述的最短路 $d(i)$（若 $x$ 不可达就将 $d(x)$ 设为 $\max_{\text{节点 }i\text{ 可达}}\{d(i)\}+max(0, -C_p(u, v))$），然后将每个点 $i$ 的势能加上 $d(i)$（用 $p’(i)$ 表示节点 $i$ 更新后的势能）。</p><div><div class="fold_hider"><div class="close hider_title">这样调整后残量网络中的每一条边的 reduced cost 依然非负的证明：</div></div><div class="fold"><p>对于 $(u, v)$ 这条边，若 $u$ 不可达，那么：</p><p>$$<br>\begin{aligned}<br>C_{p’}(u, v)<br>&amp;=p’(u)+cost(u, v)-p’(v)\\<br>&amp;=p(u)+max(0, -C_p(u, v))+cost(u, v)-p(v)\\<br>&amp;\ge p(u)-(p(u)+cost(u, v)-p(v))+cost(u, v)-p(v)\\<br>&amp;=0<br>\end{aligned}<br>$$</p><p>若 $u$ 可达且 $(u, v)$ 这条边加入后产生了负环，负环会被增广，$(u, v)$ 这条边就不存在了。</p><p>若 $u$ 可达且 $(u, v)$ 这条边加入后没有产生负环，即 $d(u)+C_p(u, v)\ge 0$，那么 $C_{p’}(u, v)=d(u)+C_p(u, v)-d(v)=d(u)+C_p(u, v)\ge 0$。</p><p>capacity scaling 算法在初始时所有边容量均为 $0$（也就是说残量网络为空），所以可以在除 $(u, v)$ 外每条边的 reduced cost 均非负的基础上归纳证明。</p><p>对于其它从 $u$ 可达的边 $(x, y)$，由于 $d(y)\le d(x)+C_p(x, y)$（最短路的性质），即 $d(y)\le d(x)+p(x)+cost(x, y)-p(y)$，所以 $p(x)+d(x)+cost(x, y)-(p(y)+d(y))\ge 0$，即 $p’(x)+cost(x, y)-p’(y)\ge 0$，也就是说 $u$ 可达的边 reduced cost 调整后非负。</p><p>对于其它从 $u$ 可达与从 $u$ 不可达交界处的边 $(x, y)$（由于这条边不可达，一定是 $x$ 不可达 $y$ 可达），由于 $C_p(x, y)\ge 0$ 且 $d(x)=\max_{\text{节点 }i\text{ 可达}}\{d(i)\}+max(0, -C_p(u, v))\ge d(y)$，这样的边调整后 reduced cost 也非负。</p><p>对于连接从 $u$ 不可达的两个点 $x$，$y$ 的边，$d(x)=d(y)$，调整后 reduced cost 也非负。</p><p>综上所述，调整后残量网络中的每一条边的 reduced cost 依然非负。</p></div></div><p>进而我们还可以得出，上述流程结束后，残量网络中不存在负环，即上述流程可以计算出当前的最小费用流。</p><h2 id="防止溢出"><a href="#防止溢出" class="headerlink" title="防止溢出"></a>防止溢出</h2><p>上一部分中给出的势能调整方式能够保证 reduced cost 非负，但在实际实现时会有势能太大从而溢出的风险。</p><p>防止溢出的方法也很简单，新建一个点 $k$，从 $k$ 向所有点连长度为 $0$ 的边，求从 $k$ 出发以原费用（而非 reduced cost）为长度的最短路（由于更新后的残量网络是当前的最小费用流，不存在负环，新增的 $k$ 以及 $k$ 连向其它节点的边也不会带来新的负环，所以最短路是可以求的），以 $k$ 到 $i$ 的最短路作为调整后节点 $i$ 的势能。这样调整后，$C_p(x, y)=d(x)+cost(x, y)-d(y)\ge 0$（由最短路性质得到），并且每个节点的势能的值域不会超过 $[\min(0, (n-1)\min\{cost(u, v)\}), 0]$。</p><p>虽然是以原费用为长度，计算最短路时还是可以利用 reduced cost 来计算。由于只有从 $k$ 连出的边可能 reduced cost 为负，而 $k$ 又是第一个松弛的，所以这不会影响 Dijkstra 算法的正确性（当然，也可以为 $k$ 设置一个足够大的势能来保证从 $k$ 连出的边 reduced cost 也非负）。</p><h2 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h2><p>若求的是最小费用最大流，首先通过加一条 $t$ 到 $s$ 的边转化为无源汇最小费用流。</p><p>使用 capacity scaling，枚举考虑容量的最高 $k$ 位，每次迭代开始时将残量网络中每条边的容量以及答案乘二，然后枚举每条二进制中该位为 $1$ 的边，使其容量加一。</p><p>给一条边容量加一时，先特判掉这条边本来就在残量网络中的情况（优化常数），然后判是否产生了负环，若产生了负环就增广这个负环，然后调整节点势能使得所有 reduced cost 非负，最后通过计算新增节点到每个节点的最短路来更新节点势能防止溢出。</p><p>复杂度瓶颈在求无负权边单源最短路上，总共需要计算 $O(m\log U)$ 次（$U$ 为边的最大容量）最短路，如果使用 <code>priority_queue</code> 来实现 Dijkstra 算法，总复杂度为 $O(m^2\log U\log m)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="http://uoj.ac/problem/487" target="_blank" rel="noopener">模板题</a>。</p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ll LARGE = <span class="number">1e12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, from, to, pre;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; raw_cap, cap, cost, p, dis;</span><br><span class="line">priority_queue&lt;pli, <span class="built_in">vector</span>&lt;pli&gt;, greater&lt;pli&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt.push_back(head[u]);</span><br><span class="line">    head[u] = to.size();</span><br><span class="line">    from.push_back(u);</span><br><span class="line">    to.push_back(v);</span><br><span class="line">    raw_cap.push_back(f);</span><br><span class="line">    cap.push_back(<span class="number">0</span>);</span><br><span class="line">    cost.push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u, v, f, w);</span><br><span class="line">    add(v, u, <span class="number">0</span>, -w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">c</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[from[id]] + cost[id] - p[to[id]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis.assign(n + <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">    dis.assign(n + <span class="number">2</span>, INF);</span><br><span class="line">    pre.assign(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(pli(<span class="number">0</span>, s));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().second;</span><br><span class="line">        ll w = q.top().first;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = to[i];</span><br><span class="line">            <span class="keyword">if</span> (cap[i] &amp;&amp; dis[v] &gt; w + c(i))</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = w + c(i);</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                q.push(pli(dis[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_one_cap</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = from[id];</span><br><span class="line">    <span class="keyword">int</span> v = to[id];</span><br><span class="line">    <span class="keyword">if</span> (cap[id])</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(v);</span><br><span class="line">    <span class="keyword">if</span> (dis[u] &lt; INF &amp;&amp; dis[u] + c(id) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (u != v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = pre[u];</span><br><span class="line">            --cap[x];</span><br><span class="line">            ++cap[x ^ <span class="number">1</span>];</span><br><span class="line">            u = from[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ++cap[id];</span><br><span class="line">    ll max_dis = <span class="number">0</span>;</span><br><span class="line">    ll cur_len = c(id);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (dis[i] &lt; INF) max_dis = max(max_dis, dis[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] += dis[i] &lt; INF ? dis[i] : max_dis + max(<span class="number">0l</span>l, -cur_len);</span><br><span class="line"></span><br><span class="line">    dijkstra(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] += dis[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, t;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    head.resize(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    p.resize(n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u, v, f, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; f &gt;&gt; w;</span><br><span class="line">        add_edge(u, v, f, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add_edge(t, s, LARGE, -LARGE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        add_edge(n + <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cap[to.size() - <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span> + <span class="number">1</span>; ++j) cap[j] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((raw_cap[j] &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add_one_cap(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll min_cost = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) min_cost += cap[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * cost[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cap[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; min_cost;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="关于-SPFA"><a href="#关于-SPFA" class="headerlink" title="关于 SPFA"></a>关于 SPFA</h2><p>如果把算法中的 Dijkstra 换成 SPFA，reduced cost 就不需要了，调整势能和防止溢出两部分都可以去掉，加上 SPFA 本身就略微比 Dijkstra 好写，总体会好写不少，复杂度是 $O(nm^2\log U)$，但很难卡满，而且由于不用防止溢出，少跑很多遍最短路，总体跑的非常快。</p><div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> ll LARGE = <span class="number">1e12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; inq;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; raw_cap, cap, cost, dis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, from, to, pre;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt.push_back(head[u]);</span><br><span class="line">    head[u] = to.size();</span><br><span class="line">    from.push_back(u);</span><br><span class="line">    to.push_back(v);</span><br><span class="line">    raw_cap.push_back(f);</span><br><span class="line">    cap.push_back(<span class="number">0</span>);</span><br><span class="line">    cost.push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u, v, f, w);</span><br><span class="line">    add(v, u, <span class="number">0</span>, -w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inq.assign(n + <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">    dis.assign(n + <span class="number">2</span>, INF);</span><br><span class="line">    pre.assign(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        inq[u] = <span class="literal">false</span>;</span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = to[i];</span><br><span class="line">            ll w = cost[i];</span><br><span class="line">            <span class="keyword">if</span> (cap[i] &amp;&amp; dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!inq[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    inq[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_one_cap</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = from[id];</span><br><span class="line">    <span class="keyword">int</span> v = to[id];</span><br><span class="line">    <span class="keyword">if</span> (cap[id])</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spfa(v);</span><br><span class="line">    <span class="keyword">if</span> (dis[u] &lt; INF &amp;&amp; dis[u] + cost[id] &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cap[id ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (u != v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = pre[u];</span><br><span class="line">            --cap[x];</span><br><span class="line">            ++cap[x ^ <span class="number">1</span>];</span><br><span class="line">            u = from[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ++cap[id];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s, t; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    head.resize(n + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u, v, f, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; f &gt;&gt; w;</span><br><span class="line">        add_edge(u, v, f, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add_edge(t, s, LARGE, -LARGE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        add_edge(n + <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cap[to.size() - <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span> + <span class="number">1</span>; ++j) cap[j] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m * <span class="number">2</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((raw_cap[j] &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                add_one_cap(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll min_cost = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) min_cost += cap[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] * cost[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cap[m &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; min_cost;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="关于出题"><a href="#关于出题" class="headerlink" title="关于出题"></a>关于出题</h2><p>尽管多数人使用的费用流算法是伪多项式复杂度的，我并不建议在题目中卡掉它。</p><p>但需要注意的是，“不卡掉”是指设置合适的数据范围，使得常见费用流算法可以确保通过。如果设置了不合理的数据范围而测试数据中没有卡掉常见费用流算法，那么不仅 <strong>卡了</strong> 常见费用流算法，数据也造的不合格。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://min-25.hatenablog.com/entry/2018/03/19/235802" target="_blank" rel="noopener">Min_25 最小費用最大流の悪例題</a></p></li><li><p><a href="https://web.stanford.edu/class/cs361b/files/cs361b-notes.pdf" target="_blank" rel="noopener">Stanford CS 361B: Advanced Algorithms, Spring 2014 Lecture Notes</a></p></li><li><p><a href="https://www.math.ubc.ca/~anstee/math523/StronglyPolynomialNetworkFlow.pdf" target="_blank" rel="noopener">A Faster Strongly Polynomial Minimum Cost Flow Algorithm</a></p></li><li><p><a href="https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf" target="_blank" rel="noopener">Theoretical Improvements in Algorithmic Efficiency for Network Flow Problems</a></p></li><li><p><a href="https://github.com/Laakeri/tiralabra" target="_blank" rel="noopener">Github repo Laakeri/tiralabra</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数人所使用的费用流算法，即每次求出残量网络中 $s$ 到 $t$ 关于费用的最短路进行增广（将 Dinic 最大流算法中的 BFS 改为 SPFA），是伪多项式复杂度的，最坏情况下复杂度为 $O(nmf)$，其中 $f$ 为最大流。已知有一种在点数为 $n$，边数为 $O(n^2)$，值域为 $O(2^{n/2})$ 时将其用时卡成关于 $n$ 的指数级复杂度的构造方法。&lt;/p&gt;
&lt;p&gt;本文将介绍一种复杂度为进行 $O(m\log U)$ 次（$U$ 表示边的最大容量）无负权边单源最短路（使用 &lt;code&gt;priority_queue&lt;/code&gt; 实现 Dijkstra 算法，总复杂度即为 $O(m^2\log U\log m)$）的弱多项式复杂度算法。&lt;/p&gt;
&lt;p&gt;其实这个算法并不是很复杂（只是相关资料比较少，会对学习造成一定困难，这也是我写这篇博客的原因），最小费用最大流的模板也只需要 $2.5KB$，并不比常见的伪多项式复杂度算法长很多。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://ouuan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="费用流" scheme="https://ouuan.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>CF3D Least Cost Bracket Sequence（贪心）</title>
    <link href="https://ouuan.github.io/CF3D-Least-Cost-Bracket-Sequence%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF3D-Least-Cost-Bracket-Sequence（贪心）/</id>
    <published>2019-10-16T13:50:44.000Z</published>
    <updated>2019-12-01T10:12:19.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/3/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有一个长为 $n$ 的括号序列，其中一些位置是问号，每个问号替换成左括号或替换成右括号各有给定的代价，判断是否能够构造出一个合法的括号序列，如果可以，求出最小代价。</p><p>$n\le 5\cdot 10^4$（实际上可以大很多）。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>考虑使用带反悔的贪心。</p><p>如果用 $cnt[i]$ 表示 $\sum_{j=1}^i(-1)^{[a_i=’)’]}$（左括号比右括号多的个数），括号序列合法当且仅当 $\forall i,cnt[i]\ge 0$ 且 $cnt[n]=0$。</p><p>如果把右括号反悔成左括号，一定可以保证 $cnt[i]\ge 0$ 这个条件依然满足。</p><p>但是，如果把左括号反悔成右括号，有可能造成本来 $cnt[i]\ge 0$ 的位置小于 $0$。</p><p>并且，如果选择了多余的左括号，还会导致 $cnt[n]&gt;0$。</p><p>如何解决这些问题呢？</p><p>可以发现，如果初始时优先选择右括号，上述问题就都得到解决了。</p><p>即，每次碰到问号都选右括号，并且将其标记为可以反悔为左括号。如果 $cnt[i]&lt;0$，就从可反悔的右括号里选反悔代价最小的改成左括号。这样的话，$cnt[i]\ge 0$ 不会因反悔而被破坏，$cnt[n]&gt;0$ 也不会在有解时发生。</p><p>具体实现可以用堆（<code>priority_queue</code>）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">priority_queue&lt;pii, <span class="built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) ++cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">')'</span>) --cnt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            --cnt;</span><br><span class="line">            s[i] = <span class="string">')'</span>;</span><br><span class="line">            ans += b;</span><br><span class="line">            q.push(pii(a - b, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.empty()) <span class="keyword">break</span>;</span><br><span class="line">            cnt += <span class="number">2</span>;</span><br><span class="line">            ans += q.top().first;</span><br><span class="line">            s[q.top().second] = <span class="string">'('</span>;</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%I64d\n%s"</span>, ans, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/3/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有一个长为 $n$ 的括号序列，其中一些位置是问号，每个问号替换成左括号或替换成右括号各有给定的代价，判断是否能够构造出一个合法的括号序列，如果可以，求出最小代价。&lt;/p&gt;
&lt;p&gt;$n\le 5\cdot 10^4$（实际上可以大很多）。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CF512C Fox And Dinner（二分图，最大流）</title>
    <link href="https://ouuan.github.io/CF512C-Fox-And-Dinner%EF%BC%88%E4%BA%8C%E5%88%86%E5%9B%BE%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF512C-Fox-And-Dinner（二分图，最大流）/</id>
    <published>2019-10-15T11:50:54.000Z</published>
    <updated>2019-12-01T10:12:19.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/512/problem/C" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你 $n$ 个整数，需要将它们分成任意个至少包含 $3$ 个数的环，使得每相邻两个数加起来是一个质数。</p><p>判断是否有解，若有解输出任意一组解。</p><p>$3\le n\le 200$, 数的范围是 $[2,10^4]$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，由于每个数都大于等于 $2$，加起来是质数的必要条件是一奇一偶。</p><p>所以，如果把数看成点，相加得到质数看成边，就得到了一张二分图。</p><p>而题目的要求可以看作是每个点都匹配两个点。因为所有点度数都为 $2$ 的简单无向图一定是一个至少包含 $3$ 个点的环。</p><p>所以可以这样建图：源点到奇数，容量为 $2$；奇数到与其之和为质数的偶数，容量为 $1$；偶数到汇点，容量为 $2$。</p><p>如果最大流为 $n$ 就有解。输出方案就和普通的网络流输出方案差不多（可以参考代码）。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], p[W], tot;</span><br><span class="line"><span class="keyword">bool</span> np[W];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flow</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> s = N - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> t = N - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> head[N], nxt[N * N], to[N * N], edge[N * N], cnt;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">int</span> dep[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        nxt[++cnt] = head[u];</span><br><span class="line">        head[u] = cnt;</span><br><span class="line">        to[cnt] = v;</span><br><span class="line">        edge[cnt] = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dep, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">        dep[s] = <span class="number">0</span>;</span><br><span class="line">        q.push(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = to[i];</span><br><span class="line">                <span class="keyword">int</span> w = edge[i];</span><br><span class="line">                <span class="keyword">if</span> (w &gt; <span class="number">0</span> &amp;&amp; dep[v] == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ~dep[t];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u] == dep[t]) <span class="keyword">return</span> u == t ? flow : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i &amp;&amp; flow - out; i = nxt[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = to[i];</span><br><span class="line">            <span class="keyword">int</span> w = edge[i];</span><br><span class="line">            <span class="keyword">if</span> (dep[v] == dep[u] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> f = dfs(v, min(flow - out, w));</span><br><span class="line">                edge[i] -= f;</span><br><span class="line">                edge[i ^ <span class="number">1</span>] += f;</span><br><span class="line">                out += f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (bfs()) out += dfs(s, N);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>) Add(s, i, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> Add(i, t, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(a[i] &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (np[a[i] + a[j]]) <span class="keyword">continue</span>;</span><br><span class="line">                Add(i, j, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cycle(<span class="keyword">int</span> u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out(<span class="number">1</span>, u);</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = nxt[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v = to[i];</span><br><span class="line">                <span class="keyword">int</span> w = edge[i];</span><br><span class="line">                <span class="keyword">if</span> (((a[u] &amp; <span class="number">1</span>) ^ (w &gt; <span class="number">0</span>)) &amp;&amp; v &lt;= n &amp;&amp; !vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = flag = <span class="literal">true</span>;</span><br><span class="line">                    out.push_back(v);</span><br><span class="line">                    u = v;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) ans.push_back(cycle(i));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i].size());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans[i].size(); ++j) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i][j]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; flow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; W; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!np[i]) p[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt; W; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            np[i * p[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line"></span><br><span class="line">    flow.init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flow.maxFlow() != n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flow.output();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/512/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你 $n$ 个整数，需要将它们分成任意个至少包含 $3$ 个数的环，使得每相邻两个数加起来是一个质数。&lt;/p&gt;
&lt;p&gt;判断是否有解，若有解输出任意一组解。&lt;/p&gt;
&lt;p&gt;$3\le n\le 200$, 数的范围是 $[2,10^4]$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="网络流" scheme="https://ouuan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://ouuan.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>CF508D Tanya and Password（欧拉路径）</title>
    <link href="https://ouuan.github.io/CF508D-Tanya-and-Password%EF%BC%88%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF508D-Tanya-and-Password（欧拉路径）/</id>
    <published>2019-10-15T07:01:00.000Z</published>
    <updated>2019-12-01T10:12:19.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/508/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有一个字符串 $S[1..n+2]$，告诉你 $\forall 1\le i\le n, S[i..i+2]$（所有长为 $3$ 的子串），求任意一个满足条件的 $S$。</p><p>$1\le n\le 2\cdot 10^5$，字符集为大小写字母 + 数字。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>容易想到需要建图。</p><p>但是，如果把每个长为 $3$ 的子串看成点，前后缀匹配看成边，就做不下去了。</p><p>正确做法是把每个长为 $2$ 的子串看成点，长为 $3$ 的子串看成边。这样原问题就转化成了求有向图的欧拉路径。（不会这个的话建议自行搜索一下。）</p><p>如果每次 dfs 同一个点时都遍历所有出边，度数比较大就会挂。使用 vector 存边的话可以 <code>pop_back()</code> 或者记录一下已经遍历到了哪一条边，使用前向星的话可以像当前弧优化那样修改 <code>head</code>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">62</span> * <span class="number">62</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], nxt[N], to[N], cnt;</span><br><span class="line"><span class="keyword">int</span> n, ind[N], outd[N], tot;</span><br><span class="line"><span class="keyword">char</span> s[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charToInt</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isdigit</span>(x)) <span class="keyword">return</span> x - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">islower</span>(x)) <span class="keyword">return</span> x - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> x - <span class="string">'A'</span> + <span class="number">36</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">intToChar</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">10</span>) <span class="keyword">return</span> x + <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">36</span>) <span class="keyword">return</span> x - <span class="number">10</span> + <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">return</span> x - <span class="number">36</span> + <span class="string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wordToInt</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> charToInt(x) * <span class="number">62</span> + charToInt(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    to[cnt] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = head[u]; i; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        i = nxt[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[--tot] = intToChar(u % <span class="number">62</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="keyword">int</span> u = wordToInt(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> v = wordToInt(s[<span class="number">1</span>], s[<span class="number">2</span>]);</span><br><span class="line">        ++outd[u];</span><br><span class="line">        ++ind[v];</span><br><span class="line">        add(u, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oneMoreIn = <span class="number">0</span>, oneMoreOut = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ind[i] == outd[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (ind[i] == outd[i] + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (oneMoreIn) fail();</span><br><span class="line">            oneMoreIn = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ind[i] + <span class="number">1</span> == outd[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (oneMoreOut) fail();</span><br><span class="line">            oneMoreOut = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> fail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oneMoreOut)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (outd[i])</span><br><span class="line">            &#123;</span><br><span class="line">                oneMoreOut = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tot = n + <span class="number">2</span>;</span><br><span class="line">    dfs(oneMoreOut);</span><br><span class="line">    ans[--tot] = intToChar(oneMoreOut / <span class="number">62</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!tot) <span class="built_in">printf</span>(<span class="string">"YES\n%s"</span>, ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/508/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有一个字符串 $S[1..n+2]$，告诉你 $\forall 1\le i\le n, S[i..i+2]$（所有长为 $3$ 的子串），求任意一个满足条件的 $S$。&lt;/p&gt;
&lt;p&gt;$1\le n\le 2\cdot 10^5$，字符集为大小写字母 + 数字。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="建图" scheme="https://ouuan.github.io/tags/%E5%BB%BA%E5%9B%BE/"/>
    
      <category term="欧拉路径" scheme="https://ouuan.github.io/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>gym102268D Dates（贪心，二分图匹配，线段树）</title>
    <link href="https://ouuan.github.io/gym102268D-Dates%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D%EF%BC%8C%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/gym102268D-Dates（贪心，二分图匹配，线段树）/</id>
    <published>2019-10-11T03:30:32.000Z</published>
    <updated>2019-12-01T10:12:20.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/gym/102268/problem/D" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张二分图：左边 $t$ 个位置，第 $i$ 个位置上有 $a_i$ 个点；右边 $n$ 个带权的点，第 $i$ 个点与位置在 $[l_i, r_i]$ 之间的所有左边的点有连边；匹配权值为匹配中右边点的权值之和；求最大权匹配。</p><p>$1\le n,t\le 3\cdot 10^5$，保证 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>首先，将右边的点按权值从大到小排序，依次加入，看有没有完全匹配，有就选这个点。这样一定是最优的，好像可以用拟阵相关的理论证明，但我不太会..</p><p>于是，问题转化成了如何判定是否存在完全匹配，而霍尔定理恰恰是用来做这件事的——考虑右边的点中被选择的那些，选择其一个子集，判断是否所有子集的邻域（即与其相邻的点构成的集合）大小都比子集本身大。</p><p>如果选择的子集中元素对应的区间的并集不是连续的，霍尔定理的条件成立等价于对于断点两边分别成立，所以只需要考虑子集对应的区间连续的情况。</p><p>又由于 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$，只用考虑子集中的元素本身编号连续的情况。那么，霍尔定理的条件就可以表示为：</p><p>$$<br>\forall 1\le i&lt; j\le n,[i,j]\text{中被选择的右侧点个数}\le [l_i,r_j]\text{中左侧点数量}<br>$$</p><p>如果处理出 $a_{1..t}$ 的前缀和 $pre[i]=\sum_{j=1}^ia_j$，用 $p[i]$ 表示 $[1,i]$ 中被选择的右侧点个数，那么式子就变成了：</p><p>$$<br>\forall1\le i&lt; j\le n, p[j]-p[i-1]\le pre[r_j]-pre[l_i-1]<br>$$</p><p>也就是：</p><p>$$<br>\forall1\le i&lt; j\le n, pre[l_i-1]-p[i-1]\le pre[r_j]-p[j]<br>$$</p><p>所以，可以对每个元素 $i$ 维护 $pre[l_{i+1}-1]-p[i]$ 以及 $pre[r_j]-p[j]$。</p><p>$pre$ 是定值，考虑如何更新 $p$。事实上，往已选择的点中加入一个点，就是把一段后缀的 $p$ 加一。所以可以考虑用线段树维护。</p><p>并且，一段后缀加一（令这段后缀为 $[x..n]$）后，只有 $i&lt; x,j\ge x$ 的数对 $(i,j)$ 对应的大小关系发生改变，事实上只用判断 $i&lt;x$ 的 $pre[l_i-1]-p[i-1]$ 的最大值与 $j\ge x$ 的 $pre[r_j]-p[j]$ 的最小值的大小关系即可，同样可以使用线段树维护。</p><p>另一种判断方法，是在线段树上的每个节点处判断左儿子与右儿子有没有出现不满足霍尔定理条件的情况。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>代码中使用了 <a href="https://github.com/ouuan/segmentTree" target="_blank" rel="noopener">segmenttree.h</a>。</p><h3 id="每次判断前缀与后缀的大小关系"><a href="#每次判断前缀与后缀的大小关系" class="headerlink" title="每次判断前缀与后缀的大小关系"></a>每次判断前缀与后缀的大小关系</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"segmenttree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Girl&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p &gt; y.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mn, mx;</span><br><span class="line">    Value(ll _mn = INF, ll _mx = -INF)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = _mn;</span><br><span class="line">        mx = _mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Value&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Value <span class="title">merge</span><span class="params">(Value x, Value y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value(min(x.mn, y.mn), max(x.mx, y.mx));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;Value, <span class="keyword">int</span>&gt;&amp; u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.val.mx += x;</span><br><span class="line">    u.val.mn += x;</span><br><span class="line">    u.tag += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pre[i] = pre[i - <span class="number">1</span>] + read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].l = read();</span><br><span class="line">        g[i].r = read();</span><br><span class="line">        g[i].p = read();</span><br><span class="line">        g[i].id = i;</span><br><span class="line">        a[i].mn = pre[g[i].r];</span><br><span class="line">        a[i - <span class="number">1</span>].mx = pre[g[i].l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(g + <span class="number">1</span>, g + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    segmentTree&lt;Value, <span class="keyword">int</span>, merge, update&gt; t(<span class="number">0</span>, n + <span class="number">1</span>, a, Value());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.query(<span class="number">0</span>, g[i].id).mx &gt;= t.query(g[i].id, n + <span class="number">1</span>).mn) <span class="keyword">continue</span>;</span><br><span class="line">        t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        ans += g[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在线段树的每个节点处判断"><a href="#在线段树的每个节点处判断" class="headerlink" title="在线段树的每个节点处判断"></a>在线段树的每个节点处判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"segmenttree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) out = out * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll pre[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Girl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, p, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Girl&amp; y) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p &gt; y.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; g[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll mn, mx;</span><br><span class="line">    <span class="keyword">bool</span> inv;</span><br><span class="line">    Value(ll _mn = INF, ll _mx = -INF, <span class="keyword">int</span> _inv = <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mn = _mn;</span><br><span class="line">        mx = _mx;</span><br><span class="line">        inv = _inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Value&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function">Value <span class="title">merge</span><span class="params">(Value x, Value y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value(min(x.mn, y.mn), max(x.mx, y.mx), x.inv || y.inv || x.mx &gt; y.mn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segmentTreeNode&lt;Value, <span class="keyword">int</span>&gt;&amp; u, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u.val.mx += x;</span><br><span class="line">    u.val.mn += x;</span><br><span class="line">    u.tag += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    m = read();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pre[i] = pre[i - <span class="number">1</span>] + read();</span><br><span class="line"></span><br><span class="line">    a.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].l = read();</span><br><span class="line">        g[i].r = read();</span><br><span class="line">        g[i].p = read();</span><br><span class="line">        g[i].id = i;</span><br><span class="line">        a[i].mn = pre[g[i].r];</span><br><span class="line">        a[i - <span class="number">1</span>].mx = pre[g[i].l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(g + <span class="number">1</span>, g + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    segmentTree&lt;Value, <span class="keyword">int</span>, merge, update&gt; t(<span class="number">0</span>, n + <span class="number">1</span>, a, Value());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.query(<span class="number">0</span>, n + <span class="number">1</span>).inv) t.modify(g[i].id, n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> ans += g[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102268/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张二分图：左边 $t$ 个位置，第 $i$ 个位置上有 $a_i$ 个点；右边 $n$ 个带权的点，第 $i$ 个点与位置在 $[l_i, r_i]$ 之间的所有左边的点有连边；匹配权值为匹配中右边点的权值之和；求最大权匹配。&lt;/p&gt;
&lt;p&gt;$1\le n,t\le 3\cdot 10^5$，保证 $l_i\le l_{i+1}$, $r_i\le r_{i+1}$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="二分图" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="二分图匹配" scheme="https://ouuan.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>CF878E Numbers on the blackboard（贪心，并查集）</title>
    <link href="https://ouuan.github.io/CF878E-Numbers-on-the-blackboard%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF878E-Numbers-on-the-blackboard（贪心，并查集）/</id>
    <published>2019-10-08T12:49:18.000Z</published>
    <updated>2019-12-01T10:12:19.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://codeforces.com/contest/878/problem/E" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>对于一个数列，每次操作可以将相邻的两个数 $x$ 和 $y$ 合并成一个数 $x+2y$，定义一个数列的权值为进行操作直至只剩一个数能得到的最大值。</p><p>多组询问，每次给定一个区间，求这个区间的权值。</p><p>数列值域 $-10^9\sim10^9$，数列长度和询问个数不超过 $10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>先不考虑多组询问。</p><p>经过（并不）简单的推理，可以发现，设数列 $a_{1..n}$ 的权值为 $\sum_{i=1}^na_i2^{k_i}$，那么 $k_1=0$, $1\le k_i\le k_{i-1}+1(i\ge 2)$。</p><p>那么，最优方案中，$k_{2..n}$ 一定是一块一块从 $1$ 开始严格递增的。</p><p>如果我们已经知道了一个数列 $k_i$ 的构成，这时要在其末端加入一个数，那么可以得到贪心策略：</p><ol><li>若加入的数是正数，与前一块合并。若合并后整块构成的等比数列之和仍为正数，继续合并。</li><li>否则结束合并过程。</li></ol><p>这个合并的过程可以用并查集维护。</p><p>问题在于，如何判断一块的正负。可以对每块维护它的大小（块中的第 $i$ 个数与 $2^i$ 的乘积之和），合并时更新。但这样做可能会溢出，但可以发现，一旦一块的大小达到 $10^9$，一定会一直合并到最前面，所以大于 $10^9$ 的都可以视作 $10^9$；一旦前一块的长度超过 $30$ 且当前块大小为正，也一定会一直合并到最前面，也可以视作 $10^9$。</p><p>接下来考虑如何回答询问。</p><p>把询问离线下来，右端点相同的询问一起处理。处理一个询问之前先计算出 $a_{1..r}$ 的块，若 $l=1$ 答案就是所有块大小的和，否则的话答案会是若干块的答案之和加上一个块的后缀。因为取一个块的后缀，断点所在块一定不会分开（一块的真后缀一定为正），后面的块也不会合并到前面去。处理出模意义下块答案的前缀和，以及 $presum_i=\sum_{j=1}^i2^{i-1}a_i$，就可以快速回答询问了。</p><p>还有一个小问题：只有第一块的系数是从 $2^0=1$ 开始的。由于计算时第一块一定是那个后缀，计算后缀答案时从 $1$ 开始，计算整块答案时从 $2$ 开始即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[N], presum[N], inv2[N], f[N], len[N], sum[N], preans[N], out[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == f[x] ? x : f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ll) (presum[r] - presum[l - <span class="number">1</span>] + mod) * inv2[l - <span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    inv2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, two = <span class="number">1</span>; i &lt;= n; ++i, two = two * <span class="number">2</span> % mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        inv2[i] = (ll) inv2[i - <span class="number">1</span>] * (mod + <span class="number">1</span>) / <span class="number">2</span> % mod;</span><br><span class="line">        presum[i] = (presum[i - <span class="number">1</span>] + (ll) two * a[i] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        q[r].push_back(pii(l, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        len[i] = <span class="number">1</span>;</span><br><span class="line">        sum[i] = a[i];</span><br><span class="line">        <span class="keyword">while</span> (find(i) &gt; <span class="number">1</span> &amp;&amp; sum[find(i)] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = find(i);</span><br><span class="line">            <span class="keyword">int</span> y = find(x - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (len[y] &gt;= <span class="number">30</span> || (((ll) sum[x]) &lt;&lt; len[y]) + sum[y] &gt;= <span class="number">1e9</span>) sum[y] = <span class="number">1e9</span>;</span><br><span class="line">            <span class="keyword">else</span> sum[y] += sum[x] &lt;&lt; len[y];</span><br><span class="line">            len[y] += len[x];</span><br><span class="line">            f[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        preans[find(i)] = (preans[find(find(i) - <span class="number">1</span>)] + <span class="number">2l</span>l * calc(find(i), i)) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q[i].size(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = q[i][j].first;</span><br><span class="line">            <span class="keyword">int</span> id = q[i][j].second;</span><br><span class="line">            out[id] = (<span class="number">0l</span>l + preans[find(i)] - preans[find(l)] + mod + calc(l, find(l) + len[find(l)] - <span class="number">1</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, out[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/878/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;对于一个数列，每次操作可以将相邻的两个数 $x$ 和 $y$ 合并成一个数 $x+2y$，定义一个数列的权值为进行操作直至只剩一个数能得到的最大值。&lt;/p&gt;
&lt;p&gt;多组询问，每次给定一个区间，求这个区间的权值。&lt;/p&gt;
&lt;p&gt;数列值域 $-10^9\sim10^9$，数列长度和询问个数不超过 $10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="并查集" scheme="https://ouuan.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="离线算法" scheme="https://ouuan.github.io/tags/%E7%A6%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>UOJ 自动备份</title>
    <link href="https://ouuan.github.io/UOJ-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <id>https://ouuan.github.io/UOJ-自动备份/</id>
    <published>2019-09-27T04:01:05.000Z</published>
    <updated>2019-12-01T10:12:20.052Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个刚刚上线两周就回滚了无数次数据的 OJ，备份自然是很重要的~</p><a id="more"></a><h2 id="一些脚本"><a href="#一些脚本" class="headerlink" title="一些脚本"></a>一些脚本</h2><h3 id="commit-sh"><a href="#commit-sh" class="headerlink" title="commit.sh"></a>commit.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker images --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.CreatedSince&#125;&#125;"</span> | grep <span class="string">'day'</span> | cut -d : -f 1 | xargs docker image rm</span><br></pre></td></tr></table></figure><p>commit，然后删掉比较久远（在 CREATED 中显示为 XX days ago）的镜像节约空间（不然在自动备份下过不了几天硬盘就爆了）。</p><h3 id="save-sh"><a href="#save-sh" class="headerlink" title="save.sh"></a>save.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker save -o /home/ouuan/uoj/uoj_backup_<span class="variable">$&#123;time&#125;</span>.tar uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker images --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.CreatedSince&#125;&#125;"</span> | grep <span class="string">'day'</span> | cut -d : -f 1 | xargs docker image rm</span><br></pre></td></tr></table></figure><p>先 commit，然后存为 tar。即使系统挂了，也能从文件恢复。</p><h3 id="new-sh"><a href="#new-sh" class="headerlink" title="new.sh"></a>new.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">time=$(date <span class="string">"+%Y%m%d%H%M%S"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker commit uoj uoj_backup_<span class="variable">$&#123;time&#125;</span></span><br><span class="line">docker stop uoj</span><br><span class="line">docker rm uoj</span><br><span class="line">docker image ls</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please enter the version (after uoj_backup_): "</span></span><br><span class="line"><span class="built_in">read</span> version</span><br><span class="line">docker run --name uoj -dit -p 23333:80 -p 3690:3690 --<span class="built_in">cap</span>-add SYS_PTRACE <span class="string">"uoj_backup_<span class="variable">$version</span>"</span></span><br></pre></td></tr></table></figure><p>便捷地从镜像创建新容器，在删除当前容器之前 commit。</p><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>输入命令 <code>sudo crontab -e</code>。</p><p>（可能会先让你选择一个文本编辑器）然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30 * * * * bash path/commit.sh</span><br><span class="line">0 22 * * * bash path/save.sh</span><br></pre></td></tr></table></figure><p><code>path</code> 就是放脚本文件的路径。</p><p>前面五项分别是 分钟 / 小时 / 日期 / 月份 / 星期，在符合条件时就会执行后面的命令。</p><p>上面的例子会在 <code>xx:30</code> 时 commit 一次，在每天晚上 10 点 save 一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个刚刚上线两周就回滚了无数次数据的 OJ，备份自然是很重要的~&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Hinata Online Judge 的搭建</title>
    <link href="https://ouuan.github.io/Hinata-Online-Judge-%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://ouuan.github.io/Hinata-Online-Judge-的搭建/</id>
    <published>2019-09-21T13:58:04.000Z</published>
    <updated>2019-12-01T10:12:19.692Z</updated>
    
    <content type="html"><![CDATA[<p>程序员就是代码重用的艺术家（</p><a id="more"></a><p>这周回到学校，基于 <a href="https://github.com/UniversalOJ/UOJ-System" target="_blank" rel="noopener">社区版 UOJ</a> 搭了一个校内 OJ。</p><p>过程中现在还记得的遇到的问题，是重启后显示 “wrong database”，解决方案是 docker 里运行命令 <code>service mysql restart</code>。</p><p>一周里大部分时间都是在魔改，并且是 <a href="https://github.com/ouuan/Hinata-Online-Judge" target="_blank" rel="noopener">开源</a> 的。</p><p>这几天算是稍微体验了一下程序员的生活。会为精妙的代码重用而惊叹，也会为一个 bug 而苦苦求索。commit 中的两行代码，可能是若干小时搜索的结果，经过了数十次错误的尝试。</p><p>以前我对程序员的印象是「苦力活」，现在稍微有点改变了。诗人给同一个事物起不同的名字，数学家给不同的事物起相同的名字，程序员给不同的需求使用同一个函数。</p><p>回想起来，不到一年前，也就是我开始使用 hexo 博客之前，我还对 web 开发一无所知。只不过现在所会的那些东西都是通过阅读源码 + 需要什么就搜什么学到的，导致有很多不清楚的地方，这也是导致效率低下的重要原因。</p><p>总之，欢迎大家自由选取 Hinata Online Judge 的 <a href="https://github.com/ouuan/Hinata-Online-Judge/issues/1" target="_blank" rel="noopener">feature</a> copy 到自己的 UOJ 里！</p><p>然而代码太不规范了，所以暂时不太准备发 pr…也欢迎大家来帮我规范一下发 pr。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员就是代码重用的艺术家（&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OJ" scheme="https://ouuan.github.io/tags/OJ/"/>
    
      <category term="工程" scheme="https://ouuan.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BJOI2019 删数（贪心，线段树）</title>
    <link href="https://ouuan.github.io/BJOI2019-%E5%88%A0%E6%95%B0%EF%BC%88%E8%B4%AA%E5%BF%83%EF%BC%8C%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>https://ouuan.github.io/BJOI2019-删数（贪心，线段树）/</id>
    <published>2019-09-16T03:11:10.000Z</published>
    <updated>2019-12-01T10:12:19.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/P5324" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://loj.ac/problem/3094" target="_blank" rel="noopener">LOJ</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5528" target="_blank" rel="noopener">BZOJ</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>一个数列是“可删除的”，当且仅当可以通过这种操作将其清空：将数列中等于这个数列长度的数删去。</p><p>如，$[1, 2, 4, 4]$ 是“可删除的”，第一次操作删成 $[1, 2]$，第二次操作删成 $[1]$，第三次操作清空。</p><p>定义一个数列的权值为至少需要进行的单点修改数目，使得这个数列变成“可删除的”。</p><p>现在给你一个数列 $a_{1..n}$，以及 $m$ 次修改操作，你需要在每次修改后回答这个数列的权值。</p><p>修改操作有三种：</p><ol><li>单点修改。</li><li>全局加一。</li><li>全局减一。</li></ol><p>$1\le n,m\le 150000$，数列初始值以及单点修改成的值在 $[1,n]$ 内，但全局修改可能使数列中的元素超过这个范围。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><h3 id="计算数列的权值"><a href="#计算数列的权值" class="headerlink" title="计算数列的权值"></a>计算数列的权值</h3><p>如果将数 $i$ 出现的次数 $cnt[i]$ 看做一个高度为 $cnt[i]$、放在位置 $i$ 的柱子，让所有柱子向左倒，每个位置就会被若干个柱子覆盖。也就是说，$i$ 这个柱子覆盖了 $[i-cnt[i]+1,i]$。</p><p>一个数列是“可删除的”当且仅当 $[1,n]$ 都被恰好覆盖了一次。</p><p>并且，一个数列的权值就是它没被覆盖的位置数量，证明如下：</p><ol><li>这是答案的下界，因为每次单点修改最多覆盖一个新位置。</li><li>这是答案的上界，因为你可以把重复覆盖的换到未覆盖处。</li></ol><h3 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h3><p>全局修改会导致 $cnt$ 以及覆盖数量发生位移，所以可以考虑使用一个标记 $delta$ 来表示现在全局加了多少，那么 $cnt[i]$ 表示 $cnt[i+delta]$，位置 $i$ 被覆盖的次数被记录在 $i-delta$ 处，$a[i]$ 表示 $a_i-delta$。</p><p>需要特别注意的是，全局加时需要减去原来位置 $n$ 的贡献，因为它们来到 $n+1$ 后必定会是累赘，全局减时要再加回来。但不需要特殊处理位置 $1$ 的贡献，因为覆盖是向左的，查询时只会查询 $[1,n]$ 的覆盖次数，小于 $1$ 的位置对答案没有影响。</p><p>可以用线段树维护覆盖次数。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>使用一个线段树来维护覆盖次数，它支持区间加减、区间查询最小值及其出现次数。</p><p>下面是实现的细节。（代码中所有 $cnt$ 的下标都要加上 $m$ 避免负数下标。）</p><h3 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h3><p>首先处理原来的 $a_p$。</p><p>先判断 $a_p$ 是否小于等于 $n$，只有 $a_p\le n$ 时才会有贡献，也就是说，当 $a[p]+delta\le n$ 时需要在线段树上 $a[p]-cnt[a[p]]+1$ 处单点减一。</p><p>然后将 $cnt[a[p]]$ 减一。</p><p>接着处理新增的 $x$。</p><p>$x$ 必定在 $[1,n]$ 内，所以一定需要在线段树上 $x-cnt[x-delta]-delta$ 处单点加一。</p><p>然后将 $cnt[x-delta]$ 加一。</p><p>最后将 $a[p]$ 修改为 $x-delta$。</p><h3 id="全局加"><a href="#全局加" class="headerlink" title="全局加"></a>全局加</h3><p>需要减去位置 $n$ 的贡献：$[n-cnt[n-delta]+1-delta,n-delta]$ 区间减一。</p><p>然后将 $delta$ 加一。</p><h3 id="全局减"><a href="#全局减" class="headerlink" title="全局减"></a>全局减</h3><p>先将 $delta$ 减一。</p><p>然后加上位置 $n$ 的贡献：$[n-cnt[n-delta]+1-delta,n-delta]$ 区间加一。</p><h3 id="查询答案"><a href="#查询答案" class="headerlink" title="查询答案"></a>查询答案</h3><p>查询 $[1-delta,n-delta]$ 的最小值及出现次数。</p><p>若最小值不为 $0$ 则答案为 $0$。</p><p>否则答案为最小值的出现次数。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150010</span>;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Min</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, cnt;</span><br><span class="line">    Min(<span class="keyword">int</span> _val = <span class="number">0</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>): val(_val), cnt(_cnt) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Min <span class="title">merge</span><span class="params">(Min a, Min b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.val &lt; b.val) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (b.val &lt; a.val) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">return</span> Min(a.val, a.cnt + b.cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (cur &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (cur &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line">    </span><br><span class="line">    Min mn[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mn[cur] = merge(mn[ls], mn[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mn[cur].val += x;</span><br><span class="line">        tag[cur] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        add(ls, tag[cur]);</span><br><span class="line">        add(rs, tag[cur]);</span><br><span class="line">        tag[cur] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r - <span class="number">1</span>) mn[cur] = Min(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            build(ls, l, mid);</span><br><span class="line">            build(rs, mid, r);</span><br><span class="line">            pushup(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) add(cur, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pushdown(cur);</span><br><span class="line">            add(ls, l, mid, L, R, x);</span><br><span class="line">            add(rs, mid, r, L, R, x);</span><br><span class="line">            pushup(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Min <span class="title">min</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= R || r &lt;= L) <span class="keyword">return</span> Min(N, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> mn[cur];</span><br><span class="line">        pushdown(cur);</span><br><span class="line">        <span class="keyword">return</span> merge(min(ls, l, mid, L, R), min(rs, mid, r, L, R));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, delta, a[N], cnt[N * <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        ++cnt[a[i] + m];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ll = <span class="number">1</span> - m - n, rr = m + n + <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    t.build(<span class="number">1</span>, ll, rr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t.add(<span class="number">1</span>, ll, rr, i - cnt[i + m] + <span class="number">1</span>, i + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                --delta;</span><br><span class="line">                t.add(<span class="number">1</span>, ll, rr, n + <span class="number">1</span> - cnt[n - delta + m] - delta, n - delta + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                t.add(<span class="number">1</span>, ll, rr, n + <span class="number">1</span> - cnt[n - delta + m] - delta, n - delta + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">                ++delta;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[p] + delta &lt;= n) t.add(<span class="number">1</span>, ll, rr, a[p] - cnt[a[p] + m] + <span class="number">1</span>, a[p] - cnt[a[p] + m] + <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">            --cnt[a[p] + m];</span><br><span class="line">            t.add(<span class="number">1</span>, ll, rr, x - cnt[x - delta + m] - delta, x - cnt[x - delta + m] - delta + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            ++cnt[x - delta + m];</span><br><span class="line">            a[p] = x - delta;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Min res = t.min(<span class="number">1</span>, ll, rr, <span class="number">1</span> - delta, n - delta + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (res.val &gt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res.cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P5324&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3094&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=5528&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;一个数列是“可删除的”，当且仅当可以通过这种操作将其清空：将数列中等于这个数列长度的数删去。&lt;/p&gt;
&lt;p&gt;如，$[1, 2, 4, 4]$ 是“可删除的”，第一次操作删成 $[1, 2]$，第二次操作删成 $[1]$，第三次操作清空。&lt;/p&gt;
&lt;p&gt;定义一个数列的权值为至少需要进行的单点修改数目，使得这个数列变成“可删除的”。&lt;/p&gt;
&lt;p&gt;现在给你一个数列 $a_{1..n}$，以及 $m$ 次修改操作，你需要在每次修改后回答这个数列的权值。&lt;/p&gt;
&lt;p&gt;修改操作有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单点修改。&lt;/li&gt;
&lt;li&gt;全局加一。&lt;/li&gt;
&lt;li&gt;全局减一。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$1\le n,m\le 150000$，数列初始值以及单点修改成的值在 $[1,n]$ 内，但全局修改可能使数列中的元素超过这个范围。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="https://ouuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://ouuan.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF1209F Koala and Notebook（BFS，最短路）</title>
    <link href="https://ouuan.github.io/CF1209F-Koala-and-Notebook%EF%BC%88BFS%EF%BC%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/"/>
    <id>https://ouuan.github.io/CF1209F-Koala-and-Notebook（BFS，最短路）/</id>
    <published>2019-09-16T00:58:32.000Z</published>
    <updated>2019-12-01T10:12:19.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://codeforces.com/contest/1209/problem/F" target="_blank" rel="noopener">CF</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一张 $n$ 个点 $m$ 条边的无向连通图，一条路径的权值是路径上的边的编号（十进制）顺次连接而成的数字。求 $1$ 到每个点的最短路，<strong>输出</strong> 对 $10^9+7$ 取模。</p><p>$2\le n\le10^5$, $n-1\le m\le10^5$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>数字越长就越大，所以转化成优先长度短，其次字典序小。</p><p>把每条边拆成位数条边（如 $(u, v, 718)$ 拆成 $(u, x, 7)$, $(x, y, 1)$, $(y, v, 8)$, $(v, x, 7)$, $(y, u, 8)$），这样的话长度的边权就全是一，可以用 BFS 解决。</p><p>如何使字典序最小呢？容易想到优先遍历边权（拆边后全是一位数）小的边，但是，如果两个点的最短路相同，这样做就会导致错误。（如：$dis[u]=dis[v]=233$，$u$ 在队列里在 $v$ 的前面，$(u, x, 3)$ 和 $(v, x, 2)$ 这两条边都存在，$dis[x]$ 就会被错误地设为 $2333$，而它应当是 $2332$。）</p><p>正确的做法是将最短路相同的点绑在一起放入队列，实现可以使用 <code>vector</code>。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot, dis[N * <span class="number">5</span>], digit[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N * <span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    tot = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ww = <span class="number">1</span>; ww &lt;= m; ++ww)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w = ww;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (w &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g[u][w].push_back(v);</span><br><span class="line">            g[v][w].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 拆边</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = ++tot;</span><br><span class="line">            <span class="keyword">int</span> r = l;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (w)</span><br><span class="line">            &#123;</span><br><span class="line">                digit[++d] = w % <span class="number">10</span>;</span><br><span class="line">                w /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = d - <span class="number">1</span>; i &gt; <span class="number">1</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                g[tot][digit[i]].push_back(tot + <span class="number">1</span>);</span><br><span class="line">                r = ++tot;</span><br><span class="line">            &#125;</span><br><span class="line">            g[u][digit[d]].push_back(l);</span><br><span class="line">            g[r][digit[<span class="number">1</span>]].push_back(u);</span><br><span class="line">            g[v][digit[d]].push_back(l);</span><br><span class="line">            g[r][digit[<span class="number">1</span>]].push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    q.push(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt; <span class="comment">// nxt 里存的是最短路相同的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> u : vec)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dis[v] == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dis[v] = (dis[u] * <span class="number">10l</span>l + i) % mod;</span><br><span class="line">                        nxt.push_back(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!nxt.empty()) q.push(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1209/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一张 $n$ 个点 $m$ 条边的无向连通图，一条路径的权值是路径上的边的编号（十进制）顺次连接而成的数字。求 $1$ 到每个点的最短路，&lt;strong&gt;输出&lt;/strong&gt; 对 $10^9+7$ 取模。&lt;/p&gt;
&lt;p&gt;$2\le n\le10^5$, $n-1\le m\le10^5$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="图论" scheme="https://ouuan.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://ouuan.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="BFS" scheme="https://ouuan.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LG4707 重返现世（扩展 min-max 容斥）</title>
    <link href="https://ouuan.github.io/LG4707-%E9%87%8D%E8%BF%94%E7%8E%B0%E4%B8%96%EF%BC%88%E6%89%A9%E5%B1%95-min-max-%E5%AE%B9%E6%96%A5%EF%BC%89/"/>
    <id>https://ouuan.github.io/LG4707-重返现世（扩展-min-max-容斥）/</id>
    <published>2019-09-11T11:28:03.000Z</published>
    <updated>2019-12-04T18:50:24.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.luogu.org/problem/P4707" target="_blank" rel="noopener">洛谷</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>有 $n$ 种颜色，每秒会出现一种颜色，第 $i$ 种颜色出现概率为 $\frac{p_i}m$，其中 $m=\sum_{i=1}^np_i$，求共出现 $k$ 种颜色的期望用时，对 $998244353$ 取模。</p><p>$1\le k\le n\le 1000$，$m\le10000$，$k\ge n-10$。</p><a id="more"></a><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><h3 id="扩展-min-max-容斥"><a href="#扩展-min-max-容斥" class="headerlink" title="扩展 min-max 容斥"></a>扩展 min-max 容斥</h3><p>$$<br>k\operatorname{-thmax}(S)=\sum\limits_{T\subseteq S}[T\ne\varnothing] (-1)^{|T|-k}\binom{|T|-1}{k-1}\min(T)<br>$$</p><p>其中 $k\operatorname{-thmax}(S)$ 表示 $S$ 这个集合的第 $k$ 大元素，$\min(T)$ 表示 $T$ 这个集合中最小的元素。</p><p>证明可以使用二项式反演，不会二项式反演也记不住式子的话，考场现推可以设  $k\operatorname{-thmax}(S)=\sum_{T\subseteq S}[T\ne\varnothing]f(|T|)\min(T)$ 然后算。</p><p>这个式子还可以推广到期望，“第 $k$ 大的期望”意思是 $\sum_xx\cdot p(x=k\operatorname{-thmax}(S))$。（$p(event)$ 表示事件 $event$ 发生的概率。）</p><h3 id="重返现世"><a href="#重返现世" class="headerlink" title="重返现世"></a>重返现世</h3><p>下文中用 $K$ 代表 $n-k+1$。</p><p>答案就是颜色出现时间的第 $K$ 大的期望。<br>$$<br>ans = \sum\limits_{T\subseteq S}[T\ne\varnothing] (-1)^{|T|-K}\binom{|T|-1}{K-1}\frac m{sum(T)}<br>$$<br>其中 $sum(T)$ 表示 $\sum_{i\in T}p_i$，$\min(T)=\frac{m}{sum(T)}$ 可以这样理解：计算 $T$ 中元素最早出现时间的期望，可以将 $T$ 中所有颜色绑在一起，出现概率就是 $\frac{sum(T)}m$，期望出现时间就是其逆元。</p><p>接下来是一个神奇的 dp。</p><p>令 $f_{i,j,k}$ 表示 $\sum_{T\subseteq[1,i]}[sum(T)=j\ne0] (-1)^{|T|-k}\binom{|T|-1}{k-1}$。（这里的 $k$ 与题目输入中的 $k$ 不同。）</p><p>考虑转移，分两种情况：</p><ol><li>$T$ 不包含 $i$；</li><li>$T$ 包含 $i$。</li></ol><p>第一种情况显然是 $f_{i-1,j,k}$。</p><p>在 $j&gt;p_i$ 时，将 $i$ 这个元素从 $T$ 中拿出来，剩下的部分依然不是空集，所以第二种情况的式子是 $\sum_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|+1-k}\binom{|T|}{k-1}$。</p><p>尝试从之前的状态转移，写出两个式子：<br>$$<br>f_{i-1,j-p_i,k-1}=\sum\limits_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|+1-k}\binom{|T|-1}{k-2}<br>$$</p><p>$$<br>f_{i-1,j-p_i,k}=\sum\limits_{T\subseteq[1,i-1]}[sum(T)=j-p_i] (-1)^{|T|-k}\binom{|T|-1}{k-1}<br>$$</p><p>发现最后的组合数部分就是杨辉三角中计算组合数的方法（$\binom{x}{y}=\binom{x-1}{y-1}+\binom{x-1}{y}$），而前面只是正负号的变化。</p><p>也就是说，$j&gt;p_i$ 时，第二部分的值为 $f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}$。</p><p>为什么要强调 $j&gt;p_i$ 呢？因为枚举 $T\subseteq S$ 时是 <strong>不包含空集</strong> 的。所以，当 $j=p_i$ 时，第二种情况需要特殊计算，直接将 $T=\{i\}$ 代入定义式，得到第二部分的值为 $(-1)^{1-k}\binom{0}{k-1}$，也就是 $k=1$ 时为 $1$，否则为 $0$。</p><p>总结一下：$f_{i,j,k}=\begin{cases}f_{i-1,j,k}&amp;(j&lt; p_i)\\f_{i-1,j,k}+[k=1]&amp;(j=p_i)\\f_{i-1,j,k}+f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}&amp;(j&gt;p_i)\end{cases}$</p><p>dp 的边界情况是什么？其实除了 $i\ge 1,1\le j\le m,1\le k\le i$（当然这些情况里也有很多 $0$），其它情况都可以由定义计算得到是 $0$。</p><p>最后的答案就是 $\sum_{i=1}^mf_{n,i,K}\frac{m}{i}$。</p><p>需要用滚动数组优化空间。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], f[M][K], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = m; s &gt; p[i]; --s)</span><br><span class="line">            &#123;</span><br><span class="line">                f[s][j] = (<span class="number">0l</span>l + f[s][j] + f[s - p[i]][j - <span class="number">1</span>] - f[s - p[i]][j] + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[p[i]][<span class="number">1</span>] = (f[p[i]][<span class="number">1</span>] + <span class="number">1</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = (ans + (ll) f[i][k] * m % mod * qpow(i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果枚举包含空集"><a href="#如果枚举包含空集" class="headerlink" title="如果枚举包含空集"></a>如果枚举包含空集</h2><p>如果我们将 dp 状态定义成枚举包含空集，也是可以算的。</p><p>令 $f_{i,j,k}$ 表示 $\sum_{T\subseteq[1,i]}[sum(T)=j] (-1)^{|T|-k}\binom{|T|-1}{k-1}$。</p><p>还是分成不包含 $i$ 和包含 $i$ 两部分。</p><p>第一部分依然是 $f_{i-1,j,k}$。</p><p>第二部分不需要分 $j$ 与 $p_i$ 的关系讨论，直接 $f_{i-1,j,k}+f_{i-1,j-p_i,k-1}-f_{i-1,j-p_i,k}$。</p><p>但是边界情况需要注意：</p><p>$$<br>f_{i,0,k}<br>=(-1)^{-k}\binom{-1}{k-1}=<br>\begin{cases}<br>0&amp;k=0\\<br>-1&amp;otherwise<br>\end{cases}<br>$$</p><p>（注：$\binom{-1}{k-1}$ 可以由广义组合数 $\binom{x}{y}=\frac{x(x-1)\cdots(x-y+1)}{y!}$得到。）</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p[N], f[M][K], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) out = (ll) out * x % mod;</span><br><span class="line">        x = (ll) x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k = n - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) f[<span class="number">0</span>][i] = mod - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = m; s &gt;= p[i]; --s)</span><br><span class="line">            &#123;</span><br><span class="line">                f[s][j] = (<span class="number">0l</span>l + f[s][j] + f[s - p[i]][j - <span class="number">1</span>] - f[s - p[i]][j] + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = (ans + (ll) f[i][k] * m % mod * qpow(i, mod - <span class="number">2</span>)) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem/P4707&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;有 $n$ 种颜色，每秒会出现一种颜色，第 $i$ 种颜色出现概率为 $\frac{p_i}m$，其中 $m=\sum_{i=1}^np_i$，求共出现 $k$ 种颜色的期望用时，对 $998244353$ 取模。&lt;/p&gt;
&lt;p&gt;$1\le k\le n\le 1000$，$m\le10000$，$k\ge n-10$。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥原理" scheme="https://ouuan.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="计数dp" scheme="https://ouuan.github.io/tags/%E8%AE%A1%E6%95%B0dp/"/>
    
      <category term="概率期望" scheme="https://ouuan.github.io/tags/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="扩展 min-max 容斥" scheme="https://ouuan.github.io/tags/%E6%89%A9%E5%B1%95-min-max-%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
</feed>
