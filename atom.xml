<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-01-20T03:08:19.707Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ouuanの漫评</title>
    <link href="https://ouuan.github.io/ouuan%E3%81%AE%E6%BC%AB%E8%AF%84/"/>
    <id>https://ouuan.github.io/ouuanの漫评/</id>
    <published>2019-01-19T10:30:22.000Z</published>
    <updated>2019-01-20T03:08:19.707Z</updated>
    
    <content type="html"><![CDATA[<p>从看的第一部番——LL起，我在看完一部番后，如果有什么感想，就会当天在qq空间发一段说说。我虽然看番少，但一般都会看一些令人思考、有所收获的番，几年下来也写了有一些了。偶尔自己翻看也不太方便，现在也有了这个博客，就整理在这好了。其实也不是完全的漫评，看完一部番，有什么想说的，写下来，大约就是如此。</p><a id="more"></a><p>大约按时间降序吧。全部首发于我的qq空间。</p><p>如果是至少一年前看的番，有了新的感想大约会补在后面吧..</p><p>整理完才发现截至第一版发布只写了六部番..实际上，真正在我身上留下了不可磨灭的痕迹的，还是key和LL吧。</p><h1 id="Kanon"><a href="#Kanon" class="headerlink" title="Kanon"></a><a href="https://www.bilibili.com/bangumi/media/md1375" target="_blank" rel="noopener">Kanon</a></h1><h2 id="2019-1-20"><a href="#2019-1-20" class="headerlink" title="2019.1.20"></a>2019.1.20</h2><img src="/ouuanの漫评/kanon.jpg"><blockquote><p>kanon（京都版）补完了，然而整个人非常糊..亚由线以及关于梦境的部分基本还没理解，只能先写写前面三条线（就当自己没看过19~24话）的感想了…</p><p>初看的时候感觉满满的CL既视感，还带一点AB。不过，虽然人物之间总能找到互相的影子，讲述的却是不同的故事。</p><p>“Clannad”中有”clan”，而”kanon”的含义，一开始我认为是东映版每话的标题（现在想来改编的动画怎么可能是名字的来源呢…），直到从佐祐理口中得知：“在重复一段旋律的同时，逐渐加入多种优美的和音，就像这样，在乍看起来一成不变的日子里，能渐渐迎来一些改变就好了呢。”的确，昏昏沉沉的名雪总是被祐一咕咕，不到一秒就会同意的秋子阿姨一直分享着秘制的果酱，吃着鲷鱼烧的亚由总是在大街上扑向祐一，说着“啊呜”的真琴总是在半夜来恶作剧，<del>啊哈哈，佐祐理总是不知道</del>，每当夜幕降临就到了去学校探访魔物的时候，中午又会同佐祐理和舞一起吃便当，庭院里总是会有栞的身影……然而一切又在改变着，当真琴用生命换来的奇迹走向尽头，当魔物的活动愈演愈烈，当栞的生日逐渐逼近，当祐一逐渐想起7年前的一切……</p><p>刚看完的时候觉得看不懂是动画改编的原因，后来去网上查了一下，貌似kanon的剧情有着许多的争议，不知道什么时候能去补一补kanon的游戏，随着时间的流驶让雪之小镇的故事在我的心中沉淀，对这段梦境般的故事产生自己的理解，真正地去感悟到“奇跡 約束 再会”。</p></blockquote><div class="nomobile" style="text-align: center; font-size: 36px; width: -webkit-calc(100% - 250px); width: -moz-calc(100% - 250px); width: calc(100% - 250px);"><div style="margin: 1em auto 0 3em; color: #B2B7F2; font-family: 'Times New Roman',serif; font-weight: bold; text-align: right;line-height: 1em; width: 0;">“</div><div style="text-shadow: #000000 1px 2px 5px; color: #F9F9F9; font-size: 18px; font-weight: bold; font-family: 'Microsoft YaHei';line-height: 2.5em;" class="poem"><p>梦 做着一个梦<br>再一次经历着重复的日子 期盼着没有终结的早晨<br>然后 又回到同样的梦境之中<br>又红 又白<br>又寒冷 又温暖 又悲伤<br>然后 再次进入重复的日子<br>很久以前 很多年以前 就已经察觉到了<br>一边在永不终结的梦中徘徊 一边期盼着永不到来的黎明</p></div><div style="color: #B2B7F2; font-size: 36px; font-family: 'Times New Roman',serif; font-weight: bold; text-align: right; line-height: 100%; width: 0; margin: 0 3em 1em auto;">”</div><div style="font-size: small; text-align: right; padding-right: 2em;">——月宫亚由 京都版第23集</div></div><p>窝又搬了萌百的HTML…</p><h1 id="Angel-Beats"><a href="#Angel-Beats" class="headerlink" title="Angel Beats!"></a><a href="http://bangumi.bilibili.com/anime/959" target="_blank" rel="noopener">Angel Beats!</a></h1><h2 id="2018-11-8"><a href="#2018-11-8" class="headerlink" title="2018.11.8"></a>2018.11.8</h2><img src="/ouuanの漫评/Angel_Beats!.jpg"><blockquote><p>（不是爱情片啦！）然而还是放了这三张..CL的主题还是家族的说，AB确实不太是啦，<del>是线段树</del>。</p><p>后天我也要继续去书写那只有一次的、独一无二的、不能交予任何人的、没有任何人能夺走的、无法推诿的、无法忘却的、无法消除的、无法践踏的、无法一笑而过的、无法粉饰的、仅有一次的、属于「我」的人生了。</p></blockquote><h1 id="轻羽飞扬！"><a href="#轻羽飞扬！" class="headerlink" title="轻羽飞扬！"></a><a href="http://bangumi.bilibili.com/anime/24589" target="_blank" rel="noopener">轻羽飞扬！</a></h1><h2 id="2018-10-1"><a href="#2018-10-1" class="headerlink" title="2018.10.1"></a>2018.10.1</h2><img src="/ouuanの漫评/badminton.jpg"><blockquote><p>应该说天下竞赛是一家吧..虽然oi和羽毛球怎么也扯不上关系，但真的很多感同身受的地方.</p><p>想要变得更强，战胜那些凌驾于自己之上的人.为活出真正的自己而不断努力着.虽说同为励志番（某些人认为这是致郁番？我依旧认为这是一部很好的励志番.），但与LL那种为他人的脸上堆满笑容的努力又完全不一样.</p><p>而遭到b站评论区轰击的羽咲黑化..我认为是个警醒吧，在攀登高峰的路途中，更不要迷失了自我.作为一名oier，我还是给这部番打了五星。</p></blockquote><h1 id="欢迎来到实力至上主义的教室"><a href="#欢迎来到实力至上主义的教室" class="headerlink" title="欢迎来到实力至上主义的教室"></a><a href="http://bangumi.bilibili.com/anime/6339" target="_blank" rel="noopener">欢迎来到实力至上主义的教室</a></h1><h2 id="2017-10-4"><a href="#2017-10-4" class="headerlink" title="2017.10.4"></a>2017.10.4</h2><img src="/ouuanの漫评/classroom.jpg"><blockquote><p>可以说是烧脑吗.还是三观崩塌.</p><p>ようこそ実力至上主義の教室へ[12]</p><p>我不管看了几周目，也不管看的是番还是原作，反正只要最后我能看懂这鬼东西，那就没问题了.</p><p>实在不行我就破戒开弹幕或者看漫评（我好像已经看了评论区?!）</p><p>やっぱり、私はナイーブすぎる。</p></blockquote><h2 id="2019-1-19"><a href="#2019-1-19" class="headerlink" title="2019.1.19"></a>2019.1.19</h2><p>在中考左右把当时更了的第八卷看完了，现在已经把最新（已汉化）的第九卷看完了.</p><p><del>感觉这番不会有第二季</del>，后面的内容感觉播不出来鸭…有人将“暴力”作为武器，有人将“伪装”作为武器，有人将“真相”作为武器，还有人将“不合常理”作为武器。当时看来十分烧脑十分装逼的神仙智斗，<del>在如今看来依然十分神仙</del>，但也只不过是作者的笔法而已。只不过在惊叹路哥多么强的同时，还是能看到一些社会上的现状、人性的本质 的。推荐如果想补番的话可以把小说一起看了。</p><h1 id="我们……名字那朵花"><a href="#我们……名字那朵花" class="headerlink" title="我们……名字那朵花"></a><a href="https://www.bilibili.com/bangumi/media/md835" target="_blank" rel="noopener"><del>我们……名字</del>那朵花</a></h1><h2 id="2017-8-25"><a href="#2017-8-25" class="headerlink" title="2017.8.25"></a>2017.8.25</h2><img src="/ouuanの漫评/anohana.jpg"><blockquote><p>补完あの花<br>.<br>.<br>。<br>.<br>.<br>.<br>我还是去写作业吧</p></blockquote><h2 id="2019-1-19-1"><a href="#2019-1-19-1" class="headerlink" title="2019.1.19"></a>2019.1.19</h2><p>当时写的好像很简短的样子..<del>去写作业的原因看下日期大约就明白了</del></p><p>这六朵花应该是代表剧中的六个人，这6个标点也是，其中“。”代表的是面码，因为已经离去了，所以是空心的。</p><p><del>说起催泪真的没法和key社比</del>，就像我去年的岁末总结里说的一样，稍微有点在意结尾的烟花呢，即使相逢短暂，也要竭尽全力去绽放。</p><h1 id="Clannad"><a href="#Clannad" class="headerlink" title="Clannad"></a><a href="http://bangumi.bilibili.com/anime/1177" target="_blank" rel="noopener">Clannad</a></h1><h2 id="2017-7-31"><a href="#2017-7-31" class="headerlink" title="2017.7.31"></a>2017.7.31</h2><img src="/ouuanの漫评/Clannad.jpg"><blockquote><p>7月就要结束了..但这好像是我从幼儿园大班来第一次不出去旅游的暑假（这也不是我到现在还瞎浪的理由啊喂）</p><p>flag果然倒了.书看了9章.倒是在一个有“亲和力”的网站刷了点题.想着开学前一定看完.然后就想起来了还有个东西叫暑假作业..</p><p>补完cl了.「认真」看完的第二部番.学到了不少东西（吧）.各种各样的情感、轻易地给予幸福又轻易地夺去、用最不可能发生的事描绘出最真实的生活、（下部比上部更加魔幻）……这样说就会想起《兄弟》呢（明明是为了扯上兄弟故意这么说的）.</p><p>看完回想起来确实也没什么特别的，但这，好像又不只是人生吧_(:з」∠)</p></blockquote><h2 id="2019-1-19-2"><a href="#2019-1-19-2" class="headerlink" title="2019.1.19"></a>2019.1.19</h2><p>这个其实是个七月总结？“书”是紫书，只不过当时也没怎么看懂，愣着往后看就是。“有‘亲和力’的网站”主要是指当时洛谷首页有水团，评测姬叫Aqours（还有Wallence，xgjz什么的），数据生成器叫CYaRon…..</p><p>CL至今仍是最喜欢的一部。主题大约是“亲情”。现在想来的话，CL并不是“人生”，而是人生中最温暖、最美好的那一部分吧。CL中并不是没有困难，相反，和“光”相对应的“坂”（困难）也是本作一个重要的主题，然而，即使是在坂道上，也是一起攀登的呢（笑）。</p><h1 id="LoveLive"><a href="#LoveLive" class="headerlink" title="LoveLive!"></a><a href="https://zh.moegirl.org/LoveLive!" target="_blank" rel="noopener">LoveLive!</a></h1><h2 id="2016-2-9"><a href="#2016-2-9" class="headerlink" title="2016.2.9"></a>2016.2.9</h2><img src="/ouuanの漫评/LL.jpg"><blockquote><p>近一年的努力聚成10h的26P，空无一人的大礼堂似乎还在昨天，耳边却回响着无尽的“安可”——五天，让我明白了什么是邪教。</p><p>μ’s music start！</p></blockquote><h2 id="2017-1-25"><a href="#2017-1-25" class="headerlink" title="2017.1.25"></a>2017.1.25</h2><blockquote><p>我那时不懂什么是“邪教”，至今仍是一条咸鱼</p></blockquote><h2 id="2019-1-19-3"><a href="#2019-1-19-3" class="headerlink" title="2019.1.19"></a>2019.1.19</h2><p>感觉好多想说的..可能会略微语无伦次。</p><p>先来吐槽一下自己两年前的“更新”。我那时的意思大约是说，只看过番大约连LL的皮毛都没有触及。我在标题链接中没有给番剧页而是给的萌百链接也是因为这个，虽然很多番都不是原作，然而LL却不是什么“改编”，而是与整个企划融为一体的。而LL这个企划，每个部分都不是完美的，如果缺失了任何一个部分，整个企划也不会是完美的。</p><p>关于LL想说的实在太多太多了..虽然她不是我最喜欢的一部番，也逐渐地在我的生活中越来越淡，却逐渐融入了我的心中。先附上一张final1000天时我的说说吧：</p><img src="/ouuanの漫评/LL1000.jpg"><p>作为入宅番，LL给我带来了太多太多，转眼四年过去了，她在我心中的分量却一直没有减少。或许今后我还会给别人安利key社，努力成为一名优秀的key学家，但我不会给别人安利LL，因为，我想到了如今，已经没有人能再领会到LoveLive!这一词的含义了。我想说的只有：</p><div style="text-align: center;font-size: 300%;"><p><font style="font-family:'Hiragino Mincho ProN','MS Mincho','宋体'"><span lang="ja"><span style="color:#f87910;">み</span> <span style="color:#6aa5ea;">ん</span> <span style="color:#a4a4ad;">な</span> <span style="color:#1966eb;">で</span> <span style="color:#f8d36d;">叶</span> <span style="color:#ee365a;">え</span> <span style="color:#7c5e9b;">た</span> <span style="color:#93db46;">物</span> <span style="color:#ef4995;">語</span></span></font></p></div><div style="text-align: center;font-family: Century Gothic;font-size: 300%;font-weight: 300;"><p>Thanks to you.</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从看的第一部番——LL起，我在看完一部番后，如果有什么感想，就会当天在qq空间发一段说说。我虽然看番少，但一般都会看一些令人思考、有所收获的番，几年下来也写了有一些了。偶尔自己翻看也不太方便，现在也有了这个博客，就整理在这好了。其实也不是完全的漫评，看完一部番，有什么想说的，写下来，大约就是如此。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://ouuan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>UER #8 游记 —— 通信题：打雪仗</title>
    <link href="https://ouuan.github.io/UER-8-%E6%B8%B8%E8%AE%B0-%E2%80%94%E2%80%94-%E9%80%9A%E4%BF%A1%E9%A2%98%EF%BC%9A%E6%89%93%E9%9B%AA%E4%BB%97/"/>
    <id>https://ouuan.github.io/UER-8-游记-——-通信题：打雪仗/</id>
    <published>2018-12-22T15:03:25.000Z</published>
    <updated>2018-12-22T17:19:55.328Z</updated>
    
    <content type="html"><![CDATA[<p>为什么这篇博客又是游记又是题解呢？因为这是我做的第一道通信题！感觉通信题真有意思QAQ.</p><p>T3随便打了打暴力，T2由于没啥时间了感觉rush不出来就没写。（没错这就是这篇“游记”里唯一和通信题无关的部分）</p><p><a href="http://uoj.ac/contest/47/problem/454" target="_blank" rel="noopener">T1题目链接</a></p><p>大意：Alice 有一个长度为 $2n$ 的 $01$ 串 $s_{1..2n}$，Bob 有 $n$ 个下标 $p_{1..n}$，Alice 和 Bob 只能用 $01$ 通信，需要在每人各 $m$ 个 bit 内使 Bob 输出 $s_{p_1..p_n}$ .</p><p>$n=1000, m=1350$</p><a id="more"></a><h1 id="Part-1-通信题"><a href="#Part-1-通信题" class="headerlink" title="Part 1 通信题"></a>Part 1 通信题</h1><blockquote><p>只是说一下我做了这道题后对通信题的理解，可能有误。</p></blockquote><h2 id="赛时：通信题是啥？？？"><a href="#赛时：通信题是啥？？？" class="headerlink" title="赛时：通信题是啥？？？"></a>赛时：通信题是啥？？？</h2><p>作为一个从未做过通信题的选手，遇到这题自然是百度了一下“通信题”。如果你尝试一下，会搜到《移动通信试题库》。</p><p>尝试搜索 “通信题 OI”——OI是什么意思? - 问通信专家；”通信题 CSDN”——通信原理考试题-CSDN下载。</p><p>ok，只能自己看样例程序了。</p><p>于是我比赛的第一个小时就在对着样例代码懵逼中度过了…..</p><p>然后发现我sb了，忘记了一件事：标准输入是会等待输入的！<img src="https://i.loli.net/2018/10/23/5bcead9b66b11.gif" alt=""> 可能是我 OI 题做傻了，以为输入一定要一连串不停地输入…导致我一直没有理解为什么两个程序之间可以来回通信…</p><p>（<del>上面那段话纯属我sb了，请跳过不看</del>）</p><h2 id="通信题是……"><a href="#通信题是……" class="headerlink" title="通信题是……"></a>通信题是……</h2><p>根据我的理解，通信题就是：两个程序，分别从文件读入数据，从标准输入读入另一个程序的标准输出。最后其中一个程序按要求输出到文件。</p><p>（好像跟题面描述的差不多…）</p><p>那就说说我sb了而卡住的地方好了..一个程序 getchar() 的时候会暂停执行，直到另一个程序输出，就跟手动输入数据时等待回车一样。</p><h2 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h2><p>广二机房是 win7，不太方便复制…</p><p>于是只好手动输入了，只不过感觉 copy 两个程序的输出看它们相互配合着工作，还是蛮有趣的。</p><h1 id="Part-2-解法"><a href="#Part-2-解法" class="headerlink" title="Part 2 解法"></a>Part 2 解法</h1><p>其实我 $5min$ 就想到怎么做了..（但好像做法比最短解那些神仙做法麻烦的多？）其实也不是很难写，但由于第一次写通信题不太习惯，各种细节写挂，最后写了一个小时才A…</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>可以想到这样一个做法（如果想不到也没关系..看懂就好了）：选择一个区间 $[l,r]$ ，Bob 用一个长度为 $r-l+1$ 的 $01$ 串告诉 Alice 这个区间内每个位置是否是一个下标，对于每个下标 Alice 告诉 Bob 对应的值；对于不在 $[l,r]$ 内的其它部分，Alice 把所有值（不管是不是一个下标）都告诉 Bob .</p><h2 id="优化通信数"><a href="#优化通信数" class="headerlink" title="优化通信数"></a>优化通信数</h2><p>考虑一下，这样做需要的 bit 数是多少：</p><p>Bob 给 Alice 的：首先 Bob 要告诉 Alice $l$ 和 $r$ , 用二进制表示，需要 $22$ 个 bit；其次，Bob 要询问 $[l,r]$ ，需要 $r-l+1$ 个 bit 。</p><p>Alice 给 Bob 的：首先 Alice 要回答 Bob 在 $[l,r]$ 内的询问，需要 “ $[l,r]$ 内下标个数” 个 bit；其次，Alice 要告诉 Bob 除了 $[l,r]$ 其它区域的所有值，需要 $n-(r-l+1)$ 个 bit 。</p><p>那么，我们需要最小化：$\max(r-l+23, [l,r]\text{ 内下标个数}+n-r+l-1)$ 。</p><p>用 $[l,l+len)$ 来表示会简洁一些，所以下文都使用这种方式，即需要最小化：$\max(len+22, [l,l+len)\text{ 内下标个数}+n-len)$ 。</p><p>预处理前缀和即可快速算出 $[l,l+len)$ 内的下标个数，$O(n^2)$ 枚举区间取最小值即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><h3 id="Bob"><a href="#Bob" class="headerlink" title="Bob"></a>Bob</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"bob.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"bob.out"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">rd</span><span class="params">()</span> <span class="comment">//读入一个bit</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wt</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//输出一个bit</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">putchar</span>(x+<span class="string">'0'</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p[<span class="number">1010</span>],rk[<span class="number">4010</span>],pre[<span class="number">4010</span>],minn=<span class="number">0x7fffffff</span>,l,len;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"></span><br><span class="line">fin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="comment">//读入并记录是第几个下标（便于存答案），并且复制一份拼在后面，这样如果询问的区间跨过首尾可以方便地处理</span></span><br><span class="line">&#123;</span><br><span class="line">fin&gt;&gt;p[i];</span><br><span class="line">rk[p[i]]=rk[p[i]+<span class="number">2</span>*n]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;++i) <span class="comment">//预处理前缀和</span></span><br><span class="line">&#123;</span><br><span class="line">pre[i]=pre[i<span class="number">-1</span>]+(rk[i]&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) <span class="comment">//枚举找最优方案</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n;++j)</span><br><span class="line">&#123;</span><br><span class="line">t=max(pre[i+j<span class="number">-1</span>]-pre[i<span class="number">-1</span>]+<span class="number">2</span>*n-j,j+<span class="number">22</span>);</span><br><span class="line"><span class="keyword">if</span> (t&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">minn=t;</span><br><span class="line">l=i;</span><br><span class="line">len=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;--i) <span class="comment">//告诉Alice l和len</span></span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="keyword">bool</span>((<span class="number">1</span>&lt;&lt;i)&amp;l));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="keyword">bool</span>((<span class="number">1</span>&lt;&lt;i)&amp;len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l;i&lt;l+len;++i) <span class="comment">//询问区间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i])</span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="number">1</span>);</span><br><span class="line">ans[rk[i]<span class="number">-1</span>]=rd(); <span class="comment">//存答案</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l+len;i&lt;l+<span class="number">2</span>*n;++i) <span class="comment">//读取剩余部分</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i])</span><br><span class="line">&#123;</span><br><span class="line">ans[rk[i]<span class="number">-1</span>]=rd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">rd();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Alice"><a href="#Alice" class="headerlink" title="Alice"></a>Alice</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"alice.in"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span> <span class="comment">//为了方便，两个程序中rd()和wt()的char/int是反的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getchar()-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wt</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">putchar</span>(x);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">4010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,l=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fin&gt;&gt;n&gt;&gt;m&gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>*n+<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;++i) <span class="comment">//复制一遍放在后面</span></span><br><span class="line">&#123;</span><br><span class="line">s[i]=s[i<span class="number">-2</span>*n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i) <span class="comment">//读入l和len</span></span><br><span class="line">&#123;</span><br><span class="line">l=l*<span class="number">2</span>+rd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">len=len*<span class="number">2</span>+rd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l;i&lt;l+len;++i) <span class="comment">//回答询问</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rd())</span><br><span class="line">&#123;</span><br><span class="line">wt(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l+len;i&lt;l+<span class="number">2</span>*n;++i) <span class="comment">//告诉Bob剩下的部分</span></span><br><span class="line">&#123;</span><br><span class="line">wt(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Part-3-证明"><a href="#Part-3-证明" class="headerlink" title="Part 3 证明"></a>Part 3 证明</h1><p>取询问区间为 $[l,l+1318]$ ，这样的话 Bob 发给 Alice  的 bit 数就为 $1319+22=1341$ .</p><p>区间 $[l,l+1318]$ 内下标的期望个数为 $\frac{1319}2$ ，所以一定存在某个区间使得下标个数小于等于 $659$ ，再加上剩余部分 $681$ ，Alice 发给 Bob 的 bit 数就为 $1340$ 。</p><p>事实上，我提交的评测记录里通信次数最多的就是 $1341+1340$ 。</p><h1 id="Part-4-优化"><a href="#Part-4-优化" class="headerlink" title="Part 4 优化"></a>Part 4 优化</h1><p>只取 $len=1325$ ，少枚举一维，可以优化到时间复杂度 $O(n)$ ；少传 $11$ 个 bit，可以优化到最大通信次数 $1336+1337$ 。证明从略。 </p><p><a href="http://uoj.ac/submission/309171" target="_blank" rel="noopener">提交记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么这篇博客又是游记又是题解呢？因为这是我做的第一道通信题！感觉通信题真有意思QAQ.&lt;/p&gt;
&lt;p&gt;T3随便打了打暴力，T2由于没啥时间了感觉rush不出来就没写。（没错这就是这篇“游记”里唯一和通信题无关的部分）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://uoj.ac/contest/47/problem/454&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;T1题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大意：Alice 有一个长度为 $2n$ 的 $01$ 串 $s_{1..2n}$，Bob 有 $n$ 个下标 $p_{1..n}$，Alice 和 Bob 只能用 $01$ 通信，需要在每人各 $m$ 个 bit 内使 Bob 输出 $s_{p_1..p_n}$ .&lt;/p&gt;
&lt;p&gt;$n=1000, m=1350$&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="UOJ" scheme="https://ouuan.github.io/tags/UOJ/"/>
    
      <category term="题解" scheme="https://ouuan.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="通信题" scheme="https://ouuan.github.io/tags/%E9%80%9A%E4%BF%A1%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>随机生成图片展示</title>
    <link href="https://ouuan.github.io/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E5%B1%95%E7%A4%BA/"/>
    <id>https://ouuan.github.io/随机生成图片展示/</id>
    <published>2018-12-20T15:12:18.000Z</published>
    <updated>2018-12-20T17:41:02.280Z</updated>
    
    <content type="html"><![CDATA[<img src="/随机生成图片展示/width=512&height=512&blocksize=75&qwq=2&minred=100&maxred=255&mingreen=100&maxgreen=255&minblue=200&maxblue=255&minalpha=0&maxalpha=255.png"><p><a href="https://ouuan.github.io/randpic/generator/">传送门</a></p><a id="more"></a> <p>源码按F12即可查看（当然也可以在 repo 里面看）</p><p>看到一个帖子里提到了一个140字符画图比赛，看到了 <a href="https://codegolf.stackexchange.com/a/35626" target="_blank" rel="noopener">Martin Büttner’s code</a> ，然后就随便写了一个. JavaScript 都是要用啥现场百度…</p><p>已经更新了（存档？）功能，在地址栏后以 <code>?</code> 开头 <code>&amp;</code> 分隔即可输入参数。例如：<a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255">https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255</a></p><p>下面是一些图片（附有参数链接）：</p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=255&amp;mingreen=0&amp;maxgreen=255&amp;minblue=0&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=255&amp;mingreen=0&amp;maxgreen=255&amp;minblue=0&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=3&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=3&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=10&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=10&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=50&amp;mingreen=0&amp;maxgreen=50&amp;minblue=0&amp;maxblue=50&amp;minalpha=0&amp;maxalpha=50"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=50&amp;mingreen=0&amp;maxgreen=50&amp;minblue=0&amp;maxblue=50&amp;minalpha=0&amp;maxalpha=50.png?" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ouuan.github.io/randpic/generator/&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ouuan.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Avito Cool Challenge 2018 游记</title>
    <link href="https://ouuan.github.io/Avito-Cool-Challenge-2018-%E6%B8%B8%E8%AE%B0/"/>
    <id>https://ouuan.github.io/Avito-Cool-Challenge-2018-游记/</id>
    <published>2018-12-17T14:47:17.000Z</published>
    <updated>2018-12-17T15:19:24.148Z</updated>
    
    <content type="html"><![CDATA[<p>这两天比赛是真的多..碰上了场 Chinese Legends Round / HackForces 竟然在紫名涨了点分QAQ</p><a id="more"></a><p>看到 A，$gcd(x,x-1)=1$ ，这不是sb题吗？然后愉快地WA了…互质 $\ne$ 不为倍数鸭QAQ还有 $1$ 呢.开场-50分..</p><p>B貌似比C难，但A的人比C多..其实当时交的时候还没想清楚 $p$ 个一样的人数是 $p$ 的倍数这个结论，就感觉好像是对的，就交了。</p><p>C 很快就想到了结论，排列组合乘一乘随便做，而且数据范围小到可以用杨辉三角算组合数+不用快速幂。</p><p>D 感觉要搞个MST，然后就真的先搞了个MST，然后就没有想到简单的解法..正解是MST搞完所有关键点就不搞了。一开始写挂了，然而pt特别水（好像直接输出MST最大边就可以），A完E之后看到jason的D被叉了，就仔细看了下，发现自己写挂了..然后重交，少了 $400$  多分。</p><p>E 贪心搞一搞就行了，据说ylh没有做出来是忘了积一定差越小和越小..</p><p>F 看了看感觉不会，于是锁了 D 开始叉人。看到room rank1的正解感觉自己整个人都sb了..在离比赛结束 $5$ 分钟的时候看到一个感觉写挂了的，然而不敢hack，于是一直盯着看，直到离比赛结束还有 $1$ 分钟的时候才hack，然而一不小心把数据打错了..幸好格式错误不扣分，赶紧点回去重新hack，最后在离比赛结束 $4s$ 的时候提交了hack，然后绿了！喜提 $100$ 分、$50​$ 名。</p><p>当时比赛一结束我就跟 ylh 说我感觉如果我不 fst能再涨 $100$ 名，然后最后真的又涨了 $100$ 名.. B和D一堆fst的。</p><p>F 用奇偶性判断选择的哪边，感觉很妙。</p><p>G 没仔细看。</p><p>H：</p><blockquote><p>and we didn’t except anyone to pass.</p></blockquote><p>不知道会在紫名待多久QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天比赛是真的多..碰上了场 Chinese Legends Round / HackForces 竟然在紫名涨了点分QAQ&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="CodeForces" scheme="https://ouuan.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>CF edu 56 &amp; AT Grand 029 游记</title>
    <link href="https://ouuan.github.io/CF-edu-56-AT-Grand-029-%E6%B8%B8%E8%AE%B0/"/>
    <id>https://ouuan.github.io/CF-edu-56-AT-Grand-029-游记/</id>
    <published>2018-12-15T16:29:11.000Z</published>
    <updated>2018-12-17T15:22:19.848Z</updated>
    
    <content type="html"><![CDATA[<p>今天 AT 和 CF 刚好连上了，于是就都打了一下。</p><a id="more"></a><h2 id="关于模板"><a href="#关于模板" class="headerlink" title="关于模板"></a>关于模板</h2><p>今天心血来潮把用于在线比赛的模板换了一下，加了点东西，然后发现 <code>rep(1,l,r)</code> 写起来非常不顺手..保留了部分比较好用的。</p><p>测试的时候忘记开数组了（<del>都是些什么sb错误</del>），然后以为 ll 不能作下标，于是没有 <code>#define long long</code>，然后 CF 挂惨了..</p><h2 id="AtCoder"><a href="#AtCoder" class="headerlink" title="AtCoder"></a>AtCoder</h2><p>上一场打的 Beginner，这场难度正常多了。</p><p>A 是个值域为 $2$ 的逆序对..</p><p>B 用 multiset 乱搞了一下，对于每个数枚举组成的数，然后从大到小匹配，不知道是不是正解，反正过了，而且是 $log^2$ 的。</p><p>C 感觉挺可做的..可能有细节没调出来，赶着回酒店打 CF 就没有继续调了..</p><p>D 一开始还在想博弈论完全不会..然后仔细看了一眼，如果 A 不走，B 就会不走，就结束了；所以 A 一定能走则走。然后就随便做了。</p><p>只不过 AT 的 rating 真的涨的好快..</p><h2 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h2><p>ABC 三道 spj ？？？</p><p>都是随便构造就能做的..</p><p>然而 C 一开始忘开 ll 了…..</p><p>D 黑白染色一下，连通块内两种节点分别有 $a$ 个和 $b$ 个答案就是 $2^a+2^b$ ，把每个连通块的答案加起来就好了。</p><p>由于 $O(nq)$ memset 会爆掉，不能 memset 整个数组，于是愉快地在开了 ll 的情况下 memset(…sizeof(int)…)；发现了之后不小心把开 int 的另一个数组也改成 memset(…sizeof(long long)..) 了.. 开场 $40$ 分钟的时候这 $3$ 个关于 ll 的罚时让我排名翻了三倍…</p><p>于是，A 了 D 之后我就在板子里加上了 <code>#define int long long</code>。</p><p>看了会儿 E 不会做，然后一看 standing，惊奇地发现 G 有一堆（$15$ 个，当时 E $7$ F $1$）人 A 了，然后一看，就是POJ 2926+动态RMQ…</p><p>感觉自己几年没有写过普通线段树了（最近写的全是平衡树/动态开点线段树），写了半个多小时还写错了..毕竟是 CF，应该去复制个模板才对的…一交，MLE 了，<del>woc我好不容易<code>#define int long long</code>了就是这个结果？？</del>改成 int，跑了 $5.4s$，巨方，于是手动开了 O3，$4.8s$ ，但重交竟然没有罚时。应该去找个 BIT 动态求 RMQ 的模板的…</p><p>看到 halyavin 参赛了，感觉自己要 fst ，赶紧把博客写了睡觉去。</p><h2 id="UPD"><a href="#UPD" class="headerlink" title="UPD"></a>UPD</h2><p>halyavin 竟然没有 hack…然而 D 有一堆 memset 整个数组的，我也去 hack 了一个（edu hack $\sqrt{}$）。</p><p>没有 fst，第一次 A $5$ 题，上 $2k$ 了，感觉海星。</p><h2 id="UUPD"><a href="#UUPD" class="headerlink" title="UUPD"></a>UUPD</h2><p><a href="https://www.luogu.org/blog/yyfouuan/solution-cf1093d" target="_blank" rel="noopener">题解 CF1093D 【Beautiful Graph】</a></p><p><a href="https://www.luogu.org/blog/yyfouuan/solution-cf1093g" target="_blank" rel="noopener">题解 CF1093G 【Multidimensional Queries】</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 AT 和 CF 刚好连上了，于是就都打了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="AtCoder" scheme="https://ouuan.github.io/tags/AtCoder/"/>
    
      <category term="CodeForces" scheme="https://ouuan.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>html实现随机图片</title>
    <link href="https://ouuan.github.io/html%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87/"/>
    <id>https://ouuan.github.io/html实现随机图片/</id>
    <published>2018-12-12T15:42:17.000Z</published>
    <updated>2018-12-17T14:48:01.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：暂时还不知道如何制作能被引用的随机图片，只能查看图片，而不能通过类似于<code>![](图片地址)</code>的方式查看。</p></blockquote><blockquote><p><a href="https://ouuan.github.io/randpic/people/">demo</a></p><p>欢迎投稿图片：<a href="https://github.com/ouuan/ouuan.github.io/issues/19" target="_blank" rel="noopener">投稿地址</a></p></blockquote><a id="more"></a><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"imagelist.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  var r=Math.floor(Math.random()*images.length)</span></span><br><span class="line"><span class="xml">  document.write("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"+images[r]+"</span>&gt;</span>")</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>图片列表保存在 <code>imagelist.json</code> 内。</p><h2 id="参考示例"><a href="#参考示例" class="headerlink" title="参考示例"></a>参考示例</h2><p><code>https://ouuan.github.io/randpic/people/index.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"imagelist.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>随机图片-人物类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> <span class="attr">href</span>=<span class="string">"/images/favicon32.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span> <span class="attr">href</span>=<span class="string">"/images/favicon16.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    img</span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var r=Math.floor(Math.random()*images.length)</span></span><br><span class="line"><span class="xml">    document.write("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"+images[r]+"</span>&gt;</span>")</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>https://ouuan.github.io/randpic/people/imagelist.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var images=</span><br><span class="line">[</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/70469686_p0.png"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/69212051_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/64660644_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/61438972_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/60141148_p0.png"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/1200296-20170715113653118-1762611401.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/71631241_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/f0Q5-g62pXkZ5lT3cS1hc-rs.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/36224612_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/64702477_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/64670588_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/61815260_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c10a02b0831b.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c1119665c83a.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111a8bed8e8.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111ab43f7cf.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111ade38590.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111b8240591.png"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="UPD"><a href="#UPD" class="headerlink" title="UPD"></a>UPD</h2><p>研究了一下 js 后写了一下图片缩放：（代码很丑，毕竟是靠百度学了一个小时写出来的）（大括号不换行是因为sublime缩进写着写着就炸了，只好在网上格式化了一下）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"imagelist.json"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">随机图片-人物类</span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> <span class="attr">href</span>=<span class="string">"/images/favicon32.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span> <span class="attr">href</span>=<span class="string">"/images/favicon16.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"margin: 0px; background: #0e0e0e;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var cur = 1;</span></span><br><span class="line"><span class="undefined">var xx = 0;</span></span><br><span class="line"><span class="undefined">var yy = 0;</span></span><br><span class="line"><span class="undefined">var rx = 0;</span></span><br><span class="line"><span class="undefined">var ry = 0;</span></span><br><span class="line"><span class="undefined">var nw;</span></span><br><span class="line"><span class="undefined">var nh;</span></span><br><span class="line"><span class="undefined">var mw;</span></span><br><span class="line"><span class="undefined">var mh;</span></span><br><span class="line"><span class="undefined">var w;</span></span><br><span class="line"><span class="undefined">var h;</span></span><br><span class="line"><span class="undefined">function setSize() &#123;</span></span><br><span class="line"><span class="undefined">if (cur == 1) &#123;</span></span><br><span class="line"><span class="undefined">var p = document.getElementsByTagName("img")[0];</span></span><br><span class="line"><span class="undefined">nw = p.naturalWidth;</span></span><br><span class="line"><span class="undefined">nh = p.naturalHeight;</span></span><br><span class="line"><span class="undefined">mw = window.innerWidth;</span></span><br><span class="line"><span class="undefined">mh = window.innerHeight;</span></span><br><span class="line"><span class="undefined">if (nw &gt; mw || nh &gt; mh) &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: zoom-in";</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: auto";</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if (nw * mh &gt; nh * mw) &#123;</span></span><br><span class="line"><span class="undefined">h = nh * mw / nw;</span></span><br><span class="line"><span class="undefined">w = mw;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">w = nw * mh / nh;</span></span><br><span class="line"><span class="undefined">h = mh;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p.style.width = w;</span></span><br><span class="line"><span class="undefined">p.style.height = h;</span></span><br><span class="line"><span class="undefined">p.style.marginTop = (mh - h) / 2;</span></span><br><span class="line"><span class="undefined">p.style.marginLeft = (mw - w) / 2;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">if (nw &gt; mw || nh &gt; mh) &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: zoom-out";</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: auto";</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">function picLoaded() &#123;</span></span><br><span class="line"><span class="undefined">setSize();</span></span><br><span class="line"><span class="undefined">window.onresize = function() &#123;</span></span><br><span class="line"><span class="undefined">setSize();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">function BigSmall() &#123;</span></span><br><span class="line"><span class="undefined">mw = window.innerWidth;</span></span><br><span class="line"><span class="undefined">mh = window.innerHeight;</span></span><br><span class="line"><span class="undefined">if (nw &gt; mw || nh &gt; mh) &#123;</span></span><br><span class="line"><span class="undefined">if (cur == 1) &#123;</span></span><br><span class="line"><span class="undefined">cur = 2;</span></span><br><span class="line"><span class="undefined">var p = document.getElementsByTagName("img")[0];</span></span><br><span class="line"><span class="undefined">p.style = "cursor: zoom-out";</span></span><br><span class="line"><span class="undefined">var e = event || window.event;</span></span><br><span class="line"><span class="undefined">mw = window.innerWidth;</span></span><br><span class="line"><span class="undefined">mh = window.innerHeight;</span></span><br><span class="line"><span class="undefined">if (nw * mh &gt; nh * mw) &#123;</span></span><br><span class="line"><span class="undefined">h = nh * mw / nw;</span></span><br><span class="line"><span class="undefined">w = mw;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">w = nw * mh / nh;</span></span><br><span class="line"><span class="undefined">h = mh;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if (nw &lt;= mw) &#123;</span></span><br><span class="line"><span class="undefined">xx = (mw - nw) / 2;</span></span><br><span class="line"><span class="undefined">rx = 0;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">xx = 0;</span></span><br><span class="line"><span class="undefined">rx = (nw - mw) * (e.clientX - (mw - w) / 2) / w;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if (nh &lt;= mh) &#123;</span></span><br><span class="line"><span class="undefined">yy = (mh - nh) / 2;</span></span><br><span class="line"><span class="undefined">ry = 0;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">yy = 0;</span></span><br><span class="line"><span class="undefined">ry = (nh - mh) * (e.clientY - (mh - h) / 2) / h;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p.style.marginTop = yy;</span></span><br><span class="line"><span class="undefined">p.style.marginLeft = xx;</span></span><br><span class="line"><span class="undefined">document.body.scrollLeft = rx;</span></span><br><span class="line"><span class="undefined">document.body.scrollTop = ry;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">cur = 1;</span></span><br><span class="line"><span class="undefined">setSize();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">var r = Math.floor(Math.random() * images.length);</span></span><br><span class="line"><span class="xml">document.write("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">" + images[r] + "</span> <span class="attr">onload</span>=<span class="string">\</span>"<span class="attr">picLoaded</span>()\" <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">BigSmall</span>()\"&gt;</span>");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：暂时还不知道如何制作能被引用的随机图片，只能查看图片，而不能通过类似于&lt;code&gt;![](图片地址)&lt;/code&gt;的方式查看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://ouuan.github.io/randpic/people/&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎投稿图片：&lt;a href=&quot;https://github.com/ouuan/ouuan.github.io/issues/19&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ouuan.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018~2019冬 广二避寒记</title>
    <link href="https://ouuan.github.io/2018-2019%E5%86%AC-%E5%B9%BF%E4%BA%8C%E9%81%BF%E5%AF%92%E8%AE%B0/"/>
    <id>https://ouuan.github.io/2018-2019冬-广二避寒记/</id>
    <published>2018-12-09T07:31:27.000Z</published>
    <updated>2019-01-19T04:32:38.125Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 迎风迈出的步伐更艰难，即使走的不远，但踩得更深。一代人只能做一代人的事，完成这个时代赋予的使命就是英雄，大地也会将他的脚印铭记。</p><p> ——<a href="https://www.bilibili.com/video/av20205319" target="_blank" rel="noopener">乒乓帝国</a>（句子迷上说是《孤杂记》..）</p></blockquote><p>突然就得知了要去广二集训。</p><p>然后知道了这次出去可能要一直到 WC，差不多有 $50$ 天。这样一算这个学期我在武汉的时间可能和外出的时间一样多了。</p><p>毕竟是去广州，会暖和很多，也许看不到武汉的雪了。</p><a id="more"></a><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><h2 id="Railway"><a href="#Railway" class="headerlink" title="Railway"></a>Railway</h2><p>在站台上遇到了 Dew、ylh，感觉自己活尸化严重，都是我妈先看见的…</p><p>中午吃了泡面（有汤的那种），之前出去都比较近，在火车上不用吃饭，印象中上次吃方便面还是初三的时候在学校里吃的（桶装的泡面，愣是被我当成干拌面吃的）。</p><p>在火车上看看手机、看看《大卫·科波菲尔》，当然我现在在写博客。</p><p>途中看到了一幅非常………..ok我承认我词穷了。云很低，好像不比火车高多少，环绕在山的周围，山脚下是一些平房，在远处插入了几栋现代化的高楼大厦，有一种违和却奇妙的美感。</p><p>赶紧掏出手机，可毕竟只是手机，拍不出云那种虚无缥缈的立体感，匆忙中也没能选好角度，没拍到那几栋高楼大厦。</p><img src="/2018-2019冬-广二避寒记/cloudmountainandhouses.jpg"><p>已经逝去了，经纬度也没有记下来，不能在回来的火车上再览其景，只能用粗浅的文字将其略微地记录下来罢。</p><h2 id="Underground"><a href="#Underground" class="headerlink" title="Underground"></a>Underground</h2><p>进地铁前忘记上厕所了Orz</p><p>和 ylh 一起体验了一次换票出站上厕所。</p><p>然后是 huangbei 站：</p><img src="/2018-2019冬-广二避寒记/huangbei.jpg"><p>人特别多，特别热。<del>毕竟是来避寒的</del></p><h2 id="Restaurant"><a href="#Restaurant" class="headerlink" title="Restaurant"></a>Restaurant</h2><p>和广二的教练谈了谈<del>人生</del>，建议我和 ylh 先系统地学知识点，不着急打套题，结果 dew 想先学知识点，我和 ylh 想在广二做题..</p><p>然后就是住宿的事，貌似准备先住两个星期三人间，等 ylh 回去了就去教练家里住（教练一个星期只回家一天）。今晚是先各自和家长住双人间。房号 1216.</p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>上午教练咕咕了，中午才来接我们。</p><p>然后让我们不着急打比赛，给我们三个人安排了个机房做题。</p><p>$5$ 道左偏树，<a href="https://www.luogu.org/problemnew/show/P1552" target="_blank" rel="noopener">派遣</a>、<a href="https://www.luogu.org/problemnew/show/P2713" target="_blank" rel="noopener">罗马游戏</a>和<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5818" target="_blank" rel="noopener">Joint Stacks</a>比较轻松地做出来了；<a href="https://www.luogu.org/problemnew/show/P4331" target="_blank" rel="noopener">Sequence</a>看了看题解，感觉还没完全搞懂，但A了；<a href="https://www.luogu.org/problemnew/show/P2483" target="_blank" rel="noopener">魔法猪学院</a>用A*在广二的OJ和BZOJ上过了，暂时放弃可持久化左偏树，以后再学吧..</p><p>山、河、树（不只是路边那种）（<del>当然也不是可持久化那种</del>），游泳池，令人联想起 Angel Beats! 的食堂，各式各样的社团活动。</p><img src="/2018-2019冬-广二避寒记/bdbk.jpg"><img src="/2018-2019冬-广二避寒记/pool.jpg"><h1 id="Day-2-3"><a href="#Day-2-3" class="headerlink" title="Day 2-3"></a>Day 2-3</h1><p>把题目列表搞到了洛谷团队里.</p><p>搞了搞平衡树、启发式合并之类的，感觉自己啥都不会..</p><p>搞了个<a href="https://ouuan.github.io/randpic">随机图片</a> 。</p><h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h1><p>一天就写了<a href="https://www.luogu.org/problemnew/show/P1486" target="_blank" rel="noopener">[NOI2004]郁闷的出纳员</a>和<a href="https://www.luogu.org/problemnew/show/P3690" target="_blank" rel="noopener">LCT模板</a>…</p><p>然后搞了个stylus插件：<a href="https://userstyles.org/styles/166876/theme" target="_blank" rel="noopener">洛谷犇犇、讨论隐藏</a>。</p><p>果然整天待机房效率低.</p><h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><p>上午听隔壁机房的讲了下回文自动机、后缀数组、后缀自动机，但由于手头上的题还没搞完就没做相关的题目。</p><p><a href="https://www.luogu.org/problemnew/show/P2042" target="_blank" rel="noopener">[NOI2005]维护数列</a>做了好久..本来操作就多，取的子段还不能为空…</p><p>然后学了下LCT。</p><h1 id="Day-6-7"><a href="#Day-6-7" class="headerlink" title="Day 6-7"></a>Day 6-7</h1><p>就做了几道 LCT 的题…学了学虚树，还没做题。</p><p>然后这几天比赛挺多的，at+cf 还有洛谷比赛。感觉洛谷比赛都挺dl的…</p><p>然后今天看了几篇<a href="http://subblogvfleakingm92.lofter.com/" target="_blank" rel="noopener">vfk的博客</a>，感觉都写的挺好的。</p><p>里面提到了CFctr的自我修养，感觉以后出题时要牢记（虽然里面有些是只适用于CF的）：</p><blockquote><ol><li><p>准备一场CF包括：题目、比赛通知、题解。</p></li><li><p>你的题目必须是独一无二的。你不能从以前用过的题目中抄袭它的想法。PLEASE BE FAIR WITH THE COMMUNITY。（</p></li><li><p>空间限制必须是256MB，时间限制至少是出题人的java程序运行时间的两倍。</p></li><li><p>题面必须清晰好懂，没有语法错误。建议写得短短的……</p></li><li><p>题目背景中不要写数据范围，全部都要写在输入格式里。</p></li><li><p>请参考以前CF的题目描述的格式来写题目描述。如果你不知道怎么清晰地描述输入输出格式，请找与之类似的题目进行仿写。</p></li><li><p>题目描述中的数组下标最好从1开始。</p></li><li><p>你必须限制被你提到的所有的变量的范围。如果你提到一个字符串，你必须写明哪些字符可以出现在这个字符串内。</p></li><li><p>题目的tests中必须包括各种各样的数据，而且应该有各种各样的达到最小数据范围的数据和达到最大数据范围的数据。也就是说如果1 &lt;= n &lt;= 100000，那么数据中既应该有n = 1，也应该有n = 100000。</p></li><li><p>你应该写个暴力。</p></li><li><p>你应该拿标程与暴力对拍。</p></li><li><p>Div.2的题的pretests要很强，能让应该超时的程序在pretests上就TLE掉。但是你可以让这个点毫无意义。比如给n个数排序，你可以用n个1来确保选择排序不能过。</p></li><li><p>确保读错题的人不能过pretests。</p></li><li><p>建议添加极端数据，但是不必是所有极端数据。确保数组开小的人不能过pretests。</p></li><li><p>不要让时间复杂度很高但做了大量常数优化的人AC。</p></li><li><p>每道题至少2个样例。每道Div.2的题目的前两个样例必须有样例解释。</p></li><li><p>如果要使用long long，请确保不开long long的人不能过pretests。</p></li></ol></blockquote><p>哦对了，自定义域名总是炸，以后这个博客就用 ouuan.github.io 作为地址了。（正好避免了一年后域名到期的问题）</p><h1 id="Day-8"><a href="#Day-8" class="headerlink" title="Day 8"></a>Day 8</h1><p>今天好像啥都没干..估计是每天都没睡好导致白天效率低下..</p><p>好像看了好几篇淀粉质的教程，但就是不想写题..</p><p>和 memset0 讨论关于保留几位小数与精度限制的问题..感觉其他人总是不能轻松地理解保留几位小数是卡精度的…</p><p>翻译了CF的几道题，写了写题解。</p><p>继续yy自己口胡的题的优秀做法，依然没什么进展。</p><p>跟 Sooke 说了说自己出 CF 的想法，Sooke 表示想一起出，然后在还没想好一道题的情况下大谈怎么出 CF..</p><p>说实话出 div.2 的话会有些不甘，哪怕晚点也想出 div.1+div.2 的..</p><p>第一次用洗衣机，感觉洗衣机真有趣  <img src="/2018-2019冬-广二避寒记/serious.jpg"> （好像暴露了我一周没洗衣服…）</p><p>（hexo 貌似不支持行内图片？）</p><h1 id="Day-9"><a href="#Day-9" class="headerlink" title="Day 9"></a>Day 9</h1><p>搞了个 <a href="https://ouuan.github.io/randpic/generator/">随机生成图片</a> ，<del>感觉自己自从用了 Hexo 日益由 OIer 变成码农了</del>。</p><h1 id="Day-10-11"><a href="#Day-10-11" class="headerlink" title="Day 10-11"></a>Day 10-11</h1><p>这几天忙着搞比赛，博客可能咕咕咕了..准备比赛记大约会在比赛出来之后发QAQ.</p><h1 id="Day"><a href="#Day" class="headerlink" title="Day ?-?"></a>Day ?-?</h1><p>咕咕咕咕咕咕咕</p><h1 id="Day-14"><a href="#Day-14" class="headerlink" title="Day 14"></a>Day 14</h1><p>广二先是四楼停电，用了一上午笔记本，准备回酒店的时候门卫告诉我们电来了，然后回去一看发现四楼没电三楼有电。下午突然就又停电了，幸好我和 dew 都没有在写代码..</p><p>ylh 走了，然而住教练家被咕咕了，好像是因为又来了几个外省的。</p><p>新酒店..发几张图感受一下吧：</p><img src="/2018-2019冬-广二避寒记/new_room.jpg"><img src="/2018-2019冬-广二避寒记/pink_lamp.jpg"><img src="/2018-2019冬-广二避寒记/dew_glider.jpg"><p>没错 p3 是 dew 在吊椅上 <img src="/2018-2019冬-广二避寒记/serious.jpg"></p><p>然而不敢对着 dew 拍…</p><p>wifi 特别神仙：</p><img src="/2018-2019冬-广二避寒记/wifi_1.jpg"><img src="/2018-2019冬-广二避寒记/wifi_2.jpg"><p>被夹在了一个没有 wifi 的世界里..</p><p>然后貌似明天还是什么时候开始要打比赛了，然后这篇游记就不会继续真的成“游记”了。</p><h1 id="Day-15"><a href="#Day-15" class="headerlink" title="Day 15"></a>Day 15</h1><p>今天是集训队爷 zjt 出的 <del>集训队互测</del>。</p><h2 id="T1-一道带权带花树好题"><a href="#T1-一道带权带花树好题" class="headerlink" title="T1 一道带权带花树好题"></a>T1 一道带权带花树好题</h2><p>的确是带权带花树裸题（求一般图最大权值匹配），然而不需要输出方案。</p><p>虽然说 OI 题名无正解，然而我还是百度了一下..然后学了一个半小时带花树，没学会！</p><p>然后再一看，$n\le20$ 不会做？</p><p>只好写了二分图的 $20$ 分滚粗..</p><p>然而发现一个严重的问题，这貌似是我第一次写二分图最大权值匹配..百度了一下，发现全是KM算法，没有一篇费用流？然后仔细想了好多遍，感觉费用流应该没问题，就写了。然而一开始写挂了（连图中的边时没判哪个点是起点），幸好后来发现了。</p><p>后来听说这题 std 是一个线代做法，由于不用输出方案码量非常小。具体可以参考2017年集训队论文。然而看不懂鸭…</p><p>这题不卡随机化乱搞.（嘤嘤嘤？）</p><h2 id="T2-一道拉格朗日反演好题"><a href="#T2-一道拉格朗日反演好题" class="headerlink" title="T2 一道拉格朗日反演好题"></a>T2 一道拉格朗日反演好题</h2><p>看到 T1 真的是一般图最大权值匹配的我真的信了题名的鬼话..</p><p>一个 $01$ 序列，初始为空，有三种操作：</p><ol><li>往末尾加个 $0$ .</li><li>删掉一个子序列，包含 $x$ 个 $0$ ，$y$ 个 $1$ ，然后往末尾加个 $1$ 。其中 $x\in A$ 。</li><li>删掉一个子序列，只包含 $x$ 个 $0$ ，然后往末尾加个 $1$ 。其中 $x\in B$ 。</li></ol><p>$A$ 和 $B$ 还有操作总数 $n$ 是给你的，让你求 $n$ 次操作完成后序列长度为 $1$ 的方案数。</p><p>一开始还以为只用管 $01$ 分别的个数，后来才发现选的子序列位置不同也算不同的方案…</p><p>数据范围：<del>いいよ,こいよ</del> $114514$</p><p>不太会做，好像是转化成一个树上的 dp，然后再算一波式子，分治FFT/牛顿迭代？</p><p>不得不说样例十分lx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 10 10</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">362880</span><br></pre></td></tr></table></figure><p>愉快地拿到了 $|A|=|B|=n$ 这档部分分。</p><h2 id="T3-一道-Top-cactus-好题"><a href="#T3-一道-Top-cactus-好题" class="headerlink" title="T3 一道 Top cactus 好题"></a>T3 一道 Top cactus 好题</h2><p>仙人掌上 $q$ 次询问求经过某个点的路径贡献之和。模 $998244353$。“不在简单环上的边数”为 $x$ 的路径贡献为 $v_x$ 。</p><p>部分分第一档，树，$n\le2000$ 。</p><p>woc我只会 $O(n^3)$ ..</p><p>冷静了一下，发现可以枚举路径树上差分..</p><p>愉快地拿到了这 $10$ 分。</p><p>正解好像是淀粉质+NTT。然后搬到圆方树上去。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>队爷出的题就是神仙..<del>之前一直感觉多项式看起来没啥用？请julao们看到这句话别打我..</del>感觉很有必要早点去学多项式全家桶了。</p><p>另外题名里的算法真的 $99\%$ 不可信。</p><p>另外由于打比赛换了个机房，貌似机房里都是一些外省的？</p><blockquote><p><strong><del>OIer居然是可以有npy的！</del></strong></p></blockquote><h1 id="Day-16"><a href="#Day-16" class="headerlink" title="Day 16"></a>Day 16</h1><p>yww咕咕了，myh出的题。<del>这场题面太赞了！</del>据说题意不清被吐槽的很厉害，但我貌似还是第一次碰见<del>YNOI型</del>题面，背景是自己看过的番，<del>题意瞬间理解</del>。</p><p>这场还有个有趣的地方，T1 和 T3 的 subtask 一开始放反了，而且 T3 的变量 T1 都有，于是我比赛开始 $2h$ 才发现..（当然我发现的时候已经改回来了）</p><h2 id="T1-青春野狼不做理性小魔女的梦"><a href="#T1-青春野狼不做理性小魔女的梦" class="headerlink" title="T1 青春野狼不做理性小魔女的梦"></a>T1 青春野狼不做理性小魔女的梦</h2><p><del>题意简述</del>，题目背景太棒了，所以我要题<strong>面</strong>简述。</p><p>在咖啡厅，双叶不说话，只是推给了你一张纸，上面写着一个不定方程： $A_1x_1+A_2x_2+\cdots+A_kx_k\equiv1\mod m$，然而其中的一些 $A_i$ 被咖啡打湿了，需要给被打湿的 $A_i$ 们赋值（$A_i\in[0,m)$），使得不定方程有整数解；同时，双叶也不记得 $m$ 是多少了，所以要求 $m\in[1,n]$ 的方案数之和。$1\le k\le50,1\le n \le10^9$。 </p><p>大约想到怎么做了，然而感觉无法实现（事实是正解要用杜教筛），会写的特别麻烦复杂度还不对，于是就只打了 $k\le5,\,n\le10$ 的暴力和没有数字被打湿的分。然而后面那档挂了，因为求区间内与某个数互质的数个数时没有容斥，最神奇的是拍半个多小时没拍出来…</p><h2 id="T2-青春野狼不做姐控偶像的梦"><a href="#T2-青春野狼不做姐控偶像的梦" class="headerlink" title="T2 青春野狼不做姐控偶像的梦"></a>T2 青春野狼不做姐控偶像的梦</h2><p>和花给麻衣的信很有规律，她写的信是一个 $1$ ~ $n$ 的排列，一段连续的信能给麻衣鼓励，当且仅当它的值也连续（noi.ac的whzzt邀请赛里把这玩意定义为“广义排列”，意思就是一个区间， $max-min=r-l$ 且没有重复的数），麻衣想知道如果只保留一段连续的信，她能收到多少鼓励（就是多组区间询问）。</p><p>其实..就是 <a href="https://www.luogu.org/problemnew/show/CF997E" target="_blank" rel="noopener">CF997E Good Subsegments</a>..</p><p>千古神犇wxh log碾标算！<del>lxctr myh n^2 送温暖！</del>嗯，我拿了 $O(n^2)$ 的 $20$ 分…</p><p>做法参考 <a href="https://codeforces.com/blog/entry/60357?#comment-441928" target="_blank" rel="noopener">zzq的评论</a></p><h2 id="T3-青春野狼不做小恶魔学妹的梦"><a href="#T3-青春野狼不做小恶魔学妹的梦" class="headerlink" title="T3 青春野狼不做小恶魔学妹的梦"></a>T3 青春野狼不做小恶魔学妹的梦</h2><p>这道题题面写的最好！（<del>貌似也被吐槽的最惨</del>）</p><blockquote><p>对学长的思念，深埋于心底。</p><p>难以表达。</p><p>与学长的记忆分为 $n$ 个部分，两个不同的部分间可能会有一种关系，也可能没有。</p><p>可是我知道，它们藕断丝连，注定联通。</p><p>想忘掉，可是却越来越难忘，$m$ 种关系会带给我 $m^k$ 的思念。</p><p>我不知道我有多思念学长，能告诉我如果关系随意出现，思念的和吗？</p><p>我不想看到太大的数，只要告诉我它模 $998244353$ 的结果就好了。</p></blockquote><p>题意简述：$n$ 个点组成无向图，求不同的方案边数的 $k$ 次方之和。</p><p>斯特林展开+大力推式子+NTT.</p><p>再见。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>myh 问班上的女生：你怎么3.5k写完仙人掌剖分的。</p><p>嗯，女生就是<a href="#%E6%80%BB%E7%BB%93">昨天的总结</a>里的女生。<del>yqyry</del></p><h1 id="Day-17"><a href="#Day-17" class="headerlink" title="Day 17"></a>Day 17</h1><p>今天没有比赛。</p><p>Day 16 ~ Day 17 的这晚貌似是来广二之后睡的最长的一次（$6$ 小时 $40$ 分），然后效率果然略高了一些（<del>一天只搞了FFT/NTT/多项式求逆，高个鬼</del>），比起之前整天几乎啥都不干还是好多了..（<del>有种如果睡8小时能一天搞完多项式全家桶的错觉</del>）</p><p>希望这周能把多项式常见的一些东西搞完吧..到时候应该会写一篇博客。</p><h1 id="Day-18"><a href="#Day-18" class="headerlink" title="Day 18"></a>Day 18</h1><p>颓颓颓。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>题意大约是求 $l_i\le ki+b\le r_i$ 的 $k,b$ 方案数。</p><p>最低档暴力在考试结束前 $10min$ 才想出来一个特别麻烦的解法..然后爆零了。</p><p>正解半平面交。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>线性同余找循环节海星。</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>给几个团，团内点连相同权值边，问点之间两两距离之和。</p><p>以团内边权为点权求出团之间的最短路，然后 $dist(i,j)=\min\{d(x,y)|x\in S_i,y\in S_j\}$（$S_i$ 表示 $i$ 所在团的集合）。</p><p>具体实现要用到 FMT 里的一个小 trick ，然而题解里一笔带过，我看了一下午题解都没看明白…</p><h2 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h2><p>那位女生 $rank1$ 了…</p><p>然后今天才发现<a href="http://xsy.gdgzez.com.cn/JudgeOnline/" target="_blank" rel="noopener">广二 OJ 外网是能上的</a>..（当然注册不了账号QAQ）</p><h1 id="Day-19"><a href="#Day-19" class="headerlink" title="Day 19"></a>Day 19</h1><p>今天搬的 ACM 原题？CF 权限 gym Orz</p><p>题解给<a href="https://www.bilibili.com/video/av38542305?t=6000" target="_blank" rel="noopener">吉老师视频</a>，太灵性了..</p><p>zjt 25（$rank 8$），myh 赛后五分钟提交 $15$ 快乐赛。</p><h2 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h2><p>dp，好像没啥不会的知识点，然而没做出来。</p><h2 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h2><p>把排列当成坐标放在平面上，分类讨论求上升块？表示完全没听懂，讲的时候 myh 在不停地提问。</p><p>黑科技听不懂，而这道题除了黑科技还要牛顿迭代…每场必有多项式的flag还是没倒.</p><h2 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h2><p>没听懂嘤嘤嘤。</p><h1 id="Day-20"><a href="#Day-20" class="headerlink" title="Day 20"></a>Day 20</h1><p>颓颓颓。</p><p>今天没比赛，然而只搞了多项式除法和任意模数NTT。</p><p>多项式除法一开始 $B(x)$ 模了 $x^m$ ，然而应该模 $x^{n-m+1}$ ，然后挂了半天。</p><p>任意模数NTT因为数组开小挂了半天…</p><p>看到洛咕有绘板，就把晚上的at咕咕了，搞了个py脚本。一开始妄想手动把图片转成数据，<del>差点一晚没睡</del>，后来main包发了个脚本，转的效果还挺不错的。</p><h1 id="Day-21-23"><a href="#Day-21-23" class="headerlink" title="Day 21-23"></a>Day 21-23</h1><p>基本上都在搞绘板，比赛记应该是永久咕咕了，绘板记这几天会写出来。</p><p>有一个小插曲，9102年第一个梗<a href="https://www.zhihu.com/question/307596943/answer/563771875" target="_blank" rel="noopener">被我骗了点赞</a>。</p><h1 id="Day-gugugu"><a href="#Day-gugugu" class="headerlink" title="Day gugugu"></a>Day gugugu</h1><p>绘板记咕咕了，这两天的比赛记咕咕了，今晚的CF不咕咕！<del>猝死！！</del></p><h1 id="Day-27"><a href="#Day-27" class="headerlink" title="Day 27"></a>Day 27</h1><p>今天的T1非常有意思，$8$ 个 int 进行编码，编码长度至少是 $1000$ 个 int，随机打乱之后给你解码。标算是一个不确定性算法，所以这题是达到一定正确率就过，（然后我赛时第一次提交30，第二次提交20，<del>脸黑选手</del>zjt赛时90，赛后AC），然而有神仙想出了多点求值、快速插值的确定算法。</p><p>T2一看是几何题我就跳了..然而这题不怎么需要计算几何，而且有 $30$ 分挺好写的…..</p><p>T3是个树上dp，部分分有个“与一条蛇同构”，然后：</p><img src="/2018-2019冬-广二避寒记/nineheadsnake.jpg"><p>xswl</p><p>尝试着按myh的提交记录刷题，第一题是个字符串哈希，第一眼还以为是AC自动机..然后一发mapT飞，unordered就过了。第二题是个裸的单点、子树加，单点询问，竟然写错了3遍…..第三题是个数位dp，愉快地卡住了….再不好好学数位dp感觉会出事_(:з」∠)_</p><h1 id="Day-28"><a href="#Day-28" class="headerlink" title="Day 28"></a>Day 28</h1><p>T1是树上在线多组多路径询问颜色种类数和mex，一开始看到部分分还在想为什么没给树上莫队分，然后一想多条路径莫队复杂度肯定不对，看题解才知道正解树分块…bitset能在线搞定的事，为什么要离线排序呢？然后成功在赛后A掉了（广二膜你赛赛后首A_(:з」∠)_）大约就是预处理关键点之间的bitset，块内暴力跳，关键点之间已经预处理了。</p><p>T2是道神仙题..好像从某外国比赛搬的，赛时0A，通过分治时判断左右一样来保证复杂度，没太听懂。</p><p>T3：“点分治然后建虚树再点分治<strong>就好了！</strong>”（mdzz）“听说fzy有两个log做法？treap/Splay合并就行了！”（mdzz）</p><p>然后<a href="https://codeforces.com/blog/entry/64343" target="_blank" rel="noopener">用bitset<0>水了点contribution</0></a>，达成成就：contribution比friends多。</p><p>polygon真有意思！试着把一道题搞上去了。</p><h1 id="Day-29-30"><a href="#Day-29-30" class="headerlink" title="Day 29-30"></a>Day 29-30</h1><p>稍微学了下莫比乌斯反演和杜教筛，感觉挺有意思的QAQ。</p><p>比赛全场就我不会马拉车，然而三题暴力排名还不错…貌似只要打了点非无脑的暴力就能考的还行。（<del>A题就jxd了</del></p><h1 id="Day-31"><a href="#Day-31" class="headerlink" title="Day 31"></a>Day 31</h1><p>今天比赛是zzq出的，上场 <strong><font color="black">C</font><font color="red">hinese</font> <font color="green">round</font> </strong> 既视感严重..</p><h2 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h2><p>树上有一些特殊点。</p><p>两两匹配特殊点使得距离之和最大。正解没听懂，然而直接扫一遍存为 $rk_{1..k}$ 然后输出 $(rk_i,rk_{i+\frac k 2})$ 就能过…</p><h2 id="T2-2"><a href="#T2-2" class="headerlink" title="T2"></a>T2</h2><p>“这是一道交互题”。</p><p>加了一些限制条件，不同排名的人在某些情况下可能不回答询问，对其排序。</p><p>并不是很难然而赛时没想到..</p><h2 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h2><p>QuickSort伪代码。</p><p>求 $cnt$ 次操作后排序成啥样了。又是只需要大小时转化为 $0/1$,$0/\pm1$ 的 trick.</p><p>然后，今天写了 $5$ 道莫比乌斯反演，<strong><font color="purple">100</font>+<font color="green">600</font></strong>，感觉海星。</p><h1 id="Day-32"><a href="#Day-32" class="headerlink" title="Day 32"></a>Day 32</h1><p><del>改题日→出题日</del></p><h1 id="Day-33"><a href="#Day-33" class="headerlink" title="Day 33"></a>Day 33</h1><p>比赛的时候OJ挂了海星，最后修好了。</p><img src="/2018-2019冬-广二避寒记/submitafterbomb.jpg"><p>感受一下刚修好时的提交。这次题目时限又大，当时卡了好几页。</p><p>T1一开始时限是 $2s$，后来开成 $4s$ 了，然后一排人 $3.9s$…</p><p>T3一开始时限是 $6s$，myh NTT被卡常，赛后给自己开到 $12s$ 重测，$9s$ 过了…然后他成功 $rank1$。</p><h1 id="Day-34"><a href="#Day-34" class="headerlink" title="Day 34"></a>Day 34</h1><img src="/2018-2019冬-广二避寒记/drawing1.jpg"><img src="/2018-2019冬-广二避寒记/drawing2.jpg"><img src="/2018-2019冬-广二避寒记/drawing3.jpg"><p>这个是我们刚来时就在画的，最近画好了，趁着<del>迟到</del>没人拍了一下。</p><p>上午被告知学校有考试，机房被占用了，让我们下午不要去机房，在打比赛的体育馆待着。于是很多人都提前跑了..我也下午就走了，走的时候看到一堆小学生模样的孩子和家长，听到了“XX考试的第二场和XX时间一样，不让考完第一场就跑”之类的话，听到了“二火”之类曾经熟悉的名词。我是为什么放弃了华一寄来到外初的呢..早就忘得一干二净了，只记得来外高是因为wqs的寥寥几句话：</p><img src="/2018-2019冬-广二避寒记/wqs.jpg"><p>还听到一个孩子说：“二中环境真好。”我以为他也会感叹二中有山有水，没想到他说的是——“二中有专门的清洁工”。</p><h1 id="Day-35"><a href="#Day-35" class="headerlink" title="Day 35"></a>Day 35</h1><p><del>改题日颓颓颓</del></p><h1 id="Day-36"><a href="#Day-36" class="headerlink" title="Day 36"></a>Day 36</h1><p>OrangeRabbit tql!!!</p><img src="/2018-2019冬-广二避寒记/OrangeRabbit.jpg"><p>去机房的路上发现这个：</p><img src="/2018-2019冬-广二避寒记/nico.jpg"><img src="/2018-2019冬-广二避寒记/maki.jpg"><p>我们刚来的时候就看到有人在画井盖了，然而才发现这个QAQ</p><p>T2对自己 $20$ 分暴力过于自信，打了一个半小时表找不到规律后写了下 $20$ 分才发现是错的…</p><p>T1写了一个半小时比暴力跑的还慢的树剖..稍微想想就可以发现复杂度完全不比暴力优的，然而想到就打了..</p><p>最后没时间写T3暴力了，赛后听说T3数据特别水，随便写都能六七十分..</p><p>于是炸的特别惨。</p><p>晚上学了下淀粉质（讲题的时候myh认为机房里没人不会动态点分树…），看题解怎么都看不懂，只不过自己yy很快就写出来了，然而第一次交的时候前向星存边数组没开两倍..？</p><h1 id="Day-37"><a href="#Day-37" class="headerlink" title="Day 37"></a>Day 37</h1><p>今天又是zzq出的题，T1T2都是构造，其中T1没有输入..T1 rand跑了一个小时跑出来 $60$ 分（存种子提交），T2最低档爆搜不会..两个特殊性质subtask写了 $30$ 分。</p><p>T3 也是道思维好题，写了个 $O(n^3)$ 暴力 $30$ 分。</p><h1 id="Day-38"><a href="#Day-38" class="headerlink" title="Day 38"></a>Day 38</h1><p>好像是最后一个改题日..又颓过去了没什么好说的。</p><h1 id="Day-39"><a href="#Day-39" class="headerlink" title="Day 39"></a>Day 39</h1><p>Sooke跟我说他昨天做了这套题…然后告诉我不要看T3，会很惨。然而..</p><p>这次好像是我拿到 $80$ 分最快的一次，打完T1T2拍了一下就开始玩提答了。看了一会儿大约看懂了一点，然后试着百度了一下“lambda”，啥都没查到，然后继续搜“lambda 邱奇”，发现“邱奇数 百度百科”，然后继续搜“邱奇数”，搜到了<a href="https://blog.csdn.net/simonxk/article/details/12679069" target="_blank" rel="noopener">这个</a>。于是开始研究..前面 $6$ 个点有的是自己想的，有的是看懂之后写的，<del>78是直接抄的</del>。最后混到个15名..lx特别ba…只不过今天又来了几个人，感觉不抄的话二三十名好像也有，也海星啦…</p><h1 id="Day-40"><a href="#Day-40" class="headerlink" title="Day 40"></a>Day 40</h1><p>最后一天了呢..已经在布置THUWC了。</p><img src="/2018-2019冬-广二避寒记/THUWC.jpg"><p>今天的题暴力档特别少..又是1h拿到了 $48$ 然后肝不出了…T3有很多人A，和之前D16T2有点像，是给一个排列问划分成若干个连续段的方案数，做法也比较类似，然而没想起来，也不会做…</p><p>这 $40$ 天好多想补的知识点也没补完..题也没怎么改..总体来说挺颓的…最后两天再稍微补一补，调整一下状态吧，考出应有的成绩就好。这篇博客大概就这样完结了，下次就是THUWC/WC游记了。</p><h1 id="Day-41"><a href="#Day-41" class="headerlink" title="Day 41"></a>Day 41</h1><p>本来应该结束了的..今天没去学校，10点的时候dew突然告诉我今天有场比赛？？一看是THUSCH2017原题，然后T1 dl线段树写了2h没调出来…只不过好像并不是膜你赛，广二OJ很早就有这几题了，今天的standing也只有6个人…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 迎风迈出的步伐更艰难，即使走的不远，但踩得更深。一代人只能做一代人的事，完成这个时代赋予的使命就是英雄，大地也会将他的脚印铭记。&lt;/p&gt;
&lt;p&gt; ——&lt;a href=&quot;https://www.bilibili.com/video/av20205319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;乒乓帝国&lt;/a&gt;（句子迷上说是《孤杂记》..）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;突然就得知了要去广二集训。&lt;/p&gt;
&lt;p&gt;然后知道了这次出去可能要一直到 WC，差不多有 $50$ 天。这样一算这个学期我在武汉的时间可能和外出的时间一样多了。&lt;/p&gt;
&lt;p&gt;毕竟是去广州，会暖和很多，也许看不到武汉的雪了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="集训" scheme="https://ouuan.github.io/tags/%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 115 游记</title>
    <link href="https://ouuan.github.io/AtCoder-Beginner-Contest-115/"/>
    <id>https://ouuan.github.io/AtCoder-Beginner-Contest-115/</id>
    <published>2018-12-08T13:50:43.000Z</published>
    <updated>2018-12-14T14:59:51.035Z</updated>
    
    <content type="html"><![CDATA[<p>之前听教练安利，就来打了场 <a href="http://atcoder.jp/" target="_blank" rel="noopener">AtCoder</a>。</p><h2 id="5h"><a href="#5h" class="headerlink" title="-5h"></a>-5h</h2><p><a href="https://abc115.contest.atcoder.jp/" target="_blank" rel="noopener">比赛地址</a></p><p>一开始看到 “Beginner”的时候我还迟疑了一下，看了下上一场 Beginner 的题目，又在网上搜了一下，想着可以熟悉一下 AtCoder ，就准备打了。</p><a id="more"></a><h2 id="0min"><a href="#0min" class="headerlink" title="0min"></a>0min</h2><p>咕咕咕</p><h2 id="5min"><a href="#5min" class="headerlink" title="5min"></a>5min</h2><p>咕咕咕咕咕咕</p><p>只不过幸好咕咕了，我的模板还没搞好..赶紧新建文件夹 <code>atcoder\AtCoder Beginner Contest 115</code>  ，把 $4$ 个用于 CF 的模板扔进去。</p><h2 id="10min"><a href="#10min" class="headerlink" title="10min"></a>10min</h2><p>开始了！</p><p>用了 $0.1s$ 决定用 <code>switch</code> 而不是 <code>if else</code> 。</p><p>用了不知道多久敲完。</p><p>没测样例（<del>废话</del>）直接交了。</p><p>其实我现在还在想，如果 WJ 的时候我去写 T2 而不是刷新看结果会不会涨个一两名…</p><h2 id="12min"><a href="#12min" class="headerlink" title="12min"></a>12min</h2><p>看了下 $10\times10000&lt;10^9$ 。</p><p>用了不知道多久敲完。</p><p>测了样例交了。</p><p><del>其实我现在还在想，如果没测样例我会不会再涨个一两名…</del></p><h2 id="14min"><a href="#14min" class="headerlink" title="14min"></a>14min</h2><p>想了想还是用了快读，毕竟模板里有。</p><p>测样例，<del>没写<code>cout&lt;&lt;ans;</code></del> 。</p><p><del>其实我现在还在想</del>，其实我现在还在想，如果没测样例我会不会掉个十几名。</p><h2 id="16min"><a href="#16min" class="headerlink" title="16min"></a>16min</h2><p>数据范围看起来好小。</p><p>等等，$x$ 的范围？</p><p>预处理汉堡的大小。</p><p>哦，爆 int 了。</p><p><del>其实我现在还在想，如果模板里有<code>#define int long long</code>我会不会再涨个一两名…</del></p><p>写个函数 <code>work(int a)</code> 处理大小为 $a$ 的汉堡，分类讨论乱搞一下应该就行了。</p><p>测样例，<code>#3</code> 看起来好大。</p><p>终于可以安心地看 judging 不用担心浪费时间了。</p><h2 id="130min"><a href="#130min" class="headerlink" title="130min"></a>130min</h2><p>Beginner 定级貌似最高 400 点 rating..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前听教练安利，就来打了场 &lt;a href=&quot;http://atcoder.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AtCoder&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;5h&quot;&gt;&lt;a href=&quot;#5h&quot; class=&quot;headerlink&quot; title=&quot;-5h&quot;&gt;&lt;/a&gt;-5h&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://abc115.contest.atcoder.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一开始看到 “Beginner”的时候我还迟疑了一下，看了下上一场 Beginner 的题目，又在网上搜了一下，想着可以熟悉一下 AtCoder ，就准备打了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="AtCoder" scheme="https://ouuan.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>WC2019 全国模拟赛第二场 T1 题解</title>
    <link href="https://ouuan.github.io/WC2019-%E5%85%A8%E5%9B%BD%E6%A8%A1%E6%8B%9F%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BA-T1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/WC2019-全国模拟赛第二场-T1-题解/</id>
    <published>2018-12-08T04:04:29.000Z</published>
    <updated>2018-12-14T14:59:40.212Z</updated>
    
    <content type="html"><![CDATA[<p>又只会写T1…</p><p><a href="http://noi.ac/contest/54/problem/11" target="_blank" rel="noopener">题目链接</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个排列 $p_{1..n}$，$a_{1..n}$ 为任意的一个排列，定义 $b[a_i]=a[p_i]$，求总共有多少个不同的 $b_{1..n}$ 。</p><a id="more"></a><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>首先，对 $(i,p_i)$ 连边，会得到若干个环。</p><p>环上旋转一下（$\forall i\text{ on the cycle : }i\rightarrow p_i$）得到的置换是本质相同的。节点个数相同的环互换一下是本质相同的。</p><p>先计算把 $n​$ 个节点分成若干个环的方案数：（用 $siz[i]​$ 表示第 $i​$ 个环的大小，$k​$ 表示环的个数，$sum[i]​$ 表示 $\sum\limits_{j=i}^ksiz[j]​$）</p><p>$$S_1=\prod\limits_{i=1}^kC_{sum[i]}^{siz[i]}$$</p><p>然后去掉节点个数相同的环互相交换：（用 $num[i]$ 表示节点个数为 $i$ 的环的个数）</p><p>$$S_2=\frac{S_1}{\prod\limits_{i=1}^nnum[i]!}$$</p><p>然后乘上每个环旋转（旋转造成的不同方案数即固定某个数后剩下的数的排列个数）：</p><p>$$S_3=S_2\times\prod\limits_{i=1}^k(siz[i]-1)!$$</p><p>$S_3$ 就是最终的答案了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>noi.ac 上最短解（其实计算方式和我是一样的..）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mn 1111111</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,i=<span class="number">1</span>,s=<span class="number">1</span>,j,x,p=<span class="number">998244353</span>,a[mn],f[mn],v[mn],t[mn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n); f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;i++) f[i]=f[p%i]*(p-p/i)%p,(s*=i)%=p;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!v[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i,x=<span class="number">0</span>;!v[j];x++,j=a[j]) v[j]=<span class="number">1</span>;</span><br><span class="line">(s*=f[x]*f[++t[x]]%p)%=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己赛时的辣鸡写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line"><span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">&#123;</span><br><span class="line">out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,p[N],dfn[N],low[N],sta[N],dfncnt,top,siz[N],tot,num[N];</span><br><span class="line"><span class="keyword">int</span> x,y,jc[N],inv[N],ans=<span class="number">1</span>,sum;</span><br><span class="line"><span class="keyword">bool</span> ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">n=sum=read();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dfn[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">inv[i]=(<span class="number">1l</span>l*M*M<span class="number">-1l</span>l*(M/i)*inv[M%i])%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">jc[i]=(<span class="number">1l</span>l*jc[i<span class="number">-1</span>]*i)%M;</span><br><span class="line">inv[i]=(<span class="number">1l</span>l*inv[i<span class="number">-1</span>]*inv[i])%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*c(sum,siz[i])%M;</span><br><span class="line">sum-=siz[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*inv[num[i]]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*jc[siz[i]<span class="number">-1</span>]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a==b||b==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1l</span>l*(<span class="number">1l</span>l*jc[a]*inv[b]%M)*inv[a-b]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++dfncnt;</span><br><span class="line">sta[++top]=u;</span><br><span class="line">ins[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (dfn[p[u]]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(p[u]);</span><br><span class="line">low[u]=min(low[u],low[p[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ins[p[u]])</span><br><span class="line">&#123;</span><br><span class="line">low[u]=min(low[u],dfn[p[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low[u]==dfn[u])</span><br><span class="line">&#123;</span><br><span class="line">siz[++tot]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (sta[top]!=u)</span><br><span class="line">&#123;</span><br><span class="line">++siz[tot];</span><br><span class="line">ins[sta[top--]]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">ins[sta[top--]]=<span class="literal">false</span>;</span><br><span class="line">++num[siz[tot]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说不要看到环就 tarjan…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又只会写T1…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://noi.ac/contest/54/problem/11&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个排列 $p_{1..n}$，$a_{1..n}$ 为任意的一个排列，定义 $b[a_i]=a[p_i]$，求总共有多少个不同的 $b_{1..n}$ 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://ouuan.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="noi.ac" scheme="https://ouuan.github.io/tags/noi-ac/"/>
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建指北</title>
    <link href="https://ouuan.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/"/>
    <id>https://ouuan.github.io/hexo博客搭建指北/</id>
    <published>2018-12-06T08:00:37.000Z</published>
    <updated>2019-01-18T14:32:55.607Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了 $3$ 天终于把博客搭建好了…本文会简单介绍一下hexo博客的搭建，并选取一些我自己在配置博客的过程中遇到的问题，说明一下我的解决方案。</p><p>实际上，hexo博客的搭建并不难，难搞的是美化，我在这个过程中遇到了很多问题，不可能在这篇博客中全部陈述出来，最重要的还是勤于百度。</p><a id="more"></a><blockquote><p>本篇博客不完全按照顺序撰写，可以通过页面左边的目录跳转阅读。</p></blockquote><h1 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h1><p>先推荐两篇比较好的教程：<a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a>，<a href="https://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="noopener">使用github+Hexo人人都能拥有一个美美的博客</a>。</p><p>这部分网上讲的已经比较好了，我在这就简单说一下。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>需要安装的软件有：<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>。</p><p>下载安装即可…</p><h2 id="本地设置"><a href="#本地设置" class="headerlink" title="本地设置"></a>本地设置</h2><p>装好之后，在本地创建一个文件夹，下文中称其为“根目录”。</p><blockquote><p>下文中“输入命令”均指在命令行中输入命令（并回车<del>废话</del>），既可以使用 git bash，也可以使用 cmd 或 powershell 。输入命令时若无特别说明都需要 cd 到根目录下。</p></blockquote><p>输入命令 <code>npm install -g hexo</code> 来安装 hexo 。</p><p>输入命令 <code>hexo init</code> 来初始化 hexo 。</p><p>输入命令 <code>npm install</code> 来安装一些需要的包。</p><p>输入命令 <code>hexo s</code>，并在浏览器打开 <code>localhost:4000</code>，在本地预览博客；如果上文步骤进行正确，应该看到一个类似于这样的页面：</p><img src="/hexo博客搭建指北/newblog.jpg"><blockquote><p>注：命令可以缩写，条件是没有开头几个字母相同的其它命令。<code>hexo s</code> 实际上是 <code>hexo server</code> 的缩写；下文中 <code>hexo d</code> 是 <code>hexo deploy</code> 的缩写，<code>hexo g</code> 是 <code>hexo generate</code> 的缩写；<code>hexo clean</code> 不能缩写为 <code>hexo c</code>，因为存在命令 <code>hexo config</code> ，但是可以缩写为 <code>hexo cl</code> 。</p></blockquote><p>按 Ctrl+C 关闭 server 以继续操作。（若出现类似于 <code>终止批处理操作吗(Y/N)?</code> 的提示，输入 <code>y</code> 即可。）</p><p>接着安装博客的主题，可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo 官网</a> 选择主题下载，本篇教程推荐使用 NexT 主题。</p><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo 官网</a> 点击<strong>图片下方蓝色的文字</strong>即可打开主题的 GitHub 主页，一般来说，一个主题的 GitHub 主页上是有用于安装的命令以及配置博客的教程的。</p><p>如果没有的话（或者即使有也一样），你应该输入命令 <code>git clone 主题的Github主页地址 themes/主题名</code> 。例如：<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code> 。</p><p>当然，你也可以使用默认的 landscape 主题，从而不用额外下载主题。</p><p>下载好主题后，用任何一款文本编辑器（记事本也可以），打开根目录下的 <code>_config.yml</code> ，将 <code>theme: landscape</code> 修改为 <code>theme: 你想用的主题名</code> 即可。</p><h2 id="配置-GitHub-仓库"><a href="#配置-GitHub-仓库" class="headerlink" title="配置 GitHub 仓库"></a>配置 GitHub 仓库</h2><p>首先你需要有一个 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 账号。</p><p>然后点击右上角你的头像，打开“Your repositories”，点击绿色的按钮“New”。</p><p>在”Repository name”一栏填入 <code>yourname.github.io</code> （“yourname”指你的 GitHub ID，比如我就填 <code>ouuan.github.io</code>），”Description”可以随便填也可以不填，然后点绿色的按钮“Create repository”。</p><h2 id="将博客上传至-GitHub"><a href="#将博客上传至-GitHub" class="headerlink" title="将博客上传至 GitHub"></a>将博客上传至 GitHub</h2><p>输入命令 <code>ssh-keygen</code> 来生成 SSH，让你输入东西你就空着，按回车（应该要按三次回车）。</p><p>然后用任意的文本编辑器打开 <code>C:\Users\电脑用户名\.ssh\id_rsa.pub</code>（如果装了 vim 可以直接输入命令 <code>vim ~/.ssh/id_rsa.pub</code>），复制里面的内容。</p><p>打开 GitHub，点击右上角的头像，打开“Settings”，选择左边的“SSH and GPG keys”，点绿色的按钮“New SSH key”，Title 随便填，下面的 Key 把刚才复制的东西粘贴进去，然后点绿色的按钮“Add SSH key”。过程中可能需要输入密码。</p><p>输入命令 <code>ssh -T git@github.com</code> ，若出现 <code>Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 表示 SSH 配置成功。</p><p>输入命令 <code>npm install hexo-deployer-git --save</code> 安装 deployer 。</p><p>打开根目录下的 <code>_config.yml</code> ，将最后几行改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>当然”yourname”要改成你的 GitHub ID 。</p><p>依次输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这一步可能要输入密码。</p><p>等几分钟，再用浏览器打开 <code>yourname.github.io</code> ，应该就可以看到你的博客了。（此时别人也可以通过这个网址看到你的博客）</p><h1 id="域名的配置"><a href="#域名的配置" class="headerlink" title="域名的配置"></a>域名的配置</h1><p>实际上，自定义域名基本上没有什么用。但是有一个自己的域名还是一件比较爽的事，会感觉摆脱了束缚（实际上你还是用着 GitHub…）。</p><h2 id="域名的获取"><a href="#域名的获取" class="headerlink" title="域名的获取"></a>域名的获取</h2><p>本篇教程只讲解如何免费获取域名（的 $12$ 个月使用权），当然你也可以通过其它方式购买域名。</p><p>打开 <a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">Freenom</a>，输入自己想用的域名，点击”Check Availability”，有“Get it now”的就是能用的。</p><p>选择好你要的域名后，点右上角的”Checkout”，Period 选择”12 Months @ FREE”，然后点”Continue”，输入邮箱登录或使用其它账号（如 Google 账号）登录（输入邮箱登录经常会出错，而使用其它账号登录需要<a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">科学上网</a>）。</p><h2 id="DNS-配置"><a href="#DNS-配置" class="headerlink" title="DNS 配置"></a>DNS 配置</h2><p>我使用的是 <a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudfare</a>，（<del>因为在学校搭建的博客，手机没电了，国内的服务商注册都需要短信验证码</del>），还是比较方便的。</p><p>先注册一个账号，然后点”Add site”，输入你刚刚获取的域名。</p><p>然后进入站点设置里的 DNS 设置，如图添加两条记录：</p><img src="/hexo博客搭建指北/www.jpg"><img src="/hexo博客搭建指北/at.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.153</span><br></pre></td></tr></table></figure><p>当然要记得把“yourname”换成你的 GitHub ID。推荐关闭 cdn 服务，即点击一下橙色的云使其变成灰色。</p><p>完成后应该是这样的：</p><img src="/hexo博客搭建指北/dns.jpg"><h2 id="连接域名和-DNS"><a href="#连接域名和-DNS" class="headerlink" title="连接域名和 DNS"></a>连接域名和 DNS</h2><p>回到 <a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">Freenom</a>，登录网站，点击右上角的“Services” $\rightarrow$ “My Domains”，找到你刚刚获取的域名，点击 “Manage Domain” $\rightarrow$ “Management Tools” $\rightarrow$ “Nameservers”。</p><p>再回到 <a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudfare</a>，就在刚刚 DNS 设置的下面，有两个域名：</p><img src="/hexo博客搭建指北/nameservers.jpg"><p>再回到 <a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">Freenom</a>，把这两个域名复制进去，然后点”Change Nameservers”。</p><img src="/hexo博客搭建指北/nameservers2.jpg"><h2 id="连接域名和-GitHub"><a href="#连接域名和-GitHub" class="headerlink" title="连接域名和 GitHub"></a>连接域名和 GitHub</h2><p>在 hexo 根目录的 <code>source</code> 子目录下新建文件 <code>CNAME</code>（没有后缀名），用文本编辑器打开，输入如下内容：</p><img src="/hexo博客搭建指北/cname.jpg"><p>当然要替换成你获取的域名。</p><p>然后再输入命令 <code>hexo d</code> ，过几分钟应该就可以从你获取的域名访问你的博客了。</p><h2 id="开启https"><a href="#开启https" class="headerlink" title="开启https"></a>开启https</h2><p>如果不开启的话，访问 <code>https://你的域名</code> 就会显示警告，访问 <code>http://你的域名</code> 就会显示不安全。</p><p>当然如果因为某种原因访问 <code>https://你的域名</code> 已经不会显示警告而且浏览器左上角有绿锁了，就不需要再进行额外的设置了。</p><p>其实很简单，浏览器打开 <code>https://github.com/yourname/yourname.github.io/settings</code> ，找到这里：</p><img src="/hexo博客搭建指北/customdomain.jpg"><p>如果”Enforce HTTPS”前没有打勾，打勾即可。</p><p>如果”Enforce HTTPS”前面是灰色的，无法打勾：</p><ol><li>删掉”Save”前面的域名，点击”Save”。</li><li>重新输入域名，点击”Save”。</li><li>重新发布博客（<code>hexo d</code>）。</li><li>等待几分钟~几小时，再访问你的博客应该就OK了。</li></ol><h2 id="停用域名"><a href="#停用域名" class="headerlink" title="停用域名"></a>停用域名</h2><p>由于免费的域名还是经常会出一些小问题，而且不可避免地会碰上域名到期的问题，所以我在用了半个月自定义域名后停用了..</p><p>单纯停用只需删去 CNAME 文件即可，然后记得更改相关设置（在各种地方引用的博客链接、OAuth App 地址……）。</p><p>然而，在停用后，我自己的电脑上一直无法打开博客主页（会自动跳转到原自定义域名），别人的电脑/手机上可以正常打开。</p><p>解决方法：F12 $\rightarrow$ Network $\rightarrow$ Disable Cache</p><p>勾选后 Ctrl + F5 强制刷新博客主页，然后就可以进了，取消勾选 Disable Cache 后依然正常。</p><p><a href="https://www.huoduan.com/clear-301-cache.html" target="_blank" rel="noopener">方法来源</a></p><h1 id="博客的配置与美化"><a href="#博客的配置与美化" class="headerlink" title="博客的配置与美化"></a>博客的配置与美化</h1><h2 id="根目录下的-config-yml"><a href="#根目录下的-config-yml" class="headerlink" title="根目录下的 _config.yml"></a>根目录下的 <code>_config.yml</code></h2><p>这部分参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官网教程</a>即可。</p><h2 id="主题目录下的-config-yml"><a href="#主题目录下的-config-yml" class="headerlink" title="主题目录下的 _config.yml"></a>主题目录下的 <code>_config.yml</code></h2><p>主题目录下的 <code>_config.yml</code> 指 <code>\themes\主题名\_config.yml</code>。</p><p>这里以 NexT 主题（本文基于 NexT 6.6，其它版本可能有些区别）为例，这个主题的 <code>_config.yml</code> 非常完备，修改配置基本上只需删除/添加注释符号 <code>#</code> 以及改变 <code>true/false</code> 即可。</p><h3 id="选择-NexT-主题的四种之一"><a href="#选择-NexT-主题的四种之一" class="headerlink" title="选择 NexT 主题的四种之一"></a>选择 NexT 主题的四种之一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>将想用的主题前的 <code>#</code> 删掉，在 <code>scheme: Muse</code> 前加上 <code>#</code> 即可。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><p>四种主题的预览在 <code>NexT</code> 主题的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">官网</a>有。</p><h3 id="改变网站图标"><a href="#改变网站图标" class="headerlink" title="改变网站图标"></a>改变网站图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure><p>将你想用的图标放在 <code>\themes\next\source\images</code> 里，然后修改上面的文件名即可。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon16.png</span><br><span class="line">  medium: /images/favicon32.png</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/favicon2.jpg"><img src="/hexo博客搭建指北/favicon.jpg"><h3 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  #since: 2015</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons</span><br><span class="line">    # `heart` is recommended with animation in red (#ff0000).</span><br><span class="line">    name: battery-full</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#808080&quot;</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright: </span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  powered:</span><br><span class="line">    # Hexo link (Powered by Hexo).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">    version: true</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: true</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: true</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.</span><br><span class="line">  # http://www.miitbeian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br></pre></td></tr></table></figure><p><code>icon</code>： <code>© 2019</code> 与用户名之间的图标。（图中 $1$）</p><p>图标名称为 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 上的图标名称。</p><p><code>powered.enable</code>：为 <code>true</code> 则会显示“由 Hexo 强力驱动”。（图中 $2$）</p><p><code>powered.version</code>：为 <code>true</code> 则会显示 Hexo 的版本。（图中 $3$）</p><p><code>powered.enable</code>：为 <code>true</code> 则会显示“主题 – NexT.XX”。（图中 $4$）</p><p><code>powered.version</code>：为 <code>true</code> 则会显示主题的版本。（图中 $5$）</p><img src="/hexo博客搭建指北/foot.jpg"><p>注：根据 NexT 主题的 LICENSE，footer 中<strong>必须</strong>开启 <code>powered.enable</code> 选项。</p><h3 id="“关于”-amp-”标签”"><a href="#“关于”-amp-”标签”" class="headerlink" title="“关于”&amp;”标签”"></a>“关于”&amp;”标签”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>将需要的项目取消注释即可在侧边栏显示。</p><p>如果需要使用“关于”页面，输入命令 <code>hexo new page &quot;about&quot;</code>。</p><p>然后在 <code>\source\about\index.md</code> 中就可以编辑“关于”页面了。</p><p>可以修改 <code>\source\about\index.md</code> 中的 <code>title</code> 项来显示“关于”而非“about”。</p><p>如果需要使用“标签”功能，需要在博文中添加选项 <code>tags</code> ：</p><img src="/hexo博客搭建指北/tagsatblog.jpg"><p>如果有多个标签，每行一个，以 <code>-</code> 开头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br></pre></td></tr></table></figure><p>如果需要使用“标签”页面，输入命令 <code>hexo new page &quot;tags&quot;。</code></p><p>然后向 <code>source\tags\index.md</code> 中添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/tagsindex.jpg"><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>输入命令 <code>npm install hexo-generator-searchdb --save</code> 安装所需的库。</p><p>在根目录下的 <code>_config.yml</code> 的结尾加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>然后在 <code>\themes\next\_config.yml</code> 中，打开 <code>local_search</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="社交网站"><a href="#社交网站" class="headerlink" title="社交网站"></a>社交网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Social Links.</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimeter is the target permalink.</span><br><span class="line"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/ouuan || github</span><br><span class="line">  洛谷: https://www.luogu.org/space/show?uid=49742 || code</span><br><span class="line">  Codeforces: https://www.codeforces.com/profile/ouuan || code</span><br><span class="line">  b站: https://space.bilibili.com/11067182 || tv</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><p>在 <code>social</code> 下每行一个，格式为：<code>名称: 地址 || 图标</code>。</p><p>其中，“图标”为 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 图标名称，但有些图标是不可用的，而且图标也不全，使用的时候要尝试一下图标是否可用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><p>这样设置可以只显示名称不显示图标。</p><h3 id="友情链接（或其它链接）"><a href="#友情链接（或其它链接）" class="headerlink" title="友情链接（或其它链接）"></a>友情链接（或其它链接）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: globe</span><br><span class="line">links_title: 友情链接</span><br><span class="line"># links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  Dew: https://www.cnblogs.com/ppprseter/</span><br><span class="line">  wjyyy: https://www.wjyyy.top/</span><br><span class="line">  Sooke: https://www.luogu.org/blog/Sooke/</span><br><span class="line">  huyufeifei: https://www.cnblogs.com/huyufeifei/</span><br><span class="line">  Rye_Catcher: https://rye-catcher.github.io/</span><br><span class="line">  额冻豆腐: http://www.mayflyyh.com/</span><br></pre></td></tr></table></figure><p><code>links_icon</code>：显示在标题前的图标。</p><p><code>links_title</code>：标题。</p><p><code>links_layout</code>：<code>block</code> 一行一个，<code>inline</code> 一行多个。</p><p><code>links</code>：要显示的链接以及名称。</p><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # in theme directory(source/images): /images/avatar.gif</span><br><span class="line">  # in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/avatar.jpg</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure><p><code>url</code>：头像地址，留空则不显示头像。</p><p><code>rounded</code>：圆/方头像。</p><p><code>opacity</code>：不透明度。</p><p><code>rotated</code>：随光标旋转。</p><h3 id="回到顶部按钮-阅读百分比"><a href="#回到顶部按钮-阅读百分比" class="headerlink" title="回到顶部按钮/阅读百分比"></a>回到顶部按钮/阅读百分比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/b2t.jpg"><h3 id="博客首页不显示全文"><a href="#博客首页不显示全文" class="headerlink" title="博客首页不显示全文"></a>博客首页不显示全文</h3><p>在博文里可以用 <code>&lt;!-- more --&gt;</code> 来标识在首页显示到哪为止。</p><p>可以在 <code>\themes\next\_config.yml</code> 里设置到一定字数自动不显示全文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"># Read more button</span><br><span class="line"># If true, the read more button would be displayed in excerpt section</span><br><span class="line">read_more_btn: true</span><br></pre></td></tr></table></figure><p><code>length</code>：不显示全文的字数上限。</p><p><code>read_more_btn</code>：<img src="/hexo博客搭建指北/readmorebt.jpg"></p><h3 id="代码块复制按钮"><a href="#代码块复制按钮" class="headerlink" title="代码块复制按钮"></a>代码块复制按钮</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Manual define the border radius in codeblock</span><br><span class="line">  # Leave it empty for the default 1</span><br><span class="line">  border_radius:</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result</span><br><span class="line">    show_result: true</span><br></pre></td></tr></table></figure><p><code>enable</code>：启用复制按钮。</p><p><code>show_result</code>：<img src="/hexo博客搭建指北/copyresult.jpg"></p><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="$\LaTeX$"></a>$\LaTeX$</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Math Equations Render Support</span><br><span class="line">math:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Default(true) will load mathjax/katex script on demand</span><br><span class="line">  # That is it only render those page who has &apos;mathjax: true&apos; in Front Matter.</span><br><span class="line">  # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: false</span><br><span class="line"></span><br><span class="line">  engine: mathjax</span><br><span class="line">  #engine: katex</span><br></pre></td></tr></table></figure><p><code>enable</code>：启用 $\LaTeX$ 。</p><p><code>per_page</code>：为 <code>true</code> 则只有博文中有 <code>mathjax: true</code> 才会启用 $\LaTeX$，否则每篇博客都会启用 $\LaTeX$ 。</p><p><code>engine</code>：推荐使用 <code>mathjax</code> 。</p><p>hexo 博客的 mathjax 和 Markdown 有一些冲突，将在后文专门讲解如何解决冲突。</p><h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p>由于 gitment 的服务器有一些问题，推荐使用 gitalk：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: yourname</span><br><span class="line">  repo: yourname.github.io</span><br><span class="line">  client_id: </span><br><span class="line">  client_secret: </span><br><span class="line">  admin_user: yourname</span><br></pre></td></tr></table></figure><p>这里需要<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">在 GitHub 新建一个 OAuth App</a>，”Homepage URL”和”Authorization callback URL”填你的域名（如果没有申请域名的话就填 <code>yourname.github.io</code>）：</p><img src="/hexo博客搭建指北/newapp.jpg"><p>需要注意的是，<strong>地址要严格和博客访问地址一样</strong>，<code>http</code> 和 <code>https</code>不能混，有无 <code>www</code> 也不能混。</p><p>然后将 <code>Client ID</code> 和 <code>Client Secret</code> 填入 <code>\themes\next\_config.yml</code> 中。</p><h3 id="访客记录"><a href="#访客记录" class="headerlink" title="访客记录"></a>访客记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/visitors.jpg"><img src="/hexo博客搭建指北/views.jpg"><h3 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h3><p>书签的功能是关闭页面/手动点击书签按钮时，保存这篇博客看到的位置，下次点进这篇博客时继续从这个位置开始。</p><p>安装插件：<code>git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark</code></p><p>更改 <code>\themes\next\_config.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Bookmark Support</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-bookmark</span><br><span class="line">bookmark:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto</span><br><span class="line">  #   - save the reading position when closing the page</span><br><span class="line">  #   - or clicking the bookmark-icon</span><br><span class="line">  # if manual, only save it by clicking the bookmark-icon</span><br><span class="line">  save: manual</span><br></pre></td></tr></table></figure><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><h3 id="博客背景"><a href="#博客背景" class="headerlink" title="博客背景"></a>博客背景</h3><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code>，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image:url(/images/background.jpg);</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把背景图片重命名为 <code>background.jpg</code>，放入 <code>\themes\source\images</code>（当然也可以更改<code>background-image:url()</code>）。</p><p><code>background-size: cover;</code> 表示宽度缩放至页面大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image:url(/images/background.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果修改成这样的话背景图片就不会滚动。</p><p>如果不想让博客内容挡住背景，可以设置博客内容的透明度，在 <code>\themes\next\source\css\_custom\custom.styl</code> 中加入下面的代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.main-inner &#123;</span><br><span class="line">    opacity: 0.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博文自定义排序"><a href="#博文自定义排序" class="headerlink" title="博文自定义排序"></a><a href="https://blog.csdn.net/qq_32454537/article/details/79482920" target="_blank" rel="noopener">博文自定义排序</a></h3><p>打开 <code>\node_modules\hexo-generator-index\lib\generator.js</code> 。</p><p>在末尾添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">    if(a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        if(a.top == b.top) return b.date - a.date;</span><br><span class="line">        else return b.top - a.top;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else return b.date - a.date;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在博文设置中加入 <code>top: x</code> 即可，会以 top 为第一关键字，时间为第二关键字排序。若 top 为空则视作 -INF 。</p><img src="/hexo博客搭建指北/top.jpg"><h3 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h3><p>如果想在 <code>https://github.com/yourname/yourname.github.io</code> 让别人看到你的博客的简介，就需要写一个 <code>README.md</code> 放在根目录下的 <code>source</code> 文件夹内。</p><p>然而，只是这样的话， <code>README.md</code> 会被渲染成 html，所以需要更改根目录下 <code>_config.yml</code> 的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><h3 id="自定义404页面"><a href="#自定义404页面" class="headerlink" title="自定义404页面"></a>自定义404页面</h3><p>首先写一个 <code>\source\404.html</code> 。</p><p>至于怎么写html..<del>这里地方太小写不下</del></p><p>事实上可以新建一篇博客，用 Markdown 写一个 404 页面，然后 <code>hexo g</code> 在 <code>\public</code> 里找到博客的页面，把相关部分直接复制过来。</p><p>可以参考一下我的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>您可能访问了错误的网址<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://i.loli.net/2018/10/27/5bd4705dd844f.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.ouuan.cf"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>回到博客主页<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-1);"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，如果直接这样发布，html 会被渲染，就跟一个自定义页面（<code>hexo new page</code>）一样了。</p><p>所以要修改根目录下的 <code>_config.yml</code>，在 <code>skip_render:</code> 后添加 <code>404.html</code>，如果有多项用 <code>-</code> 隔开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - README.md</span><br><span class="line"> - 404.html</span><br></pre></td></tr></table></figure><p>发布完成后，访问一个错误的网址，比如 <code>你的域名/qaq</code> 就可以查看效果了。</p><h1 id="博客的写作"><a href="#博客的写作" class="headerlink" title="博客的写作"></a>博客的写作</h1><h2 id="Markdown-的使用"><a href="#Markdown-的使用" class="headerlink" title="Markdown 的使用"></a>Markdown 的使用</h2><p>网上有很多 Markdown 的学习资源，<del>我自己是在<a href="https://www.luogu.org/paste" target="_blank" rel="noopener">洛谷剪贴板</a>学会的</del>。</p><p>我以前一般都用洛谷剪贴板编辑 Markdown，但 hexo 博客需要在本地编辑 <code>.md</code> 文件，这时普通的文本编辑器就不太方便了。我推荐 <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> 这款软件，还是挺方便的。</p><h2 id="撰写博客前的准备"><a href="#撰写博客前的准备" class="headerlink" title="撰写博客前的准备"></a>撰写博客前的准备</h2><p>打开根目录下的 <code>_config.yml</code> ，将 <code>post_asset_folder</code>  设为 <code>true</code>。</p><p>这样就可以把图片放到博客里而不用其它图床了。</p><p>然后把 <code>\source\_posts\hello-world.md</code> 删除。</p><h2 id="Hexo-博客的撰写"><a href="#Hexo-博客的撰写" class="headerlink" title="Hexo 博客的撰写"></a>Hexo 博客的撰写</h2><p>新建一篇博客：<code>hexo new &quot;博客名&quot;</code>。</p><p>然后等几秒钟，在 <code>\source\_posts</code> 文件夹下，就会生成 <code>博客名</code> 这个文件夹（如果你把 <code>post_asset_folder</code>  设为 <code>true</code> 了）以及 <code>博客名.md</code>。</p><p>撰写博客就是编辑 <code>博客名.md</code>。</p><p>这个文件的开头是博客的一些设置，可以在 <code>scaffolds\posts.md</code> 中修改默认设置，我的默认设置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">top: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后就可以写 Markdown 格式的文章了。（<code>top</code> 是自定义文章排序，上文中介绍过）</p><img src="/hexo博客搭建指北/post.jpg"><p>需要注意的是，在洛谷代码块可以不加”cpp”，但在 hexo 上，一定要加上”cpp”：</p><img src="/hexo博客搭建指北/cpp.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;hello world!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用本地图片"><a href="#引用本地图片" class="headerlink" title="引用本地图片"></a>引用本地图片</h2><p>引用链接/网络上的图片格式与普通 Markdown 相同（<code>[链接名称](链接地址)</code> 和 <code>![图片描述](图片地址)</code>），引用本地图片需要把 <code>post_asset_folder</code>  设为 <code>true</code> ，然后把图片放在与博客同名的文件夹中，然后只用 <code>![图片描述](图片文件名)</code> 就可以引用了。</p><img src="/hexo博客搭建指北/pic1.jpg"><img src="/hexo博客搭建指北/pic2.jpg"><p>在编辑器里显示不出图片是正常的。</p><p>还有另一种方式引用图片，<img src="/hexo博客搭建指北/refpic.jpg" title="这是一张用这种方式引用的图片"></p><p>用这种方式引用图片的话，把鼠标放在上面会显示图片描述（上面这张图就是用这种方式引用的）。</p><p>只有这种方式引用图片才能在博客首页正常显示图片，否则只能点进博客才能看到图片。</p><h2 id="LaTeX-的使用"><a href="#LaTeX-的使用" class="headerlink" title="$\LaTeX$ 的使用"></a>$\LaTeX$ 的使用</h2><h3 id="LaTeX-概述"><a href="#LaTeX-概述" class="headerlink" title="$\LaTeX$ 概述"></a>$\LaTeX$ 概述</h3><p>$\LaTeX$ 主要用于编辑数学公式，十分方便，网上也有很多学习资源，比如：<a href="https://www.luogu.org/blog/IowaBattleship/latex-gong-shi-tai-quan" target="_blank" rel="noopener">LaTeX数学公式大全</a>。</p><p>在支持 $\LaTeX$ 的 Markdown 文档里，使用两个美元符号将 $\LaTeX$ 公式括起来，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~QAQ$f_i=\sum\limits_&#123;j=1&#125;^ia_j$f_i=\sum\limits_&#123;j=1&#125;^ia_j~~</span><br></pre></td></tr></table></figure><p><del>QAQ$f_i=\sum\limits_{j=1}^ia_j$f_i=\sum\limits_{j=1}^ia_j</del></p><p>也可以用一对双美元符号使公式居中显示在单行，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$f_i=1$</span><br><span class="line"></span><br><span class="line">$$f_i=1$$</span><br></pre></td></tr></table></figure><p>$f_i=1$</p><p>$$f_i=1$$</p><p>在 Typora 中使用 $\LaTeX$  需要将设置中的”Markdown 扩展语法”全部勾选。</p><blockquote><p>P.S. $\LaTeX$：<code>\LaTeX</code></p></blockquote><h3 id="启用-LaTeX"><a href="#启用-LaTeX" class="headerlink" title="启用 $\LaTeX$"></a>启用 $\LaTeX$</h3><p>在 <code>\themes\next\_config.yml</code>  中将 <code>mathjax</code> 设为 <code>true</code>，然后将 <code>per_page</code> 设为 <code>false</code> 或者在需要启用 <code>\LaTeX</code> 的博文开头加上 <code>mathjax: true</code> 。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>由于<strong>hexo博客中即使是$$内的字符也会被当成 Markdown 渲染</strong>，类似于 <code>$f_{f_i}$</code>、<code>$a*b*c$</code>、<code>$[x,y](1&lt;x&lt;y&lt;2)$</code> 之类的，都会被错误地渲染。</p><p>解决这个问题，首先要打开 <code>\node_modules\marked\lib\marked.js</code>，搜索 <code>nolink</code>，应该在 $470$ 行左右。</p><p>然后，将这一块修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var inline = &#123;</span><br><span class="line">  escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</span><br><span class="line">  autolink: /^&lt;(scheme:[^\s\x00-\x1f&lt;&gt;]*|email)&gt;/,</span><br><span class="line">  url: noop,</span><br><span class="line">  tag: /^&lt;!--[\s\S]*?--&gt;|^&lt;\/?[a-zA-Z0-9\-]+(?:&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|\s[^&lt;&apos;&quot;&gt;\/\s]*)*?\/?&gt;/,</span><br><span class="line">  link: /^!?\[(inside)\]\(href\)/,</span><br><span class="line">  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,</span><br><span class="line">  nolink: /^!?\[((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\]/,</span><br><span class="line">  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  code: /^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,</span><br><span class="line">  br: /^ &#123;2,&#125;\n(?!\s*$)/,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: /^[\s\S]+?(?=[\\&lt;!\[`*]|\b_| &#123;2,&#125;\n|$)/</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样做取消了 <code>_text_</code> 的斜体意义，但 <code>*text*</code> 仍会被转义为斜体。</p><p>解决办法有两种：</p><ol><li>放弃使用 <code>*</code> ，全部用 <code>\times</code> 代替或者省略掉。</li><li>取消 <code>*</code> 的转义。</li></ol><p>推荐使用第一种方法，否则你的博客中就无法使用斜体了。</p><hr><p>如果想要使用 <code>*</code> 而放弃斜体：</p><p>在 <code>\node_modules\marked\lib\marked.js</code> 中搜索 <code>Renderer.prototype.em</code> ，应该在 $884$ 行左右。</p><p>将这一段改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Renderer.prototype.em = function(text) &#123;</span><br><span class="line">  return &apos;*&apos; + text + &apos;*&apos;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>前文提到了，<strong>hexo博客中即使是$$内的字符也会被当成 Markdown 渲染</strong>，所以类似于 <code>$[x,y](1&lt;x&lt;y&lt;2)$</code> 的，要在 <code>]</code> 和 <code>(</code> 中间加一个空格，就不会被错误地转义了。</p><h2 id="博客的发布"><a href="#博客的发布" class="headerlink" title="博客的发布"></a>博客的发布</h2><p>其实前文提到过，依次输入以下三条命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>发布之前还可以执行 <code>hexo s</code> 并在本地使用浏览器打开 <code>localhost:4000</code> 进行预览。</p><p>当然也可以使用 <code>hexo g -d</code> 命令。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了 $3$ 天终于把博客搭建好了…本文会简单介绍一下hexo博客的搭建，并选取一些我自己在配置博客的过程中遇到的问题，说明一下我的解决方案。&lt;/p&gt;
&lt;p&gt;实际上，hexo博客的搭建并不难，难搞的是美化，我在这个过程中遇到了很多问题，不可能在这篇博客中全部陈述出来，最重要的还是勤于百度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ouuan.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>WC2019 全国模拟赛第一场 T1 题解</title>
    <link href="https://ouuan.github.io/WC2019-%E5%85%A8%E5%9B%BD%E6%A8%A1%E6%8B%9F%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA-T1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/WC2019-全国模拟赛第一场-T1-题解/</id>
    <published>2018-12-04T12:29:47.000Z</published>
    <updated>2018-12-14T15:01:23.081Z</updated>
    
    <content type="html"><![CDATA[<p>由于只会T1，没法写游记，只好来写题解了…</p><p><a href="http://noi.ac/problem/26" target="_blank" rel="noopener">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个数列，每次可以任取两个不相交的区间，取一次的贡献是这两个区间里所有数的最小值，求所有取法的贡献和，对 $10^9+7$ 取模。</p><p>数列长度 $2\times 10^5$ ，值域 $1$ ~ $10^9$ 。</p><a id="more"></a><h2 id="O-n-4-做法"><a href="#O-n-4-做法" class="headerlink" title="$O(n^4)$ 做法"></a>$O(n^4)$ 做法</h2><p>预处理区间最小值，枚举选的两个区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">60</span>][<span class="number">60</span>],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,l;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j]=min(a[i][j<span class="number">-1</span>],a[j][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i;j&lt;n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (k=j+<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (l=k;l&lt;=n;++l)</span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+min(a[i][j],a[k][l]))%M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-nlogn-做法"><a href="#O-nlogn-做法" class="headerlink" title="$O(nlogn)$ 做法"></a>$O(nlogn)$ 做法</h2><blockquote><p>warning：接下来的文章里“的”字嵌套情况非常严重，文字叙述比较繁杂，看不懂十分正常，建议看懂一小部分然后自己推。</p></blockquote><p>考虑每个元素作为贡献的区间是哪些，为了把每个区间分给唯一的元素，规定一个区间的贡献是最小值里最靠左的（ e.g. <code>4 3 2 4 2 2</code> 的贡献是 $3$ 号元素，即最左边的 $2$ ）。所以，可以利用栈在 $O(n)$ 的时间内预处理出每个元素作为贡献的区间的左端点和右端点的范围：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;=a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个元素作为贡献的区间就是 $[x,y] (l_i\le x\le i\le y\le r_i)$，每个元素作为贡献的区间数就是 $t_i=(i-l_i+1)\times(r_i-i+1)$ 。</p><p>然后，将元素按值从大到小排序，就能计算出区间数的后缀和 $suf[i]$，但一个元素的总贡献并不是 $t_i\times suf[i+1]$，因为这些区间可能与当前元素作为贡献的区间相交。</p><p>注意到，要想和当前元素作为贡献的区间相交，必须 $[x,y] (l_i\le x\le y\le r_i)$ ，而这样的区间除了当前元素作为贡献的区间，贡献都排在当前元素之后（值比当前元素大或值相等但位置靠后），所以这样的区间除了当前元素作为贡献的区间，都是我们要找的与当前元素作为贡献的区间相交的贡献更靠后的区间。</p><blockquote><p>注：下面这段话中“相交的区间对”指（与当前元素作为贡献的区间相交的贡献更靠后的区间，当前元素作为贡献的区间）这样的一对区间；“相交的区间”指与当前元素作为贡献的区间相交的贡献更靠后的区间。</p></blockquote><p>接下来就要计算相交的区间有多少对。首先，相交的区间不可能跨过当前元素，否则就是当前元素作为贡献的区间；所以，相交的区间要么是 $[x,y] (l_i\le x\le y&lt;i)$ ，要么是 $[x,y] (i&lt;x\le y\le r_i)$。先计算 $[x,y] (l_i\le x\le y&lt;i)$ 与当前元素作为贡献的区间相交的对数，先考虑 $y$ 固定时，个数为 $(r_i-i+1)\times(y-l_i+1)^2$ ，其中：$y-l_i+1$ 既是相交的区间左端点的个数，也是与相交的区间相交的当前元素作为贡献的区间的左端点的个数；$r_i-i+1$ 是与相交的区间相交的当前元素作为贡献的区间的右端点的个数。所以，总数是 $(r_i-i+1)\times\sum\limits_{y=l_i}^{i-1}(y-l_i+1)^2$ ，乘号右边是自然数平方和，可以用公式计算，所以就是 $(r_i-i+1)\times\frac{(i-l_i)\times(i-l_i+1)\times(2i-2l_i+1)}6$ 。$[x,y] (i&lt;x\le y\le r_i)$ 同理，总数为 $(i-l_i+1)\times\frac{(r_i-i)\times(r_i-i+1)\times(2r_i-2i+1)}6$ 。</p><p>所以，把相交的总对数减掉就可以了。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line"><span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">&#123;</span><br><span class="line">out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIX=<span class="number">166666668</span>; <span class="comment">//6模1e9+7的逆元</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> id,w,l,r,t;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; b) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,suf[N],sta[N],top,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">n=read();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i].w=read();</span><br><span class="line">a[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;=a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i].t=(i-a[i].l+<span class="number">1</span>)*(a[i].r-i+<span class="number">1</span>)%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">suf[i]=(suf[i+<span class="number">1</span>]+a[i].t)%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+(a[i].w*suf[i+<span class="number">1</span>]%M)*a[i].t)%M;</span><br><span class="line">ans=(ans-(a[i].id-a[i].l)*(a[i].id-a[i].l+<span class="number">1</span>)%M*(<span class="number">2</span>*a[i].id<span class="number">-2</span>*a[i].l+<span class="number">1</span>)%M*SIX%M*(a[i].r-a[i].id+<span class="number">1</span>)%M*a[i].w%M+M)%M; <span class="comment">//重复区间在左</span></span><br><span class="line">ans=(ans-(a[i].r-a[i].id)*(a[i].r-a[i].id+<span class="number">1</span>)%M*(<span class="number">2</span>*a[i].r<span class="number">-2</span>*a[i].id+<span class="number">1</span>)%M*SIX%M*(a[i].id-a[i].l+<span class="number">1</span>)%M*a[i].w%M+M)%M; <span class="comment">//重复区间在右</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于只会T1，没法写游记，只好来写题解了…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://noi.ac/problem/26&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给你一个数列，每次可以任取两个不相交的区间，取一次的贡献是这两个区间里所有数的最小值，求所有取法的贡献和，对 $10^9+7$ 取模。&lt;/p&gt;
&lt;p&gt;数列长度 $2\times 10^5$ ，值域 $1$ ~ $10^9$ 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://ouuan.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="杂题" scheme="https://ouuan.github.io/tags/%E6%9D%82%E9%A2%98/"/>
    
      <category term="noi.ac" scheme="https://ouuan.github.io/tags/noi-ac/"/>
    
  </entry>
  
  <entry>
    <title>树上背包的上下界优化</title>
    <link href="https://ouuan.github.io/%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E7%9A%84%E4%B8%8A%E4%B8%8B%E7%95%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://ouuan.github.io/树上背包的上下界优化/</id>
    <published>2018-11-28T09:16:35.000Z</published>
    <updated>2018-12-14T14:40:54.204Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了几道树上背包的题目，很多题目的数据范围都很小，但实际上树上背包有多种方式可以优化到 $O(nm)$ （$n$ 为节点数，$m$ 为体积的值域），比如先序遍历优化（何森《先序遍历用于优化树形背包问题》），求泛化物品的并（徐持衡《浅谈几类背包题》）……经过一番学习，觉得还是上下界优化理解起来最简单，也比较好写，适用范围广，唯一比其它做法复杂的地方就是复杂度分析。</p><a id="more"></a><h1 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h1><p>这里以一道经典的树上背包作为例题：<a href="https://www.luogu.org/problemnew/show/U53204" target="_blank" rel="noopener">【数据加强版】选课</a></p><p>直接把我出的数据加强版放上来了..反正题面里有原题链接QAQ</p><blockquote><p>注：本文中用 $a_i$ 代指题面中的 $s_i$ 。</p></blockquote><h2 id="O-nm-2-做法"><a href="#O-nm-2-做法" class="headerlink" title="$O(nm^2)$ 做法"></a>$O(nm^2)$ 做法</h2><p>用 $f_{u,i}$ 表示以 $u$ 为根的子树中选 $i$ 门课的最大得分，那么 $f_{u,i}=\min\limits_{\forall fa[v_j]=u,\sum k_j=i-1}(\sum f[v_j][k_j])+a_u$，而这个转移可以通过背包实现，依次合并每棵子树，每次合并时枚举 $i$ 和 $k_j$ ，$f_{u,i}=\max(f_{u,i},f_{u,i-k_j}+f_{v_j,k_j})$ 。</p><p>需要倒序枚举 $i$ 防止状态在转移前被覆盖。否则的话dp数组要多一维。</p><p>由于可能是森林，所有没有直接先修课的节点，父亲视为节点 $0$，实际上就要选 $m+1$ 个节点。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>]=a[u];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,v;</span><br><span class="line">    <span class="keyword">for</span> (i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        <span class="keyword">for</span> (j=m+<span class="number">1</span>;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;j;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上下界优化"><a href="#上下界优化" class="headerlink" title="上下界优化"></a>上下界优化</h2><p>注意背包转移的这部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (j=m+<span class="number">1</span>;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;j;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        f[u][j]=max(f[u][j],f[u][k]+f[v][j-k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，这里面有很多状态都是没有意义的：</p><ol><li><p>转移时已经合并了大小之和为 $s$ 的一些子树，那么 $f_{u,i}(i&gt;s)$ 实际上是没有意义的。</p></li><li><p>$f_{v,i}(i&gt;siz[v])$ 也是没有意义的。</p></li><li><p>$f_{u,i}(i&gt;m)$ 是没有作用的。</p></li></ol><p>所以，可以对 $j$ 和 $k$ 的枚举范围进行优化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    f[u][<span class="number">1</span>]=a[u];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,v;</span><br><span class="line">    <span class="keyword">for</span> (i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        <span class="keyword">for</span> (j=min(m+<span class="number">1</span>,siz[u]+siz[v]);j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k=max(<span class="number">1</span>,j-siz[u]);k&lt;=siz[v]&amp;&amp;k&lt;j;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                f[u][j]=max(f[u][j],f[u][j-k]+f[v][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>可以参考<a href="https://blog.csdn.net/lyd_7_29/article/details/79854245" target="_blank" rel="noopener">这篇博客</a>。</p><h2 id="形象的解释"><a href="#形象的解释" class="headerlink" title="形象的解释"></a>形象的解释</h2><p>每个点对都只会在 $lca$ 处合并一次，所以总的复杂度是 $O(n^2)$ 的。</p><p>这个解释很简洁，需要自己意会一下..</p><h2 id="严格？证明"><a href="#严格？证明" class="headerlink" title="严格？证明"></a>严格？证明</h2><p>令 $T_u$ 为处理子树 $u$ 的总用时，那么：</p><p>$\begin{aligned}T_u&amp;=\left(\sum\limits_{\forall fa[v_i]=u}T_{v_i}\right)+t_u\\\\t_u&amp;=1+(1+siz[v_1])\times siz[v_1]+(1+siz[v_1]+siz[v_2])\times siz[v_2]+\cdots+siz[u]\times siz[v_k]\\&amp;=1+\sum\limits_{\forall fa[v_i]=u}siz[v_i]\times(siz[u]+1)\\&amp;=siz[u]^2\end{aligned}$</p><p>对于叶子节点 $u$ ，$T(u)=1$ ，是 $O(siz[u]^2)$ 的。</p><p>对于儿子都是叶子节点的节点 $u$，由于平方和小于和平方，$\sum\limits_{\forall fa[v_i]=u}T_{v_i}$ 也是 $O(siz[u]^2)$ 的。</p><p>可以这样递归地说明，对于任意节点 $u$ ，$\sum\limits_{\forall fa[v_i]=u}T_{v_i}$ 都是 $O(siz[u]^2)$ 的。</p><p>又因为 $t(u)$ 是 $O(siz[u]^2)$ 的，$T(u)$ 就是 $O(siz[u]^2)$ 的。</p><p>所以解决整个问题就是 $O(n^2)$ 的。</p><h2 id="严格！证明"><a href="#严格！证明" class="headerlink" title="严格！证明"></a>严格！证明</h2><p>枚举过程中还要对 $m$ 取 min ，所以应该是这样的：</p><p>$\begin{aligned}t_u&amp;=1+\min(m,1+siz[v_1])\times \min(m,siz[v_1])+\min(m,1+siz[v_1]+siz[v_2])\times \min(m,siz[v_2])+\cdots+\min(m,siz[u])\times \min(m,siz[v_k])\\&amp;\le m\times siz[u]\end{aligned}$</p><p>所以，$t(u)$ 是 $O(\min(siz[u],m)\times siz[u])$ 的。</p><p>对于 $siz[u]\le m$，$T(u)$ 是 $O(siz[u]^2)$ 的。</p><p>对于 $siz[u]&gt;m$，$\sum\limits_{\forall fa[v_i]=u,siz[v_i]\le m}T_{v_i}$ 是 $O\left(\left(\sum\limits_{\forall fa[v_i]=u,siz[v_i]\le m}siz[v_i]\right)^2\right)$ 的；$\sum\limits_{\forall fa[v_i]=u,siz[v_i]&gt;m}T_{v_i}$ 是 $O\left(m\times\sum\limits_{\forall fa[v_i]=u,siz[v_i]&gt;m}siz[v_i]\right)$ 的；所以，$T(u)$ 是 $O(m\times siz[u])$ 的。</p><p>所以，解决整个问题是 $O(nm)$ 的。</p><h1 id="其它例题"><a href="#其它例题" class="headerlink" title="其它例题"></a>其它例题</h1><p><a href="https://www.luogu.org/problemnew/show/U53878" target="_blank" rel="noopener">【数据加强版】道路重建</a></p><h1 id="dl代码"><a href="#dl代码" class="headerlink" title="dl代码"></a>dl代码</h1><p>我出的那两道数据加强版略有些毒瘤..（$n\times m\le 10^8$）</p><p>大约需要这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],nxt[N],to[N],cnt;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N],f[<span class="number">100000010</span>],siz[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;k,a+i);</span><br><span class="line">        add(k,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,f[m+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt]=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    to[cnt]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    f[u*(m+<span class="number">2</span>)+<span class="number">1</span>]=a[u];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,v;</span><br><span class="line">    <span class="keyword">for</span> (i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        <span class="keyword">for</span> (j=min(m+<span class="number">1</span>,siz[u]+siz[v]);j&gt;=<span class="number">1</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k=max(<span class="number">1</span>,j-siz[u]);k&lt;=siz[v]&amp;&amp;k&lt;j;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                f[u*(m+<span class="number">2</span>)+j]=max(f[u*(m+<span class="number">2</span>)+j],f[u*(m+<span class="number">2</span>)+j-k]+f[v*(m+<span class="number">2</span>)+k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于另一种-O-nm-做法"><a href="#关于另一种-O-nm-做法" class="headerlink" title="关于另一种 $O(nm)$ 做法"></a>关于另一种 $O(nm)$ 做法</h1><p>一开始我在洛谷发了篇选课的题解，然后没过…</p><p><a href="https://www.luogu.org/blog/yyfouuan/solution-p2014" target="_blank" rel="noopener">那篇题解</a>用的是求泛化物品的并（徐持衡《浅谈几类背包题》）</p><p>虽然说洛谷好像还没有上下界优化的题解..但最近好几篇题解没过审，都不太想在洛谷发题解了…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了几道树上背包的题目，很多题目的数据范围都很小，但实际上树上背包有多种方式可以优化到 $O(nm)$ （$n$ 为节点数，$m$ 为体积的值域），比如先序遍历优化（何森《先序遍历用于优化树形背包问题》），求泛化物品的并（徐持衡《浅谈几类背包题》）……经过一番学习，觉得还是上下界优化理解起来最简单，也比较好写，适用范围广，唯一比其它做法复杂的地方就是复杂度分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://ouuan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树形dp" scheme="https://ouuan.github.io/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>浅谈邻项交换排序的应用以及需要注意的问题</title>
    <link href="https://ouuan.github.io/%E6%B5%85%E8%B0%88%E9%82%BB%E9%A1%B9%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://ouuan.github.io/浅谈邻项交换排序的应用以及需要注意的问题/</id>
    <published>2018-11-18T00:05:50.000Z</published>
    <updated>2018-12-14T14:59:07.891Z</updated>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="浅谈邻项交换排序的应用以及需要注意的问题.pdf" width="100%" height="550" type="application/pdf"></div><blockquote><p>邻项交换排序是一种常见的贪心算法，通过比较两个相邻元素交换前后的优劣对整个序列进行排序，从而使得这个序列成为题目所求的最优解。然而，邻项交换排序的应用有一些需要注意的地方，稍有不慎便会成为一个错误的算法。</p></blockquote><a id="more"></a><h1 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h1><h2 id="例题引入"><a href="#例题引入" class="headerlink" title="例题引入"></a>例题引入</h2><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P1080" target="_blank" rel="noopener">NOIP2012提高组D1T2 国王游戏</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>恰逢 $H$ 国国庆，国王邀请 $n$ 位大臣来玩一个有奖游戏。首先，他让每个大臣在左、右手上面分别写下一个整数，国王自己也在左、右手上各写一个整数。然后，让这 $n $位大臣排成一排，国王站在队伍的最前面。排好队后，所有的大臣都会获得国王奖赏的若干金币，每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。</p><p>国王不希望某一个大臣获得特别多的奖赏，所以他想请你帮他重新安排一下队伍的顺序，使得获得奖赏最多的大臣，所获奖赏尽可能的少。注意，国王的位置始终在队伍的最前面。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含一个整数 $n$ ，表示大臣的人数。</p><p>第二行包含两个整数 $a$ 和 $b$ ，之间用一个空格隔开，分别表示国王左手和右手上的整数。</p><p>接下来 $n$ 行，每行包含两个整数 $a$ 和 $b$ ，之间用一个空格隔开，分别表示每个大臣左手和右手上的整数。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，表示重新排列后的队伍中获奖赏最多的大臣所获得的金币数。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于 $20\%$ 的数据，有 $1\le n\le 10,0&lt;a,b&lt;8$；</p><p>对于 $40\%$ 的数据，有 $1\le n\le 20,0&lt;a,b&lt;8$；</p><p>对于 $60\%$ 的数据，有 $1\le n\le 100$；</p><p>对于 $60\%$ 的数据，保证答案不超过 $10^9$；</p><p>对于 $100\%$ 的数据，有 $1\le n\le 1000,0&lt;a,b&lt;10000$ 。</p><h2 id="使用邻项交换排序解决问题"><a href="#使用邻项交换排序解决问题" class="headerlink" title="使用邻项交换排序解决问题"></a>使用邻项交换排序解决问题</h2><p>选取相邻的两个大臣 $i$ 和 $j$ （$j$ 此时在 $i$ 后一个），分别用 $a_i,b_i,a_j,b_j$ 表示这两位大臣左手上和右手上的数字，设这两位大臣前面的所有大臣左手上的数乘积为 $k$ 。</p><p>此时，若调整这两名大臣的顺序，对前面和后面的大臣都不会造成影响，因此我们只要使得这两位大臣中获得较多奖赏的那位获得的奖赏尽量少即可。</p><p>当 $i$ 在前 $j$ 在后时，这个值为 $\max(\frac k{b_i},\frac {k a_i}{b_j})$ 。</p><p>当 $j$ 在前 $i$ 在后时，这个值为 $\max(\frac k{b_j},\frac {k a_j}{b_i})$ 。</p><p>因此，若 $\max(\frac k{b_i},\frac {k a_i}{b_j})&gt;\max(\frac k{b_j},\frac {k a_j}{b_i})$ ，就需要交换 $i$ 和 $j$ 。</p><p>实际上，由于 $\frac {k a_i}{b_j}\ge\frac k{b_j},\frac {k a_j}{b_i}\ge\frac k{b_i}$ ，只需比较 $\frac {k a_i}{b_j}$ 和 $\frac {k a_j}{b_i}$ ，也就只需比较 $\frac {a_i}{b_j}$ 和 $\frac {a_j}{b_i}$ ，即：若 $a_i b_i&gt;a_j b_j$，就要交换 $i$ 和 $j$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a*b&lt;y.a*y.b;</span><br><span class="line">&#125;</span><br><span class="line">&#125; dc[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,ans,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;dc[i].a&gt;&gt;dc[i].b;</span><br><span class="line">&#125;</span><br><span class="line">sort(dc+<span class="number">1</span>,dc+n+<span class="number">1</span>);</span><br><span class="line">k=dc[<span class="number">0</span>].a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=max(ans,k/dc[i].b);</span><br><span class="line">k*=dc[i].a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以上代码即可得到60分，而AC此题需要使用高精度乘除法，不在本文讨论范围内。</p><h1 id="使用邻项交换排序需要注意的问题"><a href="#使用邻项交换排序需要注意的问题" class="headerlink" title="使用邻项交换排序需要注意的问题"></a>使用邻项交换排序需要注意的问题</h1><h2 id="另一道例题"><a href="#另一道例题" class="headerlink" title="另一道例题"></a>另一道例题</h2><h3 id="题目来源-1"><a href="#题目来源-1" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P2123" target="_blank" rel="noopener">洛谷P2123 皇后游戏</a></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>皇后有 $n$ 位大臣，每位大臣的左右手上面分别写上了一个正整数。恰逢国庆节来临，皇后决定为 $n$ 位大臣颁发奖金，其中第 $i$ 位大臣所获得的奖金数目为第 $i－1$ 位大臣所获得奖金数目与前 $i$ 位大臣左手上的数的和的较大值再加上第 $i$ 位大臣右手上的数。</p><p>形式化地讲：我们设第 $i$ 位大臣左手上的正整数为 $a_i$ ，右手上的正整数为 $b_i$ ，</p><p>则第 $i$ 位大臣获得的奖金数目为 $c_i$ 可以表达为：</p><p>$$c_i=\begin{cases}a_1+b_1 &amp; i=1\\\max(c_{i-1},\sum\limits_{j=1}^ia_j)+b_i &amp; 2\le i\le n\end{cases}$$</p><p>当然，吝啬的皇后并不希望太多的奖金被发给大臣，所以她想请你来重新安排一下队伍的顺序，使得获得奖金最多的大臣，所获奖金数目尽可能的少。</p><p>注意：重新安排队伍并不意味着一定要打乱顺序，我们允许不改变任何一位大臣的位置。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含一个正整数 $T$ ，表示测试数据的组数。</p><p>接下来 $T$ 个部分，每个部分的第一行包含一个正整数 $n$ ，表示大臣的数目。</p><p>每个部分接下来 $n$ 行中，每行两个正整数，分别为 $a_i$ 和 $b_i$ ，含义如上文所述。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>共 $T$ 行，每行包含一个整数，表示获得奖金最多的大臣所获得的奖金数目。</p><h3 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于全部测试数据满足：$T\le10,1\le n\le20000,1\le a_i,b_i\le10^9$ 。</p><h2 id="尝试用邻项交换排序解决问题"><a href="#尝试用邻项交换排序解决问题" class="headerlink" title="尝试用邻项交换排序解决问题"></a>尝试用邻项交换排序解决问题</h2><p>还是选取相邻的两个大臣 $i$ 和 $j$ （$j$ 此时在 $i$ 后一个），交换 $i$ 和 $j$ 对前面的大臣无影响，对后面的大臣的影响在于排在后面的那个大臣获得的奖金，需要使之尽量小。</p><p>设这两个大臣前面的所有大臣左手上的数之和为 $\rm sum$ ，这两个大臣的再往前一个大臣得到的奖金是 $\rm pre$ 。</p><p>当 $i$ 在前 $j$ 在后时，这个值为 $\max(\max(\mathrm{pre},\mathrm{sum}+a_i)+b_i,\mathrm{sum}+a_i+a_j)+b_j$ 。</p><p>当 $j$ 在前 $i$ 在后时，这个值为 $\max(\max(\mathrm{pre},\mathrm{sum}+a_j)+b_j,\mathrm{sum}+a_j+a_i)+b_i$ 。</p><p>由于 $\max(x,y)+z=\max(x+z,y+z)$ ，需要比较的就是 $\max(\mathrm{pre}+b_i+b_j,\mathrm{sum}+a_i+b_i+b_j,\mathrm{sum}+a_i+a_j+b_j)$ 和 $\max(\mathrm{pre}+b_j+b_i,\mathrm{sum}+a_j+b_j+b_i,\mathrm{sum}+a_j+a_i+b_i)$ ，其中 $\mathrm{pre}+b_i+b_j=\mathrm{pre}+b_j+b_i$ ，需要比较的就是 $\max(\mathrm{sum}+a_i+b_i+b_j,\mathrm{sum}+a_i+a_j+b_j)$ 和 $\max(\mathrm{sum}+a_j+b_j+b_i,\mathrm{sum}+a_j+a_i+b_i)$ ，再用 $\mathrm{sum}+a_i+b_i+a_j+b_j$ 减去两边并变号，即：当 $\min(a_i,b_j)&gt;\min(a_j,b_i)$ 时，需要交换 $i$ 和 $j$。</p><p>于是，可以写出以下代码，并在洛谷上AC此题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node&amp; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> min(a,y.b)&lt;min(b,y.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dc[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,sum,t,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;dc[i].a&gt;&gt;dc[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(dc+<span class="number">1</span>,dc+n+<span class="number">1</span>);</span><br><span class="line">        ans=sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=dc[i].a;</span><br><span class="line">            ans=max(ans,sum)+dc[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hack数据"><a href="#hack数据" class="headerlink" title="hack数据"></a>hack数据</h2><p>事实上，上面的做法是错误的，无法通过下面这组数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">3 5</span><br><span class="line">2 7</span><br><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">3 5</span><br><span class="line">1 1</span><br><span class="line">2 7</span><br></pre></td></tr></table></figure><p>这两组数据只有大臣给出的顺序不同，但上面的代码输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16</span><br><span class="line">17</span><br></pre></td></tr></table></figure><p>输出中间结果，可以发现，排列后的最终结果分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">2 7</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">3 5</span><br><span class="line">1 1</span><br><span class="line">2 7</span><br></pre></td></tr></table></figure><p>这两种排列方式都满足 $\forall i\in [1,n),\min(a_i,b_{i+1})\le\min(a_{i+1},b_i)$，但第二种方式并不是最优解。具体原因将在下文分析。</p><h2 id="严格弱序"><a href="#严格弱序" class="headerlink" title="严格弱序"></a>严格弱序</h2><h3 id="严格弱序简介"><a href="#严格弱序简介" class="headerlink" title="严格弱序简介"></a>严格弱序简介</h3><p>要知道为什么这种做法是错误的，首先需要了解严格弱序（strict weak ordering）。</p><p>对于一个比较运算符（用“$&lt;$”表示此运算符，用“$\not&lt;$”表示不满足此运算符），若满足以下四个条件，则称其是满足严格弱序的：</p><ol><li>$x\not&lt;x$ （非自反性）</li><li>若 $x&lt;y$，则 $y\not&lt;x$ （非对称性）</li><li>若 $x&lt;y,y&lt;z$，则 $x&lt;z$ （传递性）</li><li>若 $x\not&lt;y,y\not&lt;x,y\not&lt;z,z\not&lt;y$，则 $x\not&lt;z,z\not&lt;x$ （不可比性的传递性）</li></ol><p>而 C++ 标准库要求用于排序的运算符必须满足严格弱序：</p><ol><li><p>It has to be antisymmetric.</p><p>This means that for operator $&lt;$: If $x &lt; y$ is true, then $y &lt; x$ is false.</p><p>This means that for a predicate op(): If op(x,y) is true, then op(y,x) is false.</p></li><li><p>It has to be transitive.</p><p>This means that for operator $&lt;$: If $x &lt; y$ is true and $y &lt; z$ is true, then $x &lt; z$ is true.</p><p>This means that for a predicate op(): If op(x,y) is true and op(y,z) is true, then op(x,z)</p><p>is true.</p></li><li><p>It has to be irreflexive.</p><p>This means that for operator $&lt;$: $x &lt; x$ is always false.</p><p>This means that for a predicate op(): op(x,x) is always false.</p></li><li><p>It has to have transitivity of equivalence, which means roughly: If a is equivalent to b and b is</p><p>equivalent to c, then a is equivalent to c.</p><p>This means that for operator $&lt;$: If $!(a&lt;b) \&amp;\&amp; !(b&lt;a)$ is true and $!(b&lt;c) \&amp;\&amp; !(c&lt;b)$ is true</p><p>then $!(a&lt;c) \&amp;\&amp; !(c&lt;a)$ is true.</p><p>This means that for a predicate op(): If op(a,b), op(b,a), op(b,c), and op(c,b) all yield</p><p>false, then op(a,c) and op(c,a) yield false.</p></li></ol><p>上述做法的判断条件满足传递性，但不满足不可比性的传递性。</p><h3 id="满足传递性的证明"><a href="#满足传递性的证明" class="headerlink" title="满足传递性的证明"></a>满足传递性的证明</h3><p>命题：$\forall \begin{cases}\min(a_i,b_j)&lt;\min(a_j,b_i)\\\min(a_j,b_k)&lt;\min(a_k,b_j)\end{cases}$，有 $\min(a_i,b_k)&lt;\min(a_k,b_i)$。</p><p>将上式拆解成逻辑式，即证：</p><p>$\forall \begin{cases}\,(a_i&lt;a_j\lor b_j&lt;a_j)\land(a_i&lt;b_i\lor b_j&lt;b_i) \\\,(a_j&lt;a_k\lor b_k&lt;a_k)\land(a_j&lt;b_j\lor b_k&lt;b_j)\end{cases}$，有 $(a_i&lt;a_k\lor b_k&lt;a_k)\land(a_i&lt;b_i\lor b_k&lt;b_i)$。</p><p>假设原命题不成立，即 $\exists\begin{cases}\,(a_i&lt;a_j\lor b_j&lt;a_j)\land(a_i&lt;b_i\lor b_j&lt;b_i)&amp;(1) \\\,(a_j&lt;a_k\lor b_k&lt;a_k)\land(a_j&lt;b_j\lor b_k&lt;b_j)&amp;(2) \\\,(a_i\ge a_k\land b_k\ge a_k)\lor(a_i\ge b_i\land b_k\ge b_i)&amp;(3)\end{cases}$</p><p>分别讨论 $(3)$ 式成立的两种情况：</p><p>若 $a_i\ge a_k\land b_k\ge a_k$，由 $(2)$ 式得 $a_j&lt;a_k$，进而推出 $a_j&lt;a_i$，再由 $(1)$ 式得 $b_j&lt;a_j$，再由 $(2)$ 式得到 $b_k&lt;b_j$，所以 $b_k&lt;b_j&lt;a_j&lt;a_k$，与 $b_k\ge a_k$ 矛盾，不成立。</p><p>若 $a_i\ge b_i\land b_k\ge b_i$，与上面类似，由 $(1)$ 式得 $b_j&lt;b_i$，进而推出 $b_j&lt;b_k$，再由 $(2)$ 式得到 $a_j&lt;b_j$，再由 $(1)$ 式得到 $a_i&lt;a_j$，所以 $a_i&lt;a_j&lt;b_j&lt;b_i$，与 $a_i\ge b_i$ 矛盾，不成立。</p><p>综上所述，假设不成立。</p><p>所以，$P_{i,j}=\min(a_i,b_j)&lt;\min(a_j,b_i)$ 具有传递性。</p><h3 id="不具有不可比性的传递性的证明"><a href="#不具有不可比性的传递性的证明" class="headerlink" title="不具有不可比性的传递性的证明"></a>不具有不可比性的传递性的证明</h3><p>命题：$\forall \begin{cases}\min(a_i,b_j)=\min(a_j,b_i)\\\min(a_j,b_k)=\min(a_k,b_j)\end{cases}$，有 $\min(a_i,b_k)=\min(a_k,b_i)$。</p><p>很明显，当 $a_j=b_j$ 且都很小时存在反例，如：</p><p>$$\begin{array}{c|c|c}&amp;a&amp;b\\i&amp;3&amp;5\\j&amp;1&amp;1\\k&amp;2&amp;7\end{array}$$</p><p>$\begin{cases}\min(3,1)=\min(1,5)\\\min(1,7)=\min(2,1)\end{cases}$，但 $\min(3,7)\ne \min(2,5)$。</p><p>这样的反例还有很多，所以，$P_{i,j}=\min(a_i,b_j)&lt;\min(a_j,b_i)$ 不具有不可比性的传递性。</p><h3 id="为何会错"><a href="#为何会错" class="headerlink" title="为何会错"></a>为何会错</h3><p>简单地说，$P_{i,j}=\min(a_i,b_j)&lt;\min(a_j,b_i)$ 不满足严格弱序，不能作为 <code>std::sort</code> 的比较函数。</p><p>究其原因，“不具有不可比性的传递性”意味着：将序列中若干个不可比的相邻元素对（在这种比较方式下即 $\min(a_i,b_{i+1})=\min(a_{i+1},b_i)$ 的 $i$ 和 $i+1$）互换后，可能会出现前面的元素“大于”后面的元素（在这种比较方式下即出现 $\min(a_i,b_{i+1})&gt;\min(a_{i+1},b_i)$），从而使得原先的排列方式不是最优的。</p><h2 id="正确解法"><a href="#正确解法" class="headerlink" title="正确解法"></a>正确解法</h2><h3 id="更加完善的贪心解法"><a href="#更加完善的贪心解法" class="headerlink" title="更加完善的贪心解法"></a>更加完善的贪心解法</h3><p>比较相邻两项时，若 $\min(a_i,b_j)=\min(a_j,b_i)$ ，从全局来看，由于 $a$ 的前缀和对答案有一定的影响，把 $a$ 更小的放前面是更优的。从而可以得到这样一个解法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node&amp; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> min(a,y.b)==min(b,y.a)?a&lt;y.a:min(a,y.b)&lt;min(b,y.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; dc[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,sum,t,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;dc[i].a&gt;&gt;dc[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(dc+<span class="number">1</span>,dc+n+<span class="number">1</span>);</span><br><span class="line">        ans=sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=dc[i].a;</span><br><span class="line">            ans=max(ans,sum)+dc[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个解法的正确性将在下文证明。</p><h3 id="一个解法是否正确的判断方式"><a href="#一个解法是否正确的判断方式" class="headerlink" title="一个解法是否正确的判断方式"></a>一个解法是否正确的判断方式</h3><p>由上文的讨论可以得知，一个排序方式 $P_{i,j}$ 要是正解，需要满足两个条件：</p><ol><li><p>满足严格弱序。</p></li><li><p>$\forall P_{i,j}=true$，$\min(a_i,b_j)&lt;\min(a_j,b_i)$ 。</p></li></ol><p>即，可以作为比较函数，且排序完成后任意交换相邻元素均不会使答案更优。</p><p>从而可以写出下面的正解判断器：（为了减少一行显示不下的情况已删去所有缩进）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">0</span>]&lt;=<span class="number">6</span>;++a[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b[<span class="number">0</span>]=<span class="number">1</span>;b[<span class="number">0</span>]&lt;=<span class="number">6</span>;++b[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No irreflexivity:%d %d\n"</span>,a[<span class="number">0</span>],b[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (a[<span class="number">1</span>]=<span class="number">1</span>;a[<span class="number">1</span>]&lt;=<span class="number">6</span>;++a[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b[<span class="number">1</span>]=<span class="number">1</span>;b[<span class="number">1</span>]&lt;=<span class="number">6</span>;++b[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(<span class="number">0</span>,<span class="number">1</span>)&amp;&amp;min(a[<span class="number">0</span>],b[<span class="number">1</span>])&gt;min(a[<span class="number">1</span>],b[<span class="number">0</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not the best:%d %d %d %d\n"</span>,a[<span class="number">0</span>],b[<span class="number">0</span>],a[<span class="number">1</span>],b[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (a[<span class="number">2</span>]=<span class="number">1</span>;a[<span class="number">2</span>]&lt;=<span class="number">6</span>;++a[<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b[<span class="number">2</span>]=<span class="number">1</span>;b[<span class="number">2</span>]&lt;=<span class="number">6</span>;++b[<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(<span class="number">0</span>,<span class="number">1</span>)&amp;&amp;cmp(<span class="number">1</span>,<span class="number">2</span>)&amp;&amp;!cmp(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No transitivity:%d %d %d %d %d %d\n"</span>,a[<span class="number">0</span>],b[<span class="number">0</span>],a[<span class="number">1</span>],b[<span class="number">1</span>],a[<span class="number">2</span>],b[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cmp(<span class="number">0</span>,<span class="number">1</span>)&amp;&amp;!cmp(<span class="number">1</span>,<span class="number">0</span>)&amp;&amp;!cmp(<span class="number">1</span>,<span class="number">2</span>)&amp;&amp;!cmp(<span class="number">2</span>,<span class="number">1</span>)&amp;&amp;(cmp(<span class="number">0</span>,<span class="number">2</span>)||cmp(<span class="number">2</span>,<span class="number">0</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No transitivity of incomparability:%d %d %d %d %d %d\n"</span>,a[<span class="number">0</span>],b[<span class="number">0</span>],a[<span class="number">1</span>],b[<span class="number">1</span>],a[<span class="number">2</span>],b[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> min(a[i],b[j])==min(a[j],b[i])?a[i]&lt;a[j]:min(a[i],b[j])&lt;min(a[j],b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，没有任何输出，说明上文所述的排序方式是一个正解。</p><p>用其它排序方式替换 <code>cmp</code>，若没有任何输出即可作为本题的正确排序方式。</p><p>下面是几种排序方式的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> min(a[i],b[j])==min(a[j],b[i])?b[i]&gt;b[j]:min(a[i],b[j])&lt;min(a[j],b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为空，是正解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> min(a[i],b[j])&lt;min(a[j],b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共输出1694行，前10行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">No transitivity of incomparability:1 2 1 1 2 1</span><br><span class="line">No transitivity of incomparability:1 2 1 1 2 2</span><br><span class="line">No transitivity of incomparability:1 2 1 1 2 3</span><br><span class="line">No transitivity of incomparability:1 2 1 1 2 4</span><br><span class="line">No transitivity of incomparability:1 2 1 1 2 5</span><br><span class="line">No transitivity of incomparability:1 2 1 1 2 6</span><br><span class="line">No transitivity of incomparability:1 2 1 1 3 1</span><br><span class="line">No transitivity of incomparability:1 2 1 1 3 2</span><br><span class="line">No transitivity of incomparability:1 2 1 1 3 3</span><br><span class="line">No transitivity of incomparability:1 2 1 1 3 4</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> min(a[i],b[j])==min(a[j],b[i])?a[i]&gt;a[j]:min(a[i],b[j])&lt;min(a[j],b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共输出280行，前10行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">No transitivity:1 2 2 1 1 1</span><br><span class="line">No transitivity:1 2 2 2 1 1</span><br><span class="line">No transitivity:1 2 2 3 1 1</span><br><span class="line">No transitivity:1 2 2 4 1 1</span><br><span class="line">No transitivity:1 2 2 5 1 1</span><br><span class="line">No transitivity:1 2 2 6 1 1</span><br><span class="line">No transitivity:1 2 3 1 1 1</span><br><span class="line">No transitivity:1 2 3 2 1 1</span><br><span class="line">No transitivity:1 2 3 3 1 1</span><br><span class="line">No transitivity:1 2 3 4 1 1</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> min(a[i],b[j])&lt;=min(a[j],b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共输出883行，前10行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">No irreflexivity:1 1</span><br><span class="line">No irreflexivity:1 2</span><br><span class="line">No irreflexivity:1 3</span><br><span class="line">No irreflexivity:1 4</span><br><span class="line">No irreflexivity:1 5</span><br><span class="line">No irreflexivity:1 6</span><br><span class="line">No irreflexivity:2 1</span><br><span class="line">No transitivity:2 1 1 1 1 2</span><br><span class="line">No transitivity:2 1 1 1 1 3</span><br><span class="line">No transitivity:2 1 1 1 1 4</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在可以通过比较相邻两项得出交换或不交换一定不会更差时，可以通过邻项交换排序的方式来得到最优解。</p><p>邻项交换排序的比较函数需要满足严格弱序，并且排序完成后任意交换相邻元素都不会更优。</p><p>使用这种算法时，一定要注意以上两点，才能得到真正正确的算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;浅谈邻项交换排序的应用以及需要注意的问题.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;邻项交换排序是一种常见的贪心算法，通过比较两个相邻元素交换前后的优劣对整个序列进行排序，从而使得这个序列成为题目所求的最优解。然而，邻项交换排序的应用有一些需要注意的地方，稍有不慎便会成为一个错误的算法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://ouuan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心" scheme="https://ouuan.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>NOIp2018提高组游记</title>
    <link href="https://ouuan.github.io/NOIp2018%E6%8F%90%E9%AB%98%E7%BB%84%E6%B8%B8%E8%AE%B0/"/>
    <id>https://ouuan.github.io/NOIp2018提高组游记/</id>
    <published>2018-11-11T06:52:37.000Z</published>
    <updated>2018-12-14T15:00:03.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="T1-积木大赛"><a href="#T1-积木大赛" class="headerlink" title="T1 积木大赛"></a>T1 积木大赛</h2><p>NOIp2013D2T1…..看到的时候我还以为我记错了，以为原题是一次可以随便加，这题只能加一，出考场后查了下发现一模一样。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,d[N],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,d+i);</span><br><span class="line">        <span class="keyword">if</span> (d[i]&gt;d[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=d[i]-d[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2-货币系统"><a href="#T2-货币系统" class="headerlink" title="T2 货币系统"></a>T2 货币系统</h2><p>去掉可以由其它货币拼成的货币，这个结论倒是很快猜到了。但由于xkdyh留下的阴影，一开始我还写了个exgcd…幸好大样例比较良心，有一组数据是三种货币拼成另一种。然后再仔细一看，发现是个完全背包…</p><p>简单证明一下：</p><p>结论：对于一个没有任何一种货币可以由系统内其它货币拼成的货币系统 $(n,A)$，与其等价的货币系统  $(m,B)$ 只能是 $(n,A)$ 自身或者加上一些能由 $(n,A)$ 表示的数。</p><p>若 $A\not\subseteq B$，任取 $t\in (A-B)$，那么在 $B$ 中必然有一些元素能够拼成 $t$，而这些元素在 $A$ 中必然有不能表示的（否则与 $A$ 中没有任何一种货币可以由系统内其它货币拼成矛盾），而存在 $(m,B)$ 能表示而 $(n,A)$ 不能表示的数与 $(n,A),(m,B)$ 等价矛盾，不成立。</p><p>若 $B$ 中有 $(n,A)$ 所不能表示的元素，依然与 $(n,A),(m,B)$ 等价矛盾，不成立。</p><p>所以命题得证。</p><p>排个序然后完全背包去掉能被系统内其它货币表示的货币即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t,n,a[<span class="number">110</span>],maxx;</span><br><span class="line"><span class="keyword">bool</span> f[<span class="number">25010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,ans;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        ans=n;</span><br><span class="line">        maxx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">            maxx=max(maxx,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="literal">false</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[a[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                --ans;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">0</span>;j+a[i]&lt;=maxx;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    f[j+a[i]]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3-赛道修建"><a href="#T3-赛道修建" class="headerlink" title="T3 赛道修建"></a>T3 赛道修建</h2><p>看到这题就想起了ylh当时跟我一个房间的时候切掉的 <a href="https://www.luogu.org/problemnew/show/CF1059E" target="_blank" rel="noopener">CF div.2 E</a>，但赛后发现不一样…</p><p>出考场得知dew、ylh都切掉了这题，然而我只写了直径、链和菊花图的 $55$ 分…凉凉凉</p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="T1-旅行"><a href="#T1-旅行" class="headerlink" title="T1 旅行"></a>T1 旅行</h2><p>一开始看错题了，以为是最小字典序生成树，还在想为什么 $m$ 这么小..然后仔细一看题，发现一条边只能回溯时重复经过，也就是最后得到的序列只能是个dfs序…数据范围很小，所以就枚举断边写了个 $O(n^2)$ 的，预处理边排序。然后出考场听一堆dalao在那说各种 $O(nlogn)$，$O(n)$ 做法…都不会QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cut,a[N][N],tot,e[N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N],used[N]; <span class="comment">//used用于对m个字典序取min，若used[i]=true说明断开第 i 条边时一定不是答案</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,u,v,minn;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">e[i][<span class="number">0</span>]=u;</span><br><span class="line">e[i][<span class="number">1</span>]=v;</span><br><span class="line">g[u].push_back(v);</span><br><span class="line">g[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">sort(g[i].begin(),g[i].end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (cut=<span class="number">0</span>;cut&lt;m;++cut)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (tot&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">used[cut]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">minn=n;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!used[j]&amp;&amp;a[j][i]&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">minn=a[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j][i]&gt;minn)</span><br><span class="line">&#123;</span><br><span class="line">used[j]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,minn);</span><br><span class="line"><span class="keyword">if</span> (i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cut=m;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[m][i]);</span><br><span class="line"><span class="keyword">if</span> (i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line">a[cut][++tot]=u;</span><br><span class="line"><span class="keyword">int</span> v,i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;g[u].size();++i)</span><br><span class="line">&#123;</span><br><span class="line">v=g[u][i];</span><br><span class="line"><span class="keyword">if</span> ((u!=e[cut][<span class="number">0</span>]||v!=e[cut][<span class="number">1</span>])&amp;&amp;(u!=e[cut][<span class="number">1</span>]||v!=e[cut][<span class="number">0</span>]))</span><br><span class="line">&#123;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2-填数游戏"><a href="#T2-填数游戏" class="headerlink" title="T2 填数游戏"></a>T2 填数游戏</h2><p>要是数据范围给到 $10^9$ 我就不会在考场上推半天了…一开始想了好久怎么 $O(nm)$ dp，虽然没想出来怎么做，但发现了暴力怎么写：一种方案合法等价于：对于每个点，它右边的点先往下再往右的路径小于它下面的点先往右再往下的路径。因为这两条路径分别是一个点向右走后最大的路径和向下走后最小的路径。然后打了个表，发现 $(n,m)=(n,n+1)\times 3^{m-n-1} (n\ge 2,m\ge n+1)$。于是开始跑 $(8,9)$ ，跑到11:50 还没跑出来…幸好发现了 $(n,n)$ 和 $(n,n+1)$ 之间也有一定的规律，把 $(8,9)$ 算出来了…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> Ans[<span class="number">9</span>][<span class="number">10</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">36</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">8</span>,<span class="number">36</span>,<span class="number">112</span>,<span class="number">336</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">16</span>,<span class="number">108</span>,<span class="number">336</span>,<span class="number">912</span>,<span class="number">2688</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">32</span>,<span class="number">324</span>,<span class="number">1008</span>,<span class="number">2688</span>,<span class="number">7136</span>,<span class="number">21312</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">64</span>,<span class="number">972</span>,<span class="number">3024</span>,<span class="number">8064</span>,<span class="number">21312</span>,<span class="number">56768</span>,<span class="number">170112</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">128</span>,<span class="number">2916</span>,<span class="number">9072</span>,<span class="number">24192</span>,<span class="number">63936</span>,<span class="number">170112</span>,<span class="number">453504</span>,<span class="number">1360128</span>,<span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>,<span class="number">256</span>,<span class="number">8748</span>,<span class="number">27216</span>,<span class="number">72576</span>,<span class="number">191808</span>,<span class="number">510336</span>,<span class="number">1360128</span>,<span class="number">3626752</span>,<span class="number">10879488</span>&#125;&#125;; <span class="comment">//其实有一部分表是不必要（没有意义）的...</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> M=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,ans=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n&gt;m)</span><br><span class="line">&#123;</span><br><span class="line">swap(n,m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">ans=ans*ans%M;</span><br><span class="line"><span class="keyword">if</span> (m&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">&#123;</span><br><span class="line">ans=ans*<span class="number">2</span>%M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m&lt;=n+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Ans[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">ans=ans*ans%M;</span><br><span class="line"><span class="keyword">if</span> ((m-n<span class="number">-1</span>)&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">&#123;</span><br><span class="line">ans=ans*<span class="number">3</span>%M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans*Ans[n][n+<span class="number">1</span>]%M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3-保卫王国"><a href="#T3-保卫王国" class="headerlink" title="T3 保卫王国"></a>T3 保卫王国</h2><p>据说是ddp…考场上先10min写了44分（一开始还以为是55分Orz），然后看了下，觉得B1挺可写的，更新向上的链貌似就可以了，但最后没调出来..</p><hr><h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><p>上（tui）了一个星期的whk..个鬼啊，三天在考期中，就上了两天whk。感觉从零开始的whk没有想象中那么恐怖…</p><p>一周不让去机房，一到家就在洛谷上测了一下公布的代码.其它题都和预估的一样，D2T1可能会被卡常，洛谷上开了O2最慢点 $0.9s$ ，而且不用vector好像也过不了，不知道是不是洛谷上内存开小了的原因…</p><p>D1T3大众AC题我爆菊（花图）了… 幸好菊花图的数据分治放在了最后面，还有 $40$ 分。发现自己傻了，不知道为什么会认为只有最短的两条边可以拼在一起，其它边都只能自成一条道…….</p><p>听说D2T3不用ddp，还是我太菜了…</p><p>估分：$100+100+40+88/100+100+44=472/484$</p><hr><h1 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h1><p>GGF咕咕咕，然而我把两个T3写了一下..</p><p>D1T3真的好简单…二分答案，check的时候dfs处理每棵子树并返回块数最多时最大剩余，具体就是把子树返回值排个序，双指针配对得到最多块数，然后从最后一个配对的左指针开始往前这么多个依次配对，最后看剩下的没配对的里面最大的是多少。（<del>第二天换成CCF数据发现做法挂了</del>）处理子树的时候二分返回值不影响复杂度但能保证正确性。</p><p>D2T3做法挺有趣的..倍增题做少了，估计做多了就比较套路了…预处理出 $f[u][1],f[u][0],g[u][1],g[u][0]$，分别代表选/不选 $u$ 时 子树 $u$ 答案，选/不选 $u$ 时 $u$ 往上（整颗树减去子树 $u$）的答案。倍增处理出祖先 $fa[u][i]$ 表示 $u$ 的 $2^i$ 祖先，用 $bz[u][i][0/1][0/1]$ 表示子树 $fa[u][i]$ 除去子树 $u$ ，其中 $u$ 选/不选，$fa[u][i]$ 选/不选的答案，可以在dfs预处理 f 和 g 的同时算出 $bz[u][0][0/1][0/1]$ ，然后 $bz[u][i][a][b]=\min(bz[u][i-1][a][0]+bz[fa[u][i-1]][i-1][0][b],bz[u][i-1][a][1]+bz[fa[u][i-1]][i-1][1][b])$ 。计算答案的时候如果是祖先关系直接倍增计算链上答案，再加上子树的 f 和 祖先上方的 g；否则倍增到 $lca$ 计算路径上的答案，两棵子树以及 $lca$ 上方的答案就是对应的 $f$ 和 $g$ 。然后写到 $22:15$，交上去 $68$ 分，回寝室…ab相邻的 $16$ 分真的好简单，不用倍增，考场上应该写出来的…</p><hr><h1 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h1><p>刚到学校听说自己 $480$ ，还在想8700k这么强，能把我的 travel 卡成 $96$ …</p><p>中午一看是 $489$，数据真有趣…D1T3 隔壁原 $95$ 变成 $80$，我昨天A的变成 $90$ 了，考场写的还骗到了 $5$ 分（$45$）…<del>8700k天下第一！</del></p><hr><h1 id="Day25"><a href="#Day25" class="headerlink" title="Day25"></a>Day25</h1><p>咕咕咕咕咕，$\mathrm{CN} 329$。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day1&quot;&gt;&lt;a href=&quot;#Day1&quot; class=&quot;headerlink&quot; title=&quot;Day1&quot;&gt;&lt;/a&gt;Day1&lt;/h1&gt;&lt;h2 id=&quot;T1-积木大赛&quot;&gt;&lt;a href=&quot;#T1-积木大赛&quot; class=&quot;headerlink&quot; title=&quot;T1 积木大赛&quot;&gt;&lt;/a&gt;T1 积木大赛&lt;/h2&gt;&lt;p&gt;NOIp2013D2T1…..看到的时候我还以为我记错了，以为原题是一次可以随便加，这题只能加一，出考场后查了下发现一模一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>二维莫队解题报告</title>
    <link href="https://ouuan.github.io/%E4%BA%8C%E7%BB%B4%E8%8E%AB%E9%98%9F%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>https://ouuan.github.io/二维莫队解题报告/</id>
    <published>2018-10-02T10:23:00.000Z</published>
    <updated>2018-12-17T14:55:39.545Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ouuan.github.io/莫队、带修莫队、树上莫队详解">我写的莫队教程</a></p><p>其实这是一道bzoj上的题（bzoj2639，貌似是权限题，反正我看不了），在YALI做模拟赛的时候遇到了.</p><p>然后在网上查到了几篇关于这道题的博客，都和我的做法略有不同…</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个 $r*c$ 的矩阵，每个点有一个颜色， $m$ 个询问，每次询问一个子矩阵内，每种颜色出现次数的平方和。</p><p>$r,c\le 200,m\le 100000$</p><a id="more"></a><h2 id="做法简述"><a href="#做法简述" class="headerlink" title="做法简述"></a>做法简述</h2><p>首先我们要明白，莫队究竟在干什么。</p><p>莫队其实就是几个指针在那跳来跳去，每跳一步都需要一定的时间，通过对询问排序使得指针跳的总次数尽量小。</p><p>所以，这题中询问为 $(x_1,y_1,x_2,y_2)$ ，也就是四个指针在那跳，分别分块再排序就可以了，即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为避免和cmath库中的y0y1重名，下文中代码内的x1,y1,x2,y2都用x,y,xx,yy代替</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,xx,yy,id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Query&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x/B==b.x/B?(y/B==b.y/B?(xx/B==b.xx/B?yy&lt;b.yy:xx&lt;b.xx):y&lt;b.y):x&lt;b.x; <span class="comment">//B为分块大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; q[M];</span><br></pre></td></tr></table></figure><h2 id="答案更新"><a href="#答案更新" class="headerlink" title="答案更新"></a>答案更新</h2><p>一般的莫队都是 $O(1)$ 更新答案的，然而这题是 $O(n)$ （用 $n$ 代表 $r,c$ ） 更新。</p><p>移动指针的时候，把一排一起修改。</p><p>需要注意的是，8个while的顺序如果排列不当在某些情况下会导致答案出错，所以最好是将所有add都放在del前面（实际上有多种排列顺序都可以在不进行“反操作”的情况下保证答案正确，所有add放在del前面只是其中一种），或者是对“反区间”进行“反操作”。</p><p>所谓“反区间”，如：修改 $x_1$ 指针时，本应进行add操作，而此时$y_1&gt;y_2+1$，那么就要将 $(y_2,y_1)$ 这个开区间内的所有点进行del。</p><p>while的排列顺序得当可以使“反区间”不可能出现。</p><p>“反操作”参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (x&lt;q[i].x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[x][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=yy+<span class="number">1</span>;j&lt;y;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[x][j]);</span><br><span class="line">&#125;</span><br><span class="line">++x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (y&lt;q[i].y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[j][y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=xx+<span class="number">1</span>;j&lt;x;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[j][y]);</span><br><span class="line">&#125;</span><br><span class="line">++y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (xx&gt;q[i].xx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[xx][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=yy+<span class="number">1</span>;j&lt;y;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[xx][j]);</span><br><span class="line">&#125;</span><br><span class="line">--xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (yy&gt;q[i].yy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[j][yy]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=xx+<span class="number">1</span>;j&lt;x;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[j][yy]);</span><br><span class="line">&#125;</span><br><span class="line">--yy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (x&gt;q[i].x)</span><br><span class="line">&#123;</span><br><span class="line">--x;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[x][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=yy+<span class="number">1</span>;j&lt;y;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[x][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (y&gt;q[i].y)</span><br><span class="line">&#123;</span><br><span class="line">--y;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[j][y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=xx+<span class="number">1</span>;j&lt;x;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[j][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (xx&lt;q[i].xx)</span><br><span class="line">&#123;</span><br><span class="line">++xx;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[xx][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=yy+<span class="number">1</span>;j&lt;y;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[xx][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (yy&lt;q[i].yy)</span><br><span class="line">&#123;</span><br><span class="line">++yy;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[j][yy]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j=xx+<span class="number">1</span>;j&lt;x;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[j][yy]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out[q[i].id]=ans;</span><br></pre></td></tr></table></figure><h2 id="分块大小"><a href="#分块大小" class="headerlink" title="分块大小"></a>分块大小</h2><p>具体计算清楚非常复杂，这里只是估算一下.</p><p>$x_1$ 指针的移动次数为 $O(mB)$，$y_2$ 指针的移动次数渐进复杂度中含有 $O\left(\frac{n^4}{B^3}\right)$，取 $mB=\frac{n^4}{B^3}$，得到 $B=nm^{-\frac{1}{4}}$</p><p>总时间复杂度为 $O(mlogm+n^2m^{\frac{3}{4}})$</p><p>反正这样的分块大小实测比 $\sqrt{n}$ 优秀…有兴趣的话可以严谨地算一算（如果发现我这个估算有问题可以直接在这篇博客下评论）</p><h2 id="初始子矩阵"><a href="#初始子矩阵" class="headerlink" title="初始子矩阵"></a>初始子矩阵</h2><p>任意一个空矩阵就可以了，如 $x_1=y_1=1,x_2=y_2=0$</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r,c,m,B,a[N][N],lsh[N*N],tot,cnt[N*N],ans,out[M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,xx,yy,id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Query&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x/B==b.x/B?(y/B==b.y/B?(xx/B==b.xx/B?yy&lt;b.yy:xx&lt;b.xx):y&lt;b.y):x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125; q[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,x=<span class="number">1</span>,y=<span class="number">1</span>,xx=<span class="number">0</span>,yy=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">B=<span class="built_in">pow</span>(r*c,<span class="number">0.5</span>)/<span class="built_in">pow</span>(m,<span class="number">0.25</span>)+<span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=c;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">lsh[tot++]=a[i][j]; <span class="comment">//这题要离散化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(lsh,lsh+tot);</span><br><span class="line">tot=unique(lsh,lsh+tot)-lsh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=c;++j)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j]=lower_bound(lsh,lsh+tot,a[i][j])-lsh;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q[i].x&gt;&gt;q[i].y&gt;&gt;q[i].xx&gt;&gt;q[i].yy;</span><br><span class="line">q[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(q,q+m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (x&gt;q[i].x)</span><br><span class="line">&#123;</span><br><span class="line">--x;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[x][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (xx&lt;q[i].xx)</span><br><span class="line">&#123;</span><br><span class="line">++xx;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[xx][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (y&gt;q[i].y)</span><br><span class="line">&#123;</span><br><span class="line">--y;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[j][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (yy&lt;q[i].yy)</span><br><span class="line">&#123;</span><br><span class="line">++yy;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">add(a[j][yy]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (x&lt;q[i].x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[x][j]);</span><br><span class="line">&#125;</span><br><span class="line">++x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (xx&gt;q[i].xx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=y;j&lt;=yy;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[xx][j]);</span><br><span class="line">&#125;</span><br><span class="line">--xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (y&lt;q[i].y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[j][y]);</span><br><span class="line">&#125;</span><br><span class="line">++y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (yy&gt;q[i].yy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=x;j&lt;=xx;++j)</span><br><span class="line">&#123;</span><br><span class="line">del(a[j][yy]);</span><br><span class="line">&#125;</span><br><span class="line">--yy;</span><br><span class="line">&#125;</span><br><span class="line">out[q[i].id]=ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;out[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans=ans+<span class="number">2</span>*cnt[x]+<span class="number">1</span>;</span><br><span class="line">++cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans=ans<span class="number">-2</span>*cnt[x]+<span class="number">1</span>;</span><br><span class="line">--cnt[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ouuan.github.io/莫队、带修莫队、树上莫队详解&quot;&gt;我写的莫队教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实这是一道bzoj上的题（bzoj2639，貌似是权限题，反正我看不了），在YALI做模拟赛的时候遇到了.&lt;/p&gt;
&lt;p&gt;然后在网上查到了几篇关于这道题的博客，都和我的做法略有不同…&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给你一个 $r*c$ 的矩阵，每个点有一个颜色， $m$ 个询问，每次询问一个子矩阵内，每种颜色出现次数的平方和。&lt;/p&gt;
&lt;p&gt;$r,c\le 200,m\le 100000$&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://ouuan.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="莫队" scheme="https://ouuan.github.io/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>2018国庆YALI集训游记</title>
    <link href="https://ouuan.github.io/2018%E5%9B%BD%E5%BA%86YALI%E9%9B%86%E8%AE%AD%E6%B8%B8%E8%AE%B0/"/>
    <id>https://ouuan.github.io/2018国庆YALI集训游记/</id>
    <published>2018-10-01T11:27:01.000Z</published>
    <updated>2018-12-14T15:00:18.443Z</updated>
    
    <content type="html"><![CDATA[<p>想了想，像之前那样简略地叙述题意和做法，根本没讲清楚，没有任何意义，还不如写写自己的感受。</p><p>感觉YALI真的是一所挺不错的学校吧。总是能有一机房的julao轮番吊打你，总是能有集训队的奆佬来给你出dltm、给你讲题。每天放学回酒店的路上还能看到操场上一群目测是田径队之类的同学在努力地训练着。到处都洋溢着「青春」的氛围，反倒是老师见得很少（或许是国庆的缘故吧..）。YALI在我心中已经不止是那个在OIerDb的“全国信息学竞赛学校排名2018”上排名第一的学校了。</p><a id="more"></a><p>这几天去掉失误基本上都能排在前 $20$，但其他julao也会失误，所以是不存在“如果没有失误”的…</p><p>既然生在了弱省，就更要把眼光放在省外。OIerDb学校排行榜$rank1\sqrt{}$，OIerDb学校排行榜$rank5\sqrt{}​$。</p><p>虽然写的很短，还是比之前几乎什么都没写好吧.</p><p>———————————————以上于7号上午———————————————</p><p>到了YALI的学生们返校的下午，YALI变得和外高没什么两样了…或许是那些国庆还在学校的人们让我看到了YALI不同的一面吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想了想，像之前那样简略地叙述题意和做法，根本没讲清楚，没有任何意义，还不如写写自己的感受。&lt;/p&gt;
&lt;p&gt;感觉YALI真的是一所挺不错的学校吧。总是能有一机房的julao轮番吊打你，总是能有集训队的奆佬来给你出dltm、给你讲题。每天放学回酒店的路上还能看到操场上一群目测是田径队之类的同学在努力地训练着。到处都洋溢着「青春」的氛围，反倒是老师见得很少（或许是国庆的缘故吧..）。YALI在我心中已经不止是那个在OIerDb的“全国信息学竞赛学校排名2018”上排名第一的学校了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="https://ouuan.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="集训" scheme="https://ouuan.github.io/tags/%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>莫队、带修莫队、树上莫队详解</title>
    <link href="https://ouuan.github.io/%E8%8E%AB%E9%98%9F%E3%80%81%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%81%E6%A0%91%E4%B8%8A%E8%8E%AB%E9%98%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://ouuan.github.io/莫队、带修莫队、树上莫队详解/</id>
    <published>2018-09-30T09:19:58.000Z</published>
    <updated>2018-12-17T14:56:02.548Z</updated>
    
    <content type="html"><![CDATA[<p>这几天学习了莫队算法，试着写一篇比较详细的莫队教程吧…</p><h1 id="普通莫队"><a href="#普通莫队" class="headerlink" title="普通莫队"></a>普通莫队</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>莫队是一种基于分块思想的离线算法，用于解决区间问题，适用范围如下：</p><ol><li><p>只有询问没有修改。</p></li><li><p>允许离线。</p></li><li><p>在已知询问 $[l,r]$ 答案的情况下可以 $O(1)$  得到 $[l,r-1],[l,r+1],[l-1,r],[l+1,r]$ 的答案。</p></li></ol><p>满足以上三个条件就可以在 $O(n\sqrt{m}+mlogm)$ 的时间复杂度下得到每个询问的解。</p><a id="more"></a><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>莫队的精髓就在于通过对询问进行排序，并把询问的结果作为下一个询问求解的基础，使得暴力求解的复杂度得到保证。</p><p>上文中“适用范围”的第三点“<strong>在已知询问 $[l,r]$ 答案的情况下可以 $O(1)$  得到 $[l,r-1],[l,r+1],[l-1,r],[l+1,r]$ 的答案</strong>”即是“<strong>把询问的结果作为下一个询问求解的基础</strong>”的方法。</p><p>例：<a href="https://www.luogu.org/problemnew/show/P1494" target="_blank" rel="noopener">[国家集训队]小Z的袜子</a></p><p>在这题中，用 $cnt_i$ 表示当前处理的区间内颜色为i的袜子出现的次数，用 $\mathrm{len}$ 表示当前处理的区间的长度，用 $x$ 表示新增的那只袜子的颜色。</p><p>以已知区间 $[l,r]$ 的答案求解区间 $[l,r+1]$ 为例。分别处理分子和分母：</p><ul><li>分母为任选两只袜子的组合总数，原先是 $\frac{\mathrm{len}(\mathrm{len}-1)}{2}$，现在是 $\frac{\mathrm{len}(\mathrm{len}+1)}{2}$，增加了 $\mathrm{len}$ 。</li><li>分子为两只袜子颜色相同的组合总数，比原来增加了 $cnt_x$，即新增的这只袜子和原本就在当前区间内的相同颜色的袜子的组合。</li></ul><p>因此，将一只颜色为x的袜子计入答案的函数就可以写出来了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fz代表分子，fm代表分母</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fz+=cnt[x];</span><br><span class="line">++cnt[x];</span><br><span class="line">fm+=len;</span><br><span class="line">++len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理可以写出将一只颜色为x的袜子移出答案的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[x];</span><br><span class="line">fz-=cnt[x];</span><br><span class="line">--len;</span><br><span class="line">fm-=len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，我们就可以得到一个暴力的算法：用 $l$ 和 $r$ 分别记录当前区间的两个端点，然后用下面这段代码来更新答案（q[i].l,q[i].r代表正在处理的询问的两个端点，col[p]代表第 $p$ 只袜子的颜色）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (l&gt;q[i].l)</span><br><span class="line">&#123;</span><br><span class="line">add(col[--l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r&lt;q[i].r)</span><br><span class="line">&#123;</span><br><span class="line">add(col[++r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l&lt;q[i].l) </span><br><span class="line">&#123;</span><br><span class="line">del(col[l++]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r&gt;q[i].r)</span><br><span class="line">&#123;</span><br><span class="line">del(col[r--]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，这个算法的时间复杂度是 $O(nm)$ 的（因为最坏情况下每次 $l$ 和 $r$ 两个指针都要走 $O(n)$ 的距离，而一共有 $m$ 次询问），和暴力完全一样甚至跑的更慢。</p><p>别忘了，之前我说过，莫队的精髓就在于通过对询问进行排序，使得暴力求解的复杂度得到保证。</p><p>我们的目的是使 $l$ 和 $r$ 两个指针走过的总距离尽量的小，这时候就要用到分块的思想了。</p><p>把整个区间 $[1,n]$ 分成若干块，以询问的左端点所在块为第一关键字，以询问的右端点大小为第二关键字，对询问进行排序，那么：</p><ul><li>对于同一块的询问，$l$ 指针每次最多移动块的大小，$r$ 指针的移动则是单调的，总共移动最多 $n$ 。</li><li>对于不同块的询问，$l$ 每次换块时最多移动两倍块的大小， $r$ 每次换块时最多移动 $n$  。</li></ul><p>总结：（用 $B$ 表示块的大小）$l$ 指针每次移动 $O(B)$，$r$ 指针每块移动 $O(n)$ 。</p><p>所以：</p><ul><li>$l$ 的移动次数最多为询问数×块的大小，即 $O(mB)$ 。</li><li>$r$ 的移动次数最多为块的个数×总区间大小，即 $O(n^2/B)$ 。</li></ul><p>因此，总移动次数为 $O(mB+n^2/B)$ 。</p><p>没错，这就是个双勾函数，所以当 $B=\sqrt{\frac{n^2}{m}}$ 即 $\frac{n}{\sqrt{m}}$ 时复杂度最小，为 $O(n\sqrt{m})$ 。</p><p>剩下的最后一个问题：初始的当前区间是什么？</p><p>只要任意指定一个空区间就好了，如 $l=1,r=0$ 。</p><p>所以，整个莫队算法就可以概括为：</p><ol><li><p>将询问记录下来。</p></li><li><p>以 $\frac{n}{\sqrt{m}}$ 为块的大小，以询问的左端点所在块为第一关键字，以询问的右端点大小为第二关键字，对询问进行排序。</p></li><li><p>暴力处理每个询问。</p></li><li><p>输出答案。</p></li></ol><p>总的复杂度为 $O(n\sqrt{m}+mlogm)$ 。</p><p>P.S. 网上很多教程说分块大小取 $\sqrt{n}$ 最优，复杂度为 $O(n\sqrt{n})$，这是不严谨的，当n、m差别较大时使用 $\sqrt{n}$ 作为分块大小效率会明显偏低。</p><h2 id="例题代码"><a href="#例题代码" class="headerlink" title="例题代码"></a>例题代码</h2><p><a href="https://www.luogu.org/problemnew/show/P1494" target="_blank" rel="noopener">[国家集训队]小Z的袜子</a> AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,B,fz,fm,len,col[N],cnt[N],ans[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Query&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l/B==b.l/B?r&lt;b.r:l&lt;b.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,l=<span class="number">1</span>,r=<span class="number">0</span>,g;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    </span><br><span class="line">    B=n/<span class="built_in">sqrt</span>(m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;col[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;q[i].l&gt;&gt;q[i].r;</span><br><span class="line">        q[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(q,q+m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i].l==q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[q[i].id][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            ans[q[i].id][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l&gt;q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            add(col[--l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r&lt;q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            add(col[++r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;q[i].l) </span><br><span class="line">        &#123;</span><br><span class="line">            del(col[l++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r&gt;q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            del(col[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        g=gcd(fz,fm);</span><br><span class="line">        ans[q[i].id][<span class="number">0</span>]=fz/g;</span><br><span class="line">        ans[q[i].id][<span class="number">1</span>]=fm/g;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d/%d\n"</span>,ans[i][<span class="number">0</span>],ans[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fz+=cnt[x];</span><br><span class="line">    ++cnt[x];</span><br><span class="line">    fm+=len;</span><br><span class="line">    ++len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    --cnt[x];</span><br><span class="line">    fz-=cnt[x];</span><br><span class="line">    --len;</span><br><span class="line">    fm-=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它例题"><a href="#其它例题" class="headerlink" title="其它例题"></a>其它例题</h2><p><a href="https://www.luogu.org/problemnew/show/P2709" target="_blank" rel="noopener">小B的询问</a></p><h1 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h1><p>前面说过，普通的莫队只能解决没有修改的问题，那么<a href="https://www.luogu.org/problemnew/show/P1903" target="_blank" rel="noopener">带修改的问题</a>怎么解决呢？带修莫队就是一种支持单点修改的莫队算法。</p><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p>还是对询问进行排序，每个询问除了左端点和右端点还要记录这次询问是在第几次修改之后（时间），以左端点所在块为第一关键字，以右端点所在块为第二关键字，以时间为第三关键字进行排序。</p><p>暴力查询时，如果当前修改数比询问的修改数少就把没修改的进行修改，反之回退。</p><p>需要注意的是，修改分为两部分：</p><ol><li><p>若修改的位置在当前区间内，需要更新答案（del原颜色，add修改后的颜色）。</p></li><li><p>无论修改的位置是否在当前区间内，都要进行修改（以供add和del函数在以后更新答案）。</p></li></ol><p>##分块大小的选择以及复杂度证明</p><p>（用 $B$ 表示分块大小，$c$ 表示修改个数，$q$ 表示询问个数，l块表示以 $l/B$ 分的块，r块表示以 $r/B$ 分的块，每个l块包含 $n/B$ 个r块）</p><ol><li><p>对于时间指针 $now$：对于每个r块，最坏情况下会移动 $c$，共有 $\left(\frac{n}{B}\right)^2$ 个r块，所以总移动次数为 $\frac{cn^2}{B^2}$ 。</p></li><li><p>对于左端点指针 $l$ ：l块内移动每次最多 $B$，换l块每次最多 $2B$，所以总移动次数为 $O(qB)$ 。</p></li><li><p>对于右端点指针 $r$：r块内移动每次最多 $B$，换r块每次最多 $2B$，所有l块内移动次数之和为 $O(qB)$；换l块时最多移动 $n$，总的换l块时移动次数为 $O\left(\frac{n^2}{B}\right)$；所以总的移动次数为 $O\left(qB+\frac{n^2}{B}\right)$ 。</p></li></ol><p>所以：总移动次数为 $O\left(\frac{cn^2}{B^2}+qB+\frac{n^2}{B}\right)$ 。</p><p>由于一般的题目都不会告诉你修改和询问分别的个数，所以统一用 $m$ 表示，即 $O\left(\frac{mn^2}{B^2}+mB+\frac{n^2}{B}\right)$ 。</p><p>那么 $B$ 取多少呢…Mathematica告诉我大约是这个： <img src="/莫队、带修莫队、树上莫队详解/dxmdfkdx.jpg" alt=""> </p><p>所以还是不要纠结带修莫队的最佳分块大小好了…视作 $n=m​$ 的话，就可以得到总移动次数为 $O\left(\frac{n^3}{B^2}+nB+\frac{n^2}{B}\right)​$，那么 $B=n^{\frac{2}{3}}​$ 时取最小值 $O\left(n^{\frac{5}{3}}\right)​$ 。</p><p>所以：带修莫队的渐进时间复杂度为 $O\left(nlogn+n^{\frac{5}{3}}\right)$ （视作 $n=m$）。</p><h2 id="例题代码-1"><a href="#例题代码-1" class="headerlink" title="例题代码"></a>例题代码</h2><p>这次就不详细分析例题了，直接上代码。</p><p><a href="https://www.luogu.org/problemnew/show/P1903" target="_blank" rel="noopener">[国家集训队]数颜色</a> AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ti)</span></span>;  <span class="comment">//这个函数会执行或回退修改ti（执行还是回退取决于是否执行过，具体通过swap实现），x表明当前的询问是x，即若修改了区间[q[x].l,q[x].r]便要更新答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,B,cnt[<span class="number">1000010</span>],a[<span class="number">50010</span>],ans,ccnt,qcnt,now,out[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Change</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p,col;</span><br><span class="line">&#125; c[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,t,id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Query&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l/B==b.l/B?(r/B==b.r/B?t&lt;b.t:r&lt;b.r):l&lt;b.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,l=<span class="number">2</span>,r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> type[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    B=<span class="built_in">pow</span>(n,<span class="number">0.66666</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,type);</span><br><span class="line">        <span class="keyword">if</span> (type[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++qcnt;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;q[qcnt].l&gt;&gt;q[qcnt].r;</span><br><span class="line">            q[qcnt].t=ccnt;</span><br><span class="line">            q[qcnt].id=qcnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        ++ccnt;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c[ccnt].p&gt;&gt;c[ccnt].col;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sort(q+<span class="number">1</span>,q+qcnt+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=qcnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (l&gt;q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            add(a[--l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r&lt;q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            add(a[++r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;q[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            del(a[l++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r&gt;q[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            del(a[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (now&lt;q[i].t)</span><br><span class="line">        &#123;</span><br><span class="line">            modify(i,++now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (now&gt;q[i].t)</span><br><span class="line">        &#123;</span><br><span class="line">            modify(i,now--);</span><br><span class="line">        &#125;</span><br><span class="line">        out[q[i].id]=ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=qcnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;out[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt[x]++==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (--cnt[x]==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        --ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ti)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[ti].p&gt;=q[x].l&amp;&amp;c[ti].p&lt;=q[x].r)</span><br><span class="line">    &#123;</span><br><span class="line">        del(a[c[ti].p]);</span><br><span class="line">    add(c[ti].col);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[c[ti].p],c[ti].col); <span class="comment">//下次执行时必定是回退这次操作，直接互换就可以了 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它例题-1"><a href="#其它例题-1" class="headerlink" title="其它例题"></a>其它例题</h2><p><a href="https://www.luogu.org/problemnew/show/CF940F" target="_blank" rel="noopener">CF940F Machine Learning</a></p><h1 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h1><p>其实，莫队算法除了序列还可以用于树。复杂度同序列上的莫队（不带修 $O(n\sqrt{m}+mlogm)$，带修 $O\left(nlogn+n^{\frac{5}{3}}\right)$）。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/P4074" target="_blank" rel="noopener">[WC2013]糖果公园</a></p><h2 id="分块方式"><a href="#分块方式" class="headerlink" title="分块方式"></a>分块方式</h2><p>这里需要看一道专门为树上莫队设计的题目 <a href="https://www.luogu.org/problemnew/show/P2325" target="_blank" rel="noopener">[SCOI2005]王室联邦</a>。</p><p>用这道题所要求的方式进行分块，并用后文的方式更新答案，就能保证复杂度（复杂度分析见后文）。</p><p>那么如何满足<strong>每块大小在 $[B,3B]$，块内每个点到核心点路径上的所有点都在块内</strong>呢？</p><p>这里先提供一种构造方式，再予以证明：</p><p><strong>dfs，并创建一个栈，dfs一个点时先记录初始栈顶高度，每dfs完当前节点的一棵子树就判断栈内（相对于刚开始dfs时）新增节点的数量是否&gt;=B，是则将栈内所有新增点分为同一块，核心点为当前dfs的点，当前节点结束dfs时将当前节点入栈，整个dfs结束后将栈内所有剩余节点归入已经分好的最后一个块。</strong></p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=top;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (v!=fa)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(v,u);</span><br><span class="line">            <span class="keyword">if</span> (top-t&gt;=B)</span><br><span class="line">            &#123;</span><br><span class="line">                ++tot;</span><br><span class="line">                <span class="keyword">while</span> (top&gt;t)</span><br><span class="line">                &#123;</span><br><span class="line">                    bl[sta[top--]]=tot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">    bl[sta[top--]]=tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你看懂了这个方法的话，每块大小&gt;=B是显然的，下面证明为何每块大小&lt;=3B：</p><p>对于当前节点的每一棵子树：</p><ul><li><p>若未被分块的节点数&gt;B，那么在dfs这棵子树的根节点时就一定会把这棵子树的一部分分为一块直至这棵子树的剩余节点数&lt;=B，所以这种情况不存在。</p></li><li><p>若未被分块的节点数=B，这些节点一定会和栈中所有节点分为一块，栈中之前还剩 $[0,B-1]$ 个节点，那么这一块的大小为 $[B,2B-1]$ 。</p></li><li><p>若未被分块的节点数&lt;B，当未被分块的节点数+栈中剩余节点数&gt;=B时，这一块的大小为 $[B,2B-1)$，否则继续进行下一棵子树。</p></li></ul><p>对于dfs结束后栈内剩余节点，数量一定在 $[1,B]$ 内，而已经分好的每一块的大小为 $[B,2B-1]$，所以每块的大小都在 $[B,3B)$ 内（我看有的博客写的剩余节点数量在 $[1,B+1]$ 内，所以最后一块可能达到 $3B$…然而我觉得最多 $3B-1$啊QAQ）。</p><h2 id="修改方式"><a href="#修改方式" class="headerlink" title="修改方式"></a>修改方式</h2><p>所谓“修改”，就是由询问 $(cu,cv)$ 更新至询问 $(tu,tv)$ 。</p><p>如果把两条路径上的点全部修改..显然是和暴力一样的嘛！</p><p>这里直接给出结论好了…</p><p>（下文中 $T(u,v)$ 表示 $u$ 到 $v$ 的路径上除 $lca(u,v)$ 外的所有点构成的集合，$S(u,v)$ 代表u到v的路径，$xor$ 表示集合对称差（就跟异或差不多））</p><ul><li><p>两个指针 $cu,cv$ （相当于序列莫队的 $l,r$ 两个指针）， $ans$记录$T(cu,cv)$ 的答案，$vis$ 数组记录每个节点是否在 $T(cu,cv)$ 内；</p></li><li><p>由 $T(cu,cv)$ 更新至 $T(tu,tv)$ 时，将 $T(cu,tu)$ 和 $T(cv,tv)$ 的 $vis$ 分别取反，并相应地更新答案；</p></li><li><p>将答案记录到 $out$ 数组（离线后用于输出那个）时对 $lca(cu,cv)$ （此时的 $cu,cv$ 已更新为上一步中的 $tu,tv$） 的 $vis$ 取反并更新答案，记录完再改回来（因为lca比较烦，所以就这样做了QAQ）。</p></li></ul><p>第二步证明如下：</p><p>$\quad\,T(cu,cv) xor T(tu,tv)$</p><p>$=[S(cu,root) xor S(cv,root)] xor [S(tu,root) xor S(tv,root)]$ （lca及以上相消）</p><p>$=[S(cu,root) xor S(tu,root)] xor [S(cv,root) xor S(tv,root)]$ （交换律、结合律）</p><p>$=T(cu,tu) xor T(cv,tv)$</p><p>之所以要把 $T(cu,cv) xor T(tu,tv)$ 转化成 $T(cu,tu) xor T(cv,tv)$，是因为这样的话就能通过对询问排序来保证复杂度。</p><h2 id="关于单点修改"><a href="#关于单点修改" class="headerlink" title="关于单点修改"></a>关于单点修改</h2><p>树上莫队的单点修改和序列莫队类似，唯一不同就是，修改后是否更新答案通过vis数组判断。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>每块大小在 $[B,3B)$，所以两点间路径长度也在 $[B,3B)$，块内移动就是 $O(B)$ 的；编号相邻的块位置必然是相邻的，所以两块间路径长度也是 $O(B)$；然后就和序列莫队的复杂度分析类似了…</p><h2 id="例题代码-2"><a href="#例题代码-2" class="headerlink" title="例题代码"></a>例题代码</h2><p><a href="https://www.luogu.org/problemnew/show/P4074" target="_blank" rel="noopener">[WC2013]糖果公园</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pathmodify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>; <span class="comment">//将T(u,v)取反并更新答案</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opp</span><span class="params">(<span class="keyword">int</span> x)</span></span>; <span class="comment">//将节点x取反并更新答案</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> ti)</span></span>; <span class="comment">//进行或回退修改ti</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>; <span class="comment">//进行分块并记录dep数组、f数组（用于求lca、两点间路径）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> n,m,Q,B,bl[N],tot,V[N],W[N],a[N],sta[N],top,qcnt,ccnt,dep[N],f[<span class="number">20</span>][N],num[N],now;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,out[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,t,id;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Query&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> bl[u]==bl[y.u]?(bl[v]==bl[y.v]?t&lt;y.t:bl[v]&lt;bl[y.v]):bl[u]&lt;bl[y.u];</span><br><span class="line">&#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Change</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> p,x;</span><br><span class="line">&#125; c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,u,v,lc,type;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;Q;</span><br><span class="line">B=<span class="built_in">pow</span>(n,<span class="number">0.666</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;V[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;W[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">16</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">bl[sta[top--]]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;Q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;type;</span><br><span class="line"><span class="keyword">if</span> (type==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">++ccnt;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c[ccnt].p&gt;&gt;c[ccnt].x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q[qcnt].u&gt;&gt;q[qcnt].v;</span><br><span class="line">q[qcnt].t=ccnt;</span><br><span class="line">q[qcnt].id=qcnt;</span><br><span class="line">++qcnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(q,q+qcnt);</span><br><span class="line"></span><br><span class="line">u=v=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;qcnt;++i)</span><br><span class="line">&#123;</span><br><span class="line">pathmodify(u,q[i].u);</span><br><span class="line">pathmodify(v,q[i].v);</span><br><span class="line">u=q[i].u;</span><br><span class="line">v=q[i].v;</span><br><span class="line"><span class="keyword">while</span> (now&lt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line">modify(++now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (now&gt;q[i].t)</span><br><span class="line">&#123;</span><br><span class="line">modify(now--);</span><br><span class="line">&#125;</span><br><span class="line">lc=lca(u,v);</span><br><span class="line">opp(lc);</span><br><span class="line">out[q[i].id]=ans;</span><br><span class="line">opp(lc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;qcnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;out[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pathmodify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u]&lt;dep[v])</span><br><span class="line">&#123;</span><br><span class="line">swap(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (dep[u]&gt;dep[v])</span><br><span class="line">&#123;</span><br><span class="line">opp(u);</span><br><span class="line">u=f[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (u!=v)</span><br><span class="line">&#123;</span><br><span class="line">opp(u);</span><br><span class="line">opp(v);</span><br><span class="line">u=f[<span class="number">0</span>][u];</span><br><span class="line">v=f[<span class="number">0</span>][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">opp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x])</span><br><span class="line">&#123;</span><br><span class="line">ans-=<span class="number">1l</span>l*V[a[x]]*W[num[a[x]]--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans+=<span class="number">1l</span>l*V[a[x]]*W[++num[a[x]]];</span><br><span class="line">&#125;</span><br><span class="line">vis[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> ti)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[c[ti].p])</span><br><span class="line">&#123;</span><br><span class="line">opp(c[ti].p);</span><br><span class="line">swap(a[c[ti].p],c[ti].x);</span><br><span class="line">opp(c[ti].p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">swap(a[c[ti].p],c[ti].x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u]&lt;dep[v])</span><br><span class="line">&#123;</span><br><span class="line">swap(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">16</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((dep[u]-dep[v])&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">&#123;</span><br><span class="line">u=f[i][u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u==v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">16</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (f[i][u]!=f[i][v])</span><br><span class="line">&#123;</span><br><span class="line">u=f[i][u];</span><br><span class="line">v=f[i][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=top;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span> (v!=f[<span class="number">0</span>][u])</span><br><span class="line">&#123;</span><br><span class="line">f[<span class="number">0</span>][v]=u;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">dfs(v);</span><br><span class="line"><span class="keyword">if</span> (top-t&gt;=B)</span><br><span class="line">&#123;</span><br><span class="line">++tot;</span><br><span class="line"><span class="keyword">while</span> (top&gt;t)</span><br><span class="line">&#123;</span><br><span class="line">bl[sta[top--]]=tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nxt[++cnt]=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">to[cnt]=v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="莫队的扩展"><a href="#莫队的扩展" class="headerlink" title="莫队的扩展"></a>莫队的扩展</h1><p>其实莫队可以扩展到高维，参见<a href="https://ouuan.github.io/二维莫队解题报告">二维莫队解题报告</a>。</p><p>更一般地，若 $Q(x_1,x_2,\cdots,x_k)$ 为一个询问，$\forall i\in[1,k]$，$x_i$ 的规模都为 $n$，可以在时间 $\mathrm{T}$ 内求解 $Q(x_1,x_2,\cdots,x_i\pm 1,\cdots,x_n)$，共有 $m$ 个询问，那么就可以在 $O\left(kmlogm+nTm^\frac{k-1}{k}\right)$ 的时间复杂度下离线求解。</p><p>（蒟蒻的大胆猜想而已..并没有严格证明）</p><p>To be finished:回滚莫队（只增莫队）..（有时间再填坑吧Orz）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天学习了莫队算法，试着写一篇比较详细的莫队教程吧…&lt;/p&gt;
&lt;h1 id=&quot;普通莫队&quot;&gt;&lt;a href=&quot;#普通莫队&quot; class=&quot;headerlink&quot; title=&quot;普通莫队&quot;&gt;&lt;/a&gt;普通莫队&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;莫队是一种基于分块思想的离线算法，用于解决区间问题，适用范围如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;只有询问没有修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;允许离线。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在已知询问 $[l,r]$ 答案的情况下可以 $O(1)$  得到 $[l,r-1],[l,r+1],[l-1,r],[l+1,r]$ 的答案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;满足以上三个条件就可以在 $O(n\sqrt{m}+mlogm)$ 的时间复杂度下得到每个询问的解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="莫队" scheme="https://ouuan.github.io/tags/%E8%8E%AB%E9%98%9F/"/>
    
      <category term="算法" scheme="https://ouuan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>好用的网站</title>
    <link href="https://ouuan.github.io/%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>https://ouuan.github.io/好用的网站/</id>
    <published>2018-07-19T07:37:20.000Z</published>
    <updated>2018-12-15T16:31:45.548Z</updated>
    
    <content type="html"><![CDATA[<p>一些好用的网站。</p><a id="more"></a><p><a href="https://sm.ms/" target="_blank" rel="noopener">$\text{图床}$</a></p><p><a href="https://csacademy.com/app/geometry_widget/" target="_blank" rel="noopener">$\text{几何}$</a></p><p><a href="https://csacademy.com/app/graph_editor/" target="_blank" rel="noopener">$\text{图论}$</a></p><p><a href="https://www.desmos.com/calculator" target="_blank" rel="noopener">$\text{函数}$</a></p><p><a href="http://oeis.org/" target="_blank" rel="noopener">$\text{找规律}$</a></p><p><a href="http://www.yunsuanzi.com/matrixcomputations/index.html" target="_blank" rel="noopener">$\text{矩阵运算}$</a></p><p><a href="https://gcc.godbolt.org/" target="_blank" rel="noopener">$\text{在线汇编编译器}$</a></p><p><a href="http://www.cplusplus.com/" target="_blank" rel="noopener">$\mathrm{C++}$</a></p><p><a href="https://www.luogu.org/blog/IowaBattleship/latex-gong-shi-tai-quan" target="_blank" rel="noopener">$\LaTeX\text{公式大全}​$</a></p><p><a href="https://blog.csdn.net/garfielder007/article/details/51646604" target="_blank" rel="noopener">$\LaTeX\text{公式奆全}$</a></p><p><a href="https://www.cnblogs.com/jingwhale/p/4250296.html" target="_blank" rel="noopener">$\text{.tex}$教程</a></p><p><a href="https://oi-wiki.org/" target="_blank" rel="noopener">$\text{OI Wiki}$</a></p><p><a href="http://www.wolframalpha.com/" target="_blank" rel="noopener">$\text{Wolfram Alpha}$</a></p><p><a href="http://bytew.net/OIer/" target="_blank" rel="noopener">$\text{oier数据库}$</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些好用的网站。&lt;/p&gt;
    
    </summary>
    
    
      <category term="收藏" scheme="https://ouuan.github.io/tags/%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
</feed>
