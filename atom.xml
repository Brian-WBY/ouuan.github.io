<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ouuan的博客</title>
  
  <subtitle>Codes change the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouuan.github.io/"/>
  <updated>2019-02-23T14:18:16.418Z</updated>
  <id>https://ouuan.github.io/</id>
  
  <author>
    <name>ouuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后缀自动机（SAM）学习笔记</title>
    <link href="https://ouuan.github.io/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/后缀自动机（SAM）学习笔记/</id>
    <published>2019-02-22T04:31:37.000Z</published>
    <updated>2019-02-23T14:18:16.418Z</updated>
    
    <content type="html"><![CDATA[<p>后缀自动机是一种处理字符串问题的有力工具（废话），它的码量不比后缀数组大（实际代码难度不比后缀数组小，但也不难），处理问题时的思维难度往往比后缀数组小，虽然常数略大，但复杂度是 $O(n)​$ 的。（实际上，若字符集大小为 $|\Sigma|​$，则：时间复杂度 $O(n)​$，空间复杂度 $O(n|\Sigma|)​$ 或时间复杂度 $O(n\log|\Sigma|)​$，空间复杂度 $O(n)​$）</p><p><del>这篇文章会按我的理解详细地介绍一下 SAM，是否比其它教程更好懂我就不做评论了（毕竟所有人都认为自己的教程最好懂），只不过我会尽量保证教程的严谨性和正确性，同时尽量简洁（简洁地表达所有内容，而不是有选择地删去内容）。</del>这篇写的比较口胡随意..拉低了我写的教程的平均水平..只不过还是比市面上某些博客要强一些的（吧）。</p><p>这篇文章最大的特点..大约是讲了一些关于将自动机的状态数压缩至最少的方法。</p><a id="more"></a><h1 id="确定有限状态自动机（DFA）"><a href="#确定有限状态自动机（DFA）" class="headerlink" title="确定有限状态自动机（DFA）"></a>确定有限状态自动机（DFA）</h1><p>一个<strong>确定有限状态自动机（DFA）</strong>由以下五部分构成：</p><ol><li><strong>字符集</strong>（$\Sigma$），该自动机只能输入这些字符。</li><li><strong>状态集合</strong>（$Q$）。如果把一个DFA看成一张有向无环图（DAG），那么DFA中的状态就相当于图上的顶点。</li><li><strong>起始状态</strong>（$start$），$start\in Q$，是一个特殊的状态。起始状态一般用 $s$ 表示，为了避免混淆，本文中使用 $start$。</li><li><strong>接受状态集合</strong>（$F$），$F\subseteq Q$，是一堆特殊的状态。</li><li><strong>转移函数</strong>（$\delta$），$\delta$ 是一个接受两个参数返回一个值的函数，其中第一个参数和返回值都是一个状态，第二个参数是字符集中的一个字符。如果把一个DFA看成一张有向无环图（DAG），那么DFA中的转移函数就相当于顶点间的边，而每条边上都有一个字符。</li></ol><p>DFA的作用就是识别字符串，一个自动机 $A$，若它能识别（接受）字符串 $S$，那么 $A(S)=True$，否则 $A(S)=False$。</p><p>当一个DFA读入一个字符串时，从初始状态起按照转移函数一个一个字符地转移。如果读入完一个字符串的所有字符后位于一个接受状态，那么我们称这个DFA<strong>接受</strong>这个字符串，反之我们称这个DFA<strong>不接受</strong>这个字符串。</p><p>如果一个状态 $v$ 没有字符 $c$ 的转移，那么我们令 $\delta(v,c)=null$，而 $null$ 只能转移到 $null$，且 $null$ 不属于接受状态集合。无法转移到任何一个接受状态的状态都可以视作 $null$，或者说，$null​$ 代指所有无法转移到任何一个接受状态的状态。</p><p>我们扩展定义转移函数 $\delta​$，令其第二个参数可以接收一个字符串：$\delta(v,s)=\delta(\delta(v,s[0]),s[1..n-1])​$（$n​$ 表示 $s​$ 的长度），这个扩展后的转移函数就可以表示从一个状态起接收一个字符串后转移到的状态。那么，$A(s)=[\delta(start,s)\in F]​$。</p><p>如，一个接受且仅接受字符串 $a,ab,aac$ 的 DFA：</p><img src="/后缀自动机（SAM）学习笔记/dfa.png"><h1 id="后缀自动机（SAM）"><a href="#后缀自动机（SAM）" class="headerlink" title="后缀自动机（SAM）"></a>后缀自动机（SAM）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个字符串的<strong>后缀自动机（SAM）</strong>就是一个<strong>接受且仅接受</strong>这个字符串的<strong>所有后缀</strong>的DFA。</p><p>下文中以 $SAM_s$ 代指字符串 $s$ 的后缀自动机，$\delta_s$ 代指 $SAM_s$ 的转移函数。若不带下标则表示字符串为母串 $s$（需要构建SAM的那个字符串）。</p><p>根据定义，一个字符串 $t​$ 是一个字符串 $s​$ 的后缀，当且仅当 $SAM_s(t)=True​$。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>一个字符串 $t$ 是一个字符串 $s$ 的子串，当且仅当 $\delta_s(start_s,t)\neq null$。</p><p>因为，若 $t$ 是 $s$ 的子串，则在 $t$ 之后添加字符可能成为 $s$ 的一个后缀，反之不可能。</p><h2 id="一个朴素的SAM"><a href="#一个朴素的SAM" class="headerlink" title="一个朴素的SAM"></a>一个朴素的SAM</h2><p>若我们将一个字符串的所有后缀插入到一个字典树（trie树）中，并将每次插入的终止节点标记为接受状态，就可以得到一个状态数为 $O(n^2)​$ 的SAM。</p><p>如，串 $abaaabaa$ 的一个<strong>朴素SAM</strong>：</p><img src="/后缀自动机（SAM）学习笔记/triesam.png"><h1 id="最简SAM"><a href="#最简SAM" class="headerlink" title="最简SAM"></a>最简SAM</h1><p>上文中的“朴素SAM”状态数是 $O(n^2)$ 的，而<strong>最简SAM</strong>的状态数和转移数（点数和边数）都是 $O(n)$ 的。</p><h2 id="right-集合"><a href="#right-集合" class="headerlink" title="$right$ 集合"></a>$right$ 集合</h2><p>对于一个字符串 $t$，若它在 $s$ 中出现的位置集合为：$\{[l_1,r_1),[l_2,r_2),\cdots,[l_n,r_n)\}$（下标从 $0$ 开始），那么定义 $right(t)$ 为 $\{r_1,r_2,\cdots,r_n\}$。</p><p>如，又是串 $abaaabaa​$，那么 $right(a)=\{1,3,4,5,7,8\}​$，$right(aa)=\{4,5,8\}​$，$right(aab)=\{6\}​$。</p><p>在有的教程中，也称其为 $endpos$ 集合。</p><h2 id="right-集合等价类"><a href="#right-集合等价类" class="headerlink" title="$right$ 集合等价类"></a>$right$ 集合等价类</h2><h3 id="right-集合等价类的定义"><a href="#right-集合等价类的定义" class="headerlink" title="$right$ 集合等价类的定义"></a>$right$ 集合等价类的定义</h3><p>$right$ 集合相等的字符串组成一个 <strong>$right$ 集合等价类</strong>。</p><p>如，双是串 $abaaabaa$，那么 $right$ 集合为 $\{4,8\}$ 的字符串有 $\{abaa,baa\}$，这两个字符串组成一个 $right$ 集合等价类。</p><h3 id="right-集合等价类与最简SAM"><a href="#right-集合等价类与最简SAM" class="headerlink" title="$right$ 集合等价类与最简SAM"></a>$right$ 集合等价类与最简SAM</h3><p>我们定义 $reg(v)$ 表示<strong>从状态 $v$ 开始能识别的字符串的集合</strong>。即：$t\in reg(v)$ 当且仅当 $\delta(v,t)\in F$（$F$ 为接受状态集合）。</p><p>如果在 $t$ 的后面补上一个字符串 $s[r_i..n]$（$r_i\in right(t)$，$n$ 表示 $s$ 的长度），就得到了 $s$ 的一个后缀。所以，若 $right(t_1)=right(t_2)$，那么 $reg(SAM(t_1))=reg(SAM(t_2))=\{s[r_i..n]|r_i\in right(t_1)\}$。</p><p>对于每个状态 $v$，我们只关心 $reg(v)$，所以可以用SAM上的每一个状态去表示一个 $right$ 集合等价类，转移函数也相应地更改为对应的等价类（令 $f(v)$ 表示原状态 $v$ 对应的字符串的 $right$ 集合等价类在最简SAM中对应的状态，那么原来的转移函数 $\delta(u,c)=v$ 更改为 $\delta’(f(u),c)=f(v)$。可以证明，若 $right(u_1)=right(u_2)$，那么 $right(\delta(u_1,c))=right(\delta(u_2,c))$，因为 $right(\delta(u,c))=\{r_i|r_i\in right(u),s[r_i]=c\}$）。</p><p>这样的SAM是状态数最少的，因为状态的 $reg​$ 两两不同。这样的SAM若要和朴素SAM区分，可以叫做<strong>最简SAM</strong>。但一般不加说明的SAM都指最简SAM。</p><p>这样的SAM，从起始状态到某个状态可能有多条路径，每条路径都对应一个字符串，那么我们称这个状态<strong>对应</strong>着这些字符串。</p><p>如，叒是串 $abaaabaa​$ 的最简SAM：</p><img src="/后缀自动机（SAM）学习笔记/minsam.png"><h3 id="right-集合等价类的性质"><a href="#right-集合等价类的性质" class="headerlink" title="$right$ 集合等价类的性质"></a>$right$ 集合等价类的性质</h3><p>对于每个状态 $v$，定义 $max(v)$ 和 $min(v)$ 分别表示<strong>这个状态对应的 最长 和 最短 的字符串</strong>。</p><p>那么，<strong>$v$ 对应的任意一个字符串都是 $max(v)$ 的后缀，且不是 $min(v)$ 的真后缀。并且，$v​$ 包含了所有这样的字符串。</strong></p><p>第一点（$v$ 中的任意一个字符串都是 $max(v)$ 的后缀）可以由 $right$ 集合的定义得到。</p><p>第二点（且不是 $min(v)$ 的真后缀）可以由 $min(v)$ 的定义得到。</p><p>第三点（$v$ 包含了所有这样的字符串）可以由一个引理证明：<strong>对于一个字符串 $t$ ，它的 $right$ 集合是它的任意一个后缀的 $right$ 集合的子集。</strong>这个引理很好证明，进而可以证明这条性质。</p><p>如，叕是串 $abaaabaa$，$right$ 集合为 $\{6\}$ 的串有 $\{aab,aaab,baaab,abaaab\}$，若这个 $right$ 集合等价类对应状态 $v$，那么 $max(v)=abaaab$，$min(v)=aab$。</p><p>这条性质说明 $aaab$ 和 $baaab$ 都属于这个 $right$ 集合等价类，且 $ab$ 和 $b$ 不属于这个 $right$ 集合等价类。</p><p>证明第三点所用的引理说明，$right(aaab)\subseteq right(aab)\subseteq right(ab)\subseteq right(b)$，也就是 $\{6\}\subseteq\{6\}\subseteq\{2,6\}\subseteq\{2,6\}$ 。</p><h2 id="parent-树"><a href="#parent-树" class="headerlink" title="$parent$ 树"></a>$parent$ 树</h2><h3 id="parent-的定义"><a href="#parent-的定义" class="headerlink" title="$parent$ 的定义"></a>$parent$ 的定义</h3><p>$parent$ 有两种等价的定义（你也可以把其一视作定义，另一个视作性质）：</p><h4 id="定义一"><a href="#定义一" class="headerlink" title="定义一"></a>定义一</h4><p>对于每个状态 $v$（除了起始状态），找到最长的一个字符串 $t$ 所对应的状态，使得 $right(v)\subsetneq right(t)$（注意是真子集；如果不存在这样的字符串就找起始状态），这样的状态就是 $parent(v)​$。</p><h4 id="定义二"><a href="#定义二" class="headerlink" title="定义二"></a>定义二</h4><p>对于每个状态 $v​$（除了起始状态），$min(v)[1..n-1]​$ 对应的状态（$n​$ 表示 $min(v)​$ 的长度，假定空串对应起始状态）就是 $parent(v)​$。</p><h3 id="parent-的性质"><a href="#parent-的性质" class="headerlink" title="$parent$ 的性质"></a>$parent$ 的性质</h3><p>$len(min(v))=len(max(parent(v)))+1$，这个可以由定义二说明。</p><h2 id="parent-树-1"><a href="#parent-树-1" class="headerlink" title="$parent$ 树"></a>$parent$ 树</h2><p>$parent​$ 连接可以构成一棵树。</p><p>由定义一，由 $right$ 集合要么包含要么不相交可以说明。$parent$ 树可以看成 $right$ 集合的包含关系所构成的树。</p><p>由定义一或定义二，由除起始状态外的状态都有且仅有一条出边并且 $parent$ 连接无环（$right$ 集合大小递增/对应字符串长度递减）可以说明。</p><p>如，醊是串 $abaaabaa$，它的 $parent$ 树：（用 $max(v)$ 代表每个状态）</p><img src="/后缀自动机（SAM）学习笔记/parent.png"><p>SAM上的接受状态就是包含 $r_i=n$（字符串长度）的一些 $right$ 集合等价类，也就是 $parent$ 树上 $\{n\}$ 对应的状态及其祖先。因此，可以通过 $parent$ 树确定SAM的接受状态集合。</p><h2 id="最简SAM状态数为线性的证明"><a href="#最简SAM状态数为线性的证明" class="headerlink" title="最简SAM状态数为线性的证明"></a>最简SAM状态数为线性的证明</h2><p>其实由后面的线性构造方法可以说明状态数为线性。</p><p>只不过由SAM本身的性质也可以说明。</p><p>考虑 $parent​$ 树，最多有 $n​$ 个叶子节点，而每个非叶子节点至少有两个儿子，类似线段树/堆的节点数，可以证明总节点数不超过 $2n-1​$。</p><h2 id="最简SAM转移数为线性的证明"><a href="#最简SAM转移数为线性的证明" class="headerlink" title="最简SAM转移数为线性的证明"></a>最简SAM转移数为线性的证明</h2><p>考虑SAM的任意一个生成树，那么SAM上的边就会被分成树边和非树边。</p><p>树边最多只有 $2n-2​$ 条。</p><p>对于字符串的每个后缀，将其输入到SAM中都会经过一条终点为接受状态的路径，若经过了一条非树边，则称该后缀对应它经过的<strong>第一条</strong>非树边。</p><p>对于每条非树边 $(a,b)​$，一定存在一条从起始状态到 $a​$ 的不经过任何非树边的路径（因为树上两点间必定有路径），也一定存在一条从 $b​$ 到任意一个接受状态的路径（否则 $b=null​$），所以，至少有一个后缀对应着这条非树边。</p><p>因此，非树边数量不会超过后缀数量。总的边数就是 $O(n)​$ 的。</p><h2 id="最简SAM的线性构造"><a href="#最简SAM的线性构造" class="headerlink" title="最简SAM的线性构造"></a>最简SAM的线性构造</h2><p>SAM的线性构造可以在均摊 $O(1)$ 的时间复杂度内向SAM增加一个字符（从 $SAM_{s[0..i-1]}$ 变成 $SAM_{s[0..i]}$）。</p><p>向SAM增加一个字符，就是在所有接受状态后增加一个字符。所以，我们需要考虑上一次插入时的最后一个状态（$last​$）以及它在 ​$parent​$ 树上的祖先（也就是所有接受状态）。</p><p>加入一个字符 $x​$ 时，我们先创建一个新状态 $np​$，这个状态刚插入时代表 $right​$ 集合 $\{i\}​$（$i​$ 表示这是插入的第 $i​$ 个字符）。</p><p>一个引理：<strong>若一个状态有字符 $c$ 的转移，则它在 $parent$ 树上的祖先都有。</strong></p><p>引理的证明：$right(\delta(v,c))=\{r_i|r_i\in right(v)\and s[r_i]=c\}$，而 $right(v)\subsetneq right(parent(v))$。</p><p>因此，找到 $last$ 最深的有出边 $x$ 的祖先 $p$ 后，在其之上的祖先都有出边 $x$。</p><p>对于在其之下的状态，直接向 $np​$ 连边即可。</p><p>接下来要分三种情况讨论：</p><p>若不存在 $p​$（起始状态都没有出边 $x​$），则将 $parent(np)​$ 设为初始状态。</p><p>否则，令 $len(v)$ 表示 $max(v)$ 的长度，$q$ 表示 $\delta(p,x)$。</p><p>若 $len(q)=len(p)+1$，将 $parent(np)$ 设为 $q$ 即可。</p><p>否则，新建状态 $nq$，$len(nq)$ 设为（实际上不是人为设定，它本来就是）$len(p)+1$，将 $q$ 的转移函数复制到 $nq$，然后将 $parent(nq)$ 设为 $parent(q)$，再将 $parent(q)$ 和 $parent(np)$ 都设为 $nq$，最后把 $p$ 及 $p$ 的祖先中所有出边 $x$ 连到 $q$ 的都改为连到 $nq$。实际上，枚举祖先时只要遇到出边 $x$ 不连到 $q$ 的就可以停止枚举了。</p><p>至于为什么这样做..恕我表达能力有限，还请参考<a href="https://max.book118.com/html/2017/0523/108664184.shtm" target="_blank" rel="noopener">陈立杰WC课件</a>第 $35$ 页。</p><p>可以看出，当整个字符串的SAM构建好时，插入每个字符时只会进行常数次 $parent$ 修改，剩下的操作都是新建状态/连边，所以总复杂度和状态数、转移数一样，都是 $O(n)$。然而，如果字符集较大，空间开不下，就要用 $map$ 存边（因为要支持快速查询是否存在一条边，无法使用邻接表），复杂度就会带上 $\log|\Sigma|$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,par,ch[<span class="number">26</span>];</span><br><span class="line">&#125; sam[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> p,tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    </span><br><span class="line">sam[<span class="number">0</span>].par=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;s[i];++i) insert(s[i]-<span class="string">'0'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> np=++tot;</span><br><span class="line">    sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (~p&amp;&amp;!sam[p].ch[x])</span><br><span class="line">    &#123;</span><br><span class="line">        sam[p].ch[x]=np;</span><br><span class="line">        p=sam[p].par;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="number">-1</span>) sam[np].par=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> q=sam[p].ch[x];</span><br><span class="line">        <span class="keyword">if</span> (sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].par=q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(sam[nq].ch,sam[q].ch,<span class="keyword">sizeof</span>(sam[q].ch));</span><br><span class="line">            sam[nq].par=sam[q].par;</span><br><span class="line">            sam[q].par=sam[np].par=nq;</span><br><span class="line">            <span class="keyword">while</span> (~p&amp;&amp;sam[p].ch[x]==q)</span><br><span class="line">            &#123;</span><br><span class="line">                sam[p].ch[x]=nq;</span><br><span class="line">                p=sam[p].par;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p=np;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SAM的一些应用"><a href="#SAM的一些应用" class="headerlink" title="SAM的一些应用"></a>SAM的一些应用</h1><p>一些应用我还没有写过..写过之后可能会补（gu）上（gu）来（gu）。</p><p>也可能不补在这，可以参考<a href="https://oi-wiki.org/string/sam/#_13" target="_blank" rel="noopener">OI wiki</a>，也可以看<a href="https://ouuan.github.io/tags/SAM/">我的博客 标签：SAM</a>。</p><h2 id="判断子串-后缀"><a href="#判断子串-后缀" class="headerlink" title="判断子串/后缀"></a>判断子串/后缀</h2><p>根据SAM的定义和性质，建出文本串的SAM，将模式串分别输入SAM，若转移到 $null$ 则不是子串，否则是；若转移到接受状态则是后缀，否则不是。</p><h2 id="子串出现次数"><a href="#子串出现次数" class="headerlink" title="子串出现次数"></a>子串出现次数</h2><p>一个子串出现次数就是其对应 $right$ 集合的元素个数。</p><p>在创建 $np$ 时，将其 $cnt$ 赋为 $1$，建好SAM后，每个状态的出现次数就是 $parent$ 子树内的 $cnt$ 之和。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/P3804" target="_blank" rel="noopener">【模板】后缀自动机</a></p><h2 id="子串第一次出现位置"><a href="#子串第一次出现位置" class="headerlink" title="子串第一次出现位置"></a>子串第一次出现位置</h2><p>和子串出现次数差不多，创建 $np​$ 时，将 $firstpos(np)​$ 设为 $len(np)-1​$，复制 $nq​$ 时，将 $firstpos(nq)​$ 设为 $firstpos(q)​$，最后对子树内取 $min​$。</p><h2 id="本质不同子串数"><a href="#本质不同子串数" class="headerlink" title="本质不同子串数"></a>本质不同子串数</h2><p>每个状态表示 $maxlen-minlen+1$ 个字符串，而 $minlen=len(parent)+1$，所以一个状态表示的字符串数量就是 $len-parent.len$。求和即可。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/P4070" target="_blank" rel="noopener">[SDOI2016]生成魔咒</a></p><h2 id="第-k-大子串"><a href="#第-k-大子串" class="headerlink" title="第 $k$ 大子串"></a>第 $k$ 大子串</h2><p>预处理每个状态可以转移到多少个不同的子串，然后就可以做了。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/SP7258" target="_blank" rel="noopener">SP7258 SUBLEX</a></p><h2 id="两串的最长公共子串"><a href="#两串的最长公共子串" class="headerlink" title="两串的最长公共子串"></a>两串的最长公共子串</h2><p>对其中一个串建SAM，从起始状态开始，读入另一个字符串，若有转移则转移，将已匹配长度 $+1$，否则跳到 $parent$（这里和 $kmp$ 有点像），并将已匹配长度修改为 $len(parent)$。过程中最大的已匹配长度就是答案。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/SP1811" target="_blank" rel="noopener">SP1811 LCS</a></p><h2 id="多串的最长公共子串"><a href="#多串的最长公共子串" class="headerlink" title="多串的最长公共子串"></a>多串的最长公共子串</h2><p>还是对其中一个串建SAM，以同样的方式依次读入每个字符串，只不过对每个状态要保存当前字符串的最大匹配长度，所有字符串在某个状态的最大匹配长度的最小值就是这一堆字符串在这个状态能匹配的最大长度。如果能在一个状态匹配，一定能在 $parent$ 处匹配，所以要对子树取 $max$，但也不要忘了对 $len$ 取 $min$。</p><p>例题：<a href="https://www.luogu.org/problemnew/show/SP1812" target="_blank" rel="noopener">SP1812 LCS2</a></p><h1 id="任意DFA的压缩"><a href="#任意DFA的压缩" class="headerlink" title="任意DFA的压缩"></a>任意DFA的压缩</h1><p>这部分估计没人感兴趣..OI里没用，也不是证明SAM最小性必需的（最小性的证明我在前文中已经简略说明了：状态的 $reg$ 两两不同）。只不过或许会对理解SAM本质以及发明它的人怎么想到的有些帮助…</p><p>或许这种方式在很多年前就已经被人提出了..总之这部分内容完全是我自己yy的，我也懒得去查有没有人发明过。</p><p>这部分内容不保证正确性，如果有误欢迎指正。如果有人愿意提供严谨证明（怎么可能有人啊..只不过我这里都懒得严谨证明了，随便口头地说了一下）一定非常感谢。</p><h2 id="“DFA的压缩”的定义"><a href="#“DFA的压缩”的定义" class="headerlink" title="“DFA的压缩”的定义"></a>“DFA的压缩”的定义</h2><p>一个可用于压缩DFA的映射 $f:Q_A\rightarrow Q_B$ 需要满足以下几个条件：</p><ol><li>$\forall v\ne start_A,f(v)\ne f(start_A)​$</li><li>$\forall u\in F,v\notin F,f(u)\ne f(v)​$</li><li>$\forall f(u)=f(v),c\in\Sigma,f(\delta_A(u,c))=f(\delta_A(v,c))$</li></ol><p>如：在SAM中，把所有 $right$ 集合相同的状态映射到同一状态就是一个符合条件的映射。</p><p>定义DFA $A$ 在映射 $f$ 下的压缩为 $B$，其中：</p><ol><li>$\Sigma_B=\Sigma_A$</li><li>$Q_B=f(Q_A)$</li><li>$start_B=f(start_A)$</li><li>$F_B=f(F_A)​$</li><li>$\delta_B(f(v),c)=f(\delta_A(v,c))$，这一定义依赖于 $f$ 的性质 $3​$。</li></ol><p>如：用 $right$ 集合等价类这个映射可以将朴素SAM压缩成最简SAM。</p><h2 id="压缩后的自动机与原自动机等价的证明"><a href="#压缩后的自动机与原自动机等价的证明" class="headerlink" title="压缩后的自动机与原自动机等价的证明"></a>压缩后的自动机与原自动机等价的证明</h2><p>我们证明一个比 $A(s)=B(s)$ 更强的命题：$[\delta_A(v,s)\in F_A]=[\delta_B(f(v),s)\in F_B]$。</p><p>当 $s$ 只有一个字符时，根据 $f$ 满足的性质 $2$ 以及 $B$ 的定义 $4,5$，命题显然成立。</p><p>当 $s$ 不止一个字符时，可以归纳地说明命题成立。</p><h2 id="DFA的最简压缩方法"><a href="#DFA的最简压缩方法" class="headerlink" title="DFA的最简压缩方法"></a>DFA的最简压缩方法</h2><p> 这里给出一个将任意DFA压缩至最简的方法：</p><p>由于DFA是一个DAG，它的任意生成子图都必定有出度为 $0$ 的点。每次找到这些点，然后从中选取尽量多的点，使其映射到同一个状态后满足 $f$ 需要满足的三条性质（也就是，同一字符转移到的状态映射到的状态相同，且没有一个是接受状态另一个不是的情况），然后将这些点从图中删去，重复直至所有点都有了映射后的状态（所有点都被删去）。这样得到的映射 $f​$ 能够将原DFA压缩至最简。</p><h2 id="压缩至最简的证明"><a href="#压缩至最简的证明" class="headerlink" title="压缩至最简的证明"></a>压缩至最简的证明</h2><p>我们先证明每个状态的 $reg$（定义参见上文，表示从一个状态起能识别的字符串集合）两两不等。我们按照拓扑序归纳地证明。</p><p>没有出边的非接受状态可以视作 $null$，而没有出边的接受状态按上文所述方法必定会被映射至同一状态。所以命题对没有出边的状态成立。</p><p>假设一个状态所有出边的对应状态都已被证明，那么转移函数不同就等价于 $reg$ 不同，所有命题成立。</p><p>接着，我们由 $reg$ 两两不同证明压缩至最简：</p><p>若状态数继续减少，那么必然存在原来 $reg$ 不同的两个状态 $B(s_1)$ 和 $B(s_2)$ 被压缩到了一起，任取一个只在 $reg(B(s_1))$ 或只在 $reg(B(s_2))$ 中的字符串 $t$，原来 $B(s_1+t)\ne B(s_2+t)$，压缩后却使得 $B’(s_1+t)=B’(s_2+t)$，不符合要求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后缀自动机是一种处理字符串问题的有力工具（废话），它的码量不比后缀数组大（实际代码难度不比后缀数组小，但也不难），处理问题时的思维难度往往比后缀数组小，虽然常数略大，但复杂度是 $O(n)​$ 的。（实际上，若字符集大小为 $|\Sigma|​$，则：时间复杂度 $O(n)​$，空间复杂度 $O(n|\Sigma|)​$ 或时间复杂度 $O(n\log|\Sigma|)​$，空间复杂度 $O(n)​$）&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这篇文章会按我的理解详细地介绍一下 SAM，是否比其它教程更好懂我就不做评论了（毕竟所有人都认为自己的教程最好懂），只不过我会尽量保证教程的严谨性和正确性，同时尽量简洁（简洁地表达所有内容，而不是有选择地删去内容）。&lt;/del&gt;这篇写的比较口胡随意..拉低了我写的教程的平均水平..只不过还是比市面上某些博客要强一些的（吧）。&lt;/p&gt;
&lt;p&gt;这篇文章最大的特点..大约是讲了一些关于将自动机的状态数压缩至最少的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="SAM" scheme="https://ouuan.github.io/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>P3804 【模板】后缀自动机（SAM/后缀数组）</title>
    <link href="https://ouuan.github.io/P3804-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>https://ouuan.github.io/P3804-【模板】后缀自动机/</id>
    <published>2019-02-21T07:47:52.000Z</published>
    <updated>2019-02-23T14:20:36.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.org/problemnew/show/P3804" target="_blank" rel="noopener">洛谷</a></p><h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>求 <strong>出现次数不为 $1$ 的子串的 出现次数 $\times$ 长度</strong> 的最大值。</p><a id="more"></a><h1 id="SAM-做法"><a href="#SAM-做法" class="headerlink" title="SAM 做法"></a>SAM 做法</h1><h2 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h2><p>一个状态的出现次数可以这么计算：</p><p>插入一个字符时，$np$ 的 $cnt$ 设为 $1$，一个状态的出现次数就是它在 $parent$ 树上的子树的 $cnt$ 之和。</p><p>证明..简要说一下：因为 $np$ 的 $right$ 集合为 $\{L\}$ 。</p><p>所以，插入整个字符串后 dfs 一遍 $parent$ 树算一算就好了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DELTA=<span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,ch[DELTA],par,cnt;</span><br><span class="line">    Node()&#123; <span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="keyword">sizeof</span>(ch)); &#125;</span><br><span class="line">&#125; sam[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> p,tot,head[N&lt;&lt;<span class="number">1</span>],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;s[i];++i) insert(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i) add(sam[i].par,i);</span><br><span class="line">    </span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> np=++tot;</span><br><span class="line">    sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">    sam[np].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p&amp;&amp;!sam[p].ch[x])</span><br><span class="line">    &#123;</span><br><span class="line">        sam[p].ch[x]=np;</span><br><span class="line">        p=sam[p].par;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sam[p].ch[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> q=sam[p].ch[x];</span><br><span class="line">        <span class="keyword">if</span> (sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].par=q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(sam[nq].ch,sam[q].ch,<span class="keyword">sizeof</span>(sam[q].ch));</span><br><span class="line">            sam[nq].par=sam[q].par;</span><br><span class="line">            sam[q].par=sam[np].par=nq;</span><br><span class="line">            <span class="keyword">while</span> (sam[p].ch[x]==q)</span><br><span class="line">            &#123;</span><br><span class="line">                sam[p].ch[x]=nq;</span><br><span class="line">                p=sam[p].par;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sam[p].ch[x]=np;</span><br><span class="line">        sam[np].par=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p=np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nxt[++cnt]=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    to[cnt]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,v;</span><br><span class="line">    <span class="keyword">for</span> (i=head[u];i;i=nxt[i])</span><br><span class="line">    &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        dfs(v);</span><br><span class="line">        sam[u].cnt+=sam[v].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sam[u].cnt&gt;<span class="number">1</span>) ans=max(ans,(ll)sam[u].cnt*sam[u].len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后缀数组做法"><a href="#后缀数组做法" class="headerlink" title="后缀数组做法"></a>后缀数组做法</h1><h2 id="简要做法-1"><a href="#简要做法-1" class="headerlink" title="简要做法"></a>简要做法</h2><p>一个长度为 $h$ 的子串出现 $k$ 次就是有 $k-1$ 个连续的 $height\ge h$。单调栈维护即可。</p><p>然而..卡常卡不过去QAQ</p><h2 id="参考代码（最高80分）"><a href="#参考代码（最高80分）" class="headerlink" title="参考代码（最高80分）"></a>参考代码（最高80分）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n,sa[N],rk[N&lt;&lt;<span class="number">1</span>],id[N&lt;&lt;<span class="number">1</span>],px[N],cnt[N],ht[N],l[N],sta[N],top;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123; <span class="keyword">return</span> id[x]==id[y]&amp;&amp;id[x+w]==id[y+w]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,w,p,m=<span class="number">300</span>,k;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]=s[i]];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[i]]--]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;w&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=n;i&gt;n-w;--i) id[++p]=i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (sa[i]&gt;w) id[++p]=sa[i]-w;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[px[i]=rk[id[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[px[i]]--]=id[i];</span><br><span class="line">        swap(id,rk);</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=cmp(sa[i],sa[i<span class="number">-1</span>],w)?p:++p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k) --k;</span><br><span class="line">        <span class="keyword">while</span> (s[i+k]==s[sa[rk[i]<span class="number">-1</span>]+k]) ++k;</span><br><span class="line">        ht[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (top&amp;&amp;ht[sta[top]]&gt;=ht[i]) --top;</span><br><span class="line">        l[i]=sta[top];</span><br><span class="line">        sta[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sta[top=<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (top&amp;&amp;ht[sta[top]]&gt;ht[i]) --top;</span><br><span class="line">        <span class="keyword">if</span> (sta[top]-l[i]&gt;<span class="number">1</span>) ans=max(ans,(<span class="keyword">long</span> <span class="keyword">long</span>)ht[i]*(sta[top]-l[i]));</span><br><span class="line">        sta[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3804&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h1&gt;&lt;p&gt;求 &lt;strong&gt;出现次数不为 $1$ 的子串的 出现次数 $\times$ 长度&lt;/strong&gt; 的最大值。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="SAM" scheme="https://ouuan.github.io/tags/SAM/"/>
    
      <category term="后缀数组" scheme="https://ouuan.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4516 [SDOI2016]生成魔咒（SAM）</title>
    <link href="https://ouuan.github.io/BZOJ4516-SDOI2016-%E7%94%9F%E6%88%90%E9%AD%94%E5%92%92%EF%BC%88SAM%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ4516-SDOI2016-生成魔咒（SAM）/</id>
    <published>2019-02-21T06:10:35.000Z</published>
    <updated>2019-02-21T06:44:01.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.org/problemnew/show/P4070" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/4516" target="_blank" rel="noopener">dark bzoj</a></p><h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给你一个字符串（字符集大小 $10^9$，长度 $10^5$），求每个前缀的本质不同子串数。</p><a id="more"></a><h1 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h1><p>如果只求整个串的本质不同子串，由于每个本质不同子串可以与 SAM 上一个状态+串的长度一一对应，所以本质不同子串数就是每个状态的 $maxlen-minlen+1$，也就是 $len-parent.len$。</p><p>$parent$ 不改变时，逐个加入字符并计算即可。</p><p>考虑 $parent$ 改变的情况，四次 $parent$ 改变分别为 $nq-q.parent$，$-(q-q.parent)$，$q-nq$，$np-nq$。总贡献为 $nq-q.parent-q+q.parent+q-nq+np-nq=np-nq$，也是新加入的点的 $len$ 减去 $parent.len$，是一样的。</p><p>由于字符集较大，用 <code>map</code> 存边。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line"><span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar()) out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> len,par;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ch;</span><br><span class="line">&#125; sam[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,p,tot;</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">n=read();</span><br><span class="line"></span><br><span class="line">sam[<span class="number">0</span>].par=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">insert(read());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> np=++tot;</span><br><span class="line">sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (~p&amp;&amp;sam[p].ch.find(x)==sam[p].ch.end())</span><br><span class="line">&#123;</span><br><span class="line">sam[p].ch[x]=np;</span><br><span class="line">p=sam[p].par;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p==<span class="number">-1</span>) sam[np].par=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q=sam[p].ch[x];</span><br><span class="line"><span class="keyword">if</span> (sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].par=q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq=++tot;</span><br><span class="line">sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">sam[nq].ch=sam[q].ch;</span><br><span class="line">sam[nq].par=sam[q].par;</span><br><span class="line">sam[q].par=sam[np].par=nq;</span><br><span class="line"><span class="keyword">while</span> (~p&amp;&amp;sam[p].ch[x]==q)</span><br><span class="line">&#123;</span><br><span class="line">sam[p].ch[x]=nq;</span><br><span class="line">p=sam[p].par;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans+=sam[np].len-sam[sam[np].par].len;</span><br><span class="line">p=np;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4070&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://darkbzoj.cf/problem/4516&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dark bzoj&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h1&gt;&lt;p&gt;给你一个字符串（字符集大小 $10^9$，长度 $10^5$），求每个前缀的本质不同子串数。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="SAM" scheme="https://ouuan.github.io/tags/SAM/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组学习笔记</title>
    <link href="https://ouuan.github.io/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ouuan.github.io/后缀数组学习笔记/</id>
    <published>2019-02-17T05:53:54.000Z</published>
    <updated>2019-02-21T07:28:23.909Z</updated>
    
    <content type="html"><![CDATA[<p>后缀数组是一种处理字符串问题的有力工具（废话），本文的主要特点是一步步地由最朴素的后缀数组构建方法逐步优化，而非直接给出最终优化后的代码。</p><p>希望这篇文章能让更多的人看懂后缀数组的代码，学会后缀数组。</p><a id="more"></a><h1 id="模板题链接"><a href="#模板题链接" class="headerlink" title="模板题链接"></a>模板题链接</h1><p><a href="https://www.luogu.org/problemnew/show/P3809" target="_blank" rel="noopener">洛谷</a>（只用求 $sa$）</p><p><a href="https://loj.ac/problem/111" target="_blank" rel="noopener">LOJ</a>（只用求 $sa$）</p><p><a href="http://uoj.ac/problem/35" target="_blank" rel="noopener">UOJ</a>（求 $sa$ 和 $height$）</p><p><a href="https://duck.ac/problem/1006" target="_blank" rel="noopener">评测鸭</a>（求 $sa$ 和 $height$）</p><h1 id="两（can）篇（kao）论（zi）文（liao）"><a href="#两（can）篇（kao）论（zi）文（liao）" class="headerlink" title="两（can）篇（kao）论（zi）文（liao）"></a>两（can）篇（kao）论（zi）文（liao）</h1><p>[1]：<a href="https://wenku.baidu.com/view/0dc03d2b1611cc7931b765ce0508763230127479.html" target="_blank" rel="noopener">[2004]后缀数组 by.徐智磊</a></p><p>[2]：<a href="https://wenku.baidu.com/view/5b886b1ea76e58fafab00374.html" target="_blank" rel="noopener">[2009]后缀数组——处理字符串的有力工具 by.罗穗骞</a></p><p>这两篇论文还是写的很好的，大家可以看看。</p><p>下文中如果有引用这两篇论文中的内容，将以上标形式标出（$^{[1]}$ $^{[2]}$）。</p><h1 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串.."></a>关于字符串..</h1><p>说到字符串算法，就得先提一些定（fei）义（hua），知道的就可以不看了..</p><h2 id="字符集-1"><a href="#字符集-1" class="headerlink" title="字符集$^{[1]}$"></a>字符集$^{[1]}$</h2><p>一个字符集 $Σ$ 是一个建立了全序关系的集合，也就是说，$Σ$ 中的任意两个不同的元素 $α$ 和 $β$ 都可以比较大小，要么 $α&lt;β$，要么 $β&lt;α$（也就是$α&gt;β$）。字符集 $Σ$ 中的元素称为字符。</p><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串$^{[1]}$"></a>字符串$^{[1]}$</h2><p>一个字符串 $S$ 是将 $n$ 个字符顺次排列形成的数组，$n$ 称为 $S$ 的长度，表示为 $len(S)$。$S$ 的第 $i$ 个字符表示为 $S[i]$。</p><h2 id="子串-1"><a href="#子串-1" class="headerlink" title="子串$^{[1]}$"></a>子串$^{[1]}$</h2><p>字符串 $S$ 的子串 $S[i..j]，i≤j$，表示 S 串中从 $i$ 到 $j$ 这一段，也就是顺次排列 $S[i],S[i+1],…,S[j]$ 形成的字符串。</p><h2 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h2><p>后缀是指从某个位置 $i$ 开始到整个串末尾结束的一个特殊子串。字符串 $S$ 的从 $i$ 开头的后缀表示为 $Suffix(S,i)$，也就是 $Suffix(S,i)=S[i..len(S)]$。$^{[1]}$</p><p>下文中以 “后缀 $i$” 代指字符串从 $i$ 开头的后缀。$i$ 称作这个后缀的编号。</p><h2 id="字典序"><a href="#字典序" class="headerlink" title="字典序"></a>字典序</h2><p>以第 $i$ 个字符作为第 $i$ 关键字进行大小比较，空字符小于字符集内任何字符（即：$a&lt;aa$）。</p><h1 id="后缀数组是什么？"><a href="#后缀数组是什么？" class="headerlink" title="后缀数组是什么？"></a>后缀数组是什么？</h1><p>后缀数组主要是两个数组：$sa$ 和 $rk$。</p><p>其中，$sa[i]$ 表示将所有后缀排序后第 $i$ 小的后缀的编号。$rk[i]$ 表示后缀 $i$ 的排名。</p><p>这两个数组满足性质：$sa[rk[i]]=rk[sa[i]]=i$。</p><p>后缀数组示例：$^{[2]}$</p><img src="/后缀数组学习笔记/sark.png"><h1 id="后缀数组怎么求？"><a href="#后缀数组怎么求？" class="headerlink" title="后缀数组怎么求？"></a>后缀数组怎么求？</h1><h2 id="O-n-2-log-n-做法"><a href="#O-n-2-log-n-做法" class="headerlink" title="$O(n^2\log n)$ 做法"></a>$O(n^2\log n)$ 做法</h2><p>我相信这个做法大家还是能自己想到的..用string+sort就可以了。由于比较两个字符串是 $O(n)$ 的，所以排序是 $O(n^2\log n)$ 的。</p><h2 id="O-n-log-2n-做法"><a href="#O-n-log-2n-做法" class="headerlink" title="$O(n\log^2n)$ 做法"></a>$O(n\log^2n)$ 做法</h2><p>这个做法要用到倍增的思想。</p><p>先对每个长度为 $1$ 的子串（即每个字符）进行排序。</p><p>假设我们已经知道了长度为 $w$ 的子串的排名 $rk_w[1..n]$（即，$rk_w[i]$ 表示 $s[i..\min(i+w-1,n)]$ 在 $\{s[x..\min(x+w-1,n)] | x\in\mathbb{N}\bigcap[1,n]\}$ 中的排名），那么，以 $rk_w[i]$ 为第一关键字， $rk_w[i+w]$ 为第二关键字（若 $i+w&gt;n$ 则令 $rk_w[i+w]$ 为 $-INF$）进行排序，就可以求出 $rk_{2w}[1..n]$。</p><p>倍增排序示意图：$^{[2]}$</p><img src="/后缀数组学习笔记/bz.png"><p>如果用 <code>sort</code> 进行排序，复杂度就是 $O(n\log^2n)$ 的。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n,w,sa[N],rk[N&lt;&lt;<span class="number">1</span>],oldrk[N]; <span class="comment">//为了防止访问rk[i+w]导致数组越界，开两倍数组。当然也可以在访问前判断是否越界，但直接开两倍数组方便一些。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,p;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) rk[i]=s[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;++w)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) sa[i]=i;</span><br><span class="line">        sort(sa+<span class="number">1</span>,sa+n+<span class="number">1</span>,[](<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;<span class="keyword">return</span> rk[x]==rk[y]?rk[x+w]&lt;rk[y+w]:rk[x]&lt;rk[y];&#125;); <span class="comment">//这里用到了lambda表达式</span></span><br><span class="line">        <span class="built_in">memcpy</span>(oldrk,rk,<span class="keyword">sizeof</span>(oldrk)); <span class="comment">//由于计算rk的时候原来的rk会被覆盖，要先复制一份</span></span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=oldrk[sa[i]]==oldrk[sa[i<span class="number">-1</span>]]&amp;&amp;oldrk[sa[i]+w]==oldrk[sa[i<span class="number">-1</span>]+w]?p:++p; <span class="comment">//若两个子串相同，它们对应的rk也需要相同，所以要去重</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="O-n-log-n-做法"><a href="#O-n-log-n-做法" class="headerlink" title="$O(n\log n)$ 做法"></a>$O(n\log n)$ 做法</h2><p>在刚刚的 $O(n\log^2n)$ 做法中，一次排序是 $O(n\log n)$ 的，如果能 $O(n)$ 排序，就能 $O(n\log n)$ 计算后缀数组了。</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>计数排序的核心思想还是比较好理解的，可以先看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对a这个数组进行排序，结果存到数组b中（b[i]表示第i名的编号），cnt是一个辅助数组，m是a的值域</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[a[i]];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) b[cnt[a[i]]--]=i;</span><br></pre></td></tr></table></figure><p>其实就是先数一数小于等于 $a[i]$ 的数有多少个，然后从后往前看每个数的名次。感性理解/手玩一下就能明白这个排序算法了。</p><p>这个算法有两个特点：</p><ol><li>它是 $O(n+m)$ 的（$m$ 为待排序数据的值域范围）。</li><li>它是一个稳定排序，即，相等的数会按原位置（下标）进行排序。</li></ol><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>值得一提的是很多人经常把计数排序和基数排序搞混..</p><p>基数排序是一个基于稳定排序的多关键字排序算法，复杂度为关键字个数乘上稳定排序的复杂度。而这个稳定排序通常用计数排序实现。</p><p>它的思想是，如果有 $k$ 个关键字，先以第 $k$ 关键字进行一次稳定排序，然后再以第 $k-1$ 关键字进行一次稳定排序，……，最后以第一关键字进行一次稳定排序。可以看出，这样做就完成了以这 $k$ 个关键字的排序。</p><p>具体实现大约是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key[i][j]表示第j个数的第i关键字，b[i]依然表示第i名的编号，m是key的值域，cnt和id都是辅助数组</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) id[i]=i;</span><br><span class="line"><span class="keyword">for</span> (i=k;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;++j) id[j]=b[j];</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;++j) ++cnt[key[i][id[j]]];</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=m;++j) cnt[j]+=cnt[j<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (j=n;j&gt;=<span class="number">1</span>;--j) b[cnt[key[i][id[j]]]--]=id[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将基数排序运用于求后缀数组"><a href="#将基数排序运用于求后缀数组" class="headerlink" title="将基数排序运用于求后缀数组"></a>将基数排序运用于求后缀数组</h3><p>如果你学会了基数排序，也会 $O(n\log^2n)$ 求后缀数组，那你应该可以自己写出一个 $O(n\log n)$ 求后缀数组的程序了。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n,sa[N],rk[N&lt;&lt;<span class="number">1</span>],oldrk[N&lt;&lt;<span class="number">1</span>],id[N],cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m,p,w;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=max(n,<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]=s[i]];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[i]]--]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) id[i]=sa[i];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[id[i]+w]];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[id[i]+w]]--]=id[i];</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) id[i]=sa[i];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[id[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[id[i]]]--]=id[i];</span><br><span class="line">        <span class="built_in">memcpy</span>(oldrk,rk,<span class="keyword">sizeof</span>(oldrk));</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=oldrk[sa[i]]==oldrk[sa[i<span class="number">-1</span>]]&amp;&amp;oldrk[sa[i]+w]==oldrk[sa[i<span class="number">-1</span>]+w]?p:++p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="一些常数优化"><a href="#一些常数优化" class="headerlink" title="一些常数优化"></a>一些常数优化</h3><p>如果你把上面那份代码交到洛谷上..</p><img src="/后缀数组学习笔记/TLE.png"><p>怎么会这样呢？是这题卡常吗？</p><p>一翻其他人的代码，最慢点也不过 $1s$..</p><p>这是因为，上面那份代码的常数的确很大..</p><h4 id="第二关键字无需计数排序"><a href="#第二关键字无需计数排序" class="headerlink" title="第二关键字无需计数排序"></a>第二关键字无需计数排序</h4><p>实际上，像这样就可以了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p=<span class="number">0</span>,i=n;i&gt;n-w;--i) id[++p]=i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (sa[i]&gt;w) id[++p]=sa[i]-w;</span><br></pre></td></tr></table></figure><p>意会一下，先把 $s[i+w..i+2w-1]$ 为空串的位置放前面，再把剩下的按排好的顺序放进去。</p><h4 id="优化计数排序的值域"><a href="#优化计数排序的值域" class="headerlink" title="优化计数排序的值域"></a>优化计数排序的值域</h4><p>每次对 $rk$ 进行去重之后，我们都计算了一个 $p$，这个 $p$ 即是 $k$ 的值域，将值域改成它即可。</p><h4 id="无需新开数组oldrk并memcpy"><a href="#无需新开数组oldrk并memcpy" class="headerlink" title="无需新开数组oldrk并memcpy"></a>无需新开数组oldrk并memcpy</h4><p>注意到计算完 $sa$ 之后 $id$ 数组就没有用了，可以直接 <code>swap(id,rk)</code> 来把 <code>oldrk</code> 的信息存在 <code>id</code> 数组中（$id$ 和 $rk$ 本质上都是指针，所以 <code>swap</code> 是 $O(1)$ 的）。注意两个数组要开一样大才能 <code>swap</code>。</p><h4 id="将-rk-id-i-存下来，减少不连续内存访问"><a href="#将-rk-id-i-存下来，减少不连续内存访问" class="headerlink" title="将 $rk[id[i]]$ 存下来，减少不连续内存访问"></a>将 $rk[id[i]]$ 存下来，减少不连续内存访问</h4><p>这个优化在数据范围较大时效果非常明显。</p><h4 id="用函数cmp来计算是否重复"><a href="#用函数cmp来计算是否重复" class="headerlink" title="用函数cmp来计算是否重复"></a>用函数cmp来计算是否重复</h4><p>同样是减少不连续内存访问，在数据范围较大时效果比较明显。</p><p>把 <code>oldrk[sa[i]]==oldrk[sa[i-1]]&amp;&amp;oldrk[sa[i]+w]==oldrk[sa[i-1]+w]</code> 替换成 <code>cmp(sa[i],sa[i-1],w)</code>，<code>bool cmp(int x,int y,int w){ return id[x]==id[y]&amp;&amp;id[x+w]==id[y+w]; }</code>。</p><div><div class="fold_hider"><div class="close hider_title">参考代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n,sa[N],rk[N&lt;&lt;<span class="number">1</span>],id[N&lt;&lt;<span class="number">1</span>],px[N],cnt[N]; <span class="comment">//px[i]=rk[id[i]]（用于排序的数组所以叫px）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123; <span class="keyword">return</span> id[x]==id[y]&amp;&amp;id[x+w]==id[y+w]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m=<span class="number">300</span>,p,w;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]=s[i]];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[i]]--]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;w&lt;&lt;=<span class="number">1</span>,m=p) <span class="comment">//m=p就是优化计数排序值域</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=n;i&gt;n-w;--i) id[++p]=i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (sa[i]&gt;w) id[++p]=sa[i]-w;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[px[i]=rk[id[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[px[i]]--]=id[i];</span><br><span class="line">        swap(rk,id);</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=cmp(sa[i],sa[i<span class="number">-1</span>],w)?p:++p; <span class="comment">//注意这里的id相当于原来的oldrk</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样优化之后应该不开O2都能过。</p></div></div><h2 id="O-n-做法"><a href="#O-n-做法" class="headerlink" title="$O(n)$ 做法"></a>$O(n)$ 做法</h2><p><del>名字叫DC3，我不会</del></p><p>可以参考<a href="https://wenku.baidu.com/view/5b886b1ea76e58fafab00374.html" target="_blank" rel="noopener">[2009]后缀数组——处理字符串的有力工具 by.罗穗骞</a>，里面有介绍这个算法。</p><p>一般情况下用倍增法做足常数优化是不会被卡的..</p><h1 id="后缀数组无需-height-数组的应用"><a href="#后缀数组无需-height-数组的应用" class="headerlink" title="后缀数组无需 $height$ 数组的应用"></a>后缀数组无需 $height$ 数组的应用</h1><p>如果用不到 $height$ 数组，一般就是利用 $rk$ 数组对字符串进行排序，有时需要对原串进行一定的加工使需要排序的字符串变成后缀，或者是只需对后缀进行排序便能对需要排序的字符串进行排序。</p><h2 id="JSOI2007-字符加密"><a href="#JSOI2007-字符加密" class="headerlink" title="[JSOI2007]字符加密"></a>[JSOI2007]字符加密</h2><p><a href="https://www.luogu.org/problemnew/show/P4051" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/1031" target="_blank" rel="noopener">dark bzoj</a></p><h2 id="USACO07DEC-Best-Cow-Line-Gold"><a href="#USACO07DEC-Best-Cow-Line-Gold" class="headerlink" title="[USACO07DEC]Best Cow Line, Gold"></a>[USACO07DEC]Best Cow Line, Gold</h2><p><a href="https://www.luogu.org/problemnew/show/P2870" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://ouuan.github.io/P2870-USACO07DEC-Best-Cow-Line-Gold%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/">我的题解</a></p><h1 id="height-数组"><a href="#height-数组" class="headerlink" title="$height$ 数组"></a>$height$ 数组</h1><p>后缀数组的题目往往是要用到 $height$ 数组的。</p><h2 id="lcp（最长公共前缀）"><a href="#lcp（最长公共前缀）" class="headerlink" title="lcp（最长公共前缀）"></a>lcp（最长公共前缀）</h2><p>两个字符串 $S$ 和 $T$ 的 $lcp$ 就是最大的 $x$ 使得 $S_i=T_i (\forall 1\le i\le x)$ 。</p><p>下文中以 $lcp(i,j)$ 表示后缀 $i$ 和后缀 $j$ 的最长公共前缀（的长度）。</p><h2 id="height-数组的定义"><a href="#height-数组的定义" class="headerlink" title="$height$ 数组的定义"></a>$height$ 数组的定义</h2><p>$height[i]=lcp(sa[i],sa[i-1])$，即第 $i$ 名的后缀与它前一名的后缀的最长公共前缀。</p><h2 id="O-n-求-height-数组需要的一个引理"><a href="#O-n-求-height-数组需要的一个引理" class="headerlink" title="$O(n)$ 求 $height$ 数组需要的一个引理"></a>$O(n)$ 求 $height$ 数组需要的一个引理</h2><p>$height[rk[i]]\ge height[rk[i-1]]-1$</p><p>证明的话..<del>感性理解</del></p><p>当 $height[rk[i-1]]\le1$ 时，上式显然成立（右边小于等于 $0$ ）。</p><p>当 $height[rk[i-1]]&gt;1$ 时：</p><p>设后缀 $i-1$ 为 $aAD$（$A$ 是一个长度为 $height[rk[i-1]]-1$ 的字符串），那么后缀 $i$ 就是 $AD$。设后缀 $sa[rk[i-1]-1]$ 为 $aAB$ ，那么 $lcp(i-1,sa[rk[i-1]-1])=aA$。由于后缀 $sa[rk[i-1]-1]+1$ 是 $AB$，一定排在后缀 $i$ 的前面，所以后缀 $sa[rk[i]-1]$ 一定含有前缀 $A$，所以 $lcp(i,sa[rk[i]-1])$ 至少是 $height[rk[i-1]]-1$。</p><p>简单来说：</p><p>$i-1$：$aAD$</p><p>$i$：$AD$</p><p>$sa[rk[i-1]-1]$：$aAB$</p><p>$sa[rk[i-1]-1]+1$：$AB$</p><p>$sa[rk[i]-1]$：$A[B/C]$</p><p>$lcp(i,sa[rk[i]-1])$：$AX$（$X$ 可能为空）</p><h2 id="O-n-求-height-数组的代码实现"><a href="#O-n-求-height-数组的代码实现" class="headerlink" title="$O(n)$ 求 $height$ 数组的代码实现"></a>$O(n)$ 求 $height$ 数组的代码实现</h2><p>利用上面这个引理暴力求即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (k) --k;</span><br><span class="line">    <span class="keyword">while</span> (s[i+k]==s[sa[rk[i]<span class="number">-1</span>]+k]) ++k;</span><br><span class="line">    ht[rk[i]]=k; <span class="comment">//height太长了缩写为ht</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>利用摊还分析/势能分析可以发现是O(n)的</del>，$k$ 不会超过 $n$，最多减 $n$ 次，所以最多加 $2n$ 次。</p><h2 id="应用-height-数组需要的一个性质"><a href="#应用-height-数组需要的一个性质" class="headerlink" title="应用 $height$ 数组需要的一个性质"></a>应用 $height$ 数组需要的一个性质</h2><p>$lcp(sa[i],sa[j])=\min\{height[i+1..j]\}$</p><p>感性理解：如果 $height$ 一直大于某个数，前这么多位就一直没变过；反之，由于后缀已经排好序了，不可能变了之后变回来。</p><p>严格证明可以参考<a href="https://wenku.baidu.com/view/0dc03d2b1611cc7931b765ce0508763230127479.html" target="_blank" rel="noopener">[2004]后缀数组 by.徐智磊</a>。</p><h2 id="height-数组的应用"><a href="#height-数组的应用" class="headerlink" title="$height$ 数组的应用"></a>$height$ 数组的应用</h2><p>$height$ 数组往往用来解决关于字符串公共部分的题目，通常需要和RMQ/单调栈等算法相结合。</p><h3 id="USACO06DEC-Milk-Patterns"><a href="#USACO06DEC-Milk-Patterns" class="headerlink" title="[USACO06DEC]Milk Patterns"></a>[USACO06DEC]Milk Patterns</h3><p><a href="https://www.luogu.org/problemnew/show/P2852" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://ouuan.github.io/P2852-USACO06DEC-Milk-Patterns%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/">我的题解</a></p><h3 id="AHOI2013-差异"><a href="#AHOI2013-差异" class="headerlink" title="[AHOI2013]差异"></a>[AHOI2013]差异</h3><p><a href="https://www.luogu.org/problemnew/show/P3181" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/3238" target="_blank" rel="noopener">dark bzoj</a></p><h3 id="HAOI2016-找相同字符"><a href="#HAOI2016-找相同字符" class="headerlink" title="[HAOI2016]找相同字符"></a>[HAOI2016]找相同字符</h3><p><a href="https://www.luogu.org/problemnew/show/P3181" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/4566" target="_blank" rel="noopener">dark bzoj</a></p><p><a href="https://ouuan.github.io/BZOJ4566-HAOI2016-%E6%89%BE%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/">我的题解</a></p><h3 id="NOI2015-品酒大会"><a href="#NOI2015-品酒大会" class="headerlink" title="[NOI2015]品酒大会"></a>[NOI2015]品酒大会</h3><p><a href="https://www.luogu.org/problemnew/show/P2178" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/3238" target="_blank" rel="noopener">dark bzoj</a></p><h3 id="SP8222-NSUBSTR-Substrings"><a href="#SP8222-NSUBSTR-Substrings" class="headerlink" title="SP8222 NSUBSTR - Substrings"></a>SP8222 NSUBSTR - Substrings</h3><p><a href="https://www.luogu.org/problemnew/show/SP8222" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://www.spoj.com/problems/NSUBSTR/" target="_blank" rel="noopener">SPOJ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后缀数组是一种处理字符串问题的有力工具（废话），本文的主要特点是一步步地由最朴素的后缀数组构建方法逐步优化，而非直接给出最终优化后的代码。&lt;/p&gt;
&lt;p&gt;希望这篇文章能让更多的人看懂后缀数组的代码，学会后缀数组。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ouuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="后缀数组" scheme="https://ouuan.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4566 [HAOI2016]找相同字符（后缀数组）</title>
    <link href="https://ouuan.github.io/BZOJ4566-HAOI2016-%E6%89%BE%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ4566-HAOI2016-找相同字符（后缀数组）/</id>
    <published>2019-02-14T03:22:18.000Z</published>
    <updated>2019-02-14T05:54:27.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.org/problemnew/show/P3181" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/4566" target="_blank" rel="noopener">dark bzoj</a></p><h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给你两个字符串，从中各取一个子串使这两个子串相同，求方案数。</p><a id="more"></a><h1 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h1><p>以某两个位置开头的相同子串数=这两个位置开头的后缀的 $lcp$</p><p>如果在同一个字符串中，求出 <code>height</code> 数组后使用单调栈求出每个位置作为最小值的贡献即可（单调栈部分与 <a href="https://www.luogu.org/problemnew/show/P2659" target="_blank" rel="noopener">P2659 美丽的序列</a>，<a href="https://www.luogu.org/problemnew/show/P1169" target="_blank" rel="noopener">[ZJOI2007]棋盘制作</a> 等题类似，在此就不赘述了；求两两 $lcp​$ 之和这部分与 <a href="https://www.luogu.org/problemnew/show/P4248" target="_blank" rel="noopener">[AHOI2013]差异</a> 类似，故没有写那题的题解）。</p><p>由于有两个字符串不太方便，考虑将它们拼接起来并在中间加上一个不存在的字符（如<code>#</code>）。这样求出拼接后的字符串的答案，减去两个原串的答案，就是最终的答案。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sa[N],sa2[N&lt;&lt;<span class="number">1</span>],rk[N&lt;&lt;<span class="number">1</span>],px[N],cnt[N],sta[N],top,f[N],height[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Suffix_Array</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,i,k,w,p,m=<span class="number">200</span>;</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(sa2,<span class="number">0</span>,<span class="keyword">sizeof</span>(sa2));</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]=s[i]];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;w&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span> (p=<span class="number">0</span>,i=n;i&gt;n-w;--i) sa2[++p]=i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (sa[i]&gt;w) sa2[++p]=sa[i]-w;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[px[i]=rk[sa2[i]]];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[px[i]]--]=sa2[i];</span><br><span class="line">swap(rk,sa2);</span><br><span class="line"><span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=sa2[sa[i]]==sa2[sa[i<span class="number">-1</span>]]&amp;&amp;sa2[sa[i]+w]==sa2[sa[i<span class="number">-1</span>]+w]?p:++p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k) --k;</span><br><span class="line"><span class="keyword">while</span> (s[i+k]==s[sa[rk[i]<span class="number">-1</span>]+k]) ++k;</span><br><span class="line">height[rk[i]]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;height[sta[top]]&gt;=height[i]) --top;</span><br><span class="line">f[i]=i-sta[top];</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">sta[++top]=n+<span class="number">1</span>;</span><br><span class="line">height[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;height[sta[top]]&gt;height[i]) --top;</span><br><span class="line">out+=(ll)f[i]*(sta[top]-i)*height[i];</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line">&#125; a,b,ab;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,a.s+<span class="number">1</span>,b.s+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">n=<span class="built_in">strlen</span>(a.s+<span class="number">1</span>);</span><br><span class="line">m=<span class="built_in">strlen</span>(b.s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ab.s[i]=a.s[i];</span><br><span class="line">ab.s[n+<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) ab.s[n+<span class="number">1</span>+i]=b.s[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ab.calc()-a.calc()-b.calc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3181&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://darkbzoj.cf/problem/4566&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dark bzoj&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h1&gt;&lt;p&gt;给你两个字符串，从中各取一个子串使这两个子串相同，求方案数。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="后缀数组" scheme="https://ouuan.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>P2852 [USACO06DEC]Milk Patterns（后缀数组）</title>
    <link href="https://ouuan.github.io/P2852-USACO06DEC-Milk-Patterns%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>https://ouuan.github.io/P2852-USACO06DEC-Milk-Patterns（后缀数组）/</id>
    <published>2019-02-14T03:21:26.000Z</published>
    <updated>2019-02-14T05:53:51.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.org/problemnew/show/P2852" target="_blank" rel="noopener">洛谷</a></p><h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给你一个字符串，求最长的出现了至少 $k$ 次的子串的长度。</p><a id="more"></a><h1 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h1><p>求出 <code>height</code> 数组，若一个长为 $x$ 的子串在原串中出现了至少 $k$ 次，则 <code>height</code> 数组中一定存在至少 $k-1$ 个 连续的大于等于 $x$ 的值。所以，问题就转化成了：求 <code>height</code> 数组中 <strong>每连续 $k-1$ 个数的最小值</strong> 的最大值。即：$a_i=\min\{height_{i..i+k-2}\}$，求 $a_i$ 的最大值。可以用RMQ/平衡树/线段树/multiset解决。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">40010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,a[N],sa[N],rk[N],sa2[N],px[N],cnt[<span class="number">1000010</span>],height[N],ans;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,w,p,m=<span class="number">1000000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    --k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]=a[i]];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[i]]--]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;w&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=n;i&gt;n-w;--i) sa2[++p]=i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (sa[i]&gt;w) sa2[++p]=sa[i]-w;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[px[i]=rk[sa2[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[px[i]]--]=sa2[i];</span><br><span class="line">        swap(rk,sa2);</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=sa2[sa[i]]==sa2[sa[i<span class="number">-1</span>]]&amp;&amp;sa2[sa[i]+w]==sa2[sa[i<span class="number">-1</span>]+w]?p:++p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j) --j;</span><br><span class="line">        <span class="keyword">while</span> (a[i+j]==a[sa[rk[i]<span class="number">-1</span>]+j]) ++j;</span><br><span class="line">        height[rk[i]]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t.insert(height[i]);</span><br><span class="line">        <span class="keyword">if</span> (i&gt;k) t.erase(t.find(height[i-k]));</span><br><span class="line">        ans=max(ans,*t.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2852&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h1&gt;&lt;p&gt;给你一个字符串，求最长的出现了至少 $k$ 次的子串的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="后缀数组" scheme="https://ouuan.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>P2870 [USACO07DEC]Best Cow Line, Gold（后缀数组）</title>
    <link href="https://ouuan.github.io/P2870-USACO07DEC-Best-Cow-Line-Gold%EF%BC%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>https://ouuan.github.io/P2870-USACO07DEC-Best-Cow-Line-Gold（后缀数组）/</id>
    <published>2019-02-14T03:20:59.000Z</published>
    <updated>2019-02-14T05:53:42.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.org/problemnew/show/P2870" target="_blank" rel="noopener">洛谷</a></p><h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给你一个字符串，每次从首或尾取一个字符组成字符串，问所有能够组成的字符串中字典序最小的一个。</p><a id="more"></a><h1 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h1><p>暴力做法就是每次最坏 $O(n)$ 地判断当前应该取首还是尾，只需优化这一判断过程即可。</p><p>将原串reverse后拼接在原串后，并在中间加上一个没出现过的字符（如 <code>#</code> ），求SA，即可 $O(1)$ 完成这一判断。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n,sa[N],sa2[N&lt;&lt;<span class="number">1</span>],rk[N&lt;&lt;<span class="number">1</span>],px[N],cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,w,m=<span class="number">200</span>,p,l=<span class="number">1</span>,r,tot=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    r=n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">while</span> (!<span class="built_in">isalpha</span>(s[i]=getchar()));</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) rk[i]=rk[<span class="number">2</span>*n+<span class="number">2</span>-i]=s[i];</span><br><span class="line">    </span><br><span class="line">    n=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[rk[i]];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[rk[i]]--]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">1</span>;w&lt;n;w&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=n;i&gt;n-w;--i) sa2[++p]=i;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (sa[i]&gt;w) sa2[++p]=sa[i]-w;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[px[i]=rk[sa2[i]]];</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i) sa[cnt[px[i]]--]=sa2[i];</span><br><span class="line">        swap(sa2,rk);</span><br><span class="line">        <span class="keyword">for</span> (p=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=sa2[sa[i]]==sa2[sa[i<span class="number">-1</span>]]&amp;&amp;sa2[sa[i]+w]==sa2[sa[i<span class="number">-1</span>]+w]?p:++p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,rk[l]&lt;rk[n+<span class="number">1</span>-r]?s[l++]:s[r--]);</span><br><span class="line">        <span class="keyword">if</span> ((++tot)%<span class="number">80</span>==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2870&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h1&gt;&lt;p&gt;给你一个字符串，每次从首或尾取一个字符组成字符串，问所有能够组成的字符串中字典序最小的一个。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="字符串" scheme="https://ouuan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="后缀数组" scheme="https://ouuan.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1856 [SCOI2010]生成字符串（组合数学）</title>
    <link href="https://ouuan.github.io/BZOJ1856-SCOI2010-%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%EF%BC%89/"/>
    <id>https://ouuan.github.io/BZOJ1856-SCOI2010-生成字符串（组合数学）/</id>
    <published>2019-02-12T06:56:42.000Z</published>
    <updated>2019-02-14T05:54:35.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://www.luogu.org/problemnew/show/P1641" target="_blank" rel="noopener">洛谷</a></p><p><a href="https://darkbzoj.cf/problem/1856" target="_blank" rel="noopener">darkbzoj</a></p><h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>$n$ 个入栈操作，$m$ 个出栈操作，问合法操作序列数。</p><a id="more"></a><h1 id="简要做法"><a href="#简要做法" class="headerlink" title="简要做法"></a>简要做法</h1><p>借用一下<a href="https://www.luogu.org/blog/user29936/solution-p1641" target="_blank" rel="noopener">这篇题解</a>（的图）。</p><p>选了 $x$ 个数，$1$ 与 $0$ 个数之差为 $y$，如下图：</p><p><img src="http://img.blog.csdn.net/20170826103642649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHl6MzI3Njg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>不考虑限制条件，方案数为从 $(0,0)$ 到 $(n+m,n-m)$ 的折线数，即从 $n+m$ 次操作中选择 $m$ 次向下： $\binom{n+m}m$。考虑某一种不合法的情况，把这条折线第一次碰到 $y=-1$ 前的部分以 $y=-1$ 为轴翻折，这样就建立了 <strong>从 $(0,0)$ 到 $(n+m,n-m)$ 且碰到了 $y=-1$ 的折线</strong> 与 <strong>从 $(0,-2)$ 到 $(n+m,n-m)$ 的折线</strong> 的一一对应，所以不合法的情况个数为 $\binom{n+m}{m-1}$，答案为 $\binom{n+m}m-\binom{n+m}{m-1}$。</p><p>（<del>上面看懂了这段可以不看，这段是废话证明</del>）为什么这玩意是双射（一一对应）..其实很简单，每条 <strong>从 $(0,0)$ 到 $(n+m,n-m)$ 且碰到了 $y=-1$ 的折线</strong> 在第一次碰到 $y=-1$ 前的部分以 $y=-1$ 为轴翻折可以得到唯一一条 <strong>从 $(0,-2)$ 到 $(n+m,n-m)$ 的折线</strong>，而一条 <strong>从 $(0,-2)$ 到 $(n+m,n-m)$ 的折线</strong> 必然会碰到 $y=-1$，同样可以把它在第一次碰到 $y=-1$ 前的部分以 $y=-1$ 为轴翻折，就会得到唯一一条 <strong>从 $(0,0)$ 到 $(n+m,n-m)$ 且碰到了 $y=-1$ 的折线</strong>。</p><p><del>最后吐槽一句。你谷完全不接受做法相同的题解，无法对已有做法进行阐述，所以并没有尝试在你谷发题解。</del></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">20100403</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> jc[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i) jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(c(n+m,m)-c(n+m,m<span class="number">-1</span>)+mod)%mod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y&amp;<span class="number">1</span>) out=(ll)out*x%mod;</span><br><span class="line">x=(ll)x*x%mod;</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ll)jc[x]*qpow(jc[y],mod<span class="number">-2</span>)%mod*qpow(jc[x-y],mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1641&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://darkbzoj.cf/problem/1856&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;darkbzoj&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h1&gt;&lt;p&gt;$n$ 个入栈操作，$m$ 个出栈操作，问合法操作序列数。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>n方过百万 暴力碾标算——指令集优化的基础使用</title>
    <link href="https://ouuan.github.io/n%E6%96%B9%E8%BF%87%E7%99%BE%E4%B8%87-%E6%9A%B4%E5%8A%9B%E7%A2%BE%E6%A0%87%E7%AE%97%E2%80%94%E2%80%94%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BC%98%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>https://ouuan.github.io/n方过百万-暴力碾标算——指令集优化的基础使用/</id>
    <published>2019-02-01T06:26:52.000Z</published>
    <updated>2019-02-14T05:53:57.734Z</updated>
    
    <content type="html"><![CDATA[<p>感谢 yfz 和 mcfx 在 WC 营员交流上的分享！</p><p>然而只看那个课件来学习指令集好像略有困难..所以我来分享一下<del>我自学一晚上的成果</del>。</p><p>希望能帮助大家暴力过题，<del>考场上再也写不出标算</del>。</p><p>你问学了指令集之后如何保持对标算的信仰？<del>当然是每天%神橡树</del></p><p>ok不扯了，进入正题…</p><a id="more"></a><blockquote><p>注：本文省略了无数个 <code>unsigned</code>，请自行把所有 <code>int</code> 视作 <code>unsigned int</code>，把所有 <code>long long</code> 视作 <code>unsigned long long</code>。</p></blockquote><h1 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>不要尝试在OI竞赛中使用指令集优化。</strong></p><p>只适用于提供资瓷的OJ，具体列表参照营员交流ppt：</p><img src="/n方过百万-暴力碾标算——指令集优化的基础使用/ojzc1.png"><img src="/n方过百万-暴力碾标算——指令集优化的基础使用/ojzc2.png"><p>sse2，avx 什么的都是指令集的名字。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>适用于<strong>方便对连续内存空间进行批量处理</strong>的题目。大约可以视作每 $8$ 个 int 为一个分块，块内进行赋值、修改等操作常数为 $1$，也就实现了常数/=$8$。当然如果是 long long 就只能除以四。</p><h1 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h1><h2 id="pragma-amp-include"><a href="#pragma-amp-include" class="headerlink" title="pragma&amp;include"></a>pragma&amp;include</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;immintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>第一行是优化，如果你都用指令集了当然是能优化尽量优化。</p><p>第二行是告诉编译器你要使用指令集。</p><p>后面两个头文件是 C++ 将指令集封装成了函数，这样就不用在代码中内联汇编了。</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>大约有 <code>__m256i</code> <code>__m256</code> <code>__m256d</code> 三种，分别存储 <code>long long</code>，<code>float</code> 和 <code>double</code>，实际上 <code>__m256i</code> 也可以用来存储 <code>int</code>。</p><p><del>实际使用的时候由于<code>__m256i</code>打起来比较麻烦，建议<code>typedef __m256i oak</code></del></p><h2 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h2><p>可以在<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide" target="_blank" rel="noopener">一个神奇的网站</a>查需要的指令，左边选指令集以及指令类型，右边是指令，点开指令可以查看函数原型以及伪代码。</p><p>这里列几条常用指令：</p><p><code>__m256i _mm256_set_epi32 (int e7, int e6, int e5, int e4, int e3, int e2, int e1, int e0)</code>：参数是八个数，也就是一个“分块”里的数，注意是逆序的。返回值是一个含这八个数的“分块”。</p><p><code>__m256i _mm256_set_epi64x (__int64 e3, __int64 e2, __int64 e1, __int64 e0)</code>：和上面一样，只不过是 $64$ 位整数，也就是 long long。</p><p><code>__m256i _mm256_set1_epi32 (int a)</code>：相当于 <code>_mm256_set_epi32(a,a,a,a,a,a,a,a)</code>。</p><p><code>__m256i _mm256_add_epi32 (__m256i a, __m256i b)</code>：把两个“分块”的对应位置分别相加，返回结果。</p><p><code>__m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b)</code>：判断两个“分块”的对应位置是否相等，若相等则返回的“分块”对应位置是 <code>0xffffffff</code>，否则是 <code>0</code>。</p><p><code>__m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b)</code>：和上面一样，只不过比较符是大于而不是相等。</p><p><code>__m256i _mm256_and_si256 (__m256i a, __m256i b)</code>：返回两个“分块”的按位与，可以配合上面两条比较指令来使用。</p><h2 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h2><p>可以直接通过下标访问：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;immintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __m256i oak;</span><br><span class="line"></span><br><span class="line">oak a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=_mm256_set_epi32(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你们可以猜猜这个的结果是什么。</p><p>答案是..4。</p><p>为什么呢，首先 <code>_mm256_set_epi32</code> 的参数是逆序的，所以实际上存储的数顺序是 <code>8,7,6,5,4,3,2,1</code>。其次，<code>__m256i</code> 类型是存储 long long 的，所以直接通过下标访问实际上是在访问 long long，如果 <code>cout&lt;&lt;a[2]</code>就会返回 <code>12884901892</code>（$3\times2^{32}+4$）。所以，这句话实际上是在 <code>printf(&quot;%d&quot;,12884901892ll);</code>。</p><p>那么如何访问 <code>int</code>（甚至 <code>short</code>，如果题目允许这样就可以常数除以 $16$）呢？</p><p>其实搞个指针就可以了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=_mm256_set_epi32(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b=(<span class="keyword">int</span> *)&amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,b[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>这样子的输出就是 $6$ 了。</p><p>用这种方法就可以方便地处理序列问题了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;immintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __m256i oak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[<span class="number">80</span>],*b;</span><br><span class="line">oak a[<span class="number">10</span>],x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">80</span>;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,A+i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i) a[i]=_mm256_set_epi32(A[i*<span class="number">8</span>+<span class="number">7</span>],A[i*<span class="number">8</span>+<span class="number">6</span>],A[i*<span class="number">8</span>+<span class="number">5</span>],A[i*<span class="number">8</span>+<span class="number">4</span>],A[i*<span class="number">8</span>+<span class="number">3</span>],A[i*<span class="number">8</span>+<span class="number">2</span>],A[i*<span class="number">8</span>+<span class="number">1</span>],A[i*<span class="number">8</span>]);</span><br><span class="line">    </span><br><span class="line">    b=(<span class="keyword">int</span> *)&amp;a;</span><br><span class="line">    </span><br><span class="line">    x=_mm256_set1_epi32(<span class="number">233</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i) a[i]=_mm256_add_epi32(a[i],x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">80</span>;++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>,b[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个简单的示例，读入 $80$ 个数，然后输出它们加上 $233$ 的结果。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><del>这种东西为什么还会有例题啊。</del></p><p><a href="https://www.luogu.org/problemnew/show/P2801" target="_blank" rel="noopener">教主的魔法</a>，这题比较简单（<del>废话暴力当然简单</del>）。</p><p><a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">【模板】线段树1</a>，这题其实是最简单的，然而由于 dl 出题人把值域搞到了 long long，常数只能除以四，需要卡卡常，多提交几次才能过。</p><p><a href="https://www.luogu.org/problemnew/show/P4117" target="_blank" rel="noopener">[Ynoi2018]五彩斑斓的世界</a>，神司怒艹lxl标算的课件例题。</p><p><a href="http://uoj.ac/problem/435" target="_blank" rel="noopener">Simple Tree</a>，这个还要树剖，只不过也还好，神司是直接内嵌汇编写的，没有测过用函数能不能过..</p><p>然后以教主的魔法为例讲一下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;immintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> __m256i oak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,tot,*a;</span><br><span class="line">oak A[N&gt;&gt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((l&amp;<span class="number">7</span>)&amp;&amp;l&lt;r) a[l++]+=x; <span class="comment">//处理左边不是整块的部分，和分块的处理方法是一样的</span></span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (r&amp;<span class="number">7</span>) a[--r]+=x; <span class="comment">//处理右边不是整块的部分</span></span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    oak t=_mm256_set1_epi32(x); <span class="comment">//剩下的部分整块加上x</span></span><br><span class="line">    <span class="keyword">for</span> (l&gt;&gt;=<span class="number">3</span>,r&gt;&gt;=<span class="number">3</span>;l&lt;=r;++l) A[l]=_mm256_add_epi32(A[l],t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((l&amp;<span class="number">7</span>)&amp;&amp;l&lt;r) out+=<span class="keyword">int</span>(a[l++]&gt;=x); <span class="comment">//处理左边不是整块的部分</span></span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> out;</span><br><span class="line">    <span class="keyword">while</span> (r&amp;<span class="number">7</span>) out+=<span class="keyword">int</span>(a[--r]&gt;=x); <span class="comment">//处理右边不是整块的部分</span></span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> out;</span><br><span class="line">    oak t=_mm256_set1_epi32(<span class="number">1</span>); <span class="comment">//这个1是每个大于等于x的数的贡献</span></span><br><span class="line">    oak ans=_mm256_set1_epi32(<span class="number">0</span>); <span class="comment">//这个ans是用来存答案的</span></span><br><span class="line">    oak cp=_mm256_set1_epi32(x<span class="number">-1</span>); <span class="comment">//这个是用来比较的，题目中是大于等于，所以和x-1比较</span></span><br><span class="line">    <span class="keyword">for</span> (l&gt;&gt;=<span class="number">3</span>,r&gt;&gt;=<span class="number">3</span>;l&lt;r;++l) ans=_mm256_add_epi32(ans,_mm256_and_si256(t,_mm256_cmpgt_epi32(A[l],cp))); <span class="comment">//这个意会一下，作用是数当前块有几个大于x-1的数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) out+=(ans[i]&amp;<span class="number">0xffffffff</span>)+(ans[i]&gt;&gt;<span class="number">32</span>); <span class="comment">//最后统计答案，因为ans[i]是一个long long，所以要前32位和后32位分别统计</span></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,l,r,x,aa[<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n) <span class="comment">//读入比较鬼畜，需要每次读8个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;<span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,aa+i);</span><br><span class="line">            n=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,aa+i);</span><br><span class="line">            n-=<span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[tot++]=_mm256_set_epi32(aa[<span class="number">7</span>],aa[<span class="number">6</span>],aa[<span class="number">5</span>],aa[<span class="number">4</span>],aa[<span class="number">3</span>],aa[<span class="number">2</span>],aa[<span class="number">1</span>],aa[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    a=(<span class="keyword">int</span>*)&amp;A;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d%d"</span>,op,&amp;l,&amp;r,&amp;x);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">'M'</span>) modify(l<span class="number">-1</span>,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l<span class="number">-1</span>,r,x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢 yfz 和 mcfx 在 WC 营员交流上的分享！&lt;/p&gt;
&lt;p&gt;然而只看那个课件来学习指令集好像略有困难..所以我来分享一下&lt;del&gt;我自学一晚上的成果&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;希望能帮助大家暴力过题，&lt;del&gt;考场上再也写不出标算&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;你问学了指令集之后如何保持对标算的信仰？&lt;del&gt;当然是每天%神橡树&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;ok不扯了，进入正题…&lt;/p&gt;
    
    </summary>
    
      <category term="黑科技" scheme="https://ouuan.github.io/categories/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="常数优化" scheme="https://ouuan.github.io/tags/%E5%B8%B8%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2019THUWC/WC冬眠记</title>
    <link href="https://ouuan.github.io/2019THUWC-WC%E5%86%AC%E7%9C%A0%E8%AE%B0/"/>
    <id>https://ouuan.github.io/2019THUWC-WC冬眠记/</id>
    <published>2019-01-20T04:16:15.000Z</published>
    <updated>2019-02-14T05:54:52.863Z</updated>
    
    <content type="html"><![CDATA[<p><del>又到了 Kanon 的季节呢</del>，快乐的冬眠生活开始了_(:з」∠)_</p><a id="more"></a><h1 id="Day-0-8"><a href="#Day-0-8" class="headerlink" title="Day 0/-8"></a>Day 0/-8</h1><p>Day -1 被归到<a href="https://ouuan.github.io/2018-2019%E5%86%AC-%E5%B9%BF%E4%BA%8C%E9%81%BF%E5%AF%92%E8%AE%B0/">广二避寒记</a>去了..</p><p>上午在水群的时候吐槽 Kanon 结局，然后和 yfz 稍微聊了一下，又看了看萌百，的确あゆ就是和风子、面码差不多的<a href="https://zh.moegirl.org/%E6%80%9D%E5%BF%B5%E4%BD%93" target="_blank" rel="noopener">思念体</a>鸭，为什么我会觉得看不懂呢..大约不止是因为あゆ的存在？</p><img src="/2019THUWC-WC冬眠记/yfz.jpg"><p>下午只做了一道题…淀粉质竟然能把 <code>solve(rt)</code> 写成 <code>solve(v)</code>…退役吧</p><p>然后不知道为什么去试了下自走棋，连续垫底了一下午，算是明示WC垫底了。</p><p>RNG居（guo）然连跪两把，<del>继续暗示窝WC的命运</del>。</p><h1 id="Day-1-7"><a href="#Day-1-7" class="headerlink" title="Day 1/-7"></a>Day 1/-7</h1><p>上午报到的时候没能和 <strong><font color="black">B</font><font color="red">lackRedRabbit</font></strong> 面基，只不过试机的时候发现brr就在窝左边的左边的左边，然后就愉快的面基了。</p><p>哦对了，晚上跟 jxl 还有 hyf 住。好像是女生宿舍？被子是粉的..然而听说A栋住女生，B栋住男生，感觉不会特意反过来..</p><p>试机题目T1（听别人说）是AC自动机上dp..本来就不会，AC自动机也几年没打过了…T2是THUSC2017提答，于是没做试机题，打了个NTT，还没一遍打对..丢人。</p><p>下午果然垫底了..T1一个简单 $12$ 分暴力打了 1h，然后 T2 的第一档 $26$ 分写了 1h 才过大（xiao）样例，交上去没过pt..然后又调了 50min，还是没过..然后花了 0.5h 重构代码，莫名其妙就过了..T3看了看感觉第一档都不会，回去看T2，T2是答对第一问有 $60\%$ 的分那种，发现自己会另一档的 $27\times60\%$，然后又花了 50min 写.. 最后 30min 的时候发现 T2 还有 $43\times 60\%$ 可以用可持久化并查集写，然而时间不够了…</p><p>T2 第一次写了 6K…（菜死了连 6K 都没写过..）也是第一次用 namespace 写 subtask。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (r&lt;=10&amp;&amp;c&lt;=10)</span><br><span class="line">&#123;</span><br><span class="line">    using namespace subtask1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写真的爽_(:з」∠)_</p><p>T1是道期望，输出格式是最简分数，而且不约分的话数会非常大。当时我就在想为什么不取模..然后出考场听说 T1 的式子有一堆可以约分，剩下的形式特别简单… </p><p>我的游记好像经常不写题目就瞎bb..还是简单说一下吧。</p><p>T1：给两个数列 $a_{1..n},\,b_{1..n}$，多组询问，每次给 $c,\,d,\,e,\,f$ ，需要从 $a_{c..d}$ 和 $b_{e..f}$ 中各取 $d-c+1$ 个数然后两两配对，问配对的两个数相同的对数的期望，以最简分数形式输出。$n$ 和询问数好像大约是 $10^5$ ，因为只打了第一档暴力不记得了…</p><p>T2：一个网格图，有两种连边：</p><ol><li>一整行/列两两连边。</li><li>一些特殊点之间两两连边。</li></ol><p>有 $m$ 个被破坏的点，在某个时间点（每个被破坏的点独立）被修好，修好前所在行/列的整行/列连边不会连上。每个特殊点在某个时间点（每个特殊点独立）前不会和其它特殊点连边。多组询问问两个点联通的最早时间点，以及这个时间点的最短路。</p><p>网格大小 $10^5$，询问数 $10^6$，被破坏的点数和特殊点数都是 $2\times 10^5$。</p><p>T3：求有多少个不同的长度不超过 $m$ 的 区间取min操作序列 使得进行最后一次操作后原序列恰好变成指定序列。值域和序列大小一样都是 $n$。$n$ 好像是一两百的样子，$m$ $10^9$。</p><p>数据范围可能记错了，题意可能简述成看不懂了..QAQ就这样吧。</p><p>晚上开营仪式，先是清华系主任自吹，然后是广二校长继续吹+拉拢和THU的关系，然后请一个现在在THU的NOI2017Au爷<del>上台念了篇游记</del>…感觉那如果是篇游记还是写的挺好的，然而当众念出来..然后请了广二的一个妹子OIer 讲了一点，就结束了。</p><h1 id="Day-2-6"><a href="#Day-2-6" class="headerlink" title="Day 2/-6"></a>Day 2/-6</h1><p>今天是上午考试..T1是给你一棵树，每个点有 $a_i,\,b_i$，每条边有 $c_i,\,d_i$，$u$ 到 $v$ 的费用为 $\sum\limits_{i\text{ on path }(u,v)}\min(a_u+c_i,b_u+d_i)$，求每个点到其它所有点的费用之和。树大小 $5\times 10^5$，值域 $10^5$。开场先打了个暴力，然后感觉可以枚举每条边把树分成两半，然后就可以计算 $\sum\limits_{c-d&lt;b-a} c$  和 $\sum\limits_{c-d\ge b-a}d$ 来做，然而一开始没想到怎么做。继续去想链的部分分，发现可以主席树，然后花了 $1.5h$ 过 pt。然后发现可以用线段树合并搬到树上，又花了 $1h$ 过掉 pt。在 THUWC 过 pt 还是挺爽的..</p><p>T2是道通过询问得到树的形态的交互，没仔细看…</p><p>T3是给平面上一些点，定义“好的多边形”为取一些点构成的没有三点共线的凸四边形，求所有“好的多边形”的面积的平均值和方差，对 $998244353$ 取模。点数 $400$ ，值域 $10^9$。有个点在坐标轴上的部分分，然而WA了两个小时..至今不知道哪错了..</p><p>中午回寝室发现两边隔壁寝室分别有 nzhtl1984 和 yyb..然而最后和 lk 面基了。</p><p>下午推了会儿 Kanon。</p><p>去吃晚饭的时候碰见了 pr 和 lk。</p><p>晚上是图像处理题：</p><img src="/2019THUWC-WC冬眠记/png.png"><p>任务一把 $B\times65536+A$ 看成 $A\times65536+B$，调了 20min…</p><p>任务二任务三也写的特别慢，最后任务四没时间了..</p><p>三场加起来没别人一场高，whkwhk</p><p>最后离场的时候发现了这个：</p><img src="/2019THUWC-WC冬眠记/wallpaper.jpg"><p>那两个红红的桌面壁纸是今天的样例…</p><h1 id="Day-3-5"><a href="#Day-3-5" class="headerlink" title="Day 3/-5"></a>Day 3/-5</h1><p>今天应该是我来广二之后最有趣的一天了，本来拍了一堆照片，录了一堆视频，还有一堆录音，好多想说的。可是记（gu）忆（gu）是个好东西，它会帮你筛去那些不重要的，留在脑海中的便是那些真正值得写的吧。</p><h2 id="讲题"><a href="#讲题" class="headerlink" title="讲题"></a>讲题</h2><p>Day2+讲题的时候听到最多的一句话就是“然后就可以跳到”…..</p><p>讲完之后还讲了一些关于图像的其它内容，比如把图片的某些 bit 异或一下来加密：</p><img src="/2019THUWC-WC冬眠记/xorpic.jpg"><p>D1T2的讲题是带动画的，非常有意思，虽然有一些录像，然而还是放几张图片凑合一下吧：</p><img src="/2019THUWC-WC冬眠记/hj1.jpg"><img src="/2019THUWC-WC冬眠记/hj2.jpg"><img src="/2019THUWC-WC冬眠记/hj3.jpg"><p>好像 ctr 还觉得 D1T2 可以放 NOIp T2T3 左右…</p><img src="/2019THUWC-WC冬眠记/5kb.jpg"><p>然后是什么 ”圆梦清华路上有力的援助“什么的…</p><p>反正讲题特别有意思。</p><h2 id="扯皮"><a href="#扯皮" class="headerlink" title="扯皮"></a><del>扯皮</del></h2><p>下午是<del>扯皮</del>介绍THU的时间。</p><p>能发弹幕，所以现场特别欢乐。</p><p>先是介绍了算协，然后介绍了科协，然后是一个去年THUWC签约然后进队今年过来当工作人员的介绍自己这一年的经历，然后是一个人介绍了一下科研相关。</p><p>反正当时感觉超有意思的..然而不太记得算协具体讲了啥了..科协讲的就记得智能体大赛..那位神仙 lzj 讲的倒记得比较清楚。大约是说他签约后写了个光线追踪的工程，然后写了个“二维<del>屁股</del>守望”还现场演示了，之后还去参加了智能体（注意他现在才高三..）。科研相关的<del>讲的非常科研</del>，可能是比较硬核而且互动/玩梗不够，当时现场也不太活跃，弹幕都没什么人刷…</p><h2 id="结营"><a href="#结营" class="headerlink" title="结营"></a>结营</h2><p>感觉贵系招生主任的演讲水平真的超棒..弹幕都能迅速地扯到相关话题并且立刻扯回原本的主线，衔接自然流畅，<del>感觉可以去当主播</del>。</p><p>中途提了个问题，问我们为什么选择OI。</p><p>有回答“不想上文化课”“不想高考_(:з」∠)_”的，有回答“因为兴趣（略略略”“好玩”的，有回答“希望在有生之年解决曾经无法解决的问题”的，也有回答“能结识好多厉害的同学！”的。可能大多数人都是如此吧。因为兴趣开始，时而有宏大的理想，时而又为现实所迫，最后才发现不是自己菜，而是结识了越来越多越来越强的同学们。</p><p>约咕咕了一个小时才发，窝自然是没有的，pr签了，lk签了，yyb签了，<del>nzhtl</del>shadowice1984签了，joker签了，<del>窝认识的都签了</del>。</p><p>一天下来那么多的感想竟然短短几行就写完了呢…遗憾没有拍到的照片也只是和其它拍到了的照片一样没有被放上来。</p><h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day -4"></a>Day -4</h1><p>今天早上一起来就是愉快的<del>卷铺盖走人</del>，虽然路程比去 THUWC 的时候近（从“苏元”（好像是初中部？）到“二高”），然而要搬被子床单什么的..分了两趟搬QAQ</p><p>然后<del>颓</del>推了<del>一天</del>一会儿Kanon，<del>魔芋的翻译真有意思</del>：</p><img src="/2019THUWC-WC冬眠记/juruo.png"><p>报到的时候有个签名墙，中午和晚上各拍了一张，晚上的比较全（废话），然而中午的拍的比较清楚，所以都放上来好了..</p><img src="/2019THUWC-WC冬眠记/qmq1.jpg"><img src="/2019THUWC-WC冬眠记/qmq2.jpg"><p>看到窝写的 <code>&lt;font color=&quot;grey&quot;&gt;ouuan&lt;/font&gt;</code> 了吗qwq</p><p>晚上是开幕式，掌声最热烈的有两个地方。</p><p>第一个是广二的一个妹子OIer的演讲：“OI到底在学什么？班主任眼中最会修电脑的一批人，旁人眼中前途一片平坦通向美好未来的道路，同班同学眼中那个经常消失不知道去哪的神秘人”，“OI 已不只是一个竞赛，也不只是一门学科，而是存在于群聊中一句句 Orz 和三个百分号里，存在于看到十的九次方加七时的熟悉感以及看到 998244353 时的心里默默的波动中，抑或是一步步化难为简，最终得出正解的喜悦，也可能是自闭场后一个人独自惆怅的身影”。</p><p>第二个有js风险，所以..： <font style="opacity:0">当NOI科学委员会主席念到“WC性价比高”的时候</font>（copy这行）</p><h1 id="Day-3-0"><a href="#Day-3-0" class="headerlink" title="Day -3~0"></a>Day -3~0</h1><p>自闭。</p><p>放几张图好了。</p><img src="/2019THUWC-WC冬眠记/duck.jpg"><img src="/2019THUWC-WC冬眠记/luogu.jpg"><img src="/2019THUWC-WC冬眠记/wxh.jpg"><img src="/2019THUWC-WC冬眠记/nz.jpg"><img src="/2019THUWC-WC冬眠记/wc.jpg"><img src="/2019THUWC-WC冬眠记/o2.jpg"><p>把汐里线（推了游戏之后更喜欢这个翻译了..和香里也有姐妹的感觉）推完了。算是理解了为什么汐里的“名言”是“起きないから奇跡って言うんですよ”，这句话有好几层意思，光是看动画不会明白的吧..也稍微明白了“梦境”与“第三个愿望”是怎么回事了。虽然还是不完全懂..（都是不合理的，好像也没什么“完全懂”）</p><p>第二场营员交流上 yfz 和 mcfx 讲的指令集真好玩。</p><img src="/2019THUWC-WC冬眠记/blddlxl.jpg"><img src="/2019THUWC-WC冬眠记/cccx.jpg"><img src="/2019THUWC-WC冬眠记/elephant.jpg"><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>打铁。</p><p>开场先写了 $T1$ $34$ 分，一出考场就听说自己挂了 $8$ 分。</p><p>然后去想 $T3$ 交互，发现不会做，先把强制数据分治的 $13$ 分写了，调了一会儿，继续想 $O(n^2)$。</p><p>感觉不会，这时候已经过去 $3.5h$ 了（鬼知道前面那点分为什么写了这么久..），去玩 $T2$ 提答，前面 $60$ 分还是很好写的，然后作死的想了一会儿第四个点，发现不会，已经只剩 $0.5h$ 了。</p><p>问题是我这个时候还在想 $T3​$ 的 $n^2​$ 怎么写…最后 $15min​$ 的时候决定写个随机询问打表对照，直接随便打了个表都没有检查结果是否两两不同，本来还把原来的代码复制了一份，最后 $1min​$ 写好的时候竟然把代码复制回去编译的..随手输了个数据，一测，既不是 correct 也不是 incorrect，然后就考试结束了..估计连那 $13​$ 分一起没了，爆零了。</p><p>写了的分：$34+60+44=138$，<font color="brown">Cu</font>/<font color="silver">Ag</font>。</p><p>估分 at 考试结束前 $15min$ ：$34+60+13=107$，<font color="brown">Cu</font>。</p><p>估分 of 考试结束前 $15min$ ：$26+60+13=99$，<font color="black">Fe</font>/<font color="brown">Cu</font>。</p><p>考试结束后的估分：$26+60+0=86$，<font color="black">Fe</font>。</p><p>保底估分：$18+38+0=56$，<font color="black">Fe</font>。</p><p>最高可能得分：$26+60+44=130$，<font color="brown">Cu</font>/<font color="silver">Ag</font>。</p><h1 id="Day-1-5"><a href="#Day-1-5" class="headerlink" title="Day 1.5"></a>Day 1.5</h1><p>虽然只有下午+晚上，然而发生了好多事鸭。</p><p>先是 GGF 把选手<del>复读</del>复测鸽到了讲题开始之后..</p><img src="/2019THUWC-WC冬眠记/yzj.jpg"><p>然后窝去看成绩，$T3$ 竟然没挂（$13$），然而 $T2$ 的第二个点莫名挂了..仔细看了半天都是对的，问别人也是对的，群里更有趣了，$O(1)$ 的题目 $O(n)$ 做法有 $0,\,6,\,20$ 分的..然后找到了工作人员，咕了一会儿之后帮我重测过了..然后去申诉，还不知道能不能加回来。讲题没去听..<del>听了也是自闭。</del></p><p><del>OIer真能搞</del>，说搞就搞出来了一个文艺汇演。</p><p>LCA nb！Joker nb！大连24 nb！zzt nb！</p><p>感觉这一晚上更加了解 OI 了。要变得更强，和更强的人在一起，去喜欢正确的事情，再用尽全力去喜欢自己喜欢的事情。</p><p><font color="grey">完整版</font>文艺汇演录制今晚压制出来，大约要回武汉之后才能传到b站上。</p><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><p>上午去科学中心冬眠。在车上用 zar 的热点<a href="https://www.bilibili.com/video/av42134227/" target="_blank" rel="noopener">把文艺汇演传了</a>。</p><p>下午听说 $T2$ 重测了，然后窝莫名 <font color="silver">Ag</font> 了.. 这场 WC 好像是暴力 <font color="gold">Au</font>，只要 $127$ 分，然而窝暴力没打满，又疯狂挂分，只好滚粗了.. 另外好像人人都有一枚铁牌。</p><p>睡前看了两集《比宇宙更远的地方》。</p><h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h1><p>上午看了两集《比宇宙更远的地方》，然后去火车站。发现竟然和 <font color="black"><strong>P</strong></font><font color="red"><strong>inkRabbit</strong></font> 一辆（去火车站的）车。</p><p>中午吃了干拌面（来火车站之前买的），然后有个卖方便面的小哥让我们帮忙把方便面看着，他去上个厕所。$20min$ 后，他从厕所出来，去问 ylh 在玩什么游戏：</p><img src="/2019THUWC-WC冬眠记/fbm&ylh.jpg"><p>本来想对广二说 さようなら 的，想了想应该是 またね 。</p><p>感觉 cl 中渚对朋也说的那句“离开的时候一定要是笑着离开的，不然就再也回不来了”莫名可以用在这里。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;又到了 Kanon 的季节呢&lt;/del&gt;，快乐的冬眠生活开始了_(:з」∠)_&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CCF系列赛事" scheme="https://ouuan.github.io/tags/CCF%E7%B3%BB%E5%88%97%E8%B5%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>UER #8 —— 通信题：打雪仗</title>
    <link href="https://ouuan.github.io/UER-8-%E6%B8%B8%E8%AE%B0-%E2%80%94%E2%80%94-%E9%80%9A%E4%BF%A1%E9%A2%98%EF%BC%9A%E6%89%93%E9%9B%AA%E4%BB%97/"/>
    <id>https://ouuan.github.io/UER-8-游记-——-通信题：打雪仗/</id>
    <published>2018-12-22T15:03:25.000Z</published>
    <updated>2019-02-14T05:53:31.374Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://uoj.ac/contest/47/problem/454" target="_blank" rel="noopener">T1题目链接</a></p><p>大意：Alice 有一个长度为 $2n$ 的 $01$ 串 $s_{1..2n}$，Bob 有 $n$ 个下标 $p_{1..n}$，Alice 和 Bob 只能用 $01$ 通信，需要在每人各 $m$ 个 bit 内使 Bob 输出 $s_{p_1..p_n}$ .</p><p>$n=1000, m=1350$</p><a id="more"></a><h1 id="Part-1-通信题"><a href="#Part-1-通信题" class="headerlink" title="Part 1 通信题"></a>Part 1 通信题</h1><blockquote><p>只是说一下我做了这道题后对通信题的理解，可能有误。</p></blockquote><h2 id="赛时：通信题是啥？？？"><a href="#赛时：通信题是啥？？？" class="headerlink" title="赛时：通信题是啥？？？"></a>赛时：通信题是啥？？？</h2><p>作为一个从未做过通信题的选手，遇到这题自然是百度了一下“通信题”。如果你尝试一下，会搜到《移动通信试题库》。</p><p>尝试搜索 “通信题 OI”——OI是什么意思? - 问通信专家；”通信题 CSDN”——通信原理考试题-CSDN下载。</p><p>ok，只能自己看样例程序了。</p><p>于是我比赛的第一个小时就在对着样例代码懵逼中度过了…..</p><p>然后发现我sb了，忘记了一件事：标准输入是会等待输入的！<img src="https://i.loli.net/2018/10/23/5bcead9b66b11.gif" alt=""> 可能是我 OI 题做傻了，以为输入一定要一连串不停地输入…导致我一直没有理解为什么两个程序之间可以来回通信…</p><p>（<del>上面那段话纯属我sb了，请跳过不看</del>）</p><h2 id="通信题是……"><a href="#通信题是……" class="headerlink" title="通信题是……"></a>通信题是……</h2><p>根据我的理解，通信题就是：两个程序，分别从文件读入数据，从标准输入读入另一个程序的标准输出。最后其中一个程序按要求输出到文件。</p><p>（好像跟题面描述的差不多…）</p><p>那就说说我sb了而卡住的地方好了..一个程序 getchar() 的时候会暂停执行，直到另一个程序输出，就跟手动输入数据时等待回车一样。</p><h2 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h2><p>广二机房是 win7，不太方便复制…</p><p>于是只好手动输入了，只不过感觉 copy 两个程序的输出看它们相互配合着工作，还是蛮有趣的。</p><h1 id="Part-2-解法"><a href="#Part-2-解法" class="headerlink" title="Part 2 解法"></a>Part 2 解法</h1><p>其实我 $5min$ 就想到怎么做了..（但好像做法比最短解那些神仙做法麻烦的多？）其实也不是很难写，但由于第一次写通信题不太习惯，各种细节写挂，最后写了一个小时才A…</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>可以想到这样一个做法（如果想不到也没关系..看懂就好了）：选择一个区间 $[l,r]$ ，Bob 用一个长度为 $r-l+1$ 的 $01$ 串告诉 Alice 这个区间内每个位置是否是一个下标，对于每个下标 Alice 告诉 Bob 对应的值；对于不在 $[l,r]$ 内的其它部分，Alice 把所有值（不管是不是一个下标）都告诉 Bob .</p><h2 id="优化通信数"><a href="#优化通信数" class="headerlink" title="优化通信数"></a>优化通信数</h2><p>考虑一下，这样做需要的 bit 数是多少：</p><p>Bob 给 Alice 的：首先 Bob 要告诉 Alice $l$ 和 $r$ , 用二进制表示，需要 $22$ 个 bit；其次，Bob 要询问 $[l,r]$ ，需要 $r-l+1$ 个 bit 。</p><p>Alice 给 Bob 的：首先 Alice 要回答 Bob 在 $[l,r]$ 内的询问，需要 “ $[l,r]$ 内下标个数” 个 bit；其次，Alice 要告诉 Bob 除了 $[l,r]$ 其它区域的所有值，需要 $n-(r-l+1)$ 个 bit 。</p><p>那么，我们需要最小化：$\max(r-l+23, [l,r]\text{ 内下标个数}+n-r+l-1)$ 。</p><p>用 $[l,l+len)$ 来表示会简洁一些，所以下文都使用这种方式，即需要最小化：$\max(len+22, [l,l+len)\text{ 内下标个数}+n-len)$ 。</p><p>预处理前缀和即可快速算出 $[l,l+len)$ 内的下标个数，$O(n^2)$ 枚举区间取最小值即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><h3 id="Bob"><a href="#Bob" class="headerlink" title="Bob"></a>Bob</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"bob.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">"bob.out"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">rd</span><span class="params">()</span> <span class="comment">//读入一个bit</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wt</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//输出一个bit</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">putchar</span>(x+<span class="string">'0'</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p[<span class="number">1010</span>],rk[<span class="number">4010</span>],pre[<span class="number">4010</span>],minn=<span class="number">0x7fffffff</span>,l,len;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t;</span><br><span class="line"></span><br><span class="line">fin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="comment">//读入并记录是第几个下标（便于存答案），并且复制一份拼在后面，这样如果询问的区间跨过首尾可以方便地处理</span></span><br><span class="line">&#123;</span><br><span class="line">fin&gt;&gt;p[i];</span><br><span class="line">rk[p[i]]=rk[p[i]+<span class="number">2</span>*n]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;++i) <span class="comment">//预处理前缀和</span></span><br><span class="line">&#123;</span><br><span class="line">pre[i]=pre[i<span class="number">-1</span>]+(rk[i]&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i) <span class="comment">//枚举找最优方案</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n;++j)</span><br><span class="line">&#123;</span><br><span class="line">t=max(pre[i+j<span class="number">-1</span>]-pre[i<span class="number">-1</span>]+<span class="number">2</span>*n-j,j+<span class="number">22</span>);</span><br><span class="line"><span class="keyword">if</span> (t&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">minn=t;</span><br><span class="line">l=i;</span><br><span class="line">len=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;--i) <span class="comment">//告诉Alice l和len</span></span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="keyword">bool</span>((<span class="number">1</span>&lt;&lt;i)&amp;l));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="keyword">bool</span>((<span class="number">1</span>&lt;&lt;i)&amp;len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l;i&lt;l+len;++i) <span class="comment">//询问区间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i])</span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="number">1</span>);</span><br><span class="line">ans[rk[i]<span class="number">-1</span>]=rd(); <span class="comment">//存答案</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">wt(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l+len;i&lt;l+<span class="number">2</span>*n;++i) <span class="comment">//读取剩余部分</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i])</span><br><span class="line">&#123;</span><br><span class="line">ans[rk[i]<span class="number">-1</span>]=rd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">rd();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Alice"><a href="#Alice" class="headerlink" title="Alice"></a>Alice</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"alice.in"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span> <span class="comment">//为了方便，两个程序中rd()和wt()的char/int是反的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getchar()-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wt</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">putchar</span>(x);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">4010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,l=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fin&gt;&gt;n&gt;&gt;m&gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>*n+<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;++i) <span class="comment">//复制一遍放在后面</span></span><br><span class="line">&#123;</span><br><span class="line">s[i]=s[i<span class="number">-2</span>*n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i) <span class="comment">//读入l和len</span></span><br><span class="line">&#123;</span><br><span class="line">l=l*<span class="number">2</span>+rd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">len=len*<span class="number">2</span>+rd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l;i&lt;l+len;++i) <span class="comment">//回答询问</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rd())</span><br><span class="line">&#123;</span><br><span class="line">wt(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=l+len;i&lt;l+<span class="number">2</span>*n;++i) <span class="comment">//告诉Bob剩下的部分</span></span><br><span class="line">&#123;</span><br><span class="line">wt(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Part-3-证明"><a href="#Part-3-证明" class="headerlink" title="Part 3 证明"></a>Part 3 证明</h1><p>取询问区间为 $[l,l+1318]$ ，这样的话 Bob 发给 Alice  的 bit 数就为 $1319+22=1341$ .</p><p>区间 $[l,l+1318]$ 内下标的期望个数为 $\frac{1319}2$ ，所以一定存在某个区间使得下标个数小于等于 $659$ ，再加上剩余部分 $681$ ，Alice 发给 Bob 的 bit 数就为 $1340$ 。</p><p>事实上，我提交的评测记录里通信次数最多的就是 $1341+1340$ 。</p><h1 id="Part-4-优化"><a href="#Part-4-优化" class="headerlink" title="Part 4 优化"></a>Part 4 优化</h1><p>只取 $len=1325$ ，少枚举一维，可以优化到时间复杂度 $O(n)$ ；少传 $11$ 个 bit，可以优化到最大通信次数 $1336+1337$ 。证明从略。 </p><p><a href="http://uoj.ac/submission/309171" target="_blank" rel="noopener">提交记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://uoj.ac/contest/47/problem/454&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;T1题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大意：Alice 有一个长度为 $2n$ 的 $01$ 串 $s_{1..2n}$，Bob 有 $n$ 个下标 $p_{1..n}$，Alice 和 Bob 只能用 $01$ 通信，需要在每人各 $m$ 个 bit 内使 Bob 输出 $s_{p_1..p_n}$ .&lt;/p&gt;
&lt;p&gt;$n=1000, m=1350$&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="UOJ" scheme="https://ouuan.github.io/tags/UOJ/"/>
    
      <category term="通信题" scheme="https://ouuan.github.io/tags/%E9%80%9A%E4%BF%A1%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>随机生成图片展示</title>
    <link href="https://ouuan.github.io/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E5%B1%95%E7%A4%BA/"/>
    <id>https://ouuan.github.io/随机生成图片展示/</id>
    <published>2018-12-20T15:12:18.000Z</published>
    <updated>2019-02-14T05:54:46.401Z</updated>
    
    <content type="html"><![CDATA[<img src="/随机生成图片展示/width=512&height=512&blocksize=75&qwq=2&minred=100&maxred=255&mingreen=100&maxgreen=255&minblue=200&maxblue=255&minalpha=0&maxalpha=255.png"><p><a href="https://ouuan.github.io/randpic/generator/">传送门</a></p><a id="more"></a> <p>源码按F12即可查看（当然也可以在 repo 里面看）</p><p>看到一个帖子里提到了一个140字符画图比赛，看到了 <a href="https://codegolf.stackexchange.com/a/35626" target="_blank" rel="noopener">Martin Büttner’s code</a> ，然后就随便写了一个. JavaScript 都是要用啥现场百度…</p><p>已经更新了（存档？）功能，在地址栏后以 <code>?</code> 开头 <code>&amp;</code> 分隔即可输入参数。例如：<a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255">https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255</a></p><p>下面是一些图片（附有参数链接）：</p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=255&amp;mingreen=0&amp;maxgreen=255&amp;minblue=0&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=255&amp;mingreen=0&amp;maxgreen=255&amp;minblue=0&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=200&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=200&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=200&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=3&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=3&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=10&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=10&amp;minred=180&amp;maxred=255&amp;mingreen=180&amp;maxgreen=255&amp;minblue=180&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=100&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=200&amp;maxred=255&amp;mingreen=200&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png?" alt=""></a></p><p><a href="https://ouuan.github.io/randpic/generator/?width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=50&amp;mingreen=0&amp;maxgreen=50&amp;minblue=0&amp;maxblue=50&amp;minalpha=0&amp;maxalpha=50"><img src="/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=0&amp;maxred=50&amp;mingreen=0&amp;maxgreen=50&amp;minblue=0&amp;maxblue=50&amp;minalpha=0&amp;maxalpha=50.png?" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/随机生成图片展示/width=512&amp;height=512&amp;blocksize=75&amp;qwq=2&amp;minred=100&amp;maxred=255&amp;mingreen=100&amp;maxgreen=255&amp;minblue=200&amp;maxblue=255&amp;minalpha=0&amp;maxalpha=255.png&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ouuan.github.io/randpic/generator/&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML/JavaScript" scheme="https://ouuan.github.io/tags/HTML-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Avito Cool Challenge 2018 游记</title>
    <link href="https://ouuan.github.io/Avito-Cool-Challenge-2018-%E6%B8%B8%E8%AE%B0/"/>
    <id>https://ouuan.github.io/Avito-Cool-Challenge-2018-游记/</id>
    <published>2018-12-17T14:47:17.000Z</published>
    <updated>2019-02-14T05:54:42.087Z</updated>
    
    <content type="html"><![CDATA[<p>这两天比赛是真的多..碰上了场 Chinese Legends Round / HackForces 竟然在紫名涨了点分QAQ</p><a id="more"></a><p>看到 A，$gcd(x,x-1)=1$ ，这不是sb题吗？然后愉快地WA了…互质 $\ne$ 不为倍数鸭QAQ还有 $1$ 呢.开场-50分..</p><p>B貌似比C难，但A的人比C多..其实当时交的时候还没想清楚 $p$ 个一样的人数是 $p$ 的倍数这个结论，就感觉好像是对的，就交了。</p><p>C 很快就想到了结论，排列组合乘一乘随便做，而且数据范围小到可以用杨辉三角算组合数+不用快速幂。</p><p>D 感觉要搞个MST，然后就真的先搞了个MST，然后就没有想到简单的解法..正解是MST搞完所有关键点就不搞了。一开始写挂了，然而pt特别水（好像直接输出MST最大边就可以），A完E之后看到jason的D被叉了，就仔细看了下，发现自己写挂了..然后重交，少了 $400$  多分。</p><p>E 贪心搞一搞就行了，据说ylh没有做出来是忘了积一定差越小和越小..</p><p>F 看了看感觉不会，于是锁了 D 开始叉人。看到room rank1的正解感觉自己整个人都sb了..在离比赛结束 $5$ 分钟的时候看到一个感觉写挂了的，然而不敢hack，于是一直盯着看，直到离比赛结束还有 $1$ 分钟的时候才hack，然而一不小心把数据打错了..幸好格式错误不扣分，赶紧点回去重新hack，最后在离比赛结束 $4s$ 的时候提交了hack，然后绿了！喜提 $100$ 分、$50​$ 名。</p><p>当时比赛一结束我就跟 ylh 说我感觉如果我不 fst能再涨 $100$ 名，然后最后真的又涨了 $100$ 名.. B和D一堆fst的。</p><p>F 用奇偶性判断选择的哪边，感觉很妙。</p><p>G 没仔细看。</p><p>H：</p><blockquote><p>and we didn’t except anyone to pass.</p></blockquote><p>不知道会在紫名待多久QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天比赛是真的多..碰上了场 Chinese Legends Round / HackForces 竟然在紫名涨了点分QAQ&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="CodeForces" scheme="https://ouuan.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>CF edu 56 &amp; AT Grand 029 游记</title>
    <link href="https://ouuan.github.io/CF-edu-56-AT-Grand-029-%E6%B8%B8%E8%AE%B0/"/>
    <id>https://ouuan.github.io/CF-edu-56-AT-Grand-029-游记/</id>
    <published>2018-12-15T16:29:11.000Z</published>
    <updated>2019-02-14T05:54:19.258Z</updated>
    
    <content type="html"><![CDATA[<p>今天 AT 和 CF 刚好连上了，于是就都打了一下。</p><a id="more"></a><h2 id="关于模板"><a href="#关于模板" class="headerlink" title="关于模板"></a>关于模板</h2><p>今天心血来潮把用于在线比赛的模板换了一下，加了点东西，然后发现 <code>rep(1,l,r)</code> 写起来非常不顺手..保留了部分比较好用的。</p><p>测试的时候忘记开数组了（<del>都是些什么sb错误</del>），然后以为 ll 不能作下标，于是没有 <code>#define long long</code>，然后 CF 挂惨了..</p><h2 id="AtCoder"><a href="#AtCoder" class="headerlink" title="AtCoder"></a>AtCoder</h2><p>上一场打的 Beginner，这场难度正常多了。</p><p>A 是个值域为 $2$ 的逆序对..</p><p>B 用 multiset 乱搞了一下，对于每个数枚举组成的数，然后从大到小匹配，不知道是不是正解，反正过了，而且是 $log^2$ 的。</p><p>C 感觉挺可做的..可能有细节没调出来，赶着回酒店打 CF 就没有继续调了..</p><p>D 一开始还在想博弈论完全不会..然后仔细看了一眼，如果 A 不走，B 就会不走，就结束了；所以 A 一定能走则走。然后就随便做了。</p><p>只不过 AT 的 rating 真的涨的好快..</p><h2 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h2><p>ABC 三道 spj ？？？</p><p>都是随便构造就能做的..</p><p>然而 C 一开始忘开 ll 了…..</p><p>D 黑白染色一下，连通块内两种节点分别有 $a$ 个和 $b$ 个答案就是 $2^a+2^b$ ，把每个连通块的答案加起来就好了。</p><p>由于 $O(nq)$ memset 会爆掉，不能 memset 整个数组，于是愉快地在开了 ll 的情况下 memset(…sizeof(int)…)；发现了之后不小心把开 int 的另一个数组也改成 memset(…sizeof(long long)..) 了.. 开场 $40$ 分钟的时候这 $3$ 个关于 ll 的罚时让我排名翻了三倍…</p><p>于是，A 了 D 之后我就在板子里加上了 <code>#define int long long</code>。</p><p>看了会儿 E 不会做，然后一看 standing，惊奇地发现 G 有一堆（$15$ 个，当时 E $7$ F $1$）人 A 了，然后一看，就是POJ 2926+动态RMQ…</p><p>感觉自己几年没有写过普通线段树了（最近写的全是平衡树/动态开点线段树），写了半个多小时还写错了..毕竟是 CF，应该去复制个模板才对的…一交，MLE 了，<del>woc我好不容易<code>#define int long long</code>了就是这个结果？？</del>改成 int，跑了 $5.4s$，巨方，于是手动开了 O3，$4.8s$ ，但重交竟然没有罚时。应该去找个 BIT 动态求 RMQ 的模板的…</p><p>看到 halyavin 参赛了，感觉自己要 fst ，赶紧把博客写了睡觉去。</p><h2 id="UPD"><a href="#UPD" class="headerlink" title="UPD"></a>UPD</h2><p>halyavin 竟然没有 hack…然而 D 有一堆 memset 整个数组的，我也去 hack 了一个（edu hack $\sqrt{}$）。</p><p>没有 fst，第一次 A $5$ 题，上 $2k$ 了，感觉海星。</p><h2 id="UUPD"><a href="#UUPD" class="headerlink" title="UUPD"></a>UUPD</h2><p><a href="https://www.luogu.org/blog/yyfouuan/solution-cf1093d" target="_blank" rel="noopener">题解 CF1093D 【Beautiful Graph】</a></p><p><a href="https://www.luogu.org/blog/yyfouuan/solution-cf1093g" target="_blank" rel="noopener">题解 CF1093G 【Multidimensional Queries】</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 AT 和 CF 刚好连上了，于是就都打了一下。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="AtCoder" scheme="https://ouuan.github.io/tags/AtCoder/"/>
    
      <category term="CodeForces" scheme="https://ouuan.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>html实现随机图片</title>
    <link href="https://ouuan.github.io/html%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87/"/>
    <id>https://ouuan.github.io/html实现随机图片/</id>
    <published>2018-12-12T15:42:17.000Z</published>
    <updated>2019-02-14T05:54:08.398Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：暂时还不知道如何制作能被引用的随机图片，只能查看图片，而不能通过类似于<code>![](图片地址)</code>的方式查看。</p></blockquote><blockquote><p><a href="https://ouuan.github.io/randpic/people/">demo</a></p><p>欢迎投稿图片：<a href="https://github.com/ouuan/ouuan.github.io/issues/19" target="_blank" rel="noopener">投稿地址</a></p></blockquote><a id="more"></a><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"imagelist.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  var r=Math.floor(Math.random()*images.length)</span></span><br><span class="line"><span class="xml">  document.write("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"+images[r]+"</span>&gt;</span>")</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>图片列表保存在 <code>imagelist.json</code> 内。</p><h2 id="参考示例"><a href="#参考示例" class="headerlink" title="参考示例"></a>参考示例</h2><p><code>https://ouuan.github.io/randpic/people/index.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"imagelist.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>随机图片-人物类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> <span class="attr">href</span>=<span class="string">"/images/favicon32.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span> <span class="attr">href</span>=<span class="string">"/images/favicon16.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    img</span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var r=Math.floor(Math.random()*images.length)</span></span><br><span class="line"><span class="xml">    document.write("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"+images[r]+"</span>&gt;</span>")</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>https://ouuan.github.io/randpic/people/imagelist.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var images=</span><br><span class="line">[</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/70469686_p0.png"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/69212051_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/64660644_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/61438972_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/60141148_p0.png"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/1200296-20170715113653118-1762611401.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/71631241_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/f0Q5-g62pXkZ5lT3cS1hc-rs.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/36224612_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/64702477_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/64670588_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://z4a.net/images/2018/12/12/61815260_p0.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c10a02b0831b.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c1119665c83a.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111a8bed8e8.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111ab43f7cf.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111ade38590.jpg"</span>,</span><br><span class="line">  <span class="string">"https://i.loli.net/2018/12/12/5c111b8240591.png"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="UPD"><a href="#UPD" class="headerlink" title="UPD"></a>UPD</h2><p>研究了一下 js 后写了一下图片缩放：（代码很丑，毕竟是靠百度学了一个小时写出来的）（大括号不换行是因为sublime缩进写着写着就炸了，只好在网上格式化了一下）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"imagelist.json"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">随机图片-人物类</span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> <span class="attr">href</span>=<span class="string">"/images/favicon32.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">sizes</span>=<span class="string">"16x16"</span> <span class="attr">href</span>=<span class="string">"/images/favicon16.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"margin: 0px; background: #0e0e0e;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var cur = 1;</span></span><br><span class="line"><span class="undefined">var xx = 0;</span></span><br><span class="line"><span class="undefined">var yy = 0;</span></span><br><span class="line"><span class="undefined">var rx = 0;</span></span><br><span class="line"><span class="undefined">var ry = 0;</span></span><br><span class="line"><span class="undefined">var nw;</span></span><br><span class="line"><span class="undefined">var nh;</span></span><br><span class="line"><span class="undefined">var mw;</span></span><br><span class="line"><span class="undefined">var mh;</span></span><br><span class="line"><span class="undefined">var w;</span></span><br><span class="line"><span class="undefined">var h;</span></span><br><span class="line"><span class="undefined">function setSize() &#123;</span></span><br><span class="line"><span class="undefined">if (cur == 1) &#123;</span></span><br><span class="line"><span class="undefined">var p = document.getElementsByTagName("img")[0];</span></span><br><span class="line"><span class="undefined">nw = p.naturalWidth;</span></span><br><span class="line"><span class="undefined">nh = p.naturalHeight;</span></span><br><span class="line"><span class="undefined">mw = window.innerWidth;</span></span><br><span class="line"><span class="undefined">mh = window.innerHeight;</span></span><br><span class="line"><span class="undefined">if (nw &gt; mw || nh &gt; mh) &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: zoom-in";</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: auto";</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if (nw * mh &gt; nh * mw) &#123;</span></span><br><span class="line"><span class="undefined">h = nh * mw / nw;</span></span><br><span class="line"><span class="undefined">w = mw;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">w = nw * mh / nh;</span></span><br><span class="line"><span class="undefined">h = mh;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p.style.width = w;</span></span><br><span class="line"><span class="undefined">p.style.height = h;</span></span><br><span class="line"><span class="undefined">p.style.marginTop = (mh - h) / 2;</span></span><br><span class="line"><span class="undefined">p.style.marginLeft = (mw - w) / 2;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">if (nw &gt; mw || nh &gt; mh) &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: zoom-out";</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">p.style = "cursor: auto";</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">function picLoaded() &#123;</span></span><br><span class="line"><span class="undefined">setSize();</span></span><br><span class="line"><span class="undefined">window.onresize = function() &#123;</span></span><br><span class="line"><span class="undefined">setSize();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">function BigSmall() &#123;</span></span><br><span class="line"><span class="undefined">mw = window.innerWidth;</span></span><br><span class="line"><span class="undefined">mh = window.innerHeight;</span></span><br><span class="line"><span class="undefined">if (nw &gt; mw || nh &gt; mh) &#123;</span></span><br><span class="line"><span class="undefined">if (cur == 1) &#123;</span></span><br><span class="line"><span class="undefined">cur = 2;</span></span><br><span class="line"><span class="undefined">var p = document.getElementsByTagName("img")[0];</span></span><br><span class="line"><span class="undefined">p.style = "cursor: zoom-out";</span></span><br><span class="line"><span class="undefined">var e = event || window.event;</span></span><br><span class="line"><span class="undefined">mw = window.innerWidth;</span></span><br><span class="line"><span class="undefined">mh = window.innerHeight;</span></span><br><span class="line"><span class="undefined">if (nw * mh &gt; nh * mw) &#123;</span></span><br><span class="line"><span class="undefined">h = nh * mw / nw;</span></span><br><span class="line"><span class="undefined">w = mw;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">w = nw * mh / nh;</span></span><br><span class="line"><span class="undefined">h = mh;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if (nw &lt;= mw) &#123;</span></span><br><span class="line"><span class="undefined">xx = (mw - nw) / 2;</span></span><br><span class="line"><span class="undefined">rx = 0;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">xx = 0;</span></span><br><span class="line"><span class="undefined">rx = (nw - mw) * (e.clientX - (mw - w) / 2) / w;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">if (nh &lt;= mh) &#123;</span></span><br><span class="line"><span class="undefined">yy = (mh - nh) / 2;</span></span><br><span class="line"><span class="undefined">ry = 0;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">yy = 0;</span></span><br><span class="line"><span class="undefined">ry = (nh - mh) * (e.clientY - (mh - h) / 2) / h;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p.style.marginTop = yy;</span></span><br><span class="line"><span class="undefined">p.style.marginLeft = xx;</span></span><br><span class="line"><span class="undefined">document.body.scrollLeft = rx;</span></span><br><span class="line"><span class="undefined">document.body.scrollTop = ry;</span></span><br><span class="line"><span class="undefined">&#125; else &#123;</span></span><br><span class="line"><span class="undefined">cur = 1;</span></span><br><span class="line"><span class="undefined">setSize();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">var r = Math.floor(Math.random() * images.length);</span></span><br><span class="line"><span class="xml">document.write("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">" + images[r] + "</span> <span class="attr">onload</span>=<span class="string">\</span>"<span class="attr">picLoaded</span>()\" <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">BigSmall</span>()\"&gt;</span>");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：暂时还不知道如何制作能被引用的随机图片，只能查看图片，而不能通过类似于&lt;code&gt;![](图片地址)&lt;/code&gt;的方式查看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://ouuan.github.io/randpic/people/&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎投稿图片：&lt;a href=&quot;https://github.com/ouuan/ouuan.github.io/issues/19&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML/JavaScript" scheme="https://ouuan.github.io/tags/HTML-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2018~2019冬 广二避寒记</title>
    <link href="https://ouuan.github.io/2018-2019%E5%86%AC-%E5%B9%BF%E4%BA%8C%E9%81%BF%E5%AF%92%E8%AE%B0/"/>
    <id>https://ouuan.github.io/2018-2019冬-广二避寒记/</id>
    <published>2018-12-09T07:31:27.000Z</published>
    <updated>2019-02-14T05:55:16.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 迎风迈出的步伐更艰难，即使走的不远，但踩得更深。一代人只能做一代人的事，完成这个时代赋予的使命就是英雄，大地也会将他的脚印铭记。</p><p> ——<a href="https://www.bilibili.com/video/av20205319" target="_blank" rel="noopener">乒乓帝国</a>（句子迷上说是《孤杂记》..）</p></blockquote><p>突然就得知了要去广二集训。</p><p>然后知道了这次出去可能要一直到 WC，差不多有 $50$ 天。这样一算这个学期我在武汉的时间可能和外出的时间一样多了。</p><p>毕竟是去广州，会暖和很多，也许看不到武汉的雪了。</p><a id="more"></a><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><h2 id="Railway"><a href="#Railway" class="headerlink" title="Railway"></a>Railway</h2><p>在站台上遇到了 Dew、ylh，感觉自己活尸化严重，都是我妈先看见的…</p><p>中午吃了泡面（有汤的那种），之前出去都比较近，在火车上不用吃饭，印象中上次吃方便面还是初三的时候在学校里吃的（桶装的泡面，愣是被我当成干拌面吃的）。</p><p>在火车上看看手机、看看《大卫·科波菲尔》，当然我现在在写博客。</p><p>途中看到了一幅非常………..ok我承认我词穷了。云很低，好像不比火车高多少，环绕在山的周围，山脚下是一些平房，在远处插入了几栋现代化的高楼大厦，有一种违和却奇妙的美感。</p><p>赶紧掏出手机，可毕竟只是手机，拍不出云那种虚无缥缈的立体感，匆忙中也没能选好角度，没拍到那几栋高楼大厦。</p><img src="/2018-2019冬-广二避寒记/cloudmountainandhouses.jpg"><p>已经逝去了，经纬度也没有记下来，不能在回来的火车上再览其景，只能用粗浅的文字将其略微地记录下来罢。</p><h2 id="Underground"><a href="#Underground" class="headerlink" title="Underground"></a>Underground</h2><p>进地铁前忘记上厕所了Orz</p><p>和 ylh 一起体验了一次换票出站上厕所。</p><p>然后是 huangbei 站：</p><img src="/2018-2019冬-广二避寒记/huangbei.jpg"><p>人特别多，特别热。<del>毕竟是来避寒的</del></p><h2 id="Restaurant"><a href="#Restaurant" class="headerlink" title="Restaurant"></a>Restaurant</h2><p>和广二的教练谈了谈<del>人生</del>，建议我和 ylh 先系统地学知识点，不着急打套题，结果 dew 想先学知识点，我和 ylh 想在广二做题..</p><p>然后就是住宿的事，貌似准备先住两个星期三人间，等 ylh 回去了就去教练家里住（教练一个星期只回家一天）。今晚是先各自和家长住双人间。房号 1216.</p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>上午教练咕咕了，中午才来接我们。</p><p>然后让我们不着急打比赛，给我们三个人安排了个机房做题。</p><p>$5$ 道左偏树，<a href="https://www.luogu.org/problemnew/show/P1552" target="_blank" rel="noopener">派遣</a>、<a href="https://www.luogu.org/problemnew/show/P2713" target="_blank" rel="noopener">罗马游戏</a>和<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5818" target="_blank" rel="noopener">Joint Stacks</a>比较轻松地做出来了；<a href="https://www.luogu.org/problemnew/show/P4331" target="_blank" rel="noopener">Sequence</a>看了看题解，感觉还没完全搞懂，但A了；<a href="https://www.luogu.org/problemnew/show/P2483" target="_blank" rel="noopener">魔法猪学院</a>用A*在广二的OJ和BZOJ上过了，暂时放弃可持久化左偏树，以后再学吧..</p><p>山、河、树（不只是路边那种）（<del>当然也不是可持久化那种</del>），游泳池，令人联想起 Angel Beats! 的食堂，各式各样的社团活动。</p><img src="/2018-2019冬-广二避寒记/bdbk.jpg"><img src="/2018-2019冬-广二避寒记/pool.jpg"><h1 id="Day-2-3"><a href="#Day-2-3" class="headerlink" title="Day 2-3"></a>Day 2-3</h1><p>把题目列表搞到了洛谷团队里.</p><p>搞了搞平衡树、启发式合并之类的，感觉自己啥都不会..</p><p>搞了个<a href="https://ouuan.github.io/randpic">随机图片</a> 。</p><h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h1><p>一天就写了<a href="https://www.luogu.org/problemnew/show/P1486" target="_blank" rel="noopener">[NOI2004]郁闷的出纳员</a>和<a href="https://www.luogu.org/problemnew/show/P3690" target="_blank" rel="noopener">LCT模板</a>…</p><p>然后搞了个stylus插件：<a href="https://userstyles.org/styles/166876/theme" target="_blank" rel="noopener">洛谷犇犇、讨论隐藏</a>。</p><p>果然整天待机房效率低.</p><h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><p>上午听隔壁机房的讲了下回文自动机、后缀数组、后缀自动机，但由于手头上的题还没搞完就没做相关的题目。</p><p><a href="https://www.luogu.org/problemnew/show/P2042" target="_blank" rel="noopener">[NOI2005]维护数列</a>做了好久..本来操作就多，取的子段还不能为空…</p><p>然后学了下LCT。</p><h1 id="Day-6-7"><a href="#Day-6-7" class="headerlink" title="Day 6-7"></a>Day 6-7</h1><p>就做了几道 LCT 的题…学了学虚树，还没做题。</p><p>然后这几天比赛挺多的，at+cf 还有洛谷比赛。感觉洛谷比赛都挺dl的…</p><p>然后今天看了几篇<a href="http://subblogvfleakingm92.lofter.com/" target="_blank" rel="noopener">vfk的博客</a>，感觉都写的挺好的。</p><p>里面提到了CFctr的自我修养，感觉以后出题时要牢记（虽然里面有些是只适用于CF的）：</p><blockquote><ol><li><p>准备一场CF包括：题目、比赛通知、题解。</p></li><li><p>你的题目必须是独一无二的。你不能从以前用过的题目中抄袭它的想法。PLEASE BE FAIR WITH THE COMMUNITY。（</p></li><li><p>空间限制必须是256MB，时间限制至少是出题人的java程序运行时间的两倍。</p></li><li><p>题面必须清晰好懂，没有语法错误。建议写得短短的……</p></li><li><p>题目背景中不要写数据范围，全部都要写在输入格式里。</p></li><li><p>请参考以前CF的题目描述的格式来写题目描述。如果你不知道怎么清晰地描述输入输出格式，请找与之类似的题目进行仿写。</p></li><li><p>题目描述中的数组下标最好从1开始。</p></li><li><p>你必须限制被你提到的所有的变量的范围。如果你提到一个字符串，你必须写明哪些字符可以出现在这个字符串内。</p></li><li><p>题目的tests中必须包括各种各样的数据，而且应该有各种各样的达到最小数据范围的数据和达到最大数据范围的数据。也就是说如果1 &lt;= n &lt;= 100000，那么数据中既应该有n = 1，也应该有n = 100000。</p></li><li><p>你应该写个暴力。</p></li><li><p>你应该拿标程与暴力对拍。</p></li><li><p>Div.2的题的pretests要很强，能让应该超时的程序在pretests上就TLE掉。但是你可以让这个点毫无意义。比如给n个数排序，你可以用n个1来确保选择排序不能过。</p></li><li><p>确保读错题的人不能过pretests。</p></li><li><p>建议添加极端数据，但是不必是所有极端数据。确保数组开小的人不能过pretests。</p></li><li><p>不要让时间复杂度很高但做了大量常数优化的人AC。</p></li><li><p>每道题至少2个样例。每道Div.2的题目的前两个样例必须有样例解释。</p></li><li><p>如果要使用long long，请确保不开long long的人不能过pretests。</p></li></ol></blockquote><p>哦对了，自定义域名总是炸，以后这个博客就用 ouuan.github.io 作为地址了。（正好避免了一年后域名到期的问题）</p><h1 id="Day-8"><a href="#Day-8" class="headerlink" title="Day 8"></a>Day 8</h1><p>今天好像啥都没干..估计是每天都没睡好导致白天效率低下..</p><p>好像看了好几篇淀粉质的教程，但就是不想写题..</p><p>和 memset0 讨论关于保留几位小数与精度限制的问题..感觉其他人总是不能轻松地理解保留几位小数是卡精度的…</p><p>翻译了CF的几道题，写了写题解。</p><p>继续yy自己口胡的题的优秀做法，依然没什么进展。</p><p>跟 Sooke 说了说自己出 CF 的想法，Sooke 表示想一起出，然后在还没想好一道题的情况下大谈怎么出 CF..</p><p>说实话出 div.2 的话会有些不甘，哪怕晚点也想出 div.1+div.2 的..</p><p>第一次用洗衣机，感觉洗衣机真有趣  <img src="/2018-2019冬-广二避寒记/serious.jpg"> （好像暴露了我一周没洗衣服…）</p><p>（hexo 貌似不支持行内图片？）</p><h1 id="Day-9"><a href="#Day-9" class="headerlink" title="Day 9"></a>Day 9</h1><p>搞了个 <a href="https://ouuan.github.io/randpic/generator/">随机生成图片</a> ，<del>感觉自己自从用了 Hexo 日益由 OIer 变成码农了</del>。</p><h1 id="Day-10-11"><a href="#Day-10-11" class="headerlink" title="Day 10-11"></a>Day 10-11</h1><p>这几天忙着搞比赛，博客可能咕咕咕了..准备比赛记大约会在比赛出来之后发QAQ.</p><h1 id="Day"><a href="#Day" class="headerlink" title="Day ?-?"></a>Day ?-?</h1><p>咕咕咕咕咕咕咕</p><h1 id="Day-14"><a href="#Day-14" class="headerlink" title="Day 14"></a>Day 14</h1><p>广二先是四楼停电，用了一上午笔记本，准备回酒店的时候门卫告诉我们电来了，然后回去一看发现四楼没电三楼有电。下午突然就又停电了，幸好我和 dew 都没有在写代码..</p><p>ylh 走了，然而住教练家被咕咕了，好像是因为又来了几个外省的。</p><p>新酒店..发几张图感受一下吧：</p><img src="/2018-2019冬-广二避寒记/new_room.jpg"><img src="/2018-2019冬-广二避寒记/pink_lamp.jpg"><img src="/2018-2019冬-广二避寒记/dew_glider.jpg"><p>没错 p3 是 dew 在吊椅上 <img src="/2018-2019冬-广二避寒记/serious.jpg"></p><p>然而不敢对着 dew 拍…</p><p>wifi 特别神仙：</p><img src="/2018-2019冬-广二避寒记/wifi_1.jpg"><img src="/2018-2019冬-广二避寒记/wifi_2.jpg"><p>被夹在了一个没有 wifi 的世界里..</p><p>然后貌似明天还是什么时候开始要打比赛了，然后这篇游记就不会继续真的成“游记”了。</p><h1 id="Day-15"><a href="#Day-15" class="headerlink" title="Day 15"></a>Day 15</h1><p>今天是集训队爷 zjt 出的 <del>集训队互测</del>。</p><h2 id="T1-一道带权带花树好题"><a href="#T1-一道带权带花树好题" class="headerlink" title="T1 一道带权带花树好题"></a>T1 一道带权带花树好题</h2><p>的确是带权带花树裸题（求一般图最大权值匹配），然而不需要输出方案。</p><p>虽然说 OI 题名无正解，然而我还是百度了一下..然后学了一个半小时带花树，没学会！</p><p>然后再一看，$n\le20$ 不会做？</p><p>只好写了二分图的 $20$ 分滚粗..</p><p>然而发现一个严重的问题，这貌似是我第一次写二分图最大权值匹配..百度了一下，发现全是KM算法，没有一篇费用流？然后仔细想了好多遍，感觉费用流应该没问题，就写了。然而一开始写挂了（连图中的边时没判哪个点是起点），幸好后来发现了。</p><p>后来听说这题 std 是一个线代做法，由于不用输出方案码量非常小。具体可以参考2017年集训队论文。然而看不懂鸭…</p><p>这题不卡随机化乱搞.（嘤嘤嘤？）</p><h2 id="T2-一道拉格朗日反演好题"><a href="#T2-一道拉格朗日反演好题" class="headerlink" title="T2 一道拉格朗日反演好题"></a>T2 一道拉格朗日反演好题</h2><p>看到 T1 真的是一般图最大权值匹配的我真的信了题名的鬼话..</p><p>一个 $01$ 序列，初始为空，有三种操作：</p><ol><li>往末尾加个 $0$ .</li><li>删掉一个子序列，包含 $x$ 个 $0$ ，$y$ 个 $1$ ，然后往末尾加个 $1$ 。其中 $x\in A$ 。</li><li>删掉一个子序列，只包含 $x$ 个 $0$ ，然后往末尾加个 $1$ 。其中 $x\in B$ 。</li></ol><p>$A$ 和 $B$ 还有操作总数 $n$ 是给你的，让你求 $n$ 次操作完成后序列长度为 $1$ 的方案数。</p><p>一开始还以为只用管 $01$ 分别的个数，后来才发现选的子序列位置不同也算不同的方案…</p><p>数据范围：<del>いいよ,こいよ</del> $114514$</p><p>不太会做，好像是转化成一个树上的 dp，然后再算一波式子，分治FFT/牛顿迭代？</p><p>不得不说样例十分lx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 10 10</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">362880</span><br></pre></td></tr></table></figure><p>愉快地拿到了 $|A|=|B|=n$ 这档部分分。</p><h2 id="T3-一道-Top-cactus-好题"><a href="#T3-一道-Top-cactus-好题" class="headerlink" title="T3 一道 Top cactus 好题"></a>T3 一道 Top cactus 好题</h2><p>仙人掌上 $q$ 次询问求经过某个点的路径贡献之和。模 $998244353$。“不在简单环上的边数”为 $x$ 的路径贡献为 $v_x$ 。</p><p>部分分第一档，树，$n\le2000$ 。</p><p>woc我只会 $O(n^3)$ ..</p><p>冷静了一下，发现可以枚举路径树上差分..</p><p>愉快地拿到了这 $10$ 分。</p><p>正解好像是淀粉质+NTT。然后搬到圆方树上去。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>队爷出的题就是神仙..<del>之前一直感觉多项式看起来没啥用？请julao们看到这句话别打我..</del>感觉很有必要早点去学多项式全家桶了。</p><p>另外题名里的算法真的 $99\%$ 不可信。</p><p>另外由于打比赛换了个机房，貌似机房里都是一些外省的？</p><blockquote><p><strong><del>OIer居然是可以有npy的！</del></strong></p></blockquote><h1 id="Day-16"><a href="#Day-16" class="headerlink" title="Day 16"></a>Day 16</h1><p>yww咕咕了，myh出的题。<del>这场题面太赞了！</del>据说题意不清被吐槽的很厉害，但我貌似还是第一次碰见<del>YNOI型</del>题面，背景是自己看过的番，<del>题意瞬间理解</del>。</p><p>这场还有个有趣的地方，T1 和 T3 的 subtask 一开始放反了，而且 T3 的变量 T1 都有，于是我比赛开始 $2h$ 才发现..（当然我发现的时候已经改回来了）</p><h2 id="T1-青春野狼不做理性小魔女的梦"><a href="#T1-青春野狼不做理性小魔女的梦" class="headerlink" title="T1 青春野狼不做理性小魔女的梦"></a>T1 青春野狼不做理性小魔女的梦</h2><p><del>题意简述</del>，题目背景太棒了，所以我要题<strong>面</strong>简述。</p><p>在咖啡厅，双叶不说话，只是推给了你一张纸，上面写着一个不定方程： $A_1x_1+A_2x_2+\cdots+A_kx_k\equiv1\mod m$，然而其中的一些 $A_i$ 被咖啡打湿了，需要给被打湿的 $A_i$ 们赋值（$A_i\in[0,m)$），使得不定方程有整数解；同时，双叶也不记得 $m$ 是多少了，所以要求 $m\in[1,n]$ 的方案数之和。$1\le k\le50,1\le n \le10^9$。 </p><p>大约想到怎么做了，然而感觉无法实现（事实是正解要用杜教筛），会写的特别麻烦复杂度还不对，于是就只打了 $k\le5,\,n\le10$ 的暴力和没有数字被打湿的分。然而后面那档挂了，因为求区间内与某个数互质的数个数时没有容斥，最神奇的是拍半个多小时没拍出来…</p><h2 id="T2-青春野狼不做姐控偶像的梦"><a href="#T2-青春野狼不做姐控偶像的梦" class="headerlink" title="T2 青春野狼不做姐控偶像的梦"></a>T2 青春野狼不做姐控偶像的梦</h2><p>和花给麻衣的信很有规律，她写的信是一个 $1$ ~ $n$ 的排列，一段连续的信能给麻衣鼓励，当且仅当它的值也连续（noi.ac的whzzt邀请赛里把这玩意定义为“广义排列”，意思就是一个区间， $max-min=r-l$ 且没有重复的数），麻衣想知道如果只保留一段连续的信，她能收到多少鼓励（就是多组区间询问）。</p><p>其实..就是 <a href="https://www.luogu.org/problemnew/show/CF997E" target="_blank" rel="noopener">CF997E Good Subsegments</a>..</p><p>千古神犇wxh log碾标算！<del>lxctr myh n^2 送温暖！</del>嗯，我拿了 $O(n^2)$ 的 $20$ 分…</p><p>做法参考 <a href="https://codeforces.com/blog/entry/60357?#comment-441928" target="_blank" rel="noopener">zzq的评论</a></p><h2 id="T3-青春野狼不做小恶魔学妹的梦"><a href="#T3-青春野狼不做小恶魔学妹的梦" class="headerlink" title="T3 青春野狼不做小恶魔学妹的梦"></a>T3 青春野狼不做小恶魔学妹的梦</h2><p>这道题题面写的最好！（<del>貌似也被吐槽的最惨</del>）</p><blockquote><p>对学长的思念，深埋于心底。</p><p>难以表达。</p><p>与学长的记忆分为 $n$ 个部分，两个不同的部分间可能会有一种关系，也可能没有。</p><p>可是我知道，它们藕断丝连，注定联通。</p><p>想忘掉，可是却越来越难忘，$m$ 种关系会带给我 $m^k$ 的思念。</p><p>我不知道我有多思念学长，能告诉我如果关系随意出现，思念的和吗？</p><p>我不想看到太大的数，只要告诉我它模 $998244353$ 的结果就好了。</p></blockquote><p>题意简述：$n$ 个点组成无向图，求不同的方案边数的 $k$ 次方之和。</p><p>斯特林展开+大力推式子+NTT.</p><p>再见。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>myh 问班上的女生：你怎么3.5k写完仙人掌剖分的。</p><p>嗯，女生就是<a href="#%E6%80%BB%E7%BB%93">昨天的总结</a>里的女生。<del>yqyry</del></p><h1 id="Day-17"><a href="#Day-17" class="headerlink" title="Day 17"></a>Day 17</h1><p>今天没有比赛。</p><p>Day 16 ~ Day 17 的这晚貌似是来广二之后睡的最长的一次（$6$ 小时 $40$ 分），然后效率果然略高了一些（<del>一天只搞了FFT/NTT/多项式求逆，高个鬼</del>），比起之前整天几乎啥都不干还是好多了..（<del>有种如果睡8小时能一天搞完多项式全家桶的错觉</del>）</p><p>希望这周能把多项式常见的一些东西搞完吧..到时候应该会写一篇博客。</p><h1 id="Day-18"><a href="#Day-18" class="headerlink" title="Day 18"></a>Day 18</h1><p>颓颓颓。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>题意大约是求 $l_i\le ki+b\le r_i$ 的 $k,b$ 方案数。</p><p>最低档暴力在考试结束前 $10min$ 才想出来一个特别麻烦的解法..然后爆零了。</p><p>正解半平面交。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>线性同余找循环节海星。</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>给几个团，团内点连相同权值边，问点之间两两距离之和。</p><p>以团内边权为点权求出团之间的最短路，然后 $dist(i,j)=\min\{d(x,y)|x\in S_i,y\in S_j\}$（$S_i$ 表示 $i$ 所在团的集合）。</p><p>具体实现要用到 FMT 里的一个小 trick ，然而题解里一笔带过，我看了一下午题解都没看明白…</p><h2 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h2><p>那位女生 $rank1$ 了…</p><p>然后今天才发现<a href="http://xsy.gdgzez.com.cn/JudgeOnline/" target="_blank" rel="noopener">广二 OJ 外网是能上的</a>..（当然注册不了账号QAQ）</p><h1 id="Day-19"><a href="#Day-19" class="headerlink" title="Day 19"></a>Day 19</h1><p>今天搬的 ACM 原题？CF 权限 gym Orz</p><p>题解给<a href="https://www.bilibili.com/video/av38542305?t=6000" target="_blank" rel="noopener">吉老师视频</a>，太灵性了..</p><p>zjt 25（$rank 8$），myh 赛后五分钟提交 $15$ 快乐赛。</p><h2 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h2><p>dp，好像没啥不会的知识点，然而没做出来。</p><h2 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a>T2</h2><p>把排列当成坐标放在平面上，分类讨论求上升块？表示完全没听懂，讲的时候 myh 在不停地提问。</p><p>黑科技听不懂，而这道题除了黑科技还要牛顿迭代…每场必有多项式的flag还是没倒.</p><h2 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a>T3</h2><p>没听懂嘤嘤嘤。</p><h1 id="Day-20"><a href="#Day-20" class="headerlink" title="Day 20"></a>Day 20</h1><p>颓颓颓。</p><p>今天没比赛，然而只搞了多项式除法和任意模数NTT。</p><p>多项式除法一开始 $B(x)$ 模了 $x^m$ ，然而应该模 $x^{n-m+1}$ ，然后挂了半天。</p><p>任意模数NTT因为数组开小挂了半天…</p><p>看到洛咕有绘板，就把晚上的at咕咕了，搞了个py脚本。一开始妄想手动把图片转成数据，<del>差点一晚没睡</del>，后来main包发了个脚本，转的效果还挺不错的。</p><h1 id="Day-21-23"><a href="#Day-21-23" class="headerlink" title="Day 21-23"></a>Day 21-23</h1><p>基本上都在搞绘板，比赛记应该是永久咕咕了，绘板记这几天会写出来。</p><p>有一个小插曲，9102年第一个梗<a href="https://www.zhihu.com/question/307596943/answer/563771875" target="_blank" rel="noopener">被我骗了点赞</a>。</p><h1 id="Day-gugugu"><a href="#Day-gugugu" class="headerlink" title="Day gugugu"></a>Day gugugu</h1><p>绘板记咕咕了，这两天的比赛记咕咕了，今晚的CF不咕咕！<del>猝死！！</del></p><h1 id="Day-27"><a href="#Day-27" class="headerlink" title="Day 27"></a>Day 27</h1><p>今天的T1非常有意思，$8$ 个 int 进行编码，编码长度至少是 $1000$ 个 int，随机打乱之后给你解码。标算是一个不确定性算法，所以这题是达到一定正确率就过，（然后我赛时第一次提交30，第二次提交20，<del>脸黑选手</del>zjt赛时90，赛后AC），然而有神仙想出了多点求值、快速插值的确定算法。</p><p>T2一看是几何题我就跳了..然而这题不怎么需要计算几何，而且有 $30$ 分挺好写的…..</p><p>T3是个树上dp，部分分有个“与一条蛇同构”，然后：</p><img src="/2018-2019冬-广二避寒记/nineheadsnake.jpg"><p>xswl</p><p>尝试着按myh的提交记录刷题，第一题是个字符串哈希，第一眼还以为是AC自动机..然后一发mapT飞，unordered就过了。第二题是个裸的单点、子树加，单点询问，竟然写错了3遍…..第三题是个数位dp，愉快地卡住了….再不好好学数位dp感觉会出事_(:з」∠)_</p><h1 id="Day-28"><a href="#Day-28" class="headerlink" title="Day 28"></a>Day 28</h1><p>T1是树上在线多组多路径询问颜色种类数和mex，一开始看到部分分还在想为什么没给树上莫队分，然后一想多条路径莫队复杂度肯定不对，看题解才知道正解树分块…bitset能在线搞定的事，为什么要离线排序呢？然后成功在赛后A掉了（广二膜你赛赛后首A_(:з」∠)_）大约就是预处理关键点之间的bitset，块内暴力跳，关键点之间已经预处理了。</p><p>T2是道神仙题..好像从某外国比赛搬的，赛时0A，通过分治时判断左右一样来保证复杂度，没太听懂。</p><p>T3：“点分治然后建虚树再点分治<strong>就好了！</strong>”（mdzz）“听说fzy有两个log做法？treap/Splay合并就行了！”（mdzz）</p><p>然后<a href="https://codeforces.com/blog/entry/64343" target="_blank" rel="noopener">用bitset<0>水了点contribution</0></a>，达成成就：contribution比friends多。</p><p>polygon真有意思！试着把一道题搞上去了。</p><h1 id="Day-29-30"><a href="#Day-29-30" class="headerlink" title="Day 29-30"></a>Day 29-30</h1><p>稍微学了下莫比乌斯反演和杜教筛，感觉挺有意思的QAQ。</p><p>比赛全场就我不会马拉车，然而三题暴力排名还不错…貌似只要打了点非无脑的暴力就能考的还行。（<del>A题就jxd了</del></p><h1 id="Day-31"><a href="#Day-31" class="headerlink" title="Day 31"></a>Day 31</h1><p>今天比赛是zzq出的，上场 <strong><font color="black">C</font><font color="red">hinese</font> <font color="green">round</font> </strong> 既视感严重..</p><h2 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h2><p>树上有一些特殊点。</p><p>两两匹配特殊点使得距离之和最大。正解没听懂，然而直接扫一遍存为 $rk_{1..k}$ 然后输出 $(rk_i,rk_{i+\frac k 2})$ 就能过…</p><h2 id="T2-2"><a href="#T2-2" class="headerlink" title="T2"></a>T2</h2><p>“这是一道交互题”。</p><p>加了一些限制条件，不同排名的人在某些情况下可能不回答询问，对其排序。</p><p>并不是很难然而赛时没想到..</p><h2 id="T3-2"><a href="#T3-2" class="headerlink" title="T3"></a>T3</h2><p>QuickSort伪代码。</p><p>求 $cnt$ 次操作后排序成啥样了。又是只需要大小时转化为 $0/1$,$0/\pm1$ 的 trick.</p><p>然后，今天写了 $5$ 道莫比乌斯反演，<strong><font color="purple">100</font>+<font color="green">600</font></strong>，感觉海星。</p><h1 id="Day-32"><a href="#Day-32" class="headerlink" title="Day 32"></a>Day 32</h1><p><del>改题日→出题日</del></p><h1 id="Day-33"><a href="#Day-33" class="headerlink" title="Day 33"></a>Day 33</h1><p>比赛的时候OJ挂了海星，最后修好了。</p><img src="/2018-2019冬-广二避寒记/submitafterbomb.jpg"><p>感受一下刚修好时的提交。这次题目时限又大，当时卡了好几页。</p><p>T1一开始时限是 $2s$，后来开成 $4s$ 了，然后一排人 $3.9s$…</p><p>T3一开始时限是 $6s$，myh NTT被卡常，赛后给自己开到 $12s$ 重测，$9s$ 过了…然后他成功 $rank1$。</p><h1 id="Day-34"><a href="#Day-34" class="headerlink" title="Day 34"></a>Day 34</h1><img src="/2018-2019冬-广二避寒记/drawing1.jpg"><img src="/2018-2019冬-广二避寒记/drawing2.jpg"><img src="/2018-2019冬-广二避寒记/drawing3.jpg"><p>这个是我们刚来时就在画的，最近画好了，趁着<del>迟到</del>没人拍了一下。</p><p>上午被告知学校有考试，机房被占用了，让我们下午不要去机房，在打比赛的体育馆待着。于是很多人都提前跑了..我也下午就走了，走的时候看到一堆小学生模样的孩子和家长，听到了“XX考试的第二场和XX时间一样，不让考完第一场就跑”之类的话，听到了“二火”之类曾经熟悉的名词。我是为什么放弃了华一寄来到外初的呢..早就忘得一干二净了，只记得来外高是因为wqs的寥寥几句话：</p><img src="/2018-2019冬-广二避寒记/wqs.jpg"><p>还听到一个孩子说：“二中环境真好。”我以为他也会感叹二中有山有水，没想到他说的是——“二中有专门的清洁工”。</p><h1 id="Day-35"><a href="#Day-35" class="headerlink" title="Day 35"></a>Day 35</h1><p><del>改题日颓颓颓</del></p><h1 id="Day-36"><a href="#Day-36" class="headerlink" title="Day 36"></a>Day 36</h1><p>OrangeRabbit tql!!!</p><img src="/2018-2019冬-广二避寒记/OrangeRabbit.jpg"><p>去机房的路上发现这个：</p><img src="/2018-2019冬-广二避寒记/nico.jpg"><img src="/2018-2019冬-广二避寒记/maki.jpg"><p>我们刚来的时候就看到有人在画井盖了，然而才发现这个QAQ</p><p>T2对自己 $20$ 分暴力过于自信，打了一个半小时表找不到规律后写了下 $20$ 分才发现是错的…</p><p>T1写了一个半小时比暴力跑的还慢的树剖..稍微想想就可以发现复杂度完全不比暴力优的，然而想到就打了..</p><p>最后没时间写T3暴力了，赛后听说T3数据特别水，随便写都能六七十分..</p><p>于是炸的特别惨。</p><p>晚上学了下淀粉质（讲题的时候myh认为机房里没人不会动态点分树…），看题解怎么都看不懂，只不过自己yy很快就写出来了，然而第一次交的时候前向星存边数组没开两倍..？</p><h1 id="Day-37"><a href="#Day-37" class="headerlink" title="Day 37"></a>Day 37</h1><p>今天又是zzq出的题，T1T2都是构造，其中T1没有输入..T1 rand跑了一个小时跑出来 $60$ 分（存种子提交），T2最低档爆搜不会..两个特殊性质subtask写了 $30$ 分。</p><p>T3 也是道思维好题，写了个 $O(n^3)$ 暴力 $30$ 分。</p><h1 id="Day-38"><a href="#Day-38" class="headerlink" title="Day 38"></a>Day 38</h1><p>好像是最后一个改题日..又颓过去了没什么好说的。</p><h1 id="Day-39"><a href="#Day-39" class="headerlink" title="Day 39"></a>Day 39</h1><p>Sooke跟我说他昨天做了这套题…然后告诉我不要看T3，会很惨。然而..</p><p>这次好像是我拿到 $80$ 分最快的一次，打完T1T2拍了一下就开始玩提答了。看了一会儿大约看懂了一点，然后试着百度了一下“lambda”，啥都没查到，然后继续搜“lambda 邱奇”，发现“邱奇数 百度百科”，然后继续搜“邱奇数”，搜到了<a href="https://blog.csdn.net/simonxk/article/details/12679069" target="_blank" rel="noopener">这个</a>。于是开始研究..前面 $6$ 个点有的是自己想的，有的是看懂之后写的，<del>78是直接抄的</del>。最后混到个15名..lx特别ba…只不过今天又来了几个人，感觉不抄的话二三十名好像也有，也海星啦…</p><h1 id="Day-40"><a href="#Day-40" class="headerlink" title="Day 40"></a>Day 40</h1><p>最后一天了呢..已经在布置THUWC了。</p><img src="/2018-2019冬-广二避寒记/THUWC.jpg"><p>今天的题暴力档特别少..又是1h拿到了 $48$ 然后肝不出了…T3有很多人A，和之前D16T2有点像，是给一个排列问划分成若干个连续段的方案数，做法也比较类似，然而没想起来，也不会做…</p><p>这 $40$ 天好多想补的知识点也没补完..题也没怎么改..总体来说挺颓的…最后两天再稍微补一补，调整一下状态吧，考出应有的成绩就好。这篇博客大概就这样完结了，下次就是<a href="https://ouuan.github.io/2019THUWC-WC%E5%86%AC%E7%9C%A0%E8%AE%B0/">THUWC/WC游记</a>了。</p><h1 id="Day-41"><a href="#Day-41" class="headerlink" title="Day 41"></a>Day 41</h1><p>本来应该结束了的..今天没去学校，10点的时候dew突然告诉我今天有场比赛？？一看是THUSCH2017原题，然后T1 dl线段树写了2h没调出来…只不过好像并不是膜你赛，广二OJ很早就有这几题了，今天的standing也只有6个人…</p><p>然后..窝竟然真的在WC前把kanon补完了..</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 迎风迈出的步伐更艰难，即使走的不远，但踩得更深。一代人只能做一代人的事，完成这个时代赋予的使命就是英雄，大地也会将他的脚印铭记。&lt;/p&gt;
&lt;p&gt; ——&lt;a href=&quot;https://www.bilibili.com/video/av20205319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;乒乓帝国&lt;/a&gt;（句子迷上说是《孤杂记》..）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;突然就得知了要去广二集训。&lt;/p&gt;
&lt;p&gt;然后知道了这次出去可能要一直到 WC，差不多有 $50$ 天。这样一算这个学期我在武汉的时间可能和外出的时间一样多了。&lt;/p&gt;
&lt;p&gt;毕竟是去广州，会暖和很多，也许看不到武汉的雪了。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="集训" scheme="https://ouuan.github.io/tags/%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Beginner Contest 115 游记</title>
    <link href="https://ouuan.github.io/AtCoder-Beginner-Contest-115/"/>
    <id>https://ouuan.github.io/AtCoder-Beginner-Contest-115/</id>
    <published>2018-12-08T13:50:43.000Z</published>
    <updated>2019-02-14T05:52:55.775Z</updated>
    
    <content type="html"><![CDATA[<p>之前听教练安利，就来打了场 <a href="http://atcoder.jp/" target="_blank" rel="noopener">AtCoder</a>。</p><h2 id="5h"><a href="#5h" class="headerlink" title="-5h"></a>-5h</h2><p><a href="https://abc115.contest.atcoder.jp/" target="_blank" rel="noopener">比赛地址</a></p><p>一开始看到 “Beginner”的时候我还迟疑了一下，看了下上一场 Beginner 的题目，又在网上搜了一下，想着可以熟悉一下 AtCoder ，就准备打了。</p><a id="more"></a><h2 id="0min"><a href="#0min" class="headerlink" title="0min"></a>0min</h2><p>咕咕咕</p><h2 id="5min"><a href="#5min" class="headerlink" title="5min"></a>5min</h2><p>咕咕咕咕咕咕</p><p>只不过幸好咕咕了，我的模板还没搞好..赶紧新建文件夹 <code>atcoder\AtCoder Beginner Contest 115</code>  ，把 $4$ 个用于 CF 的模板扔进去。</p><h2 id="10min"><a href="#10min" class="headerlink" title="10min"></a>10min</h2><p>开始了！</p><p>用了 $0.1s$ 决定用 <code>switch</code> 而不是 <code>if else</code> 。</p><p>用了不知道多久敲完。</p><p>没测样例（<del>废话</del>）直接交了。</p><p>其实我现在还在想，如果 WJ 的时候我去写 T2 而不是刷新看结果会不会涨个一两名…</p><h2 id="12min"><a href="#12min" class="headerlink" title="12min"></a>12min</h2><p>看了下 $10\times10000&lt;10^9$ 。</p><p>用了不知道多久敲完。</p><p>测了样例交了。</p><p><del>其实我现在还在想，如果没测样例我会不会再涨个一两名…</del></p><h2 id="14min"><a href="#14min" class="headerlink" title="14min"></a>14min</h2><p>想了想还是用了快读，毕竟模板里有。</p><p>测样例，<del>没写<code>cout&lt;&lt;ans;</code></del> 。</p><p><del>其实我现在还在想</del>，其实我现在还在想，如果没测样例我会不会掉个十几名。</p><h2 id="16min"><a href="#16min" class="headerlink" title="16min"></a>16min</h2><p>数据范围看起来好小。</p><p>等等，$x$ 的范围？</p><p>预处理汉堡的大小。</p><p>哦，爆 int 了。</p><p><del>其实我现在还在想，如果模板里有<code>#define int long long</code>我会不会再涨个一两名…</del></p><p>写个函数 <code>work(int a)</code> 处理大小为 $a$ 的汉堡，分类讨论乱搞一下应该就行了。</p><p>测样例，<code>#3</code> 看起来好大。</p><p>终于可以安心地看 judging 不用担心浪费时间了。</p><h2 id="130min"><a href="#130min" class="headerlink" title="130min"></a>130min</h2><p>Beginner 定级貌似最高 400 点 rating..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前听教练安利，就来打了场 &lt;a href=&quot;http://atcoder.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AtCoder&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;5h&quot;&gt;&lt;a href=&quot;#5h&quot; class=&quot;headerlink&quot; title=&quot;-5h&quot;&gt;&lt;/a&gt;-5h&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://abc115.contest.atcoder.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一开始看到 “Beginner”的时候我还迟疑了一下，看了下上一场 Beginner 的题目，又在网上搜了一下，想着可以熟悉一下 AtCoder ，就准备打了。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://ouuan.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="AtCoder" scheme="https://ouuan.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>WC2019 全国模拟赛第二场 T1 题解</title>
    <link href="https://ouuan.github.io/WC2019-%E5%85%A8%E5%9B%BD%E6%A8%A1%E6%8B%9F%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BA-T1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/WC2019-全国模拟赛第二场-T1-题解/</id>
    <published>2018-12-08T04:04:29.000Z</published>
    <updated>2019-02-14T05:53:13.144Z</updated>
    
    <content type="html"><![CDATA[<p>又只会写T1…</p><p><a href="http://noi.ac/contest/54/problem/11" target="_blank" rel="noopener">题目链接</a></p><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>给你一个排列 $p_{1..n}$，$a_{1..n}$ 为任意的一个排列，定义 $b[a_i]=a[p_i]$，求总共有多少个不同的 $b_{1..n}$ 。</p><a id="more"></a><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>首先，对 $(i,p_i)$ 连边，会得到若干个环。</p><p>环上旋转一下（$\forall i\text{ on the cycle : }i\rightarrow p_i$）得到的置换是本质相同的。节点个数相同的环互换一下是本质相同的。</p><p>先计算把 $n​$ 个节点分成若干个环的方案数：（用 $siz[i]​$ 表示第 $i​$ 个环的大小，$k​$ 表示环的个数，$sum[i]​$ 表示 $\sum\limits_{j=i}^ksiz[j]​$）</p><p>$$S_1=\prod\limits_{i=1}^kC_{sum[i]}^{siz[i]}$$</p><p>然后去掉节点个数相同的环互相交换：（用 $num[i]$ 表示节点个数为 $i$ 的环的个数）</p><p>$$S_2=\frac{S_1}{\prod\limits_{i=1}^nnum[i]!}$$</p><p>然后乘上每个环旋转（旋转造成的不同方案数即固定某个数后剩下的数的排列个数）：</p><p>$$S_3=S_2\times\prod\limits_{i=1}^k(siz[i]-1)!$$</p><p>$S_3$ 就是最终的答案了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>noi.ac 上最短解（其实计算方式和我是一样的..）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mn 1111111</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,i=<span class="number">1</span>,s=<span class="number">1</span>,j,x,p=<span class="number">998244353</span>,a[mn],f[mn],v[mn],t[mn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n); f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>; <span class="keyword">for</span> (;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;i++) f[i]=f[p%i]*(p-p/i)%p,(s*=i)%=p;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> (!v[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i,x=<span class="number">0</span>;!v[j];x++,j=a[j]) v[j]=<span class="number">1</span>;</span><br><span class="line">(s*=f[x]*f[++t[x]]%p)%=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己赛时的辣鸡写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line"><span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">&#123;</span><br><span class="line">out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,p[N],dfn[N],low[N],sta[N],dfncnt,top,siz[N],tot,num[N];</span><br><span class="line"><span class="keyword">int</span> x,y,jc[N],inv[N],ans=<span class="number">1</span>,sum;</span><br><span class="line"><span class="keyword">bool</span> ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">n=sum=read();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dfn[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">inv[i]=(<span class="number">1l</span>l*M*M<span class="number">-1l</span>l*(M/i)*inv[M%i])%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">jc[i]=(<span class="number">1l</span>l*jc[i<span class="number">-1</span>]*i)%M;</span><br><span class="line">inv[i]=(<span class="number">1l</span>l*inv[i<span class="number">-1</span>]*inv[i])%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*c(sum,siz[i])%M;</span><br><span class="line">sum-=siz[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*inv[num[i]]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1l</span>l*ans*jc[siz[i]<span class="number">-1</span>]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a==b||b==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1l</span>l*(<span class="number">1l</span>l*jc[a]*inv[b]%M)*inv[a-b]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++dfncnt;</span><br><span class="line">sta[++top]=u;</span><br><span class="line">ins[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (dfn[p[u]]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(p[u]);</span><br><span class="line">low[u]=min(low[u],low[p[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ins[p[u]])</span><br><span class="line">&#123;</span><br><span class="line">low[u]=min(low[u],dfn[p[u]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low[u]==dfn[u])</span><br><span class="line">&#123;</span><br><span class="line">siz[++tot]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (sta[top]!=u)</span><br><span class="line">&#123;</span><br><span class="line">++siz[tot];</span><br><span class="line">ins[sta[top--]]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">ins[sta[top--]]=<span class="literal">false</span>;</span><br><span class="line">++num[siz[tot]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说不要看到环就 tarjan…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又只会写T1…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://noi.ac/contest/54/problem/11&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意简述&quot;&gt;&lt;a href=&quot;#题意简述&quot; class=&quot;headerlink&quot; title=&quot;题意简述&quot;&gt;&lt;/a&gt;题意简述&lt;/h2&gt;&lt;p&gt;给你一个排列 $p_{1..n}$，$a_{1..n}$ 为任意的一个排列，定义 $b[a_i]=a[p_i]$，求总共有多少个不同的 $b_{1..n}$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="组合数学" scheme="https://ouuan.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="noi.ac" scheme="https://ouuan.github.io/tags/noi-ac/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建指北</title>
    <link href="https://ouuan.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/"/>
    <id>https://ouuan.github.io/hexo博客搭建指北/</id>
    <published>2018-12-06T08:00:37.000Z</published>
    <updated>2019-02-20T05:08:09.383Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了 $3$ 天终于把博客搭建好了…本文会简单介绍一下hexo博客的搭建，并选取一些我自己在配置博客的过程中遇到的问题，说明一下我的解决方案。</p><p>实际上，hexo博客的搭建并不难，难搞的是美化，我在这个过程中遇到了很多问题，不可能在这篇博客中全部陈述出来，最重要的还是勤于百度。</p><a id="more"></a><blockquote><p>本篇博客不完全按照顺序撰写，可以通过页面左边的目录跳转阅读。</p></blockquote><h1 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h1><p>先推荐两篇比较好的教程：<a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a>，<a href="https://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="noopener">使用github+Hexo人人都能拥有一个美美的博客</a>。</p><p>这部分网上讲的已经比较好了，我在这就简单说一下。</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>需要安装的软件有：<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>。</p><p>下载安装即可…</p><h2 id="本地设置"><a href="#本地设置" class="headerlink" title="本地设置"></a>本地设置</h2><p>装好之后，在本地创建一个文件夹，下文中称其为“根目录”。</p><blockquote><p>下文中“输入命令”均指在命令行中输入命令（并回车<del>废话</del>），既可以使用 git bash，也可以使用 cmd 或 powershell 。输入命令时若无特别说明都需要 cd 到根目录下。</p></blockquote><p>输入命令 <code>npm install -g hexo</code> 来安装 hexo 。</p><p>输入命令 <code>hexo init</code> 来初始化 hexo 。</p><p>输入命令 <code>npm install</code> 来安装一些需要的包。</p><p>输入命令 <code>hexo s</code>，并在浏览器打开 <code>localhost:4000</code>，在本地预览博客；如果上文步骤进行正确，应该看到一个类似于这样的页面：</p><img src="/hexo博客搭建指北/newblog.jpg"><blockquote><p>注：命令可以缩写，条件是没有开头几个字母相同的其它命令。<code>hexo s</code> 实际上是 <code>hexo server</code> 的缩写；下文中 <code>hexo d</code> 是 <code>hexo deploy</code> 的缩写，<code>hexo g</code> 是 <code>hexo generate</code> 的缩写；<code>hexo clean</code> 不能缩写为 <code>hexo c</code>，因为存在命令 <code>hexo config</code> ，但是可以缩写为 <code>hexo cl</code> 。</p></blockquote><p>按 Ctrl+C 关闭 server 以继续操作。（若出现类似于 <code>终止批处理操作吗(Y/N)?</code> 的提示，输入 <code>y</code> 即可。）</p><p>接着安装博客的主题，可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo 官网</a> 选择主题下载，本篇教程推荐使用 NexT 主题。</p><p>在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo 官网</a> 点击<strong>图片下方蓝色的文字</strong>即可打开主题的 GitHub 主页，一般来说，一个主题的 GitHub 主页上是有用于安装的命令以及配置博客的教程的。</p><p>如果没有的话（或者即使有也一样），你应该输入命令 <code>git clone 主题的Github主页地址 themes/主题名</code> 。例如：<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code> 。</p><p>当然，你也可以使用默认的 landscape 主题，从而不用额外下载主题。</p><p>下载好主题后，用任何一款文本编辑器（记事本也可以），打开根目录下的 <code>_config.yml</code> ，将 <code>theme: landscape</code> 修改为 <code>theme: 你想用的主题名</code> 即可。</p><h2 id="配置-GitHub-仓库"><a href="#配置-GitHub-仓库" class="headerlink" title="配置 GitHub 仓库"></a>配置 GitHub 仓库</h2><p>首先你需要有一个 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 账号。</p><p>然后点击右上角你的头像，打开“Your repositories”，点击绿色的按钮“New”。</p><p>在”Repository name”一栏填入 <code>yourname.github.io</code> （“yourname”指你的 GitHub ID，比如我就填 <code>ouuan.github.io</code>），”Description”可以随便填也可以不填，然后点绿色的按钮“Create repository”。</p><h2 id="将博客上传至-GitHub"><a href="#将博客上传至-GitHub" class="headerlink" title="将博客上传至 GitHub"></a>将博客上传至 GitHub</h2><p>输入命令 <code>ssh-keygen</code> 来生成 SSH，让你输入东西你就空着，按回车（应该要按三次回车）。</p><p>然后用任意的文本编辑器打开 <code>C:\Users\电脑用户名\.ssh\id_rsa.pub</code>（如果装了 vim 可以直接输入命令 <code>vim ~/.ssh/id_rsa.pub</code>），复制里面的内容。</p><p>打开 GitHub，点击右上角的头像，打开“Settings”，选择左边的“SSH and GPG keys”，点绿色的按钮“New SSH key”，Title 随便填，下面的 Key 把刚才复制的东西粘贴进去，然后点绿色的按钮“Add SSH key”。过程中可能需要输入密码。</p><p>输入命令 <code>ssh -T git@github.com</code> ，若出现 <code>Hi yourname! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 表示 SSH 配置成功。</p><p>输入命令 <code>npm install hexo-deployer-git --save</code> 安装 deployer 。</p><p>打开根目录下的 <code>_config.yml</code> ，将最后几行改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>当然”yourname”要改成你的 GitHub ID 。</p><p>依次输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这一步可能要输入密码。</p><p>等几分钟，再用浏览器打开 <code>yourname.github.io</code> ，应该就可以看到你的博客了。（此时别人也可以通过这个网址看到你的博客）</p><h1 id="域名的配置"><a href="#域名的配置" class="headerlink" title="域名的配置"></a>域名的配置</h1><p>实际上，自定义域名基本上没有什么用。但是有一个自己的域名还是一件比较爽的事，会感觉摆脱了束缚（实际上你还是用着 GitHub…）。</p><h2 id="域名的获取"><a href="#域名的获取" class="headerlink" title="域名的获取"></a>域名的获取</h2><p>本篇教程只讲解如何免费获取域名（的 $12$ 个月使用权），当然你也可以通过其它方式购买域名。</p><p>打开 <a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">Freenom</a>，输入自己想用的域名，点击”Check Availability”，有“Get it now”的就是能用的。</p><p>选择好你要的域名后，点右上角的”Checkout”，Period 选择”12 Months @ FREE”，然后点”Continue”，输入邮箱登录或使用其它账号（如 Google 账号）登录（输入邮箱登录经常会出错，而使用其它账号登录需要<a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">科学上网</a>）。</p><h2 id="DNS-配置"><a href="#DNS-配置" class="headerlink" title="DNS 配置"></a>DNS 配置</h2><p>我使用的是 <a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudfare</a>，（<del>因为在学校搭建的博客，手机没电了，国内的服务商注册都需要短信验证码</del>），还是比较方便的。</p><p>先注册一个账号，然后点”Add site”，输入你刚刚获取的域名。</p><p>然后进入站点设置里的 DNS 设置，如图添加两条记录：</p><img src="/hexo博客搭建指北/www.jpg"><img src="/hexo博客搭建指北/at.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.153</span><br></pre></td></tr></table></figure><p>当然要记得把“yourname”换成你的 GitHub ID。推荐关闭 cdn 服务，即点击一下橙色的云使其变成灰色。</p><p>完成后应该是这样的：</p><img src="/hexo博客搭建指北/dns.jpg"><h2 id="连接域名和-DNS"><a href="#连接域名和-DNS" class="headerlink" title="连接域名和 DNS"></a>连接域名和 DNS</h2><p>回到 <a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">Freenom</a>，登录网站，点击右上角的“Services” $\rightarrow$ “My Domains”，找到你刚刚获取的域名，点击 “Manage Domain” $\rightarrow$ “Management Tools” $\rightarrow$ “Nameservers”。</p><p>再回到 <a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudfare</a>，就在刚刚 DNS 设置的下面，有两个域名：</p><img src="/hexo博客搭建指北/nameservers.jpg"><p>再回到 <a href="https://my.freenom.com/domains.php" target="_blank" rel="noopener">Freenom</a>，把这两个域名复制进去，然后点”Change Nameservers”。</p><img src="/hexo博客搭建指北/nameservers2.jpg"><h2 id="连接域名和-GitHub"><a href="#连接域名和-GitHub" class="headerlink" title="连接域名和 GitHub"></a>连接域名和 GitHub</h2><p>在 hexo 根目录的 <code>source</code> 子目录下新建文件 <code>CNAME</code>（没有后缀名），用文本编辑器打开，输入如下内容：</p><img src="/hexo博客搭建指北/cname.jpg"><p>当然要替换成你获取的域名。</p><p>然后再输入命令 <code>hexo d</code> ，过几分钟应该就可以从你获取的域名访问你的博客了。</p><h2 id="开启https"><a href="#开启https" class="headerlink" title="开启https"></a>开启https</h2><p>如果不开启的话，访问 <code>https://你的域名</code> 就会显示警告，访问 <code>http://你的域名</code> 就会显示不安全。</p><p>当然如果因为某种原因访问 <code>https://你的域名</code> 已经不会显示警告而且浏览器左上角有绿锁了，就不需要再进行额外的设置了。</p><p>其实很简单，浏览器打开 <code>https://github.com/yourname/yourname.github.io/settings</code> ，找到这里：</p><img src="/hexo博客搭建指北/customdomain.jpg"><p>如果”Enforce HTTPS”前没有打勾，打勾即可。</p><p>如果”Enforce HTTPS”前面是灰色的，无法打勾：</p><ol><li>删掉”Save”前面的域名，点击”Save”。</li><li>重新输入域名，点击”Save”。</li><li>重新发布博客（<code>hexo d</code>）。</li><li>等待几分钟~几小时，再访问你的博客应该就OK了。</li></ol><h2 id="停用域名"><a href="#停用域名" class="headerlink" title="停用域名"></a>停用域名</h2><p>由于免费的域名还是经常会出一些小问题，而且不可避免地会碰上域名到期的问题，所以我在用了半个月自定义域名后停用了..</p><p>单纯停用只需删去 CNAME 文件即可，然后记得更改相关设置（在各种地方引用的博客链接、OAuth App 地址……）。</p><p>然而，在停用后，我自己的电脑上一直无法打开博客主页（会自动跳转到原自定义域名），别人的电脑/手机上可以正常打开。</p><p>解决方法：F12 $\rightarrow$ Network $\rightarrow$ Disable Cache</p><p>勾选后 Ctrl + F5 强制刷新博客主页，然后就可以进了，取消勾选 Disable Cache 后依然正常。</p><p><a href="https://www.huoduan.com/clear-301-cache.html" target="_blank" rel="noopener">方法来源</a></p><h1 id="博客的配置与美化"><a href="#博客的配置与美化" class="headerlink" title="博客的配置与美化"></a>博客的配置与美化</h1><h2 id="根目录下的-config-yml"><a href="#根目录下的-config-yml" class="headerlink" title="根目录下的 _config.yml"></a>根目录下的 <code>_config.yml</code></h2><p>这部分参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官网教程</a>即可。</p><h2 id="主题目录下的-config-yml"><a href="#主题目录下的-config-yml" class="headerlink" title="主题目录下的 _config.yml"></a>主题目录下的 <code>_config.yml</code></h2><p>主题目录下的 <code>_config.yml</code> 指 <code>\themes\主题名\_config.yml</code>。</p><p>这里以 NexT 主题（本文基于 NexT 6.6，其它版本可能有些区别）为例，这个主题的 <code>_config.yml</code> 非常完备，修改配置基本上只需删除/添加注释符号 <code>#</code> 以及改变 <code>true/false</code> 即可。</p><h3 id="选择-NexT-主题的四种之一"><a href="#选择-NexT-主题的四种之一" class="headerlink" title="选择 NexT 主题的四种之一"></a>选择 NexT 主题的四种之一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>将想用的主题前的 <code>#</code> 删掉，在 <code>scheme: Muse</code> 前加上 <code>#</code> 即可。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><p>四种主题的预览在 <code>NexT</code> 主题的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">官网</a>有。</p><h3 id="改变网站图标"><a href="#改变网站图标" class="headerlink" title="改变网站图标"></a>改变网站图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure><p>将你想用的图标放在 <code>\themes\next\source\images</code> 里，然后修改上面的文件名即可。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon16.png</span><br><span class="line">  medium: /images/favicon32.png</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/favicon2.jpg"><img src="/hexo博客搭建指北/favicon.jpg"><h3 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  #since: 2015</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons</span><br><span class="line">    # `heart` is recommended with animation in red (#ff0000).</span><br><span class="line">    name: battery-full</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#808080&quot;</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright: </span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  powered:</span><br><span class="line">    # Hexo link (Powered by Hexo).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">    version: true</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: true</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: true</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.</span><br><span class="line">  # http://www.miitbeian.gov.cn</span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br></pre></td></tr></table></figure><p><code>icon</code>： <code>© 2019</code> 与用户名之间的图标。（图中 $1$）</p><p>图标名称为 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 上的图标名称。</p><p><code>powered.enable</code>：为 <code>true</code> 则会显示“由 Hexo 强力驱动”。（图中 $2$）</p><p><code>powered.version</code>：为 <code>true</code> 则会显示 Hexo 的版本。（图中 $3$）</p><p><code>powered.enable</code>：为 <code>true</code> 则会显示“主题 – NexT.XX”。（图中 $4$）</p><p><code>powered.version</code>：为 <code>true</code> 则会显示主题的版本。（图中 $5$）</p><img src="/hexo博客搭建指北/foot.jpg"><p>注：根据 NexT 主题的 LICENSE，footer 中<strong>必须</strong>开启 <code>powered.enable</code> 选项。</p><h3 id="“关于”-amp-”标签”"><a href="#“关于”-amp-”标签”" class="headerlink" title="“关于”&amp;”标签”"></a>“关于”&amp;”标签”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>将需要的项目取消注释即可在侧边栏显示。</p><p>如果需要使用“关于”页面，输入命令 <code>hexo new page &quot;about&quot;</code>。</p><p>然后在 <code>\source\about\index.md</code> 中就可以编辑“关于”页面了。</p><p>可以修改 <code>\source\about\index.md</code> 中的 <code>title</code> 项来显示“关于”而非“about”。</p><p>如果需要使用“标签”功能，需要在博文中添加选项 <code>tags</code> ：</p><img src="/hexo博客搭建指北/tagsatblog.jpg"><p>如果有多个标签，每行一个，以 <code>-</code> 开头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br></pre></td></tr></table></figure><p>如果需要使用“标签”页面，输入命令 <code>hexo new page &quot;tags&quot;。</code></p><p>然后向 <code>source\tags\index.md</code> 中添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/tagsindex.jpg"><p>“分类”与“标签”类似。</p><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>输入命令 <code>npm install hexo-generator-searchdb --save</code> 安装所需的库。</p><p>在根目录下的 <code>_config.yml</code> 的结尾加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>然后在 <code>\themes\next\_config.yml</code> 中，打开 <code>local_search</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="社交网站"><a href="#社交网站" class="headerlink" title="社交网站"></a>社交网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Social Links.</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimeter is the target permalink.</span><br><span class="line"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/ouuan || github</span><br><span class="line">  洛谷: https://www.luogu.org/space/show?uid=49742 || code</span><br><span class="line">  Codeforces: https://www.codeforces.com/profile/ouuan || code</span><br><span class="line">  b站: https://space.bilibili.com/11067182 || tv</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><p>在 <code>social</code> 下每行一个，格式为：<code>名称: 地址 || 图标</code>。</p><p>其中，“图标”为 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 图标名称，但有些图标是不可用的，而且图标也不全，使用的时候要尝试一下图标是否可用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><p>这样设置可以只显示名称不显示图标。</p><h3 id="友情链接（或其它链接）"><a href="#友情链接（或其它链接）" class="headerlink" title="友情链接（或其它链接）"></a>友情链接（或其它链接）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: globe</span><br><span class="line">links_title: 友情链接</span><br><span class="line"># links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  Dew: https://www.cnblogs.com/ppprseter/</span><br><span class="line">  wjyyy: https://www.wjyyy.top/</span><br><span class="line">  Sooke: https://www.luogu.org/blog/Sooke/</span><br><span class="line">  huyufeifei: https://www.cnblogs.com/huyufeifei/</span><br><span class="line">  Rye_Catcher: https://rye-catcher.github.io/</span><br><span class="line">  额冻豆腐: http://www.mayflyyh.com/</span><br></pre></td></tr></table></figure><p><code>links_icon</code>：显示在标题前的图标。</p><p><code>links_title</code>：标题。</p><p><code>links_layout</code>：<code>block</code> 一行一个，<code>inline</code> 一行多个。</p><p><code>links</code>：要显示的链接以及名称。</p><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # in theme directory(source/images): /images/avatar.gif</span><br><span class="line">  # in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/avatar.jpg</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure><p><code>url</code>：头像地址，留空则不显示头像。</p><p><code>rounded</code>：圆/方头像。</p><p><code>opacity</code>：不透明度。</p><p><code>rotated</code>：随光标旋转。</p><h3 id="回到顶部按钮-阅读百分比"><a href="#回到顶部按钮-阅读百分比" class="headerlink" title="回到顶部按钮/阅读百分比"></a>回到顶部按钮/阅读百分比</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/b2t.jpg"><h3 id="博客首页不显示全文"><a href="#博客首页不显示全文" class="headerlink" title="博客首页不显示全文"></a>博客首页不显示全文</h3><p>在博文里可以用 <code>&lt;!-- more --&gt;</code> 来标识在首页显示到哪为止。</p><p>可以在 <code>\themes\next\_config.yml</code> 里设置到一定字数自动不显示全文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"># Read more button</span><br><span class="line"># If true, the read more button would be displayed in excerpt section</span><br><span class="line">read_more_btn: true</span><br></pre></td></tr></table></figure><p><code>length</code>：不显示全文的字数上限。</p><p><code>read_more_btn</code>：<img src="/hexo博客搭建指北/readmorebt.jpg"></p><h3 id="代码块复制按钮"><a href="#代码块复制按钮" class="headerlink" title="代码块复制按钮"></a>代码块复制按钮</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Manual define the border radius in codeblock</span><br><span class="line">  # Leave it empty for the default 1</span><br><span class="line">  border_radius:</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result</span><br><span class="line">    show_result: true</span><br></pre></td></tr></table></figure><p><code>enable</code>：启用复制按钮。</p><p><code>show_result</code>：<img src="/hexo博客搭建指北/copyresult.jpg"></p><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="$\LaTeX$"></a>$\LaTeX$</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Math Equations Render Support</span><br><span class="line">math:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Default(true) will load mathjax/katex script on demand</span><br><span class="line">  # That is it only render those page who has &apos;mathjax: true&apos; in Front Matter.</span><br><span class="line">  # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: false</span><br><span class="line"></span><br><span class="line">  engine: mathjax</span><br><span class="line">  #engine: katex</span><br></pre></td></tr></table></figure><p><code>enable</code>：启用 $\LaTeX$ 。</p><p><code>per_page</code>：为 <code>true</code> 则只有博文中有 <code>mathjax: true</code> 才会启用 $\LaTeX$，否则每篇博客都会启用 $\LaTeX$ 。</p><p><code>engine</code>：推荐使用 <code>mathjax</code> 。</p><p>hexo 博客的 mathjax 和 Markdown 有一些冲突，将在后文专门讲解如何解决冲突。</p><h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p>由于 gitment 的服务器有一些问题，推荐使用 gitalk：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: yourname</span><br><span class="line">  repo: yourname.github.io</span><br><span class="line">  client_id: </span><br><span class="line">  client_secret: </span><br><span class="line">  admin_user: yourname</span><br></pre></td></tr></table></figure><p>这里需要<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">在 GitHub 新建一个 OAuth App</a>，”Homepage URL”和”Authorization callback URL”填你的域名（如果没有申请域名的话就填 <code>yourname.github.io</code>）：</p><img src="/hexo博客搭建指北/newapp.jpg"><p>需要注意的是，<strong>地址要严格和博客访问地址一样</strong>，<code>http</code> 和 <code>https</code>不能混，有无 <code>www</code> 也不能混。</p><p>然后将 <code>Client ID</code> 和 <code>Client Secret</code> 填入 <code>\themes\next\_config.yml</code> 中。</p><p>评论功能无法在本地正常预览，需要发布才能使用。</p><h3 id="访客记录"><a href="#访客记录" class="headerlink" title="访客记录"></a>访客记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><img src="/hexo博客搭建指北/visitors.jpg"><img src="/hexo博客搭建指北/views.jpg"><h3 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h3><p>书签的功能是关闭页面/手动点击书签按钮时，保存这篇博客看到的位置，下次点进这篇博客时继续从这个位置开始。</p><p>安装插件：<code>git clone https://github.com/theme-next/theme-next-bookmark.git source/lib/bookmark</code></p><p>更改 <code>\themes\next\_config.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Bookmark Support</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-bookmark</span><br><span class="line">bookmark:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto</span><br><span class="line">  #   - save the reading position when closing the page</span><br><span class="line">  #   - or clicking the bookmark-icon</span><br><span class="line">  # if manual, only save it by clicking the bookmark-icon</span><br><span class="line">  save: manual</span><br></pre></td></tr></table></figure><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><h3 id="博客背景"><a href="#博客背景" class="headerlink" title="博客背景"></a>博客背景</h3><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code>，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image:url(/images/background.jpg);</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把背景图片重命名为 <code>background.jpg</code>，放入 <code>\themes\source\images</code>（当然也可以更改<code>background-image:url()</code>）。</p><p><code>background-size: cover;</code> 表示宽度缩放至页面大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image:url(/images/background.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果修改成这样的话背景图片就不会滚动。</p><p>如果不想让博客内容挡住背景，可以设置博客内容的透明度，在 <code>\themes\next\source\css\_custom\custom.styl</code> 中加入下面的代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.main-inner &#123;</span><br><span class="line">    opacity: 0.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博文自定义排序"><a href="#博文自定义排序" class="headerlink" title="博文自定义排序"></a><a href="https://blog.csdn.net/qq_32454537/article/details/79482920" target="_blank" rel="noopener">博文自定义排序</a></h3><p>打开 <code>\node_modules\hexo-generator-index\lib\generator.js</code> 。</p><p>在末尾添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">    if(a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        if(a.top == b.top) return b.date - a.date;</span><br><span class="line">        else return b.top - a.top;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else return b.date - a.date;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在博文设置中加入 <code>top: x</code> 即可，会以 top 为第一关键字，时间为第二关键字排序。若 top 为空则视作 -INF 。</p><img src="/hexo博客搭建指北/top.jpg"><h3 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a><a href="https://www.cnblogs.com/woshimrf/p/hexo-fold-block.html" target="_blank" rel="noopener">折叠块</a></h3><div><div class="fold_hider"><div class="close hider_title">怎么搞？</div></div><div class="fold"><p>标题链接的这篇博文写的够清楚了..</p></div></div><h3 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h3><p>如果想在 <code>https://github.com/yourname/yourname.github.io</code> 让别人看到你的博客的简介，就需要写一个 <code>README.md</code> 放在根目录下的 <code>source</code> 文件夹内。</p><p>然而，只是这样的话， <code>README.md</code> 会被渲染成 html，所以需要更改根目录下 <code>_config.yml</code> 的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><h3 id="自定义404页面"><a href="#自定义404页面" class="headerlink" title="自定义404页面"></a>自定义404页面</h3><p>首先写一个 <code>\source\404.html</code> 。</p><p>至于怎么写html..<del>这里地方太小写不下</del></p><p>事实上可以新建一篇博客，用 Markdown 写一个 404 页面，然后 <code>hexo g</code> 在 <code>\public</code> 里找到博客的页面，把相关部分直接复制过来。</p><p>可以参考一下我的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>您可能访问了错误的网址<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://i.loli.net/2018/10/27/5bd4705dd844f.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.ouuan.cf"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>回到博客主页<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-1);"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，如果直接这样发布，html 会被渲染，就跟一个自定义页面（<code>hexo new page</code>）一样了。</p><p>所以要修改根目录下的 <code>_config.yml</code>，在 <code>skip_render:</code> 后添加 <code>404.html</code>，如果有多项用 <code>-</code> 隔开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - README.md</span><br><span class="line"> - 404.html</span><br></pre></td></tr></table></figure><p>发布完成后，访问一个错误的网址，比如 <code>你的域名/qaq</code> 就可以查看效果了。</p><h3 id="一言（ヒトコト）"><a href="#一言（ヒトコト）" class="headerlink" title="一言（ヒトコト）"></a>一言（ヒトコト）</h3><p>大约是<a href="https://hitokoto.cn/" target="_blank" rel="noopener">这个</a>。</p><p>网上没找到教程，自己随便瞎研究了一波，所以方法比较丑陋，仅供参考..</p><p>本来想稍微写一下自己研究的经过，想了想自己也没完全搞清楚，就来一波授人以鱼吧…</p><p><code>\themes\next\layout\_macro\sidebar.swig</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">id</span>=<span class="string">"sidebar"</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-inner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: table-cell;vertical-align: top; color:#B2B7F2;font-size:24px;font-family:'Times New Roman',serif;font-weight:bold;text-align:left;"</span>&gt;</span>“<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: table-cell;text-align: left; vertical-align: middle; text-indent: 2em; padding: 0.8em 0.2em 1em 0.2em"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:burlywood;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"hitokoto-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: table-cell; vertical-align: bottom; color:#B2B7F2;font-size:24px;font-family:'Times New Roman',serif;font-weight:bold;text-align:left;"</span>&gt;</span>”<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: right; font-size: 0.8em; color: black;"</span> <span class="attr">id</span>=<span class="string">"hitokoto-from"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 15px; font-size: 0.8em; color: black;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://hitokoto.cn/"</span>&gt;</span>Hitokoto<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 15px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if theme.sidebar.onmobile %&#125;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><code>\themes\next\layout\_scripts\commons.swig</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">$.get('https://v1.hitokoto.cn/?c=a', function (data) &#123;</span></span><br><span class="line"><span class="undefined">$('#hitokoto-content').css('display', '').text(data.hitokoto);</span></span><br><span class="line"><span class="undefined">$('#hitokoto-from').css('display', '').text('——' + data.from);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>\themes\next\source\css\_custom\custom.styl</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大约就这样，省略号表示文件中本来就有的其它部分。不保证在其他人电脑上可以用。大致思路就是搞个空 div 指定一个 id，用 js 往里面塞东西。所以即使我这个“鱼”不能直接用大约也是可以稍微研究研究来用的。</p><h1 id="博客的写作"><a href="#博客的写作" class="headerlink" title="博客的写作"></a>博客的写作</h1><h2 id="Markdown-的使用"><a href="#Markdown-的使用" class="headerlink" title="Markdown 的使用"></a>Markdown 的使用</h2><p>网上有很多 Markdown 的学习资源，<del>我自己是在<a href="https://www.luogu.org/paste" target="_blank" rel="noopener">洛谷剪贴板</a>学会的</del>。</p><p>我以前一般都用洛谷剪贴板编辑 Markdown，但 hexo 博客需要在本地编辑 <code>.md</code> 文件，这时普通的文本编辑器就不太方便了。我推荐 <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> 这款软件，还是挺方便的。</p><h2 id="撰写博客前的准备"><a href="#撰写博客前的准备" class="headerlink" title="撰写博客前的准备"></a>撰写博客前的准备</h2><p>打开根目录下的 <code>_config.yml</code> ，将 <code>post_asset_folder</code>  设为 <code>true</code>。</p><p>这样就可以把图片放到博客里而不用其它图床了。</p><p>然后把 <code>\source\_posts\hello-world.md</code> 删除。</p><h2 id="Hexo-博客的撰写"><a href="#Hexo-博客的撰写" class="headerlink" title="Hexo 博客的撰写"></a>Hexo 博客的撰写</h2><p>新建一篇博客：<code>hexo new &quot;博客名&quot;</code>。</p><p>然后等几秒钟，在 <code>\source\_posts</code> 文件夹下，就会生成 <code>博客名</code> 这个文件夹（如果你把 <code>post_asset_folder</code>  设为 <code>true</code> 了）以及 <code>博客名.md</code>。</p><p>撰写博客就是编辑 <code>博客名.md</code>。</p><p>这个文件的开头是博客的一些设置，可以在 <code>scaffolds\posts.md</code> 中修改默认设置，我的默认设置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">top: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后就可以写 Markdown 格式的文章了。（<code>top</code> 是自定义文章排序，上文中介绍过）</p><img src="/hexo博客搭建指北/post.jpg"><p>需要注意的是，在洛谷代码块可以不加”cpp”，但在 hexo 上，一定要加上”cpp”：</p><img src="/hexo博客搭建指北/cpp.jpg"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;hello world!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用本地图片"><a href="#引用本地图片" class="headerlink" title="引用本地图片"></a>引用本地图片</h2><p>引用链接/网络上的图片格式与普通 Markdown 相同（<code>[链接名称](链接地址)</code> 和 <code>![图片描述](图片地址)</code>），引用本地图片需要把 <code>post_asset_folder</code>  设为 <code>true</code> ，然后把图片放在与博客同名的文件夹中，然后只用 <code>![图片描述](图片文件名)</code> 就可以引用了。</p><img src="/hexo博客搭建指北/pic1.jpg"><img src="/hexo博客搭建指北/pic2.jpg"><p>在编辑器里显示不出图片是正常的。</p><p>还有另一种方式引用图片，<img src="/hexo博客搭建指北/refpic.jpg" title="这是一张用这种方式引用的图片"></p><p>用这种方式引用图片的话，把鼠标放在上面会显示图片描述（上面这张图就是用这种方式引用的）。</p><p>只有这种方式引用图片才能在博客首页正常显示图片，否则只能点进博客才能看到图片。</p><h2 id="LaTeX-的使用"><a href="#LaTeX-的使用" class="headerlink" title="$\LaTeX$ 的使用"></a>$\LaTeX$ 的使用</h2><h3 id="LaTeX-概述"><a href="#LaTeX-概述" class="headerlink" title="$\LaTeX$ 概述"></a>$\LaTeX$ 概述</h3><p>$\LaTeX$ 主要用于编辑数学公式，十分方便，网上也有很多学习资源，比如：<a href="https://www.luogu.org/blog/IowaBattleship/latex-gong-shi-tai-quan" target="_blank" rel="noopener">LaTeX数学公式大全</a>。</p><p>在支持 $\LaTeX$ 的 Markdown 文档里，使用两个美元符号将 $\LaTeX$ 公式括起来，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~QAQ$f_i=\sum\limits_&#123;j=1&#125;^ia_j$f_i=\sum\limits_&#123;j=1&#125;^ia_j~~</span><br></pre></td></tr></table></figure><p><del>QAQ$f_i=\sum\limits_{j=1}^ia_j$f_i=\sum\limits_{j=1}^ia_j</del></p><p>也可以用一对双美元符号使公式居中显示在单行，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$f_i=1$</span><br><span class="line"></span><br><span class="line">$$f_i=1$$</span><br></pre></td></tr></table></figure><p>$f_i=1$</p><p>$$f_i=1$$</p><p>在 Typora 中使用 $\LaTeX$  需要将设置中的”Markdown 扩展语法”全部勾选。</p><blockquote><p>P.S. $\LaTeX$：<code>\LaTeX</code></p></blockquote><h3 id="启用-LaTeX"><a href="#启用-LaTeX" class="headerlink" title="启用 $\LaTeX$"></a>启用 $\LaTeX$</h3><p>在 <code>\themes\next\_config.yml</code>  中将 <code>mathjax</code> 设为 <code>true</code>，然后将 <code>per_page</code> 设为 <code>false</code> 或者在需要启用 <code>\LaTeX</code> 的博文开头加上 <code>mathjax: true</code> 。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>由于<strong>hexo博客中即使是$$内的字符也会被当成 Markdown 渲染</strong>，类似于 <code>$f_{f_i}$</code>、<code>$a*b*c$</code>、<code>$[x,y](1&lt;x&lt;y&lt;2)$</code> 之类的，都会被错误地渲染。</p><p>解决这个问题，首先要打开 <code>\node_modules\marked\lib\marked.js</code>，搜索 <code>nolink</code>，应该在 $470$ 行左右。</p><p>然后，将这一块修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var inline = &#123;</span><br><span class="line">  escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</span><br><span class="line">  autolink: /^&lt;(scheme:[^\s\x00-\x1f&lt;&gt;]*|email)&gt;/,</span><br><span class="line">  url: noop,</span><br><span class="line">  tag: /^&lt;!--[\s\S]*?--&gt;|^&lt;\/?[a-zA-Z0-9\-]+(?:&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|\s[^&lt;&apos;&quot;&gt;\/\s]*)*?\/?&gt;/,</span><br><span class="line">  link: /^!?\[(inside)\]\(href\)/,</span><br><span class="line">  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,</span><br><span class="line">  nolink: /^!?\[((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\]/,</span><br><span class="line">  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  code: /^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,</span><br><span class="line">  br: /^ &#123;2,&#125;\n(?!\s*$)/,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: /^[\s\S]+?(?=[\\&lt;!\[`*]|\b_| &#123;2,&#125;\n|$)/</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样做取消了 <code>_text_</code> 的斜体意义，但 <code>*text*</code> 仍会被转义为斜体。</p><p>解决办法有两种：</p><ol><li>放弃使用 <code>*</code> ，全部用 <code>\times</code> 代替或者省略掉。</li><li>取消 <code>*</code> 的转义。</li></ol><p>推荐使用第一种方法，否则你的博客中就无法使用斜体了。</p><hr><p>如果想要使用 <code>*</code> 而放弃斜体：</p><p>在 <code>\node_modules\marked\lib\marked.js</code> 中搜索 <code>Renderer.prototype.em</code> ，应该在 $884$ 行左右。</p><p>将这一段改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Renderer.prototype.em = function(text) &#123;</span><br><span class="line">  return &apos;*&apos; + text + &apos;*&apos;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>前文提到了，<strong>hexo博客中即使是$$内的字符也会被当成 Markdown 渲染</strong>，所以类似于 <code>$[x,y](1&lt;x&lt;y&lt;2)$</code> 的，要在 <code>]</code> 和 <code>(</code> 中间加一个空格，就不会被错误地转义了。</p><h2 id="博客的发布"><a href="#博客的发布" class="headerlink" title="博客的发布"></a>博客的发布</h2><p>其实前文提到过，依次输入以下三条命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>发布之前还可以执行 <code>hexo s</code> 并在本地使用浏览器打开 <code>localhost:4000</code> 进行预览。</p><p>当然也可以使用 <code>hexo g -d</code> 命令。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了 $3$ 天终于把博客搭建好了…本文会简单介绍一下hexo博客的搭建，并选取一些我自己在配置博客的过程中遇到的问题，说明一下我的解决方案。&lt;/p&gt;
&lt;p&gt;实际上，hexo博客的搭建并不难，难搞的是美化，我在这个过程中遇到了很多问题，不可能在这篇博客中全部陈述出来，最重要的还是勤于百度。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ouuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo博客" scheme="https://ouuan.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>WC2019 全国模拟赛第一场 T1 题解</title>
    <link href="https://ouuan.github.io/WC2019-%E5%85%A8%E5%9B%BD%E6%A8%A1%E6%8B%9F%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA-T1-%E9%A2%98%E8%A7%A3/"/>
    <id>https://ouuan.github.io/WC2019-全国模拟赛第一场-T1-题解/</id>
    <published>2018-12-04T12:29:47.000Z</published>
    <updated>2019-02-14T05:53:04.376Z</updated>
    
    <content type="html"><![CDATA[<p>由于只会T1，没法写游记，只好来写题解了…</p><p><a href="http://noi.ac/problem/26" target="_blank" rel="noopener">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个数列，每次可以任取两个不相交的区间，取一次的贡献是这两个区间里所有数的最小值，求所有取法的贡献和，对 $10^9+7$ 取模。</p><p>数列长度 $2\times 10^5$ ，值域 $1$ ~ $10^9$ 。</p><a id="more"></a><h2 id="O-n-4-做法"><a href="#O-n-4-做法" class="headerlink" title="$O(n^4)$ 做法"></a>$O(n^4)$ 做法</h2><p>预处理区间最小值，枚举选的两个区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">60</span>][<span class="number">60</span>],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,l;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j]=min(a[i][j<span class="number">-1</span>],a[j][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i;j&lt;n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (k=j+<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (l=k;l&lt;=n;++l)</span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+min(a[i][j],a[k][l]))%M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-nlogn-做法"><a href="#O-nlogn-做法" class="headerlink" title="$O(nlogn)$ 做法"></a>$O(nlogn)$ 做法</h2><blockquote><p>warning：接下来的文章里“的”字嵌套情况非常严重，文字叙述比较繁杂，看不懂十分正常，建议看懂一小部分然后自己推。</p></blockquote><p>考虑每个元素作为贡献的区间是哪些，为了把每个区间分给唯一的元素，规定一个区间的贡献是最小值里最靠左的（ e.g. <code>4 3 2 4 2 2</code> 的贡献是 $3$ 号元素，即最左边的 $2$ ）。所以，可以利用栈在 $O(n)$ 的时间内预处理出每个元素作为贡献的区间的左端点和右端点的范围：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;=a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个元素作为贡献的区间就是 $[x,y] (l_i\le x\le i\le y\le r_i)$，每个元素作为贡献的区间数就是 $t_i=(i-l_i+1)\times(r_i-i+1)$ 。</p><p>然后，将元素按值从大到小排序，就能计算出区间数的后缀和 $suf[i]$，但一个元素的总贡献并不是 $t_i\times suf[i+1]$，因为这些区间可能与当前元素作为贡献的区间相交。</p><p>注意到，要想和当前元素作为贡献的区间相交，必须 $[x,y] (l_i\le x\le y\le r_i)$ ，而这样的区间除了当前元素作为贡献的区间，贡献都排在当前元素之后（值比当前元素大或值相等但位置靠后），所以这样的区间除了当前元素作为贡献的区间，都是我们要找的与当前元素作为贡献的区间相交的贡献更靠后的区间。</p><blockquote><p>注：下面这段话中“相交的区间对”指（与当前元素作为贡献的区间相交的贡献更靠后的区间，当前元素作为贡献的区间）这样的一对区间；“相交的区间”指与当前元素作为贡献的区间相交的贡献更靠后的区间。</p></blockquote><p>接下来就要计算相交的区间有多少对。首先，相交的区间不可能跨过当前元素，否则就是当前元素作为贡献的区间；所以，相交的区间要么是 $[x,y] (l_i\le x\le y&lt;i)$ ，要么是 $[x,y] (i&lt;x\le y\le r_i)$。先计算 $[x,y] (l_i\le x\le y&lt;i)$ 与当前元素作为贡献的区间相交的对数，先考虑 $y$ 固定时，个数为 $(r_i-i+1)\times(y-l_i+1)^2$ ，其中：$y-l_i+1$ 既是相交的区间左端点的个数，也是与相交的区间相交的当前元素作为贡献的区间的左端点的个数；$r_i-i+1$ 是与相交的区间相交的当前元素作为贡献的区间的右端点的个数。所以，总数是 $(r_i-i+1)\times\sum\limits_{y=l_i}^{i-1}(y-l_i+1)^2$ ，乘号右边是自然数平方和，可以用公式计算，所以就是 $(r_i-i+1)\times\frac{(i-l_i)\times(i-l_i+1)\times(2i-2l_i+1)}6$ 。$[x,y] (i&lt;x\le y\le r_i)$ 同理，总数为 $(i-l_i+1)\times\frac{(r_i-i)\times(r_i-i+1)\times(2r_i-2i+1)}6$ 。</p><p>所以，把相交的总对数减掉就可以了。</p><p>参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c=getchar()));</span><br><span class="line"><span class="keyword">for</span> (;<span class="built_in">isdigit</span>(c);c=getchar())</span><br><span class="line">&#123;</span><br><span class="line">out=out*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIX=<span class="number">166666668</span>; <span class="comment">//6模1e9+7的逆元</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> id,w,l,r,t;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; b) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,suf[N],sta[N],top,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">n=read();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i].w=read();</span><br><span class="line">a[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].r=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (top&amp;&amp;a[sta[top]].w&gt;=a[i].w)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top)</span><br><span class="line">&#123;</span><br><span class="line">a[sta[top--]].l=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i].t=(i-a[i].l+<span class="number">1</span>)*(a[i].r-i+<span class="number">1</span>)%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line">suf[i]=(suf[i+<span class="number">1</span>]+a[i].t)%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans=(ans+(a[i].w*suf[i+<span class="number">1</span>]%M)*a[i].t)%M;</span><br><span class="line">ans=(ans-(a[i].id-a[i].l)*(a[i].id-a[i].l+<span class="number">1</span>)%M*(<span class="number">2</span>*a[i].id<span class="number">-2</span>*a[i].l+<span class="number">1</span>)%M*SIX%M*(a[i].r-a[i].id+<span class="number">1</span>)%M*a[i].w%M+M)%M; <span class="comment">//重复区间在左</span></span><br><span class="line">ans=(ans-(a[i].r-a[i].id)*(a[i].r-a[i].id+<span class="number">1</span>)%M*(<span class="number">2</span>*a[i].r<span class="number">-2</span>*a[i].id+<span class="number">1</span>)%M*SIX%M*(a[i].id-a[i].l+<span class="number">1</span>)%M*a[i].w%M+M)%M; <span class="comment">//重复区间在右</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于只会T1，没法写游记，只好来写题解了…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://noi.ac/problem/26&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给你一个数列，每次可以任取两个不相交的区间，取一次的贡献是这两个区间里所有数的最小值，求所有取法的贡献和，对 $10^9+7$ 取模。&lt;/p&gt;
&lt;p&gt;数列长度 $2\times 10^5$ ，值域 $1$ ~ $10^9$ 。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://ouuan.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="noi.ac" scheme="https://ouuan.github.io/tags/noi-ac/"/>
    
  </entry>
  
</feed>
